{"version":3,"file":"customizable.test.js","sourceRoot":"../src/","sources":["customizations/customizable.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*  eslint-disable @typescript-eslint/no-deprecated */\nimport * as React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { render } from '@testing-library/react';\nimport * as renderer from 'react-test-renderer';\nimport { customizable } from './customizable';\nimport { Customizations } from './Customizations';\nimport { Customizer } from './Customizer';\nimport type { IStyle, IStyleFunction, ShadowConfig } from '@fluentui/merge-styles';\n\n@customizable('Foo', ['field'])\nclass Foo extends React.Component<{ field?: string }, {}> {\n  public render(): JSX.Element {\n    return <div>{this.props.field}</div>;\n  }\n}\n\ninterface IComponentStyles {\n  root: IStyle;\n  __shadowConfig__?: ShadowConfig;\n}\n\ninterface IComponentProps {\n  styles: IComponentStyles;\n}\n\ninterface IComponentStyleFunctionProps {\n  styles: IStyleFunction<IComponentProps, IComponentStyles>;\n}\n\n@customizable('ConcatStyles', ['styles'], true)\nclass ConcatStyles extends React.Component<IComponentProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <div\n        data-testid=\"concat-styles\"\n        // @ts-expect-error - for testing purposes\n        style={this.props.styles}\n        data-style={JSON.stringify(this.props.styles.root)}\n      />\n    );\n  }\n}\n\n@customizable('OverrideStyles', ['styles'])\nclass OverrideStyles extends React.Component<IComponentProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <div\n        data-testid=\"override-styles\"\n        // @ts-expect-error - for testing purposes\n        style={this.props.styles}\n        data-style={JSON.stringify(this.props.styles.root)}\n      />\n    );\n  }\n}\n\n@customizable('StyleFunction', ['styles'])\nclass StyleFunction extends React.Component<IComponentStyleFunctionProps> {\n  public render(): JSX.Element {\n    return <div data-testid=\"style-function\" />;\n  }\n}\n\ndescribe('customizable', () => {\n  beforeEach(() => {\n    Customizations.reset();\n  });\n\n  it('can receive global customizations', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    expect(renderToStaticMarkup(<Foo />)).toEqual('<div>globalName</div>');\n  });\n\n  it('can receive scoped customizations', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    Customizations.applyScopedSettings('Foo', { field: 'scopedName' });\n    expect(renderToStaticMarkup(<Foo />)).toEqual('<div>scopedName</div>');\n  });\n\n  it('can ignore scoped customizations that do not apply', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    Customizations.applyScopedSettings('Bar', { field: 'scopedName' });\n    expect(renderToStaticMarkup(<Foo />)).toEqual('<div>globalName</div>');\n  });\n\n  it('can accept props over global/scoped values', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    Customizations.applyScopedSettings('Foo', { field: 'scopedName' });\n    expect(renderToStaticMarkup(<Foo field=\"name\" />)).toEqual('<div>name</div>');\n  });\n\n  it('can concatenate global styles and component styles', () => {\n    const globalStyles = { color: 'red', background: 'red' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applySettings({ styles: { root: globalStyles } });\n\n    const rtl = render(\n      <Customizer>\n        <ConcatStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n\n    const concatStyleRoot = rtl.getByTestId('concat-styles');\n    const rootStyles = JSON.parse(concatStyleRoot.getAttribute('data-style')!);\n\n    expect(Object.keys(concatStyleRoot.style)).toEqual(expect.arrayContaining(['root', '__shadowConfig__']));\n    expect(rootStyles).toEqual([globalStyles, componentStyles]);\n  });\n\n  it('can concatenate global styles and component styles', () => {\n    const globalStyles: IStyleFunction<IComponentProps, IComponentStyles> = _props => {\n      return { root: { color: 'red', background: 'green' } };\n    };\n    const componentStyles = { root: { color: 'blue' } };\n\n    Customizations.applySettings({ styles: globalStyles });\n    const rtl = render(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n\n    const concatStyleRoot = rtl.getByTestId('concat-styles');\n    const rootStyles = JSON.parse(concatStyleRoot.getAttribute('data-style')!);\n\n    expect(Object.keys(concatStyleRoot.style)).toEqual(expect.arrayContaining(['root', '__shadowConfig__']));\n    expect(rootStyles).toEqual([globalStyles({} as IComponentProps).root, componentStyles.root]);\n  });\n\n  it('will apply component style function when no global styles are present', () => {\n    const componentStyles: IStyleFunction<IComponentProps, IComponentStyles> = _props => {\n      return { root: { color: 'red', background: 'green' } };\n    };\n\n    const wrapper = renderer.create(\n      <Customizer>\n        <StyleFunction styles={componentStyles} />\n      </Customizer>,\n    );\n    const component = wrapper.root.findByType(StyleFunction);\n    const props = component.props as IComponentProps;\n    expect(typeof props.styles).toBe('function');\n    expect(props.styles.__shadowConfig__).toBeTruthy();\n  });\n\n  it('can concatenate scoped styles and component styles', () => {\n    const scopedStyles = { color: 'green', background: 'green' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applyScopedSettings('ConcatStyles', { styles: { root: scopedStyles } });\n\n    const rtl = render(\n      <Customizer>\n        <ConcatStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n\n    const concatStyleRoot = rtl.getByTestId('concat-styles');\n    const rootStyles = JSON.parse(concatStyleRoot.getAttribute('data-style')!);\n\n    expect(Object.keys(concatStyleRoot.style)).toEqual(expect.arrayContaining(['root', '__shadowConfig__']));\n    expect(rootStyles).toEqual([scopedStyles, componentStyles]);\n  });\n\n  it('can override global styles with component styles', () => {\n    const globalStyles = { color: 'red', background: 'red' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applySettings({ styles: { root: globalStyles } });\n    const rtl = render(\n      <Customizer>\n        <OverrideStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const overrideStyleRoot = rtl.getByTestId('override-styles');\n    const rootStyles = JSON.parse(overrideStyleRoot.getAttribute('data-style')!);\n\n    expect(Object.keys(overrideStyleRoot.style)).toEqual(expect.arrayContaining(['root', '__shadowConfig__']));\n    expect(rootStyles).toEqual(componentStyles);\n  });\n\n  it('can override scoped styles with component styles', () => {\n    const scopedStyles = { color: 'green', background: 'green' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applyScopedSettings('OverrideStyles', { styles: { root: scopedStyles } });\n    const rtl = render(\n      <Customizer>\n        <OverrideStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const overrideStyleRoot = rtl.getByTestId('override-styles');\n    const rootStyles = JSON.parse(overrideStyleRoot.getAttribute('data-style')!);\n\n    expect(Object.keys(overrideStyleRoot.style)).toEqual(expect.arrayContaining(['root', '__shadowConfig__']));\n    expect(rootStyles).toEqual(componentStyles);\n  });\n\n  it('should not mutate styles if no change to component and global styles', () => {\n    const globalRootStyles = { color: 'red', background: 'red' };\n    const componentRootStyles = { color: 'blue' };\n    const componentStyles = { root: componentRootStyles };\n\n    Customizations.applySettings({ styles: { root: globalRootStyles } });\n\n    const rtl = render(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n\n    let overrideStyleRoot = rtl.getByTestId('concat-styles');\n    let rootStyles = JSON.parse(overrideStyleRoot.getAttribute('data-style')!);\n\n    expect(Object.keys(overrideStyleRoot.style)).toEqual(expect.arrayContaining(['root', '__shadowConfig__']));\n    expect(rootStyles).toEqual([globalRootStyles, componentRootStyles]);\n\n    rtl.rerender(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n\n    const updatedOverrideStyleRoot = rtl.getByTestId('concat-styles');\n    const updatedRootStyles = JSON.parse(updatedOverrideStyleRoot.getAttribute('data-style')!);\n\n    expect(updatedRootStyles).toStrictEqual(rootStyles);\n    expect(updatedRootStyles).toEqual(rootStyles);\n  });\n\n  it('should not mutate styles if no change to component styles without global styles', () => {\n    const componentStyles = { root: { color: 'blue' } };\n\n    const rtl = render(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n\n    let concatStyleRoot = rtl.getByTestId('concat-styles');\n    let rootStyles = JSON.parse(concatStyleRoot.getAttribute('data-style')!);\n\n    expect(Object.keys(concatStyleRoot.style)).toEqual(expect.arrayContaining(['root', '__shadowConfig__']));\n    expect(rootStyles).toEqual(componentStyles.root);\n\n    rtl.rerender(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n\n    const updatedConcatStyleRoot = rtl.getByTestId('concat-styles');\n    let updatedRootStyles = JSON.parse(updatedConcatStyleRoot.getAttribute('data-style')!);\n\n    expect(updatedRootStyles).toStrictEqual(rootStyles);\n    expect(updatedRootStyles).toEqual(rootStyles);\n  });\n\n  it('should update styles if component styles changed', () => {\n    const globalRootStyles = { color: 'red', background: 'red' };\n    const componentRootStyles = { color: 'blue' };\n    const componentStyles = { root: componentRootStyles };\n\n    Customizations.applySettings({ styles: { root: globalRootStyles } });\n\n    const rtl = render(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n    let concatStyleRoot = rtl.getByTestId('concat-styles');\n    let rootStyles = JSON.parse(concatStyleRoot.getAttribute('data-style')!);\n\n    expect(Object.keys(concatStyleRoot.style)).toEqual(expect.arrayContaining(['root', '__shadowConfig__']));\n    expect(rootStyles).toEqual([globalRootStyles, componentRootStyles]);\n\n    const newComponentRootStyles = { color: 'red' };\n    const newComponentStyles = { root: newComponentRootStyles };\n\n    rtl.rerender(\n      <Customizer>\n        <ConcatStyles styles={newComponentStyles} />\n      </Customizer>,\n    );\n\n    const updatedConcatStyleRoot = rtl.getByTestId('concat-styles');\n    let updatedRootStyles = JSON.parse(updatedConcatStyleRoot.getAttribute('data-style')!);\n\n    expect(Object.keys(updatedConcatStyleRoot.style)).toEqual(expect.arrayContaining(['root', '__shadowConfig__']));\n    expect(updatedRootStyles).toEqual([globalRootStyles, newComponentRootStyles]);\n  });\n});\n"]}