{"version":3,"file":"useCustomizationSettings.test.js","sourceRoot":"../src/","sources":["customizations/useCustomizationSettings.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as renderer from 'react-test-renderer';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { useCustomizationSettings } from './useCustomizationSettings';\nimport type { ISettings } from './Customizations';\n\nconst { act } = renderer;\n\ndescribe('useCustomizatioSettings', () => {\n  let component: renderer.ReactTestRenderer | undefined;\n\n  afterEach(() => {\n    act(() => {\n      component?.unmount();\n      component = undefined;\n    });\n    Customizations.reset();\n  });\n\n  it('get settings from Customizations', () => {\n    Customizations.applySettings({ a: 'a' });\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['a']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    act(() => {\n      component = renderer.create(<TestComponent />);\n    });\n    expect(settingsStates.length).toBe(1);\n    expect(settingsStates[0]).toEqual({ a: 'a' });\n  });\n\n  it('get settings from Customizations when settings have changed', () => {\n    Customizations.applySettings({ a: 'a' });\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['a']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    act(() => {\n      component = renderer.create(<TestComponent />);\n    });\n\n    act(() => {\n      Customizations.applySettings({ a: 'aa' });\n    });\n\n    expect(settingsStates.length).toBe(2);\n    expect(settingsStates[0]).toEqual({ a: 'a' });\n    expect(settingsStates[1]).toEqual({ a: 'aa' });\n  });\n\n  it('get settings from Customizations that are not applied', () => {\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['a']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    act(() => {\n      component = renderer.create(<TestComponent />);\n    });\n    expect(settingsStates.length).toBe(1);\n    expect(settingsStates[0]).toEqual({ a: undefined });\n  });\n\n  it('get settings from CustomizerContext', () => {\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['theme']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    const newContext = { customizations: { settings: { theme: { color: 'red' } }, scopedSettings: {} } };\n    act(() => {\n      component = renderer.create(\n        <CustomizerContext.Provider value={newContext}>\n          <TestComponent />\n        </CustomizerContext.Provider>,\n      );\n    });\n    expect(settingsStates.length).toBe(1);\n    expect(settingsStates[0]).toEqual({ theme: { color: 'red' } });\n\n    const updatedContext = { customizations: { settings: { theme: { color: 'green' } }, scopedSettings: {} } };\n    act(() => {\n      component!.update(\n        <CustomizerContext.Provider value={updatedContext}>\n          <TestComponent />\n        </CustomizerContext.Provider>,\n      );\n    });\n\n    expect(settingsStates.length).toBe(2);\n    expect(settingsStates[1]).toEqual({ theme: { color: 'green' } });\n  });\n\n  it('does not re-render if global settings update but within context', () => {\n    Customizations.applySettings({ a: 'a' });\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['a']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    const newContext = { customizations: { settings: { a: 'aa' }, scopedSettings: {}, inCustomizerContext: true } };\n    act(() => {\n      component = renderer.create(\n        <CustomizerContext.Provider value={newContext}>\n          <TestComponent />\n        </CustomizerContext.Provider>,\n      );\n    });\n\n    act(() => {\n      Customizations.applySettings({ a: 'aaa' });\n    });\n\n    expect(settingsStates.length).toBe(1);\n    expect(settingsStates[0]).toEqual({ a: 'aa' });\n  });\n});\n"]}