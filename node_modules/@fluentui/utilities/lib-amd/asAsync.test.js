define(["require", "exports", "react", "./asAsync", "react-test-renderer"], function (require, exports, React, asAsync_1, renderer) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var getChildren = function (testRenderer) { var _a; return (_a = testRenderer.toJSON()) === null || _a === void 0 ? void 0 : _a.children; };
    describe('asAsync', function () {
        it('can async load exports', function (done) {
            var _resolve = function () { return undefined; };
            var _loadCalled = false;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var loadThingPromise = new Promise(function (resolve) {
                _resolve = resolve;
            });
            var AsyncThing = (0, asAsync_1.asAsync)({
                load: function () {
                    _loadCalled = true;
                    return loadThingPromise;
                },
            });
            var component = renderer.create(React.createElement(AsyncThing, null));
            expect(_loadCalled).toBe(true);
            expect(getChildren(component)).toBeUndefined();
            expect(_resolve).toBeTruthy();
            _resolve(function () { return React.createElement("div", null, "thing"); });
            process.nextTick(function () {
                component.update(React.createElement(AsyncThing, null));
                expect(getChildren(component)[0]).toEqual('thing');
                _loadCalled = false;
                // Test cached case.
                renderer.create(React.createElement(AsyncThing, null));
                expect(_loadCalled).toBe(false);
                expect(getChildren(component)[0]).toEqual('thing');
                done();
            });
        });
        it('can async load with placeholder', function (done) {
            var _resolve = function () { return undefined; };
            var _loadCalled = false;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var loadThingPromise = new Promise(function (resolve) {
                _resolve = resolve;
            });
            var AsyncThing = (0, asAsync_1.asAsync)({
                load: function () {
                    _loadCalled = true;
                    return loadThingPromise;
                },
            });
            var component = renderer.create(React.createElement(AsyncThing, { asyncPlaceholder: function () { return React.createElement("div", null, "placeholder"); } }));
            expect(_loadCalled).toBe(true);
            expect(getChildren(component)[0]).toEqual('placeholder');
            expect(_resolve).toBeTruthy();
            _resolve(function () { return React.createElement("div", null, "thing"); });
            process.nextTick(function () {
                component.update(React.createElement(AsyncThing, { asyncPlaceholder: function () { return React.createElement("div", null, "placeholder"); } }));
                expect(getChildren(component)[0]).toEqual('thing');
                done();
            });
        });
    });
});
//# sourceMappingURL=asAsync.test.js.map