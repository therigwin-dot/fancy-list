{"version":3,"file":"Customizer.test.js","sourceRoot":"../src/","sources":["customizations/Customizer.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*  eslint-disable @typescript-eslint/no-deprecated */\nimport '@testing-library/jest-dom';\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { customizable } from './customizable';\nimport { Customizer } from './Customizer';\nimport { Customizations } from './Customizations';\n\n@customizable('Foo', ['field'])\nclass Foo extends React.Component<{ field?: string }, {}> {\n  public render(): JSX.Element {\n    return <div>{this.props.field}</div>;\n  }\n}\n\n@customizable('Bar', ['field', 'field2', 'field3'])\nclass Bar extends React.Component<{ field?: string; field2?: string; field3?: string }, {}> {\n  public render(): JSX.Element {\n    return (\n      <div>\n        {this.props.field}\n        {this.props.field2}\n        {this.props.field3}\n      </div>\n    );\n  }\n}\n\ndescribe('Customizer', () => {\n  beforeEach(() => {\n    Customizations.reset();\n  });\n\n  it('can provide new defaults', () => {\n    render(\n      <Customizer settings={{ field: 'customName' }}>\n        <Foo />\n      </Customizer>,\n    );\n    expect(screen.getByText('customName')).toBeInTheDocument();\n  });\n\n  it('can pass through global settings', () => {\n    Customizations.applySettings({ field: 'globalName' });\n\n    render(\n      <Customizer settings={{ nonMatch: 'customName' }}>\n        <Foo />\n      </Customizer>,\n    );\n    expect(screen.getByText('globalName')).toBeInTheDocument();\n  });\n\n  it('can override global settings', () => {\n    Customizations.applySettings({ field: 'globalName' });\n\n    render(\n      <Customizer settings={{ field: 'customName' }}>\n        <Foo />\n      </Customizer>,\n    );\n    expect(screen.getByText('customName')).toBeInTheDocument();\n  });\n\n  it('can scope settings to specific components', () => {\n    const scopedSettings = {\n      Foo: { field: 'scopedToFoo' },\n      Bar: { field: 'scopedToBar' },\n    };\n\n    render(\n      <Customizer scopedSettings={scopedSettings}>\n        <div>\n          <Foo />\n          <Bar />\n        </div>\n      </Customizer>,\n    );\n    expect(screen.getByText('scopedToFoo')).toBeInTheDocument();\n    expect(screen.getByText('scopedToBar')).toBeInTheDocument();\n  });\n\n  it('can layer global settings', () => {\n    render(\n      <Customizer settings={{ field: 'field' }}>\n        <Customizer settings={{ field2: 'field2' }}>\n          <Bar />\n        </Customizer>\n      </Customizer>,\n    );\n    expect(screen.getByText('fieldfield2')).toBeInTheDocument();\n  });\n\n  it('can layer scoped settings', () => {\n    Customizations.applySettings({ field3: 'field3' });\n\n    render(\n      <Customizer scopedSettings={{ Bar: { field: 'field', field2: 'oldfield2' } }}>\n        <Customizer scopedSettings={{ Bar: { field2: 'field2' } }}>\n          <Bar />\n        </Customizer>\n      </Customizer>,\n    );\n    expect(screen.getByText('fieldfield2field3')).toBeInTheDocument();\n  });\n\n  it('can layer scoped settings with scopedSettingsFunction', () => {\n    Customizations.applySettings({ field3: 'field3' });\n\n    render(\n      <Customizer scopedSettings={{ Bar: { field: 'field' } }}>\n        <Customizer\n          scopedSettings={(scopedSettings: { Bar: { field2: string } }) => ({\n            Bar: { ...scopedSettings.Bar, field2: 'field2' },\n          })}\n        >\n          <Bar />\n        </Customizer>\n      </Customizer>,\n    );\n    expect(screen.getByText('fieldfield2field3')).toBeInTheDocument();\n  });\n\n  it('it allows scopedSettings to be merged when a function is passed', () => {\n    render(\n      <Customizer scopedSettings={{ Foo: { field: 'scopedToFoo' } }}>\n        <Customizer\n          scopedSettings={(settings: { Foo: { field: string } }) => ({ ...settings, Bar: { field: 'scopedToBar' } })}\n        >\n          <div>\n            <Foo />\n            <Bar />\n          </div>\n        </Customizer>\n      </Customizer>,\n    );\n    expect(screen.getByText('scopedToFoo')).toBeInTheDocument();\n    expect(screen.getByText('scopedToBar')).toBeInTheDocument();\n  });\n\n  it('overrides previously set settings', () => {\n    render(\n      <Customizer settings={{ field: 'field1' }}>\n        <Customizer settings={{ field: 'field2' }}>\n          <Bar />\n        </Customizer>\n      </Customizer>,\n    );\n    expect(screen.getByText('field2')).toBeInTheDocument();\n  });\n\n  it('overrides the old settings when the parameter is ignored', () => {\n    render(\n      <Customizer settings={{ field: 'field1' }}>\n        <Customizer settings={(settings: { field: string }) => ({ field: 'field2' })}>\n          <Bar />\n        </Customizer>\n      </Customizer>,\n    );\n    expect(screen.getByText('field2')).toBeInTheDocument();\n  });\n\n  it('can use a function to merge settings', () => {\n    render(\n      <Customizer settings={{ field: 'field1' }}>\n        <Customizer settings={(settings: { field: string }) => ({ field: settings.field + 'field2' })}>\n          <Bar />\n        </Customizer>\n      </Customizer>,\n    );\n    expect(screen.getByText('field1field2')).toBeInTheDocument();\n  });\n\n  it('can suppress updates', () => {\n    Customizations.applySettings({ field: 'globalName' });\n\n    render(\n      <Customizer settings={{ nonMatch: 'customName' }}>\n        <Bar />\n      </Customizer>,\n    );\n    // verify base state\n    expect(screen.getByText('globalName')).toBeInTheDocument();\n\n    // verify it doesn't update during suppressUpdates(), and it works through errors, and it updates after\n    Customizations.applyBatchedUpdates(() => {\n      Customizations.applySettings({ field: 'notGlobalName' });\n      // it should not update inside\n      expect(screen.getByText('globalName')).toBeInTheDocument();\n      throw new Error();\n    });\n    // afterwards it should have updated\n    expect(screen.getByText('notGlobalName')).toBeInTheDocument();\n\n    // verify it doesn't update during suppressUpdates(), works through errors, and can suppress final update\n    Customizations.applyBatchedUpdates(() => {\n      Customizations.applySettings({ field: 'notUpdated' });\n      // it should not update inside\n      expect(screen.getByText('notGlobalName')).toBeInTheDocument();\n      throw new Error();\n    }, true);\n    // afterwards, it should still be on the old value\n    expect(screen.getByText('notGlobalName')).toBeInTheDocument();\n\n    // verify it updates after suppressUpdates()\n    Customizations.applySettings({ field2: 'lastGlobalName' });\n    expect(screen.getByText('notUpdatedlastGlobalName')).toBeInTheDocument();\n  });\n});\n"]}