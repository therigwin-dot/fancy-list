{"version":3,"file":"asAsync.test.js","sourceRoot":"../src/","sources":["asAsync.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { asAsync } from './asAsync';\nimport * as renderer from 'react-test-renderer';\nimport type { ReactTestRenderer, ReactTestRendererJSON } from 'react-test-renderer';\n\nconst getChildren = (testRenderer: ReactTestRenderer) => (testRenderer.toJSON() as ReactTestRendererJSON)?.children;\n\ndescribe('asAsync', () => {\n  it('can async load exports', (done: () => undefined) => {\n    let _resolve: (result: React.ElementType<{}>) => void = () => undefined;\n    let _loadCalled = false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const loadThingPromise = new Promise<any>((resolve: any) => {\n      _resolve = resolve;\n    });\n\n    const AsyncThing = asAsync({\n      load: () => {\n        _loadCalled = true;\n        return loadThingPromise;\n      },\n    });\n    const component = renderer.create(<AsyncThing />);\n\n    expect(_loadCalled).toBe(true);\n    expect(getChildren(component)).toBeUndefined();\n    expect(_resolve).toBeTruthy();\n\n    _resolve(() => <div>thing</div>);\n\n    process.nextTick(() => {\n      component.update(<AsyncThing />);\n\n      expect(getChildren(component)![0]).toEqual('thing');\n      _loadCalled = false;\n\n      // Test cached case.\n      renderer.create(<AsyncThing />);\n      expect(_loadCalled).toBe(false);\n      expect(getChildren(component)![0]).toEqual('thing');\n      done();\n    });\n  });\n\n  it('can async load with placeholder', (done: () => undefined) => {\n    let _resolve: (result: React.ElementType<{}>) => void = () => undefined;\n    let _loadCalled = false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const loadThingPromise = new Promise<any>((resolve: any) => {\n      _resolve = resolve;\n    });\n\n    const AsyncThing = asAsync({\n      load: () => {\n        _loadCalled = true;\n        return loadThingPromise;\n      },\n    });\n    const component = renderer.create(<AsyncThing asyncPlaceholder={() => <div>placeholder</div>} />);\n\n    expect(_loadCalled).toBe(true);\n    expect(getChildren(component)![0]).toEqual('placeholder');\n    expect(_resolve).toBeTruthy();\n\n    _resolve(() => <div>thing</div>);\n\n    process.nextTick(() => {\n      component.update(<AsyncThing asyncPlaceholder={() => <div>placeholder</div>} />);\n      expect(getChildren(component)![0]).toEqual('thing');\n      done();\n    });\n  });\n});\n"]}