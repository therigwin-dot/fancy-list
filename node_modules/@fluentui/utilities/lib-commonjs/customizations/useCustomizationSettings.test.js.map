{"version":3,"file":"useCustomizationSettings.test.js","sourceRoot":"../src/","sources":["customizations/useCustomizationSettings.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as renderer from 'react-test-renderer';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { useCustomizationSettings } from './useCustomizationSettings';\nimport type { ISettings } from './Customizations';\n\nconst { act } = renderer;\n\ndescribe('useCustomizatioSettings', () => {\n  let component: renderer.ReactTestRenderer | undefined;\n\n  afterEach(() => {\n    act(() => {\n      component?.unmount();\n      component = undefined;\n    });\n    Customizations.reset();\n  });\n\n  it('get settings from Customizations', () => {\n    Customizations.applySettings({ a: 'a' });\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['a']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    act(() => {\n      component = renderer.create(<TestComponent />);\n    });\n    expect(settingsStates.length).toBe(1);\n    expect(settingsStates[0]).toEqual({ a: 'a' });\n  });\n\n  it('get settings from Customizations when settings have changed', () => {\n    Customizations.applySettings({ a: 'a' });\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['a']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    act(() => {\n      component = renderer.create(<TestComponent />);\n    });\n\n    act(() => {\n      Customizations.applySettings({ a: 'aa' });\n    });\n\n    expect(settingsStates.length).toBe(2);\n    expect(settingsStates[0]).toEqual({ a: 'a' });\n    expect(settingsStates[1]).toEqual({ a: 'aa' });\n  });\n\n  it('get settings from Customizations that are not applied', () => {\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['a']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    act(() => {\n      component = renderer.create(<TestComponent />);\n    });\n    expect(settingsStates.length).toBe(1);\n    expect(settingsStates[0]).toEqual({ a: undefined });\n  });\n\n  it('get settings from CustomizerContext', () => {\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['theme']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    const newContext = { customizations: { settings: { theme: { color: 'red' } }, scopedSettings: {} } };\n    act(() => {\n      component = renderer.create(\n        <CustomizerContext.Provider value={newContext}>\n          <TestComponent />\n        </CustomizerContext.Provider>,\n      );\n    });\n    expect(settingsStates.length).toBe(1);\n    expect(settingsStates[0]).toEqual({ theme: { color: 'red' } });\n\n    const updatedContext = { customizations: { settings: { theme: { color: 'green' } }, scopedSettings: {} } };\n    act(() => {\n      component!.update(\n        <CustomizerContext.Provider value={updatedContext}>\n          <TestComponent />\n        </CustomizerContext.Provider>,\n      );\n    });\n\n    expect(settingsStates.length).toBe(2);\n    expect(settingsStates[1]).toEqual({ theme: { color: 'green' } });\n  });\n\n  it('does not re-render if global settings update but within context', () => {\n    Customizations.applySettings({ a: 'a' });\n    const settingsStates: ISettings[] = [];\n\n    const TestComponent: React.FunctionComponent = () => {\n      const settings = useCustomizationSettings(['a']);\n\n      settingsStates.push(settings);\n      return null;\n    };\n\n    const newContext = { customizations: { settings: { a: 'aa' }, scopedSettings: {}, inCustomizerContext: true } };\n    act(() => {\n      component = renderer.create(\n        <CustomizerContext.Provider value={newContext}>\n          <TestComponent />\n        </CustomizerContext.Provider>,\n      );\n    });\n\n    act(() => {\n      Customizations.applySettings({ a: 'aaa' });\n    });\n\n    expect(settingsStates.length).toBe(1);\n    expect(settingsStates[0]).toEqual({ a: 'aa' });\n  });\n});\n"]}