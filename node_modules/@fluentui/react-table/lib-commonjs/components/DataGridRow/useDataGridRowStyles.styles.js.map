{"version":3,"sources":["useDataGridRowStyles.styles.js"],"sourcesContent":["import { makeStyles, mergeClasses } from '@griffel/react';\nimport { createCustomFocusIndicatorStyle } from '@fluentui/react-tabster';\nimport { useTableRowStyles_unstable } from '../TableRow/useTableRowStyles.styles';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { tableSelectionCellClassNames } from '../TableSelectionCell/useTableSelectionCellStyles.styles';\nexport const dataGridRowClassNames = {\n    root: 'fui-DataGridRow',\n    selectionCell: 'fui-DataGridRow__selectionCell'\n};\nconst useStyles = makeStyles({\n    singleSelectHeader: {\n        ...createCustomFocusIndicatorStyle({\n            [`& .${tableSelectionCellClassNames.root}`]: {\n                opacity: 0\n            }\n        }, {\n            selector: 'focus-within'\n        }),\n        ':hover': {\n            [`& .${tableSelectionCellClassNames.root}`]: {\n                opacity: 0\n            }\n        }\n    },\n    subtleSelection: {\n        ...createCustomFocusIndicatorStyle({\n            [`& .${tableSelectionCellClassNames.root}`]: {\n                opacity: 1\n            }\n        }, {\n            selector: 'focus-within'\n        }),\n        ':hover': {\n            [`& .${tableSelectionCellClassNames.root}`]: {\n                opacity: 1\n            }\n        }\n    }\n});\n/**\n * Apply styling to the DataGridRow slots based on the state\n */ export const useDataGridRowStyles_unstable = (state)=>{\n    'use no memo';\n    const isHeader = useIsInTableHeader();\n    const isSingleSelect = useDataGridContext_unstable((ctx)=>ctx.selection.selectionMode === 'single');\n    const isSubtle = useDataGridContext_unstable((ctx)=>ctx.subtleSelection);\n    const styles = useStyles();\n    useTableRowStyles_unstable(state);\n    state.root.className = mergeClasses(dataGridRowClassNames.root, state.root.className, isSubtle && styles.subtleSelection, isHeader && isSingleSelect && styles.singleSelectHeader);\n    if (state.selectionCell) {\n        state.selectionCell.className = mergeClasses(dataGridRowClassNames.selectionCell, state.selectionCell.className);\n    }\n    return state;\n};\n"],"names":["dataGridRowClassNames","useDataGridRowStyles_unstable","root","selectionCell","useStyles","__styles","singleSelectHeader","Bconypa","ff6mpl","subtleSelection","d","h","state","isHeader","useIsInTableHeader","isSingleSelect","useDataGridContext_unstable","ctx","selection","selectionMode","isSubtle","styles","useTableRowStyles_unstable","className","mergeClasses"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAMaA,qBAAqB;eAArBA;;IAoCIC,6BAA6B;eAA7BA;;;uBA1CwB;yCAEE;oCACR;iCACS;AAErC,MAAMD,wBAAwB;IACjCE,MAAM;IACNC,eAAe;AACnB;AACA,MAAMC,YAAS,WAAA,GAAGC,IAAAA,eAAA,EAAA;IAAAC,oBAAA;QAAAC,SAAA;QAAAC,QAAA;IAAA;IAAAC,iBAAA;QAAAF,SAAA;QAAAC,QAAA;IAAA;AAAA,GAAA;IAAAE,GAAA;QAAA;QAAA;KAAA;IAAAC,GAAA;QAAA;QAAA;KAAA;AAAA;AAgCP,MAAMV,gCAAiCW,CAAAA;IAC9C;IACA,MAAMC,WAAWC,IAAAA,sCAAkB;IACnC,MAAMC,iBAAiBC,IAAAA,4CAA2B,EAAEC,CAAAA,MAAMA,IAAIC,SAAS,CAACC,aAAa,KAAK;IAC1F,MAAMC,WAAWJ,IAAAA,4CAA2B,EAAEC,CAAAA,MAAMA,IAAIR,eAAe;IACvE,MAAMY,SAASjB;IACfkB,IAAAA,mDAA0B,EAACV;IAC3BA,MAAMV,IAAI,CAACqB,SAAS,GAAGC,IAAAA,mBAAY,EAACxB,sBAAsBE,IAAI,EAAEU,MAAMV,IAAI,CAACqB,SAAS,EAAEH,YAAYC,OAAOZ,eAAe,EAAEI,YAAYE,kBAAkBM,OAAOf,kBAAkB;IACjL,IAAIM,MAAMT,aAAa,EAAE;QACrBS,MAAMT,aAAa,CAACoB,SAAS,GAAGC,IAAAA,mBAAY,EAACxB,sBAAsBG,aAAa,EAAES,MAAMT,aAAa,CAACoB,SAAS;IACnH;IACA,OAAOX;AACX"}