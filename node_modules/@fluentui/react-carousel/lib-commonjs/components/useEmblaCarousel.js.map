{"version":3,"sources":["../src/components/useEmblaCarousel.ts"],"sourcesContent":["import { type EventHandler, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport EmblaCarousel, { EmblaPluginType, type EmblaCarouselType, type EmblaOptionsType } from 'embla-carousel';\nimport * as React from 'react';\n\nimport { carouselCardClassNames } from './CarouselCard/useCarouselCardStyles.styles';\nimport { carouselSliderClassNames } from './CarouselSlider/useCarouselSliderStyles.styles';\nimport { CarouselMotion, CarouselUpdateData, CarouselVisibilityEventDetail } from '../Carousel';\nimport Autoplay from 'embla-carousel-autoplay';\nimport Fade from 'embla-carousel-fade';\nimport { pointerEventPlugin } from './pointerEvents';\nimport type { CarouselIndexChangeData } from './CarouselContext.types';\n\ntype EmblaEventHandler = Parameters<EmblaCarouselType['on']>[1];\n\nconst sliderClassname = `.${carouselSliderClassNames.root}`;\n\nconst DEFAULT_EMBLA_OPTIONS: EmblaOptionsType = {\n  containScroll: 'trimSnaps',\n  inViewThreshold: 0.99,\n  watchDrag: false,\n  skipSnaps: true,\n\n  container: sliderClassname,\n  slides: `.${carouselCardClassNames.root}`,\n};\n\nexport const EMBLA_VISIBILITY_EVENT = 'embla:visibilitychange';\n\nexport function setTabsterDefault(element: Element, isDefault: boolean) {\n  const tabsterAttr = element.getAttribute('data-tabster');\n\n  if (tabsterAttr) {\n    const tabsterAttributes = JSON.parse(tabsterAttr);\n    if (tabsterAttributes.focusable) {\n      // If tabster.focusable isn't present, we will ignore.\n      tabsterAttributes.focusable.isDefault = isDefault;\n      element.setAttribute('data-tabster', JSON.stringify(tabsterAttributes));\n    }\n  }\n}\n\nexport function useEmblaCarousel(\n  options: Pick<EmblaOptionsType, 'align' | 'direction' | 'loop' | 'slidesToScroll' | 'watchDrag' | 'containScroll'> & {\n    defaultActiveIndex: number | undefined;\n    activeIndex: number | undefined;\n    motion?: CarouselMotion;\n    onDragIndexChange?: EventHandler<CarouselIndexChangeData>;\n    onAutoplayIndexChange?: EventHandler<CarouselIndexChangeData>;\n    autoplayInterval?: number;\n  },\n) {\n  const {\n    align,\n    autoplayInterval,\n    direction,\n    loop,\n    slidesToScroll,\n    watchDrag,\n    containScroll,\n    motion,\n    onDragIndexChange,\n    onAutoplayIndexChange,\n  } = options;\n\n  const motionType = typeof motion === 'string' ? motion : motion?.kind ?? 'slide';\n  const motionDuration = typeof motion === 'string' ? 25 : motion?.duration ?? 25;\n\n  const [activeIndex, setActiveIndex] = useControllableState({\n    defaultState: options.defaultActiveIndex,\n    state: options.activeIndex,\n    initialState: 0,\n  });\n\n  const onDragEvent = useEventCallback((event: PointerEvent | MouseEvent, index: number) => {\n    onDragIndexChange?.(event, { event, type: 'drag', index });\n  });\n\n  const emblaOptions = React.useRef<EmblaOptionsType>({\n    align,\n    direction,\n    loop,\n    slidesToScroll,\n    startIndex: activeIndex,\n    watchDrag,\n    containScroll,\n    duration: motionDuration,\n  });\n\n  const emblaApi = React.useRef<EmblaCarouselType | null>(null);\n  const autoplayRef = React.useRef<boolean>(false);\n\n  const resetAutoplay = React.useCallback(() => {\n    emblaApi.current?.plugins().autoplay?.reset();\n  }, []);\n\n  const getPlugins = React.useCallback(() => {\n    const plugins: EmblaPluginType[] = [];\n\n    plugins.push(\n      Autoplay({\n        playOnInit: autoplayRef.current,\n        delay: autoplayInterval,\n        /* stopOnInteraction: false causes autoplay to restart on interaction end*/\n        /* we'll handle this logic to ensure autoplay state is respected */\n        stopOnInteraction: true,\n        stopOnFocusIn: false, // We'll handle this one manually to prevent conflicts with tabster\n        stopOnMouseEnter: false, // We will handle this manually to align functionality\n      }),\n    );\n\n    // Optionally add Fade plugin\n    if (motionType === 'fade') {\n      plugins.push(Fade());\n    }\n\n    if (watchDrag) {\n      plugins.push(\n        pointerEventPlugin({\n          onSelectViaDrag: onDragEvent,\n        }),\n      );\n    }\n\n    return plugins;\n  }, [motionType, onDragEvent, watchDrag, autoplayInterval]);\n\n  /* This function enables autoplay to pause/play without affecting underlying state\n   * Useful for pausing on focus etc. without having to reinitialize or set autoplay to off\n   */\n  const enableAutoplay = React.useCallback(\n    (autoplay: boolean, temporary?: boolean) => {\n      if (!temporary) {\n        autoplayRef.current = autoplay;\n      }\n\n      if (autoplay && autoplayRef.current) {\n        // Autoplay should only enable in the case where underlying state is true, temporary should not override\n        emblaApi.current?.plugins().autoplay?.play();\n        // Reset after play to ensure timing and any focus/mouse pause state is reset.\n        resetAutoplay();\n      } else if (!autoplay) {\n        emblaApi.current?.plugins().autoplay?.stop();\n      }\n    },\n    [resetAutoplay],\n  );\n\n  // Listeners contains callbacks for UI elements that may require state update based on embla changes\n  const listeners = React.useRef(new Set<(data: CarouselUpdateData) => void>());\n  const subscribeForValues = React.useCallback((listener: (data: CarouselUpdateData) => void) => {\n    listeners.current.add(listener);\n\n    return () => {\n      listeners.current.delete(listener);\n    };\n  }, []);\n\n  const updateIndex = () => {\n    const newIndex = emblaApi.current?.selectedScrollSnap() ?? 0;\n    const slides = emblaApi.current?.slideNodes();\n    const slideRegistry = emblaApi.current?.internalEngine().slideRegistry;\n    const actualIndex = slideRegistry?.[newIndex]?.[0] ?? 0;\n\n    // We set the first card in the current group as the default tabster index for focus capture\n    slides?.forEach((slide, slideIndex) => {\n      setTabsterDefault(slide, slideIndex === actualIndex);\n    });\n    setActiveIndex(newIndex);\n  };\n\n  const handleReinit = useEventCallback(() => {\n    const nodes: HTMLElement[] = emblaApi.current?.slideNodes() ?? [];\n    const groupIndexList: number[][] = emblaApi.current?.internalEngine().slideRegistry ?? [];\n    const navItemsCount = groupIndexList.length > 0 ? groupIndexList.length : nodes.length;\n    const canLoop = emblaApi.current?.internalEngine().slideLooper.canLoop();\n\n    const data: CarouselUpdateData = {\n      navItemsCount,\n      activeIndex: emblaApi.current?.selectedScrollSnap() ?? 0,\n      groupIndexList,\n      slideNodes: nodes,\n      canLoop,\n    };\n\n    updateIndex();\n    emblaApi.current?.scrollTo(activeIndex, false);\n    for (const listener of listeners.current) {\n      listener(data);\n    }\n  });\n\n  const handleIndexChange: EmblaEventHandler = useEventCallback((_, eventType) => {\n    const newIndex = emblaApi.current?.selectedScrollSnap() ?? 0;\n    updateIndex();\n    if (eventType === 'autoplay:select') {\n      const noopEvent = new Event('autoplay');\n      onAutoplayIndexChange?.(noopEvent, { event: noopEvent, type: 'autoplay', index: newIndex });\n    }\n  });\n\n  const viewportRef: React.RefObject<HTMLDivElement> = React.useRef(null);\n  const containerRef: React.RefObject<HTMLDivElement> = React.useMemo(() => {\n    const handleVisibilityChange = () => {\n      const cardElements = emblaApi.current?.slideNodes();\n      const visibleIndexes = emblaApi.current?.slidesInView() ?? [];\n\n      cardElements?.forEach((cardElement, index) => {\n        cardElement.dispatchEvent(\n          new CustomEvent<CarouselVisibilityEventDetail>(EMBLA_VISIBILITY_EVENT, {\n            bubbles: false,\n            detail: { isVisible: visibleIndexes.includes(index) },\n          }),\n        );\n      });\n    };\n\n    // Get plugins using autoplayRef to prevent state change recreating EmblaCarousel\n    const plugins = getPlugins();\n\n    return {\n      set current(newElement: HTMLDivElement | null) {\n        if (emblaApi.current) {\n          // Stop autoplay before reinitializing.\n          emblaApi.current.plugins?.().autoplay?.stop();\n          emblaApi.current.off('slidesInView', handleVisibilityChange);\n          emblaApi.current.off('select', handleIndexChange);\n          emblaApi.current.off('reInit', handleReinit);\n          emblaApi.current.off('autoplay:select', handleIndexChange);\n\n          emblaApi.current.destroy();\n          emblaApi.current = null;\n        }\n\n        if (newElement) {\n          const newEmblaApi = EmblaCarousel(\n            // Use direct viewport if available, else fallback to container (includes Carousel controls).\n            viewportRef.current ?? newElement,\n            {\n              ...DEFAULT_EMBLA_OPTIONS,\n              ...emblaOptions.current,\n            },\n            plugins,\n          );\n\n          newEmblaApi.on('reInit', handleReinit);\n          newEmblaApi.on('slidesInView', handleVisibilityChange);\n          newEmblaApi.on('select', handleIndexChange);\n          newEmblaApi.on('autoplay:select', handleIndexChange);\n\n          emblaApi.current = newEmblaApi;\n        }\n      },\n    };\n  }, [getPlugins, handleIndexChange, handleReinit]);\n\n  const carouselApi = React.useMemo(\n    () => ({\n      scrollToElement: (element: HTMLElement, jump?: boolean) => {\n        const cardElements = emblaApi.current?.slideNodes();\n        const groupIndexList = emblaApi.current?.internalEngine().slideRegistry ?? [];\n        const cardIndex = cardElements?.indexOf(element) ?? 0;\n        const groupIndex = groupIndexList.findIndex(group => {\n          return group.includes(cardIndex);\n        });\n        const indexFocus = groupIndex ?? cardIndex;\n        emblaApi.current?.scrollTo(indexFocus, jump);\n\n        return indexFocus;\n      },\n      scrollToIndex: (index: number, jump?: boolean) => {\n        emblaApi.current?.scrollTo(index, jump);\n      },\n      scrollInDirection: (dir: 'prev' | 'next') => {\n        if (dir === 'prev') {\n          emblaApi.current?.scrollPrev();\n        } else {\n          emblaApi.current?.scrollNext();\n        }\n\n        return emblaApi.current?.selectedScrollSnap() ?? 0;\n      },\n    }),\n    [],\n  );\n\n  React.useEffect(() => {\n    const plugins = getPlugins();\n\n    emblaOptions.current = {\n      startIndex: emblaOptions.current.startIndex,\n      align,\n      direction,\n      loop,\n      slidesToScroll,\n      watchDrag,\n      containScroll,\n      duration: motionDuration,\n    };\n\n    // Stop autoplay before reinitializing.\n    emblaApi.current?.plugins?.().autoplay?.stop();\n    emblaApi.current?.reInit(\n      {\n        ...DEFAULT_EMBLA_OPTIONS,\n        ...emblaOptions.current,\n      },\n      plugins,\n    );\n  }, [align, containScroll, direction, getPlugins, loop, slidesToScroll, watchDrag, motionDuration]);\n\n  React.useEffect(() => {\n    // Scroll to controlled values on update\n    // If active index is out of bounds, re-init will handle instead\n    const currentActiveIndex = emblaApi.current?.selectedScrollSnap() ?? 0;\n    const slideLength = emblaApi.current?.slideNodes()?.length ?? 0;\n    emblaOptions.current.startIndex = activeIndex;\n    if (activeIndex < slideLength && activeIndex !== currentActiveIndex) {\n      emblaApi.current?.scrollTo(activeIndex);\n    }\n  }, [activeIndex]);\n\n  return {\n    activeIndex,\n    carouselApi,\n    viewportRef,\n    containerRef,\n    subscribeForValues,\n    enableAutoplay,\n    resetAutoplay,\n  };\n}\n"],"names":["EMBLA_VISIBILITY_EVENT","setTabsterDefault","useEmblaCarousel","sliderClassname","carouselSliderClassNames","root","DEFAULT_EMBLA_OPTIONS","containScroll","inViewThreshold","watchDrag","skipSnaps","container","slides","carouselCardClassNames","element","isDefault","tabsterAttr","getAttribute","tabsterAttributes","JSON","parse","focusable","setAttribute","stringify","options","align","autoplayInterval","direction","loop","slidesToScroll","motion","onDragIndexChange","onAutoplayIndexChange","motionType","kind","motionDuration","duration","activeIndex","setActiveIndex","useControllableState","defaultState","defaultActiveIndex","state","initialState","onDragEvent","useEventCallback","event","index","type","emblaOptions","React","useRef","startIndex","emblaApi","autoplayRef","resetAutoplay","useCallback","current","plugins","autoplay","reset","getPlugins","push","Autoplay","playOnInit","delay","stopOnInteraction","stopOnFocusIn","stopOnMouseEnter","Fade","pointerEventPlugin","onSelectViaDrag","enableAutoplay","temporary","play","stop","listeners","Set","subscribeForValues","listener","add","delete","updateIndex","slideRegistry","newIndex","selectedScrollSnap","slideNodes","internalEngine","actualIndex","forEach","slide","slideIndex","handleReinit","nodes","groupIndexList","navItemsCount","length","canLoop","slideLooper","data","scrollTo","handleIndexChange","_","eventType","noopEvent","Event","viewportRef","containerRef","useMemo","handleVisibilityChange","cardElements","visibleIndexes","slidesInView","cardElement","dispatchEvent","CustomEvent","bubbles","detail","isVisible","includes","newElement","off","destroy","newEmblaApi","EmblaCarousel","on","carouselApi","scrollToElement","jump","cardIndex","indexOf","groupIndex","findIndex","group","indexFocus","scrollToIndex","scrollInDirection","dir","scrollPrev","scrollNext","useEffect","reInit","currentActiveIndex","slideLength"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}