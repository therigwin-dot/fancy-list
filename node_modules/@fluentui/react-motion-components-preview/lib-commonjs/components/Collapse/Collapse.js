"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Collapse: function() {
        return Collapse;
    },
    CollapseDelayed: function() {
        return CollapseDelayed;
    },
    CollapseRelaxed: function() {
        return CollapseRelaxed;
    },
    CollapseSnappy: function() {
        return CollapseSnappy;
    }
});
const _reactmotion = require("@fluentui/react-motion");
const _collapseatoms = require("./collapse-atoms");
const _fadeatom = require("../../atoms/fade-atom");
/** Internal helper to create collapse atoms with shared logic */ function createCollapseAtoms({ element, orientation, animateOpacity, // Enter params
sizeDuration, opacityDuration = sizeDuration, easing, delay, // Exit params
exitSizeDuration, exitOpacityDuration = exitSizeDuration, exitEasing, exitDelay }) {
    // ----- ENTER -----
    // The enter transition is an array of up to 3 motion atoms: size, whitespace and opacity.
    const enterAtoms = [
        (0, _collapseatoms.sizeEnterAtom)({
            orientation,
            duration: sizeDuration,
            easing,
            element
        }),
        (0, _collapseatoms.whitespaceAtom)({
            direction: 'enter',
            orientation,
            duration: sizeDuration,
            easing
        })
    ];
    // Fade in only if animateOpacity is true. Otherwise, leave opacity unaffected.
    if (animateOpacity) {
        enterAtoms.push({
            ...(0, _fadeatom.fadeAtom)({
                direction: 'enter',
                duration: opacityDuration,
                easing
            }),
            delay,
            fill: 'both'
        });
    }
    // ----- EXIT -----
    // The exit transition is an array of up to 3 motion atoms: opacity, size and whitespace.
    const exitAtoms = [];
    // Fade out only if animateOpacity is true. Otherwise, leave opacity unaffected.
    if (animateOpacity) {
        exitAtoms.push((0, _fadeatom.fadeAtom)({
            direction: 'exit',
            duration: exitOpacityDuration,
            easing: exitEasing
        }));
    }
    exitAtoms.push((0, _collapseatoms.sizeExitAtom)({
        orientation,
        duration: exitSizeDuration,
        easing: exitEasing,
        element,
        delay: exitDelay
    }), (0, _collapseatoms.whitespaceAtom)({
        direction: 'exit',
        orientation,
        duration: exitSizeDuration,
        easing: exitEasing,
        delay: exitDelay
    }));
    return {
        enter: enterAtoms,
        exit: exitAtoms
    };
}
/** Define a presence motion for collapse/expand */ const collapsePresenceFn = ({ element, duration = _reactmotion.motionTokens.durationNormal, easing = _reactmotion.motionTokens.curveEasyEaseMax, exitDuration = duration, exitEasing = easing, animateOpacity = true, orientation = 'vertical' })=>{
    return createCollapseAtoms({
        element,
        orientation,
        animateOpacity,
        sizeDuration: duration,
        opacityDuration: duration,
        easing,
        exitSizeDuration: exitDuration,
        exitOpacityDuration: exitDuration,
        exitEasing,
        delay: 0,
        exitDelay: 0
    });
};
/** Define a presence motion for collapse/expand that can stagger the size and opacity motions by a given delay */ const collapseDelayedPresenceFn = ({ element, sizeDuration = _reactmotion.motionTokens.durationNormal, opacityDuration = _reactmotion.motionTokens.durationSlower, easing = _reactmotion.motionTokens.curveEasyEase, delay = _reactmotion.motionTokens.durationNormal, exitSizeDuration = sizeDuration, exitOpacityDuration = opacityDuration, exitEasing = easing, exitDelay = _reactmotion.motionTokens.durationSlower, animateOpacity = true, orientation = 'vertical' })=>{
    return createCollapseAtoms({
        element,
        orientation,
        animateOpacity,
        sizeDuration,
        opacityDuration,
        easing,
        delay,
        exitSizeDuration,
        exitOpacityDuration,
        exitEasing,
        exitDelay
    });
};
const Collapse = (0, _reactmotion.createPresenceComponent)(collapsePresenceFn);
const CollapseSnappy = (0, _reactmotion.createPresenceComponentVariant)(Collapse, {
    duration: _reactmotion.motionTokens.durationFast
});
const CollapseRelaxed = (0, _reactmotion.createPresenceComponentVariant)(Collapse, {
    duration: _reactmotion.motionTokens.durationSlower
});
const CollapseDelayed = (0, _reactmotion.createPresenceComponent)(collapseDelayedPresenceFn);
