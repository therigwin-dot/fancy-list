define(["require", "exports", "@testing-library/react"], function (require, exports, react_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expectNoHiddenParents = exports.flushPromises = exports.mockEvent = exports.renderIntoDocument = exports.delay = exports.expectOneV2 = exports.expectNodesV2 = exports.findNodesV2 = exports.getByAllSelector = exports.getBySelector = void 0;
    // v2 - avoiding usage of enzyme
    // Helper function to find all elements with a specific class name that are not React components
    function getBySelector(container, selector) {
        return container.querySelector(selector);
    }
    exports.getBySelector = getBySelector;
    function getByAllSelector(container, selector) {
        return container.querySelectorAll(selector);
    }
    exports.getByAllSelector = getByAllSelector;
    function findNodesV2(container, selector) {
        return Array.from(container.querySelectorAll(selector)).filter(function (node) { return node.nodeType === Node.ELEMENT_NODE; });
    }
    exports.findNodesV2 = findNodesV2;
    function expectNodesV2(container, className, n) {
        expect(findNodesV2(container, className).length).toEqual(n);
    }
    exports.expectNodesV2 = expectNodesV2;
    function expectOneV2(container, selector) {
        expectNodesV2(container, selector, 1);
    }
    exports.expectOneV2 = expectOneV2;
    /** @deprecated Use fake timers and `jest.runAllTimers()` instead */
    function delay(millisecond) {
        return new Promise(function (resolve) { return setTimeout(resolve, millisecond); });
    }
    exports.delay = delay;
    function renderIntoDocument(element) {
        var component = (0, react_1.render)(element);
        var renderedDOM = component.container.firstChild;
        return renderedDOM;
    }
    exports.renderIntoDocument = renderIntoDocument;
    function mockEvent(targetValue) {
        if (targetValue === void 0) { targetValue = ''; }
        var target = { value: targetValue };
        return { target: target };
    }
    exports.mockEvent = mockEvent;
    /**
     * Hack for forcing Jest to run pending promises
     * https://github.com/facebook/jest/issues/2157#issuecomment-897935688
     */
    function flushPromises() {
        return new Promise(jest.requireActual('timers').setImmediate);
    }
    exports.flushPromises = flushPromises;
    /**
     * Verify that the given element and its parents do NOT have `aria-hidden` set.
     */
    function expectNoHiddenParents(element) {
        var el = element;
        while (el) {
            expect(el.getAttribute('aria-hidden')).not.toBe('true');
            el = el.parentElement;
        }
    }
    exports.expectNoHiddenParents = expectNoHiddenParents;
});
//# sourceMappingURL=testUtilities.js.map