{"version":3,"sources":["useSplitNavItemStyles.styles.js"],"sourcesContent":["import { makeStyles, mergeClasses } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\nimport { motionTokens } from '@fluentui/react-motion';\nimport { navItemTokens, useRootDefaultClassName } from '../sharedNavStyles.styles';\nexport const splitNavItemClassNames = {\n    root: 'fui-SplitNavItem',\n    navItem: 'fui-SplitNavItem__navItem',\n    actionButton: 'fui-SplitNavItem__actionButton',\n    toggleButton: 'fui-SplitNavItem__toggleButton',\n    menuButton: 'fui-SplitNavItem__menuButton',\n    /**\n   * Tooltips don't have a class name prop, so this is just to satisfy the linter.\n   */ actionButtonTooltip: 'fui-SplitNavItem__actionButtonTooltip',\n    toggleButtonTooltip: 'fui-SplitNavItem__toggleButtonTooltip',\n    menuButtonTooltip: 'fui-SplitNavItem__menuButtonTooltip'\n};\n// Don't use makeResetStyles here because the sub components call it once and\n// This links says that makeResetStyles should only be called once per element\n// https://griffel.js.org/react/api/make-reset-styles/#limitations\nconst { actionButton, toggleButton, menuButton } = splitNavItemClassNames;\nconst buttonHoverStyles = {\n    [`& .${actionButton}, & .${toggleButton}, & .${menuButton}`]: {\n        opacity: 1,\n        pointerEvents: 'auto'\n    }\n};\n/**\n * Styles for the root slot\n */ const useSplitNaveItemStyles = makeStyles({\n    baseRoot: {\n        display: 'flex',\n        gap: 'unset',\n        alignItems: 'stretch',\n        padding: 'unset',\n        textAlign: 'unset',\n        backgroundColor: navItemTokens.backgroundColor,\n        ...navItemTokens.transitionTokens,\n        ':hover': {\n            backgroundColor: navItemTokens.backgroundColorHover,\n            ...buttonHoverStyles\n        },\n        ':focus-within': buttonHoverStyles,\n        ':active': {\n            backgroundColor: navItemTokens.backgroundColorPressed\n        }\n    },\n    baseNavItem: {\n        // styles that we want to disagree with the default on\n        display: 'flex',\n        textTransform: 'none',\n        alignSelf: 'stretch',\n        textAlign: 'left',\n        position: 'relative',\n        justifyContent: 'start',\n        gap: tokens.spacingVerticalL,\n        backgroundColor: 'transparent'\n    },\n    baseSecondary: {\n        minWidth: '28px',\n        paddingInlineEnd: '12px',\n        paddingInlineStart: '5px',\n        paddingBlockStart: '5px',\n        alignItems: 'start'\n    },\n    baseMedium: {\n        paddingBlockStart: '9px'\n    },\n    baseLarge: {\n        paddingBlockStart: '12px'\n    },\n    hoverAction: {\n        opacity: 0,\n        pointerEvents: 'none',\n        transition: `opacity ${motionTokens.durationFast}ms ${motionTokens.curveEasyEase}`,\n        willChange: 'opacity'\n    }\n});\n/**\n * Apply styling to the SplitNavItem slots based on the state\n */ export const useSplitNavItemStyles_unstable = (state)=>{\n    'use no memo';\n    const splitNavItemStyles = useSplitNaveItemStyles();\n    const sharedRootClassNames = useRootDefaultClassName();\n    state.root.className = mergeClasses(splitNavItemClassNames.root, sharedRootClassNames, splitNavItemStyles.baseRoot, state.root.className);\n    if (state.navItem) {\n        state.navItem.className = mergeClasses(splitNavItemClassNames.navItem, splitNavItemStyles.baseNavItem, state.navItem.className);\n    }\n    if (state.actionButton) {\n        state.actionButton.className = mergeClasses(splitNavItemClassNames.actionButton, splitNavItemStyles.baseSecondary, splitNavItemStyles.hoverAction, state.density === 'medium' && splitNavItemStyles.baseMedium, state.actionButton.className);\n    }\n    if (state.toggleButton) {\n        state.toggleButton.className = mergeClasses(splitNavItemClassNames.toggleButton, splitNavItemStyles.baseSecondary, splitNavItemStyles.hoverAction, state.density === 'medium' && splitNavItemStyles.baseMedium, state.toggleButton.className);\n    }\n    if (state.menuButton) {\n        state.menuButton.className = mergeClasses(splitNavItemClassNames.menuButton, splitNavItemStyles.baseSecondary, splitNavItemStyles.hoverAction, state.density === 'medium' && splitNavItemStyles.baseMedium, state.menuButton.className);\n    }\n    return state;\n};\n"],"names":["splitNavItemClassNames","useSplitNavItemStyles_unstable","root","navItem","actionButton","toggleButton","menuButton","actionButtonTooltip","toggleButtonTooltip","menuButtonTooltip","buttonHoverStyles","opacity","pointerEvents","useSplitNaveItemStyles","__styles","baseRoot","mc9l5x","i8kkvl","Belr9w4","rmohyg","Bt984gj","Byoj8tv","uwmqm3","z189sj","z8tnut","B0ocmuz","fsow6f","De3pzq","B3o57yi","Bkqvd7p","Bmy1vo4","Jwef8y","xwko9w","mcc9px","B02v5zz","i4x37a","ecr2s2","baseNavItem","B9bfxx9","qb2dma","qhf8xq","Brf1p80","baseSecondary","Bf4jedk","Bnt446c","B1hrpyx","rjzwhg","baseMedium","baseLarge","hoverAction","abs64n","Bkecrkj","Bn62ygk","Cwk7ip","Bi2q7bf","Es3by","d","p","h","w","a","state","splitNavItemStyles","sharedRootClassNames","useRootDefaultClassName","className","mergeClasses","density"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}