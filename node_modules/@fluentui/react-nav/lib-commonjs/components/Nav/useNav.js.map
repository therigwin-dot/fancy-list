{"version":3,"sources":["../src/components/Nav/useNav.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  useControllableState,\n  useEventCallback,\n  useMergedRefs,\n  slot,\n  getIntrinsicElementProps,\n  EventHandler,\n} from '@fluentui/react-utilities';\n\nimport type { NavProps, NavState, OnNavItemSelectData } from './Nav.types';\nimport type { NavItemRegisterData, NavItemValue } from '../NavContext.types';\n\n/**\n * Initial value for the uncontrolled case of the list of open indexes\n */\nfunction initializeUncontrolledOpenCategories({\n  defaultOpenCategories,\n  multiple,\n}: Pick<NavProps, 'defaultOpenCategories' | 'multiple'>): NavItemValue[] | undefined {\n  if (defaultOpenCategories !== undefined) {\n    if (Array.isArray(defaultOpenCategories)) {\n      return multiple ? defaultOpenCategories : [defaultOpenCategories[0]];\n    }\n    return [defaultOpenCategories];\n  }\n  return undefined;\n}\n\n/**\n * Updates the list of open indexes based on an index that changes\n * @param value - the index that will change\n * @param previousOpenItems - list of current open indexes\n * @param multiple - if Nav supports open categories at the same time\n */\nconst updateOpenCategories = (value: NavItemValue, previousOpenItems: NavItemValue[], multiple: boolean) => {\n  if (multiple) {\n    if (previousOpenItems.includes(value)) {\n      return previousOpenItems.filter(i => i !== value);\n    } else {\n      return [...previousOpenItems, value];\n    }\n  }\n\n  return previousOpenItems[0] === value ? [] : [value];\n};\n\n/**\n * Create the state required to render Nav.\n *\n * The returned state can be modified with hooks such as useNavStyles,\n * before being passed to renderNav.\n *\n * @param props - props from this instance of Nav\n * @param ref - reference to root HTMLDivElement of Nav\n */\nexport const useNav_unstable = (props: NavProps, ref: React.Ref<HTMLDivElement>): NavState => {\n  const {\n    onNavItemSelect,\n    onNavCategoryItemToggle,\n    multiple = true,\n    density = 'medium',\n    openCategories: controlledOpenCategoryItems,\n    selectedCategoryValue: controlledSelectedCategoryValue,\n    selectedValue: controlledSelectedValue,\n    defaultOpenCategories,\n    defaultSelectedValue,\n    defaultSelectedCategoryValue,\n  } = props;\n\n  const innerRef = React.useRef<HTMLElement>(null);\n\n  const [openCategories, setOpenCategories] = useControllableState({\n    state: controlledOpenCategoryItems,\n    defaultState: initializeUncontrolledOpenCategories({ defaultOpenCategories, multiple }),\n    initialState: [],\n  });\n\n  const [selectedCategoryValue, setSelectedCategoryValue] = useControllableState({\n    state: controlledSelectedCategoryValue,\n    defaultState: defaultSelectedCategoryValue,\n    initialState: undefined,\n  });\n\n  const [selectedValue, setSelectedValue] = useControllableState({\n    state: controlledSelectedValue,\n    defaultState: defaultSelectedValue,\n    initialState: undefined,\n  });\n\n  // considered usePrevious, but it is sensitive to re-renders\n  // this could cause the previous to move to current in the case where the navItem list re-renders.\n  // these refs avoid getRegisteredNavItems changing when selectedValue changes and causing\n  // renders for navItems that have not changed.\n  const currentSelectedValue = React.useRef<NavItemValue | undefined>(undefined);\n  const previousSelectedValue = React.useRef<NavItemValue | undefined>(undefined);\n\n  const currentSelectedCategoryValue = React.useRef<NavItemValue | undefined>(undefined);\n  const previousSelectedCategoryValue = React.useRef<NavItemValue | undefined>(undefined);\n\n  if (currentSelectedValue.current !== selectedValue) {\n    previousSelectedValue.current = currentSelectedValue.current;\n    currentSelectedValue.current = selectedValue;\n  }\n\n  if (currentSelectedCategoryValue.current !== selectedCategoryValue) {\n    previousSelectedCategoryValue.current = currentSelectedCategoryValue.current;\n    currentSelectedCategoryValue.current = selectedCategoryValue;\n  }\n\n  // used for NavItems and NavSubItems\n  const onSelect: EventHandler<OnNavItemSelectData> = useEventCallback((event, data) => {\n    setSelectedValue(data.value);\n    setSelectedCategoryValue(data.categoryValue ? data.categoryValue : '');\n    onNavItemSelect?.(event, data);\n  });\n\n  // used for NavCategoryItems\n  const onRequestNavCategoryItemToggle: EventHandler<OnNavItemSelectData> = useEventCallback((event, data) => {\n    if (data.categoryValue !== undefined) {\n      const nextOpenCategories = updateOpenCategories(data.categoryValue, openCategories ?? [], multiple);\n      onNavCategoryItemToggle?.(event, data);\n      setOpenCategories(nextOpenCategories);\n    }\n  });\n\n  const registeredNavItems = React.useRef<Record<string, NavItemRegisterData>>({});\n\n  const onRegister = React.useCallback((data: NavItemRegisterData) => {\n    registeredNavItems.current[JSON.stringify(data.value)] = data;\n  }, []);\n\n  const onUnregister = React.useCallback((data: NavItemRegisterData) => {\n    delete registeredNavItems.current[JSON.stringify(data.value)];\n  }, []);\n\n  const getRegisteredNavItems = React.useCallback(() => {\n    return {\n      selectedValue: currentSelectedValue.current,\n      previousSelectedValue: previousSelectedValue.current,\n      selectedCategoryValue: currentSelectedCategoryValue.current,\n      previousSelectedCategoryValue: previousSelectedCategoryValue.current,\n      registeredNavItems: registeredNavItems.current,\n    };\n  }, []);\n\n  return {\n    components: {\n      root: 'div',\n    },\n    root: slot.always(\n      getIntrinsicElementProps('div', {\n        ref: useMergedRefs(ref, innerRef) as React.Ref<HTMLDivElement>,\n        ...props,\n      }),\n      { elementType: 'div' },\n    ),\n    openCategories,\n    selectedValue,\n    selectedCategoryValue,\n    onRegister,\n    onUnregister,\n    onSelect,\n    getRegisteredNavItems,\n    onRequestNavCategoryItemToggle,\n    multiple,\n    density,\n  };\n};\n"],"names":["useNav_unstable","initializeUncontrolledOpenCategories","defaultOpenCategories","multiple","undefined","Array","isArray","updateOpenCategories","value","previousOpenItems","includes","filter","i","props","ref","onNavItemSelect","onNavCategoryItemToggle","density","openCategories","controlledOpenCategoryItems","selectedCategoryValue","controlledSelectedCategoryValue","selectedValue","controlledSelectedValue","defaultSelectedValue","defaultSelectedCategoryValue","innerRef","React","useRef","setOpenCategories","useControllableState","state","defaultState","initialState","setSelectedCategoryValue","setSelectedValue","currentSelectedValue","previousSelectedValue","currentSelectedCategoryValue","previousSelectedCategoryValue","current","onSelect","useEventCallback","event","data","categoryValue","onRequestNavCategoryItemToggle","nextOpenCategories","registeredNavItems","onRegister","useCallback","JSON","stringify","onUnregister","getRegisteredNavItems","components","root","slot","always","getIntrinsicElementProps","useMergedRefs","elementType"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}