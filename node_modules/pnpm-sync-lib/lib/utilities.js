"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilesInDirectory = exports.pnpmSyncGetJsonVersion = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
/**
 * Get .pnpm-sync.json version
 *
 * @beta
 */
function pnpmSyncGetJsonVersion() {
    return require('../package.json').version;
}
exports.pnpmSyncGetJsonVersion = pnpmSyncGetJsonVersion;
async function getFilesInDirectory(directory) {
    const returnFileList = [];
    await getFilesInDirectoryHelper(directory, returnFileList);
    return returnFileList;
}
exports.getFilesInDirectory = getFilesInDirectory;
async function getFilesInDirectoryHelper(directory, returnFileList) {
    const itemList = await fs_1.default.promises.readdir(directory, { withFileTypes: true });
    for (const item of itemList) {
        const absolutePath = path_1.default.join(directory, item.name);
        // when PNPM install injected dependencies
        // it will create necessary node_modules/.bin folder in PNPM store
        // so we need to ignore node_modules folder in the pnpm-store location
        if (item.isDirectory() && item.name !== 'node_modules') {
            await getFilesInDirectoryHelper(absolutePath, returnFileList);
        }
        // the list should include both files and directories
        returnFileList.push({
            absolutePath,
            isDirectory: item.isDirectory(),
            isFile: item.isFile()
        });
    }
}
//# sourceMappingURL=utilities.js.map