{"version":3,"file":"pnpmSyncCopy.js","sourceRoot":"","sources":["../src/pnpmSyncCopy.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport process from 'node:process';\nimport {\n  ILogMessageCallbackOptions,\n  IPnpmSyncJson,\n  ISyncItem,\n  LogMessageIdentifier,\n  LogMessageKind\n} from './interfaces';\nimport { getFilesInDirectory, pnpmSyncGetJsonVersion } from './utilities';\n\n/**\n * @beta\n */\nexport interface IPnpmSyncCopyOptions {\n  /**\n   * Path to the `<project-folder>/node_modules/.pnpm-sync.json` file to be processed.\n   * This parameter is required because the caller should efficiently test its existence\n   * and can avoid invoking pnpmSync if it is absent.\n   */\n  pnpmSyncJsonPath: string;\n\n  /**\n   * Environment-provided API to avoid an NPM dependency.\n   * The \"pnpm-sync\" NPM package provides a reference implementation.\n   */\n  getPackageIncludedFiles: (packagePath: string) => Promise<string[]>;\n\n  /**\n   * Environment-provided API to avoid an NPM dependency.\n   * The \"pnpm-sync\" NPM package provides a reference implementation.\n   */\n  forEachAsyncWithConcurrency: <TItem>(\n    iterable: Iterable<TItem>,\n    callback: (item: TItem) => Promise<void>,\n    options: { concurrency: number }\n  ) => Promise<void>;\n\n  /**\n   * Environment-provided API to avoid an NPM dependency.\n   * The \"pnpm-sync\" NPM package provides a reference implementation.\n   */\n  ensureFolderAsync: (folderPath: string) => Promise<void>;\n  /**\n   * A callback for reporting events during the operation.\n   *\n   * @remarks\n   * `LogMessageKind.ERROR` events do NOT cause the promise to reject,\n   * so they must be handled appropriately.\n   */\n  logMessageCallback: (options: ILogMessageCallbackOptions) => void;\n}\n\n/**\n * For each library project that acts as an injected dependency of other consuming projects\n * within a PNPM workspace, this operation should be invoked whenever that library is rebuilt.\n * It will copy the latest build output into the `node_modules` installation folder.\n *\n * @remarks\n * This operation reads the `.npm-sync.json` file which should have been prepared after\n * `pnpm install` by calling the {@link pnpmSyncPrepareAsync} function.\n *\n * @beta\n */\nexport async function pnpmSyncCopyAsync(options: IPnpmSyncCopyOptions): Promise<void> {\n  const { getPackageIncludedFiles, forEachAsyncWithConcurrency, ensureFolderAsync, logMessageCallback } =\n    options;\n  let pnpmSyncJsonPath = options.pnpmSyncJsonPath;\n\n  pnpmSyncJsonPath = path.resolve(process.cwd(), pnpmSyncJsonPath);\n\n  logMessageCallback({\n    message: `Starting operation for ` + pnpmSyncJsonPath,\n    messageKind: LogMessageKind.VERBOSE,\n    details: {\n      messageIdentifier: LogMessageIdentifier.COPY_STARTING,\n      pnpmSyncJsonPath\n    }\n  });\n\n  let pnpmSyncJsonContents: string;\n  try {\n    pnpmSyncJsonContents = (await fs.promises.readFile(pnpmSyncJsonPath)).toString();\n  } catch (e) {\n    if ((e as NodeJS.ErrnoException).code === 'ENOENT') {\n      logMessageCallback({\n        message:\n          'The .pnpm-sync.json file was not found under the node_modules folder; was this project prepared?',\n        messageKind: LogMessageKind.ERROR,\n        details: {\n          messageIdentifier: LogMessageIdentifier.COPY_ERROR_NO_SYNC_FILE,\n          pnpmSyncJsonPath\n        }\n      });\n      return;\n    } else {\n      throw e;\n    }\n  }\n\n  const pnpmSyncJsonFolder = path.dirname(pnpmSyncJsonPath);\n\n  // read the .pnpm-sync.json\n  const pnpmSyncJson: IPnpmSyncJson = JSON.parse(pnpmSyncJsonContents);\n\n  // verify if the version is incompatible\n  const expectedPnpmSyncJsonVersion: string = pnpmSyncGetJsonVersion();\n  const actualPnpmSyncJsonVersion: string = pnpmSyncJson.version;\n  if (expectedPnpmSyncJsonVersion !== actualPnpmSyncJsonVersion) {\n    const errorMessage = `The .pnpm-sync.json file in ${pnpmSyncJsonFolder} has an incompatible version; regenerate it and try again.`;\n    logMessageCallback({\n      message: errorMessage,\n      messageKind: LogMessageKind.ERROR,\n      details: {\n        messageIdentifier: LogMessageIdentifier.COPY_ERROR_INCOMPATIBLE_SYNC_FILE,\n        pnpmSyncJsonPath,\n        actualVersion: actualPnpmSyncJsonVersion,\n        expectedVersion: expectedPnpmSyncJsonVersion\n      }\n    });\n    throw Error(errorMessage);\n  }\n\n  const { sourceFolder, targetFolders } = pnpmSyncJson.postbuildInjectedCopy;\n  const sourcePath = path.resolve(pnpmSyncJsonFolder, sourceFolder);\n\n  // get npmPackFiles\n  const npmPackFiles: string[] = await getPackageIncludedFiles(sourcePath);\n\n  const startTime = process.hrtime.bigint();\n\n  // init the map to track files that already processed\n  const targetFolderFileToIsProcessed: Map<string, ISyncItem> = new Map();\n\n  for (const targetFolder of targetFolders) {\n    const destinationPath = path.resolve(pnpmSyncJsonFolder, targetFolder.folderPath);\n    if (!fs.existsSync(destinationPath)) {\n      continue;\n    }\n    const existFileStatInoInTargetFolder: Array<ISyncItem> = await getFilesInDirectory(destinationPath);\n    // all files are not processed in the beginning\n    for (const item of existFileStatInoInTargetFolder) {\n      targetFolderFileToIsProcessed.set(item.absolutePath, item);\n    }\n  }\n\n  await forEachAsyncWithConcurrency(\n    npmPackFiles,\n    async (npmPackFile: string) => {\n      for (const targetFolder of targetFolders) {\n        const destinationPath = path.resolve(pnpmSyncJsonFolder, targetFolder.folderPath);\n\n        const copySourcePath: string = path.join(sourcePath, npmPackFile);\n        const copyDestinationPath: string = path.join(destinationPath, npmPackFile);\n\n        if (!targetFolderFileToIsProcessed.has(copyDestinationPath)) {\n          // if not exist in target folder, we just copy it\n          await ensureFolderAsync(path.dirname(copyDestinationPath));\n          await fs.promises.link(copySourcePath, copyDestinationPath);\n        } else {\n          // if exist in target folder, check if it still point to the source Inode number\n          // in our copy implementation, we use hard link to copy files\n          // so that, we can utilize the file inode info to determine the equality of two files\n          const sourceFileIno = (await fs.promises.stat(copySourcePath)).ino;\n          const destinationFileIno = (await fs.promises.stat(copyDestinationPath)).ino;\n          if (sourceFileIno !== destinationFileIno) {\n            await fs.promises.unlink(copyDestinationPath);\n            await fs.promises.link(copySourcePath, copyDestinationPath);\n          }\n\n          // to keep track which file already processed\n          targetFolderFileToIsProcessed.delete(copyDestinationPath);\n        }\n      }\n    },\n    {\n      concurrency: 10\n    }\n  );\n\n  // delete unprocessed files in target folders\n  const unprocessedDirectories: string[] = [];\n  for (const [absolutePath, item] of targetFolderFileToIsProcessed) {\n    if (item.isFile) {\n      await fs.promises.unlink(absolutePath);\n    } else {\n      unprocessedDirectories.push(absolutePath);\n    }\n  }\n\n  // delete empty folders in target folders as well\n  for (const directory of unprocessedDirectories) {\n    if ((await fs.promises.readdir(directory)).length === 0) {\n      await fs.promises.rmdir(directory);\n    }\n  }\n\n  const endTime = process.hrtime.bigint();\n  const executionTimeInMs: number = Number(endTime - startTime) / 1e6;\n\n  const infoMessage =\n    `Synced ${npmPackFiles.length} ` +\n    (npmPackFiles.length === 1 ? 'file' : 'files') +\n    ` in ${executionTimeInMs.toFixed(3)} ms from ${sourcePath}`;\n\n  logMessageCallback({\n    message: infoMessage,\n    messageKind: LogMessageKind.INFO,\n    details: {\n      messageIdentifier: LogMessageIdentifier.COPY_FINISHING,\n      pnpmSyncJsonPath,\n      fileCount: npmPackFiles.length,\n      sourcePath,\n      executionTimeInMs\n    }\n  });\n}\n"]}