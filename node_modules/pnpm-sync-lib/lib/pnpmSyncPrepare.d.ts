import { ILockfile, ILogMessageCallbackOptions } from './interfaces';
/**
 * @beta
 */
export interface IPnpmSyncPrepareOptions {
    /**
     * The path to the `pnpm-lock.yaml` file
     */
    lockfilePath: string;
    /**
     * The path to the PNPM virtual store ("node_modules/.pnpm" folder)
     */
    dotPnpmFolder: string;
    /**
     * A lockfileId that can be used to recognize the `pnpm-lock.yaml`
     */
    lockfileId?: string;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    ensureFolderAsync: (folderPath: string) => Promise<void>;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    readPnpmLockfile: (lockfilePath: string, options: {
        ignoreIncompatible: boolean;
    }) => Promise<ILockfile | undefined>;
    /**
     * A callback for reporting events during the operation.
     *
     * @remarks
     * `LogMessageKind.ERROR` events do NOT cause the promise to reject,
     * so they must be handled appropriately.
     */
    logMessageCallback: (options: ILogMessageCallbackOptions) => void;
}
/**
 * For each workspace project has injected dependencies in a PNPM workspace, this API
 * should be invoked to prepare its `.pnpm-sync.json` file.  While building projects,
 * that file will be used by {@link pnpmSyncCopyAsync} to recopy the build outputs into
 * injected dependency installation folders under the `node_modules` folder.
 *
 * @beta
 */
export declare function pnpmSyncPrepareAsync(options: IPnpmSyncPrepareOptions): Promise<void>;
//# sourceMappingURL=pnpmSyncPrepare.d.ts.map