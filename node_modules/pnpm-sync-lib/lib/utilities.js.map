{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../src/utilities.ts"],"names":[],"mappings":";;;;;;AAAA,4CAAqC;AACrC,gDAAwB;AAGxB;;;;GAIG;AACH,SAAgB,sBAAsB;IACpC,OAAO,OAAO,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC;AAC5C,CAAC;AAFD,wDAEC;AAEM,KAAK,UAAU,mBAAmB,CAAC,SAAiB;IACzD,MAAM,cAAc,GAAgB,EAAE,CAAC;IACvC,MAAM,yBAAyB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAC3D,OAAO,cAAc,CAAC;AACxB,CAAC;AAJD,kDAIC;AAED,KAAK,UAAU,yBAAyB,CAAC,SAAiB,EAAE,cAA2B;IACrF,MAAM,QAAQ,GAAkB,MAAM,YAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IAE9F,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE,CAAC;QAC5B,MAAM,YAAY,GAAW,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,0CAA0C;QAC1C,kEAAkE;QAClE,sEAAsE;QACtE,IAAI,IAAI,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YACvD,MAAM,yBAAyB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QAChE,CAAC;QAED,qDAAqD;QACrD,cAAc,CAAC,IAAI,CAAC;YAClB,YAAY;YACZ,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE;YAC/B,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE;SACtB,CAAC,CAAC;IACL,CAAC;AACH,CAAC","sourcesContent":["import fs, { type Dirent } from 'fs';\nimport path from 'path';\nimport { ISyncItem } from './interfaces';\n\n/**\n * Get .pnpm-sync.json version\n *\n * @beta\n */\nexport function pnpmSyncGetJsonVersion(): string {\n  return require('../package.json').version;\n}\n\nexport async function getFilesInDirectory(directory: string): Promise<ISyncItem[]> {\n  const returnFileList: ISyncItem[] = [];\n  await getFilesInDirectoryHelper(directory, returnFileList);\n  return returnFileList;\n}\n\nasync function getFilesInDirectoryHelper(directory: string, returnFileList: ISyncItem[]): Promise<void> {\n  const itemList: Array<Dirent> = await fs.promises.readdir(directory, { withFileTypes: true });\n\n  for (const item of itemList) {\n    const absolutePath: string = path.join(directory, item.name);\n    // when PNPM install injected dependencies\n    // it will create necessary node_modules/.bin folder in PNPM store\n    // so we need to ignore node_modules folder in the pnpm-store location\n    if (item.isDirectory() && item.name !== 'node_modules') {\n      await getFilesInDirectoryHelper(absolutePath, returnFileList);\n    }\n\n    // the list should include both files and directories\n    returnFileList.push({\n      absolutePath,\n      isDirectory: item.isDirectory(),\n      isFile: item.isFile()\n    });\n  }\n}\n"]}