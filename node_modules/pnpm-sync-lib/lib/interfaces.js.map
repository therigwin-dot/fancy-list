{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";;;AAyBA;;GAEG;AACH,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,+BAAa,CAAA;IACb,qCAAmB,CAAA;IACnB,iCAAe,CAAA;IACf,qCAAmB,CAAA;AACrB,CAAC,EALW,cAAc,8BAAd,cAAc,QAKzB;AAED;;GAEG;AACH,IAAY,oBAeX;AAfD,WAAY,oBAAoB;IAC9B,kCAAkC;IAClC,6DAAqC,CAAA;IACrC,6FAAqE,CAAA;IACrE,yGAAiF,CAAA;IACjF,iEAAyC,CAAA;IACzC,yEAAiD,CAAA;IACjD,qEAA6C,CAAA;IAC7C,+DAAuC,CAAA;IAEvC,+BAA+B;IAC/B,uDAA+B,CAAA;IAC/B,2EAAmD,CAAA;IACnD,+FAAuE,CAAA;IACvE,yDAAiC,CAAA;AACnC,CAAC,EAfW,oBAAoB,oCAApB,oBAAoB,QAe/B","sourcesContent":["export interface IPnpmSyncCliArgs {\n  prepare: boolean;\n  lockfile: string;\n  store: string;\n}\n\nexport interface IPnpmSyncJson {\n  version: string;\n  postbuildInjectedCopy: {\n    sourceFolder: string;\n    targetFolders: Array<ITargetFolder>;\n  };\n}\n\nexport interface ITargetFolder {\n  folderPath: string;\n  lockfileId?: string;\n}\n\nexport interface ISyncItem {\n  absolutePath: string;\n  isDirectory: boolean;\n  isFile: boolean;\n}\n\n/**\n * @beta\n */\nexport enum LogMessageKind {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  VERBOSE = 'verbose'\n}\n\n/**\n * @beta\n */\nexport enum LogMessageIdentifier {\n  // pnpmSyncPrepareAsync() messages\n  PREPARE_STARTING = 'prepare-starting',\n  PREPARE_ERROR_UNSUPPORTED_FORMAT = 'prepare-error-unsupported-format',\n  PREPARE_ERROR_UNSUPPORTED_PNPM_VERSION = 'prepare-error-unsupported-pnpm-version',\n  PREPARE_PROCESSING = 'prepare-processing',\n  PREPARE_REPLACING_FILE = 'prepare-replacing-file',\n  PREPARE_WRITING_FILE = 'prepare-writing-file',\n  PREPARE_FINISHING = 'prepare-finishing',\n\n  // pnpmSyncCopyAsync() messages\n  COPY_STARTING = 'copy-starting',\n  COPY_ERROR_NO_SYNC_FILE = 'copy-error-no-sync-file',\n  COPY_ERROR_INCOMPATIBLE_SYNC_FILE = 'copy-error-incompatible-sync-file',\n  COPY_FINISHING = 'copy-finishing'\n}\n\n/**\n * @beta\n */\nexport type LogMessageDetails =\n  | {\n      messageIdentifier: LogMessageIdentifier.PREPARE_STARTING;\n      lockfilePath: string;\n      dotPnpmFolder: string;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.PREPARE_ERROR_UNSUPPORTED_FORMAT;\n      lockfilePath: string;\n      lockfileVersion: string | undefined;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.PREPARE_ERROR_UNSUPPORTED_PNPM_VERSION;\n      lockfilePath: string;\n      pnpmVersion: string | undefined;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.PREPARE_PROCESSING;\n      lockfilePath: string;\n      dotPnpmFolder: string;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.PREPARE_REPLACING_FILE;\n      pnpmSyncJsonPath: string;\n      projectFolder: string;\n      actualVersion: string;\n      expectedVersion: string;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.PREPARE_WRITING_FILE;\n      pnpmSyncJsonPath: string;\n      projectFolder: string;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.PREPARE_FINISHING;\n      lockfilePath: string;\n      dotPnpmFolder: string;\n      executionTimeInMs: number;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.COPY_STARTING;\n      pnpmSyncJsonPath: string;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.COPY_ERROR_NO_SYNC_FILE;\n      pnpmSyncJsonPath: string;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.COPY_ERROR_INCOMPATIBLE_SYNC_FILE;\n      pnpmSyncJsonPath: string;\n      actualVersion: string;\n      expectedVersion: string;\n    }\n  | {\n      messageIdentifier: LogMessageIdentifier.COPY_FINISHING;\n      pnpmSyncJsonPath: string;\n      fileCount: number;\n      sourcePath: string;\n      executionTimeInMs: number;\n    };\n\n/**\n * @beta\n */\nexport interface ILogMessageCallbackOptions {\n  message: string;\n  messageKind: LogMessageKind;\n  details: LogMessageDetails;\n}\n\n/**\n * @beta\n */\nexport interface IDependencyMeta {\n  injected?: boolean;\n}\n\n/**\n * @beta\n */\nexport type IVersionSpecifier =\n  | string\n  | {\n      specifier: string;\n      version: string;\n    };\n\n/**\n * Represents the installation plan for a local workspace project.\n * The `\"peerDependencies\"` field is not included in this data structure\n * because PNPM cannot install peer dependency doppelgangers for a local workspace\n * project (since they would need to be represented as injected dependencies).\n * @beta\n */\nexport interface ILockfileImporter {\n  dependencies?: Record<string, IVersionSpecifier>;\n  devDependencies?: Record<string, IVersionSpecifier>;\n  optionalDependencies?: Record<string, IVersionSpecifier>;\n  dependenciesMeta?: Record<string, IDependencyMeta>;\n}\n\n/**\n * @beta\n */\nexport interface ILockfilePackage {\n  /** The list of dependencies and the resolved version */\n  dependencies?: Record<string, string>;\n  /** The list of optional dependencies and the resolved version */\n  optionalDependencies?: Record<string, string>;\n}\n\n/**\n * This interface represents the data structure that is parsed from `pnpm-lock.yaml`\n *\n * @beta\n */\nexport interface ILockfile {\n  /**\n   * The version of the `pnpm-lock.yaml` file format.\n   *\n   * Example: `6.0`\n   */\n  lockfileVersion: number | string;\n  importers: Record<string, ILockfileImporter>;\n  /**\n   * The `packages` section stores the installation plan for external (non-workspace)\n   * packages.  The key is a `node_modules/.pnpm` version path, which in lockfile version 6\n   * encodes the installed package name, package version, and any peer dependency qualifiers.\n   *\n   * Example key: `/webpack-filter-warnings-plugin@1.2.1(webpack@4.47.0)`\n   */\n  packages: Record<string, ILockfilePackage>;\n}\n"]}