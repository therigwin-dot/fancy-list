import { ILogMessageCallbackOptions } from './interfaces';
/**
 * @beta
 */
export interface IPnpmSyncCopyOptions {
    /**
     * Path to the `<project-folder>/node_modules/.pnpm-sync.json` file to be processed.
     * This parameter is required because the caller should efficiently test its existence
     * and can avoid invoking pnpmSync if it is absent.
     */
    pnpmSyncJsonPath: string;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    getPackageIncludedFiles: (packagePath: string) => Promise<string[]>;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    forEachAsyncWithConcurrency: <TItem>(iterable: Iterable<TItem>, callback: (item: TItem) => Promise<void>, options: {
        concurrency: number;
    }) => Promise<void>;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    ensureFolderAsync: (folderPath: string) => Promise<void>;
    /**
     * A callback for reporting events during the operation.
     *
     * @remarks
     * `LogMessageKind.ERROR` events do NOT cause the promise to reject,
     * so they must be handled appropriately.
     */
    logMessageCallback: (options: ILogMessageCallbackOptions) => void;
}
/**
 * For each library project that acts as an injected dependency of other consuming projects
 * within a PNPM workspace, this operation should be invoked whenever that library is rebuilt.
 * It will copy the latest build output into the `node_modules` installation folder.
 *
 * @remarks
 * This operation reads the `.npm-sync.json` file which should have been prepared after
 * `pnpm install` by calling the {@link pnpmSyncPrepareAsync} function.
 *
 * @beta
 */
export declare function pnpmSyncCopyAsync(options: IPnpmSyncCopyOptions): Promise<void>;
//# sourceMappingURL=pnpmSyncCopy.d.ts.map