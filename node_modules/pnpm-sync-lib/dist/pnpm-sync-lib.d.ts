/**
 * This package provides an API for automating the actions performed by the
 * {@link https://www.npmjs.com/package/pnpm-sync | pnpm-sync package}.
 *
 * @packageDocumentation
 */

/**
 * @beta
 */
export declare interface IDependencyMeta {
    injected?: boolean;
}

/**
 * This interface represents the data structure that is parsed from `pnpm-lock.yaml`
 *
 * @beta
 */
export declare interface ILockfile {
    /**
     * The version of the `pnpm-lock.yaml` file format.
     *
     * Example: `6.0`
     */
    lockfileVersion: number | string;
    importers: Record<string, ILockfileImporter>;
    /**
     * The `packages` section stores the installation plan for external (non-workspace)
     * packages.  The key is a `node_modules/.pnpm` version path, which in lockfile version 6
     * encodes the installed package name, package version, and any peer dependency qualifiers.
     *
     * Example key: `/webpack-filter-warnings-plugin@1.2.1(webpack@4.47.0)`
     */
    packages: Record<string, ILockfilePackage>;
}

/**
 * Represents the installation plan for a local workspace project.
 * The `"peerDependencies"` field is not included in this data structure
 * because PNPM cannot install peer dependency doppelgangers for a local workspace
 * project (since they would need to be represented as injected dependencies).
 * @beta
 */
export declare interface ILockfileImporter {
    dependencies?: Record<string, IVersionSpecifier>;
    devDependencies?: Record<string, IVersionSpecifier>;
    optionalDependencies?: Record<string, IVersionSpecifier>;
    dependenciesMeta?: Record<string, IDependencyMeta>;
}

/**
 * @beta
 */
export declare interface ILockfilePackage {
    /** The list of dependencies and the resolved version */
    dependencies?: Record<string, string>;
    /** The list of optional dependencies and the resolved version */
    optionalDependencies?: Record<string, string>;
}

/**
 * @beta
 */
export declare interface ILogMessageCallbackOptions {
    message: string;
    messageKind: LogMessageKind;
    details: LogMessageDetails;
}

/**
 * @beta
 */
export declare interface IPnpmSyncCopyOptions {
    /**
     * Path to the `<project-folder>/node_modules/.pnpm-sync.json` file to be processed.
     * This parameter is required because the caller should efficiently test its existence
     * and can avoid invoking pnpmSync if it is absent.
     */
    pnpmSyncJsonPath: string;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    getPackageIncludedFiles: (packagePath: string) => Promise<string[]>;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    forEachAsyncWithConcurrency: <TItem>(iterable: Iterable<TItem>, callback: (item: TItem) => Promise<void>, options: {
        concurrency: number;
    }) => Promise<void>;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    ensureFolderAsync: (folderPath: string) => Promise<void>;
    /**
     * A callback for reporting events during the operation.
     *
     * @remarks
     * `LogMessageKind.ERROR` events do NOT cause the promise to reject,
     * so they must be handled appropriately.
     */
    logMessageCallback: (options: ILogMessageCallbackOptions) => void;
}

/**
 * @beta
 */
export declare interface IPnpmSyncPrepareOptions {
    /**
     * The path to the `pnpm-lock.yaml` file
     */
    lockfilePath: string;
    /**
     * The path to the PNPM virtual store ("node_modules/.pnpm" folder)
     */
    dotPnpmFolder: string;
    /**
     * A lockfileId that can be used to recognize the `pnpm-lock.yaml`
     */
    lockfileId?: string;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    ensureFolderAsync: (folderPath: string) => Promise<void>;
    /**
     * Environment-provided API to avoid an NPM dependency.
     * The "pnpm-sync" NPM package provides a reference implementation.
     */
    readPnpmLockfile: (lockfilePath: string, options: {
        ignoreIncompatible: boolean;
    }) => Promise<ILockfile | undefined>;
    /**
     * A callback for reporting events during the operation.
     *
     * @remarks
     * `LogMessageKind.ERROR` events do NOT cause the promise to reject,
     * so they must be handled appropriately.
     */
    logMessageCallback: (options: ILogMessageCallbackOptions) => void;
}

/**
 * @beta
 */
export declare type IVersionSpecifier = string | {
    specifier: string;
    version: string;
};

/**
 * @beta
 */
export declare type LogMessageDetails = {
    messageIdentifier: LogMessageIdentifier.PREPARE_STARTING;
    lockfilePath: string;
    dotPnpmFolder: string;
} | {
    messageIdentifier: LogMessageIdentifier.PREPARE_ERROR_UNSUPPORTED_FORMAT;
    lockfilePath: string;
    lockfileVersion: string | undefined;
} | {
    messageIdentifier: LogMessageIdentifier.PREPARE_ERROR_UNSUPPORTED_PNPM_VERSION;
    lockfilePath: string;
    pnpmVersion: string | undefined;
} | {
    messageIdentifier: LogMessageIdentifier.PREPARE_PROCESSING;
    lockfilePath: string;
    dotPnpmFolder: string;
} | {
    messageIdentifier: LogMessageIdentifier.PREPARE_REPLACING_FILE;
    pnpmSyncJsonPath: string;
    projectFolder: string;
    actualVersion: string;
    expectedVersion: string;
} | {
    messageIdentifier: LogMessageIdentifier.PREPARE_WRITING_FILE;
    pnpmSyncJsonPath: string;
    projectFolder: string;
} | {
    messageIdentifier: LogMessageIdentifier.PREPARE_FINISHING;
    lockfilePath: string;
    dotPnpmFolder: string;
    executionTimeInMs: number;
} | {
    messageIdentifier: LogMessageIdentifier.COPY_STARTING;
    pnpmSyncJsonPath: string;
} | {
    messageIdentifier: LogMessageIdentifier.COPY_ERROR_NO_SYNC_FILE;
    pnpmSyncJsonPath: string;
} | {
    messageIdentifier: LogMessageIdentifier.COPY_ERROR_INCOMPATIBLE_SYNC_FILE;
    pnpmSyncJsonPath: string;
    actualVersion: string;
    expectedVersion: string;
} | {
    messageIdentifier: LogMessageIdentifier.COPY_FINISHING;
    pnpmSyncJsonPath: string;
    fileCount: number;
    sourcePath: string;
    executionTimeInMs: number;
};

/**
 * @beta
 */
export declare enum LogMessageIdentifier {
    PREPARE_STARTING = "prepare-starting",
    PREPARE_ERROR_UNSUPPORTED_FORMAT = "prepare-error-unsupported-format",
    PREPARE_ERROR_UNSUPPORTED_PNPM_VERSION = "prepare-error-unsupported-pnpm-version",
    PREPARE_PROCESSING = "prepare-processing",
    PREPARE_REPLACING_FILE = "prepare-replacing-file",
    PREPARE_WRITING_FILE = "prepare-writing-file",
    PREPARE_FINISHING = "prepare-finishing",
    COPY_STARTING = "copy-starting",
    COPY_ERROR_NO_SYNC_FILE = "copy-error-no-sync-file",
    COPY_ERROR_INCOMPATIBLE_SYNC_FILE = "copy-error-incompatible-sync-file",
    COPY_FINISHING = "copy-finishing"
}

/**
 * @beta
 */
export declare enum LogMessageKind {
    INFO = "info",
    WARNING = "warning",
    ERROR = "error",
    VERBOSE = "verbose"
}

/**
 * For each library project that acts as an injected dependency of other consuming projects
 * within a PNPM workspace, this operation should be invoked whenever that library is rebuilt.
 * It will copy the latest build output into the `node_modules` installation folder.
 *
 * @remarks
 * This operation reads the `.npm-sync.json` file which should have been prepared after
 * `pnpm install` by calling the {@link pnpmSyncPrepareAsync} function.
 *
 * @beta
 */
export declare function pnpmSyncCopyAsync(options: IPnpmSyncCopyOptions): Promise<void>;

/**
 * Get .pnpm-sync.json version
 *
 * @beta
 */
export declare function pnpmSyncGetJsonVersion(): string;

/**
 * For each workspace project has injected dependencies in a PNPM workspace, this API
 * should be invoked to prepare its `.pnpm-sync.json` file.  While building projects,
 * that file will be used by {@link pnpmSyncCopyAsync} to recopy the build outputs into
 * injected dependency installation folders under the `node_modules` folder.
 *
 * @beta
 */
export declare function pnpmSyncPrepareAsync(options: IPnpmSyncPrepareOptions): Promise<void>;

export { }
