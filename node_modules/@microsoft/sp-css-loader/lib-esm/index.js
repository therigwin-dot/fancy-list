/**
 * Inspired by css-loader
 */ import * as path from 'path';
import * as loaderUtils from 'loader-utils';
import * as cssLoaderPlugins from 'css-loader/dist/plugins';
import CssLoaderWarning from 'css-loader/dist/Warning';
import CssSyntaxError from 'css-loader/dist/CssSyntaxError';
import { default as postcss } from 'postcss';
import cssnano from 'cssnano';
import modulesValues from 'postcss-modules-values';
import localByDefault from 'postcss-modules-local-by-default';
import extractImports from 'postcss-modules-extract-imports';
import modulesScope from 'postcss-modules-scope';
import Autoprefixer from 'autoprefixer';
import { Import } from '@rushstack/node-core-library';
/**
 * @public
 */ export default function loaderFn(source) {
    const callback = this.async();
    if (!callback) {
        throw new Error('Plugin is async, but a callback was not provided');
    }
    processCssAsync.call(this, source, this.resourcePath).then((result)=>callback(undefined, result)).catch((error)=>callback(error));
}
const GET_URL_IMPORT_NAME = '___CSS_LOADER_GET_URL_IMPORT___';
const LOAD_THEMED_STYLES_IMPORT_NAME = '__LOAD_THEMED_STYLES__';
async function processCssAsync(content, resourcePath) {
    const options = this.getOptions();
    const processor = getPostcssProcessor(options.generateCssClassName, options.production);
    let result;
    try {
        result = await processor.process(content, {
            from: resourcePath,
            to: resourcePath
        });
    } catch (error) {
        if (error.name === 'CssSyntaxError') {
            throw new CssSyntaxError(error);
        } else {
            throw error;
        }
    }
    for (const warning of result.warnings()){
        this.emitWarning(new CssLoaderWarning(warning));
    }
    const loadThemedStylesModulePath = options.loadThemedStylesImportPath || getLoadThemedStylesModulePath(this.context);
    const importLines = [
        `import * as ${LOAD_THEMED_STYLES_IMPORT_NAME} from ${JSON.stringify(loadThemedStylesModulePath)};`
    ];
    const codeLines = [];
    const exportLines = [];
    let getUrlHasBeenImported = false;
    let urlImportCounter = 0;
    let cssText = JSON.stringify(result.content);
    for (const message of result.messages){
        switch(message.type){
            case 'import':
                {
                    const importMessage = message.value;
                    if (importMessage.type !== 'url') {
                        throw new Error(`Only the "url" import type is supported. Encountered "${importMessage.type}"`);
                    }
                    if (!getUrlHasBeenImported) {
                        const getUrlModulePath = getGetUrlModulePath(this.context);
                        importLines.push(`import ${GET_URL_IMPORT_NAME} from ${JSON.stringify(getUrlModulePath)};`);
                        getUrlHasBeenImported = true;
                    }
                    const importName = `__URL_IMPORT_${urlImportCounter++}__`;
                    importLines.push(`import ${importName} from ${JSON.stringify(importMessage.url)}`);
                    codeLines.push(`var ${importMessage.replacementName} = ${GET_URL_IMPORT_NAME}(${importName})`);
                    break;
                }
            case 'export':
                {
                    const exportMessage = message.value;
                    const exportName = exportMessage.name.match(/^[A-z_][A-z0-9_]*$/) ? exportMessage.name : JSON.stringify(exportMessage.name);
                    exportLines.push(`  ${exportName}: ${JSON.stringify(exportMessage.value)}`);
                    break;
                }
            case 'replacer':
                {
                    const replacerMessage = message.value;
                    if (replacerMessage.type !== 'url') {
                        throw new Error(`Only the "url" replacer type is supported. Encountered "${replacerMessage.type}"`);
                    }
                    cssText = cssText.replace(// eslint-disable-next-line @rushstack/security/no-unsafe-regexp
                    new RegExp(replacerMessage.replacementName, 'g'), `" + ${replacerMessage.replacementName} + "`);
                    break;
                }
            case 'removal':
                {
                    if (message.plugin !== 'postcss-discard-empty') {
                        throw new Error('Unknown source of "removal" message type encountered in simple-css-loader.');
                    }
                    break;
                }
            case 'warning':
                {
                    this.emitWarning(message.value);
                    break;
                }
            default:
                {
                    throw new Error(`Unexpected message type: "${message.type}"`);
                }
        }
    }
    if (options.async) {
        codeLines.push(`${LOAD_THEMED_STYLES_IMPORT_NAME}.loadStyles(${cssText}, true);`);
    } else {
        codeLines.push(`${LOAD_THEMED_STYLES_IMPORT_NAME}.loadStyles(${cssText});`);
    }
    const allLines = [
        '// Imports',
        ...importLines,
        '',
        ...codeLines,
        ''
    ];
    if (exportLines.length > 0) {
        allLines.push('// Exports', 'export default {', exportLines.join(',\n'), '};', '');
    }
    return allLines.join('\n');
}
const PRE_MODULE_PLUGINS = [
    cssnano({
        preset: 'default'
    }),
    Autoprefixer({
        overrideBrowserslist: [
            '> 1%',
            'ie >= 11'
        ]
    })
];
const POST_MODULE_PLUGINS = [
    cssLoaderPlugins.icssParser({}),
    cssLoaderPlugins.importParser({}),
    cssLoaderPlugins.urlParser({
        filter: (item)=>{
            // Don't try to resolve data URLs
            return loaderUtils.isUrlRequest(item) && !item.startsWith('data:');
        }
    })
];
const POSTCSS_PROCESSOR_CACHE = new Map();
function getPostcssProcessor(generateCssClassName, production) {
    let processor = POSTCSS_PROCESSOR_CACHE.get(generateCssClassName);
    if (!processor) {
        let plugins;
        const localPreModulePlugins = [];
        if (generateCssClassName) {
            plugins = [
                ...PRE_MODULE_PLUGINS,
                ...localPreModulePlugins,
                modulesValues,
                localByDefault({
                    mode: 'local'
                }),
                extractImports(),
                modulesScope({
                    generateScopedName: (existingClassName, cssFilePath, cssContent)=>{
                        return generateCssClassName(existingClassName, cssFilePath, cssContent, production);
                    }
                }),
                ...POST_MODULE_PLUGINS
            ];
        } else {
            plugins = [
                ...PRE_MODULE_PLUGINS,
                ...localPreModulePlugins,
                ...POST_MODULE_PLUGINS
            ];
        }
        processor = postcss(plugins);
        POSTCSS_PROCESSOR_CACHE.set(generateCssClassName, processor);
    }
    return processor;
}
const CSS_LOADER_PACKAGE_PATH = Import.resolvePackage({
    packageName: 'css-loader',
    baseFolderPath: __dirname
});
const CSS_LOADER_RELATIVE_PATH_CACHE = new Map();
function getGetUrlModulePath(context) {
    let relativePath = CSS_LOADER_RELATIVE_PATH_CACHE.get(context);
    if (!relativePath) {
        relativePath = path.relative(context, CSS_LOADER_PACKAGE_PATH);
        relativePath = relativePath.replace(/\\/g, '/');
        CSS_LOADER_RELATIVE_PATH_CACHE.set(context, relativePath);
    }
    return path.posix.join(relativePath, 'dist', 'runtime', 'getUrl.js');
}
let LOAD_THEMED_STYLES_PATH;
const LOAD_THEMED_STYLES_RELATIVE_PATH_CACHE = new Map();
function getLoadThemedStylesModulePath(context) {
    let relativePath = LOAD_THEMED_STYLES_RELATIVE_PATH_CACHE.get(context);
    if (!relativePath) {
        if (!LOAD_THEMED_STYLES_PATH) {
            LOAD_THEMED_STYLES_PATH = Import.resolvePackage({
                packageName: '@microsoft/load-themed-styles',
                baseFolderPath: __dirname
            });
        }
        relativePath = path.relative(context, LOAD_THEMED_STYLES_PATH);
        relativePath = relativePath.replace(/\\/g, '/');
        LOAD_THEMED_STYLES_RELATIVE_PATH_CACHE.set(context, relativePath);
    }
    return path.posix.join(relativePath, 'lib-es6', 'index.js');
}

//#sourceMappingUrl=./index.js.map