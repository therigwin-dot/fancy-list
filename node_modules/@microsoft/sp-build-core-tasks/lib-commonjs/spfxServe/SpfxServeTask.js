"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEBUG_MANIFESTS_QUERY_PARAMETER: function() {
        return DEBUG_MANIFESTS_QUERY_PARAMETER;
    },
    SpfxServeTask: function() {
        return SpfxServeTask;
    }
});
const _colors = /*#__PURE__*/ _interop_require_default(require("colors"));
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _url = require("url");
const _ServeTask = require("@microsoft/gulp-core-build-serve/lib/ServeTask");
const _spfxheftplugins = require("@microsoft/spfx-heft-plugins");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const CONFIG_CLI_PARAMETER = 'config';
const DEBUG_MANIFESTS_QUERY_PARAMETER = 'debugManifestsFile';
const LOAD_SPFX_QUERY_PARAMETER = 'loadSPFX';
const CUSTOM_ACTIONS_QUERY_PARAMETER = 'customActions';
const FIELD_CUSTOMIZERS_QUERY_PARAMETER = 'fieldCustomizers';
const PROPERTIES_QUERY_PARAMETER = 'properties';
const ROOT_FOLDER_QUERY_PARAMETER = 'RootFolder';
const TENANT_DOMAIN_PLACEHOLDER = '{tenantdomain}';
class SpfxServeTask extends _ServeTask.ServeTask {
    async executeTask(gulp) {
        if (!this.buildConfig.properties) {
            this.buildConfig.properties = {};
        }
        const buildProperties = this.buildConfig.properties;
        buildProperties.serveMode = true;
        const selectedServeConfiguration = this.buildConfig.args[CONFIG_CLI_PARAMETER];
        let serveConfiguration;
        if (selectedServeConfiguration) {
            this.logVerbose(`Attempting to use serve configuration: "${selectedServeConfiguration}"`);
            serveConfiguration = this.taskConfig.serveConfigurations?.[selectedServeConfiguration];
            if (!serveConfiguration) {
                this.logWarning(`Selected serve configuration "${selectedServeConfiguration}" is not present in the ` + 'task configuration. Falling back to default configuration.');
            }
        }
        if (!serveConfiguration && this.taskConfig.serveConfigurations) {
            serveConfiguration = this.taskConfig.serveConfigurations.default;
            if (serveConfiguration && this.taskConfig.initialPage !== this._defaultInitialPage) {
                this.logWarning('Both a default serve configuration and an initialPage are specified. In this task, ' + 'the default configuration takes precedence. Consider removing the initialPage property.');
            }
        }
        if (serveConfiguration) {
            this.taskConfig.initialPage = this._convertServeConfigurationToPageUrl(serveConfiguration);
        }
        this.log(`To load your scripts, use this query string: ` + `${_colors.default.yellow(`?debug=true&noredir=true&${DEBUG_MANIFESTS_QUERY_PARAMETER}=${this._getManifestJsUrl().href}`)}`);
        this.taskConfig.initialPage = this._getPlaceHolderDomainName(this.taskConfig.initialPage);
        // We're using ipAddress instead of hostname if provided to start the server.
        if (this.taskConfig.ipAddress) {
            this.taskConfig.hostname = this.taskConfig.ipAddress;
        }
        return await super.executeTask(gulp);
    }
    loadSchema() {
        return (0, _spfxheftplugins._loadServeSchemaJson)();
    }
    _getConfigFilePath() {
        // Make sure this task uses the "serve.json" config file, not "spfx-serve.json"
        return _path.join(_path.dirname(super._getConfigFilePath()), 'serve.json');
    }
    _convertServeConfigurationToPageUrl(serveConfiguration) {
        if (!serveConfiguration.pageUrl) {
            this.logError('The pageUrl property of the selected serve configuration must be set.');
            return undefined;
        }
        const url = new _url.URL(serveConfiguration.pageUrl);
        if (!url.searchParams.has(DEBUG_MANIFESTS_QUERY_PARAMETER)) {
            url.searchParams.set(DEBUG_MANIFESTS_QUERY_PARAMETER, this._getManifestJsUrl().href);
        }
        if (serveConfiguration.customActions || serveConfiguration.fieldCustomizers || serveConfiguration.formCustomizer) {
            if (!url.searchParams.has(LOAD_SPFX_QUERY_PARAMETER)) {
                url.searchParams.set(LOAD_SPFX_QUERY_PARAMETER, 'true');
            }
        }
        if (serveConfiguration.customActions) {
            url.searchParams.set(CUSTOM_ACTIONS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.customActions));
        }
        if (serveConfiguration.fieldCustomizers) {
            url.searchParams.set(FIELD_CUSTOMIZERS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.fieldCustomizers));
        }
        if (serveConfiguration.formCustomizer) {
            for (const [key, value] of Object.entries(serveConfiguration.formCustomizer)){
                if (value) {
                    if (key === PROPERTIES_QUERY_PARAMETER) {
                        url.searchParams.set(key, JSON.stringify(value));
                    } else if (key === ROOT_FOLDER_QUERY_PARAMETER) {
                        url.searchParams.set(key, decodeURIComponent(value));
                    } else {
                        url.searchParams.set(key, value);
                    }
                }
            }
        }
        return url.href;
    }
    _getManifestJsUrl() {
        const manifestsJsUrl = this._getBaseServeUrl();
        manifestsJsUrl.pathname = 'temp/build/manifests.js';
        return manifestsJsUrl;
    }
    _getBaseServeUrl() {
        const taskConfig = this.taskConfig;
        taskConfig.hostname = this._getPlaceHolderDomainName(taskConfig.hostname);
        return new _url.URL(`${taskConfig.https ? 'https' : 'http'}://${taskConfig.hostname}:${taskConfig.port}/`);
    }
    _getPlaceHolderDomainName(placeHolderDomainName) {
        const openBrowser = process.argv.indexOf('--nobrowser') === -1;
        if (!openBrowser || !placeHolderDomainName) {
            // early return
            return placeHolderDomainName;
        }
        // eslint-disable-next-line @rushstack/security/no-unsafe-regexp
        const tenantDomainRegEx = new RegExp(TENANT_DOMAIN_PLACEHOLDER, 'i');
        if (!tenantDomainRegEx.test(placeHolderDomainName)) {
            // another early return
            return placeHolderDomainName;
        }
        if (!process.env.SPFX_SERVE_TENANT_DOMAIN) {
            this.logWarning('Placeholder {tenantDomain} was found in serve.json but OS variable SPFX_SERVE_TENANT_DOMAIN is not set.' + ' Either set the environment variable or update the serve.json initial page url.');
            return placeHolderDomainName;
        }
        return placeHolderDomainName.replace(tenantDomainRegEx, process.env.SPFX_SERVE_TENANT_DOMAIN);
    }
    constructor(){
        super('spfx-serve', {});
        _define_property(this, "_defaultInitialPage", void 0);
        this._defaultInitialPage = this.taskConfig.initialPage;
    }
}

//#sourceMappingUrl=./SpfxServeTask.js.map