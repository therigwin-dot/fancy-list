"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var DiagnosticsSettingsManager_1 = tslib_1.__importDefault(require("./DiagnosticsSettingsManager"));
var TraceLogger_1 = tslib_1.__importDefault(require("./Api/Trace/TraceLogger"));
/**
 * Diagnostics class initializes the diagnostics pipeline and connect to backend server.
 * Diagnostics contains a set of internal APIs that collects data and reports data via
 * the pipeline. The APIs consist of
 *  -- TraceLogger - for logging diagnostic information
 *
 * @internal
 */
var Diagnostics = /** @class */ (function () {
    function Diagnostics() {
    }
    /**
     * Initializes the diagnostics pipelines
     */
    Diagnostics.initialize = function (settings) {
        if (!Diagnostics._isInitialized) {
            DiagnosticsSettingsManager_1.default.initialize(settings);
            TraceLogger_1.default.shouldWriteToConsole = settings.enableConsoleLog;
            TraceLogger_1.default._addHandler({
                log: function (traceEvent) {
                    sp_core_library_1.Log.info(traceEvent.eventName, "EventName:".concat(traceEvent.data.toString(), ", ResultCode: ").concat(traceEvent.resultCode));
                },
                verbose: function (traceEvent) {
                    sp_core_library_1.Log.verbose(traceEvent.eventName, traceEvent.data.toString());
                }
            });
            Diagnostics._isInitialized = true;
        }
    };
    Object.defineProperty(Diagnostics, "isInitialized", {
        /**
         * Returns true if diagnostics has been already initialized.
         */
        get: function () {
            return this._isInitialized;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Used to refresh the telemetry settings when they change from the application
     * (i.e. when an in-place navigation to a different site happens)
     * @param settings - the subset of the telemetry settings to be updated
     */
    Diagnostics.updateSettings = function (settings) {
        DiagnosticsSettingsManager_1.default.updateSettings(settings);
    };
    /**
     * Get the authoring session client count info from the extraDiagnosticsInfo from Diagnostics settings
     * @deprecated - Read from @see getExtraDiagnosticInfo
     * @returns the number of clients in the authoring session
     */
    Diagnostics.getAuthoringSessionClientCountInfo = function () {
        var _a, _b;
        return (_b = (_a = DiagnosticsSettingsManager_1.default.settings) === null || _a === void 0 ? void 0 : _a.extraDiagnosticInfo) === null || _b === void 0 ? void 0 : _b.authoringSessionClientCount;
    };
    /**
     * Get the extra diagnostic info for logging purpose.
     * @internal
     * @returns @see IExtraDiagnosticInfo
     */
    Diagnostics._getExtraDiagnosticInfo = function () {
        var _a;
        return (_a = DiagnosticsSettingsManager_1.default.settings) === null || _a === void 0 ? void 0 : _a.extraDiagnosticInfo;
    };
    /**
     * Used to delete telemetry settings when they are no longer needed or need to be reset.
     * The current updateSettings implementation does not support un-setting previously
     * set settings values.
     * @param settings - the subset of the telemetry settings to be cleared.
     */
    Diagnostics.clearSettings = function (settings) {
        DiagnosticsSettingsManager_1.default.clearSettings(settings);
    };
    Diagnostics._isInitialized = false;
    return Diagnostics;
}());
exports.default = Diagnostics;
//# sourceMappingURL=Diagnostics.js.map