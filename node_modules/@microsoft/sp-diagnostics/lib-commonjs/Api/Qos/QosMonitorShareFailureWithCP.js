"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QosMonitorShareFailureWithCP = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var Diagnostics_1 = tslib_1.__importDefault(require("../../Diagnostics"));
var Killswitches_1 = require("../../common/Killswitches");
var QosMonitor_1 = tslib_1.__importDefault(require("./QosMonitor"));
var QosResultType_1 = require("./QosResultType");
var index_1 = require("../../index");
/**
 * Monitor which handles failures for QosMonitor and also invokes Customer Promise Handlers to record failure
 * @internal
 */
var QosMonitorShareFailureWithCP = /** @class */ (function (_super) {
    tslib_1.__extends(QosMonitorShareFailureWithCP, _super);
    /**
     * Creates a QoS monitor and also registers the Customer promise handlers to notify in case of failures
     * @internal
     *
     * @param scenarioName  - Unique name of the QoS scenario
     * @param copyToEngagement - indicate whether this data should be used as Engagement as well.
     * @param extraDataForCustomerPromise - Holds extra information about Customer Promise handlers to invoke
     * and error information where failures are logged
     */
    function QosMonitorShareFailureWithCP(scenarioName, copyToEngagement, extraDataForCustomerPromise, copyToCosmos) {
        if (copyToEngagement === void 0) { copyToEngagement = false; }
        if (copyToCosmos === void 0) { copyToCosmos = false; }
        var _this = _super.call(this, scenarioName, /* copyToCosmos */ copyToCosmos, /* copyToInterana */ copyToEngagement) || this;
        _this._extraDataForCustomerPromise = extraDataForCustomerPromise;
        return _this;
    }
    /**
     * QoS monitor ends with failure and invokes the Customer Promise handlers
     * to log a failure
     * @internal
     *
     * You will see failure tag: SPPages.ScenarioName.<failuretag>.Failure.
     * <failuretag> will be filled with param tagName
     */
    QosMonitorShareFailureWithCP.prototype.writeUnexpectedFailure = function (tagNameSuffix, ex, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    extraData) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultUnexpected'; }
        _super.prototype.writeUnexpectedFailure.call(this, tagNameSuffix, ex, extraData);
        this._logCustomerPromiseFailure((ex === null || ex === void 0 ? void 0 : ex.message) || 'DefaultErrorMessage', tagNameSuffix, QosResultType_1.QosResultType.Failure, extraData);
    };
    /**
     * QoS monitor ends with expected failure and invokes the Customer Promise handlers
     * to log an expected failure
     * @internal
     *
     * You will see success tag: ModernPublish.RenderPublishPage.<failuretag>.ExpectedFailure.
     * <failuretag> will be filled with param tagName
     */
    QosMonitorShareFailureWithCP.prototype.writeExpectedFailure = function (tagNameSuffix, ex, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    extraData, skipLoggingCustomerPromiseFailure) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultExpected'; }
        if (skipLoggingCustomerPromiseFailure === void 0) { skipLoggingCustomerPromiseFailure = false; }
        _super.prototype.writeExpectedFailure.call(this, tagNameSuffix, ex, extraData);
        if (!skipLoggingCustomerPromiseFailure) {
            this._logCustomerPromiseFailure((ex === null || ex === void 0 ? void 0 : ex.message) || 'DefaultErrorMessage', tagNameSuffix, QosResultType_1.QosResultType.ExpectedFailure, extraData);
        }
    };
    /**
     * Invokes the registered Customer Promise Handlers by using the passed in serviceKey
     * @param errorMessage - Information to indicate which scenario failed.
     * @param errorScenario -Additional error details describing the failure from the module.
     * @param resultType - ResultTypeEnum used to indicate expected or unexpected failure.
     * @param extraData - Additional information to be logged, which might include pageType and/or errorStack
     */
    QosMonitorShareFailureWithCP.prototype._logCustomerPromiseFailure = function (errorMessage, errorScenario, resultType, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    extraData) {
        if (resultType === void 0) { resultType = QosResultType_1.QosResultType.Failure; }
        if (this._extraDataForCustomerPromise) {
            this._extraDataForCustomerPromise.forEach(function (extraHandlerInfo) {
                var logFailure = extraHandlerInfo.logFailure, veto = extraHandlerInfo.veto;
                var errorModuleName = extraHandlerInfo.errorModuleName;
                if (!(0, Killswitches_1.isLogAuthoringPhaseKSActive)()) {
                    errorModuleName += getAuthoringSuffix();
                }
                else {
                    var authoringSessionClientCount = Diagnostics_1.default.getAuthoringSessionClientCountInfo();
                    if (authoringSessionClientCount && authoringSessionClientCount > 1) {
                        errorModuleName += " with Multiple Users";
                    }
                    else if (!authoringSessionClientCount) {
                        errorModuleName += getLegacyAuthoringSuffix();
                    }
                }
                var errorDetailsForCP = {
                    errorCode: errorModuleName,
                    errorScenario: errorScenario,
                    errorMessage: errorMessage,
                    resultType: resultType,
                    pageType: extraData === null || extraData === void 0 ? void 0 : extraData.pageType,
                    errorStack: extraData === null || extraData === void 0 ? void 0 : extraData.errorStack,
                    veto: veto
                };
                logFailure(errorDetailsForCP);
            });
        }
    };
    return QosMonitorShareFailureWithCP;
}(QosMonitor_1.default));
exports.QosMonitorShareFailureWithCP = QosMonitorShareFailureWithCP;
function getAuthoringSuffix() {
    var extraDiagnosticInfo = index_1._Diagnostics._getExtraDiagnosticInfo();
    if (!extraDiagnosticInfo || !extraDiagnosticInfo.hasAuthoringStarted) {
        return '';
    }
    else if (!extraDiagnosticInfo.authoringSessionClientCount) {
        return extraDiagnosticInfo.isAuthoringUsingDDS
            ? " in Legacy Authoring (DDS)"
            : ' in Legacy Authoring (no DDS)';
    }
    else if (extraDiagnosticInfo.authoringSessionClientCount > 1) {
        return ' with Multiple Users';
    }
    else {
        return '';
    }
}
function getLegacyAuthoringSuffix() {
    return sp_core_library_1._SPFlight.isEnabled(/*WEXLegacyAuthoringOnDDS */ 61002)
        ? " in Legacy Authoring (DDS enabled)"
        : ' in Legacy Authoring';
}
//# sourceMappingURL=QosMonitorShareFailureWithCP.js.map