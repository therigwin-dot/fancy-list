"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var ms_graph_v3_bundle_1 = require("@ms/ms-graph-v3-bundle");
var sp_http_base_1 = require("@microsoft/sp-http-base");
var Killswitches_1 = require("./common/Killswitches");
var MSGraphAuthenticationProvider_1 = require("./MSGraphAuthenticationProvider");
/**
 * MSGraphClient is used to perform REST calls against Microsoft Graph.
 *
 * @remarks The Microsoft Graph JavaScript client library is a lightweight wrapper around the
 * Microsoft Graph API. This class allows developers to start making REST calls to MSGraph without
 * needing to initialize the the MSGraph client library. If a custom configuration is desired,
 * the MSGraphClient api function needs to be provided with that custom configuration for
 * every request.
 *
 * For more information: {@link https://github.com/microsoftgraph/msgraph-sdk-javascript}
 *
 * @public
 */
var MSGraphClientV3 = /** @class */ (function () {
    /**
     * @param serviceScope - Provides services for the MSGraphClient to consume.
     *
     * @internal
     */
    function MSGraphClientV3(serviceScope, options, clientOptions, internalClient) {
        var _this = this;
        this._isInternal = false;
        serviceScope.whenFinished(function () {
            if (!MSGraphClientV3._graphBaseUrl) {
                MSGraphClientV3._graphBaseUrl = serviceScope
                    .consume(sp_http_base_1._GraphHttpClientContext.serviceKey)
                    .getGraphEndpointUrl();
            }
            if (!(0, Killswitches_1.isPassSdkVersionKSActivated)()) {
                var clientManifestData = serviceScope.consume(sp_core_library_1._ClientManifestData.serviceKey);
                _this._consumerComponentManifest = clientManifestData.manifest;
            }
            if (internalClient) {
                _this._isInternal = true;
                if (!MSGraphClientV3._internalInstance) {
                    MSGraphClientV3._internalInstance = _this._createInternalGraphClientInstance(sp_http_base_1._AadTokenProviders.configurable, options);
                }
            }
            else if (!MSGraphClientV3._instance) {
                if (clientOptions !== undefined) {
                    MSGraphClientV3._instance = _this._createGraphClientInstanceWithMiddleware(sp_http_base_1._AadTokenProviders.configurable, clientOptions);
                }
                else {
                    MSGraphClientV3._instance = _this._createGraphClientInstance(sp_http_base_1._AadTokenProviders.configurable, options);
                }
            }
        });
    }
    /**
     * All calls to Microsoft Graph are chained together starting with the api function.
     *
     * @remarks Path supports the following formats:
     * * me
     * * /me
     * * https://graph.microsoft.com/v1.0/me
     * * https://graph.microsoft.com/beta/me
     * * me/events?$filter=startswith(subject, 'ship')
     *
     * The authProvider and baseUrl option should not be used, as they have already been
     * provided by the framework. See the official documentation here:
     * https://github.com/microsoftgraph/msgraph-sdk-javascript
     *
     * @param path - The path for the request to MSGraph.
     */
    MSGraphClientV3.prototype.api = function (path) {
        sp_core_library_1.Validate.isNonemptyString(path, 'path');
        if (this._isInternal) {
            return MSGraphClientV3._internalInstance.api(path);
        }
        return MSGraphClientV3._instance.api(path);
    };
    Object.defineProperty(MSGraphClientV3.prototype, "client", {
        /**
         * Gets the instance of the instantiated Client object from Microsoft Graph SDK.
         */
        get: function () {
            if (this._isInternal) {
                return MSGraphClientV3._internalInstance;
            }
            return MSGraphClientV3._instance;
        },
        enumerable: false,
        configurable: true
    });
    MSGraphClientV3.prototype._createGraphClientInstance = function (tokenProvider, options) {
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClientV3.CreateGraphClientInstance');
        var graphClient;
        try {
            graphClient = this._createClientInstance(tslib_1.__assign(tslib_1.__assign({}, options), { authProvider: undefined }), tokenProvider, false);
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure(e.message, e);
            throw e;
        }
        return graphClient;
    };
    MSGraphClientV3.prototype._createGraphClientInstanceWithMiddleware = function (tokenProvider, options) {
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClientV3.CreateGraphClientInstanceWithMiddleware');
        var graphClient;
        try {
            graphClient = this._createClientInstance(options, tokenProvider, false);
            qosMonitor.writeSuccess();
            return graphClient;
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure(e.message, e);
            throw e;
        }
    };
    MSGraphClientV3.prototype._createInternalGraphClientInstance = function (tokenProvider, options) {
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClientV3.CreateInternalGraphClientInstance');
        var graphClient;
        try {
            graphClient = this._createClientInstance(tslib_1.__assign(tslib_1.__assign({}, options), { authProvider: undefined }), tokenProvider, true);
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure(e.message, e);
            throw e;
        }
        return graphClient;
    };
    MSGraphClientV3.prototype._createClientInstance = function (options, tokenProvider, isInternal) {
        var clientOptions = options || {};
        clientOptions.baseUrl = MSGraphClientV3._graphBaseUrl;
        var middlewareChain;
        if (!clientOptions.middleware) {
            // creating default chain
            middlewareChain = ms_graph_v3_bundle_1.MiddlewareFactory.getDefaultMiddlewareChain(new MSGraphAuthenticationProvider_1.MSGraphAuthenticationProvider(tokenProvider, MSGraphClientV3._graphBaseUrl, isInternal));
        }
        else {
            // a developer has provided middleware(s)
            var authMiddleware = new ms_graph_v3_bundle_1.AuthenticationHandler(new MSGraphAuthenticationProvider_1.MSGraphAuthenticationProvider(tokenProvider, MSGraphClientV3._graphBaseUrl, isInternal));
            middlewareChain = [authMiddleware];
            if (Array.isArray(clientOptions.middleware)) {
                middlewareChain.push.apply(middlewareChain, clientOptions.middleware);
            }
            else {
                middlewareChain.push(clientOptions.middleware);
            }
        }
        if (!(0, Killswitches_1.isPassSdkVersionKSActivated)() && this._consumerComponentManifest) {
            if (!clientOptions.fetchOptions) {
                clientOptions.fetchOptions = {};
            }
            if (!clientOptions.fetchOptions.headers) {
                clientOptions.fetchOptions.headers = {};
            }
            var sdkVersionValue = "SPFx/".concat(this._consumerComponentManifest.alias, "/").concat(this._consumerComponentManifest.id, "/Is3PRequest:").concat(this._consumerComponentManifest.isInternal ? '0' : '1');
            var headers = clientOptions.fetchOptions.headers;
            if (Array.isArray(headers)) {
                var sdkVersionHeaderIndex = headers.findIndex(function (header) { return header[0] === 'SdkVersion'; });
                if (sdkVersionHeaderIndex === -1) {
                    headers.push(['SdkVersion', sdkVersionValue]);
                }
                else {
                    headers[sdkVersionHeaderIndex][1] += ", ".concat(sdkVersionValue);
                }
            }
            else if (headers instanceof Headers) {
                headers.has('SdkVersion')
                    ? headers.set('SdkVersion', "".concat(headers.get('SdkVersion'), ", ").concat(sdkVersionValue))
                    : headers.set('SdkVersion', sdkVersionValue);
            }
            else {
                headers.SdkVersion = headers.SdkVersions
                    ? "".concat(headers.SdkVersion, ", ").concat(sdkVersionValue)
                    : sdkVersionValue;
            }
        }
        // we can add more middleware to the end of the chain here
        clientOptions.middleware = middlewareChain;
        if (!(0, Killswitches_1.isCustomHostsKSActivated)()) {
            try {
                var url = new URL(MSGraphClientV3._graphBaseUrl);
                clientOptions.customHosts = new Set([url.host]);
            }
            catch (e) {
                var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClientV3.CustomHostsAdditionsFailed');
                qosMonitor.writeUnexpectedFailure(e.message, e);
            }
        }
        return ms_graph_v3_bundle_1.Client.initWithMiddleware(clientOptions);
    };
    return MSGraphClientV3;
}());
exports.default = MSGraphClientV3;
//# sourceMappingURL=MSGraphClientV3.js.map