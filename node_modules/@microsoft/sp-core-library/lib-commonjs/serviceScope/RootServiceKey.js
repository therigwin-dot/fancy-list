"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ServiceKey_1 = tslib_1.__importDefault(require("./ServiceKey"));
/**
 * The RootServiceKey is a lookup key that is used when calling {@link ServiceScope.consume}
 * to fetch a dependency that is ever expected to only be created or provided once.
 *
 * @remarks
 * The lookup id for a RootServiceKey will be same as the name of the key, and every RootServiceKey
 * will be placed at the root of a ServiceScope (ensuring that it will always be searchable
 * within a ServiceScope). These are the only differences between a ServiceKey and a RootServiceKey.
 *
 * @alpha
 */
var RootServiceKey = /** @class */ (function (_super) {
    tslib_1.__extends(RootServiceKey, _super);
    function RootServiceKey() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A flag that indicates whether this service key is a root service.
         *
         * @internal
         */
        _this._isRootService = true;
        return _this;
    }
    /**
     * returns the Root Service Key's id.
     *
     * @remarks
     * The lookup id for a RootServiceKey will be same as the name of the key
     *
     * @param name - A name such as "my-package.IMyService" which should be unique across packages.
     * @returns the root service key's id
     */
    RootServiceKey._generateServiceId = function (name) {
        return name;
    };
    return RootServiceKey;
}(ServiceKey_1.default));
exports.default = RootServiceKey;
//# sourceMappingURL=RootServiceKey.js.map