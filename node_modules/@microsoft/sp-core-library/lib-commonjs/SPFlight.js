"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var SPKillSwitch_1 = tslib_1.__importDefault(require("./SPKillSwitch"));
var Environment_1 = tslib_1.__importStar(require("./Environment"));
// This character is allowed to go unencoded in a URL and commonly represents "NOT" logic in boolean algebra
// Reference: http://www.faqs.org/rfcs/rfc1738.html
var DISABLED_FLIGHT_PREFIX = '!';
// Debug flight id. This flight is only enabled for internal Microsoft tenants like the eDog tenant. This flight
// is used for debug level testing and should not be enabled for PROD customer tenants due security reasons.
// Enabling this flight on PROD customer tenants can deem them vulnerable to script injection.
var SPFX_DEBUG_FLIGHT_ID = 205;
// Debug flight id. This flight is only enabled for internal Microsoft tenants like the eDog tenant. This flight
// is used for debug level testing and should not be enabled for PROD customer tenants due security reasons.
// Enabling this flight on PROD customer tenants can deem them vulnerable to script injection. This flight is
// intended to be used as a replacement for the SPFX_DEBUG_FLIGHT_ID flight.
var CLIENT_DEBUG_FEATURE_OVERRIDES_FLIGHT_ID = 60763;
// Flight to enable refactor of flight/KS override bootstrapping into SPFlight and SPKillSwitch respectively,
// and setting cookies with feature overrides
var REFACTOR_DEBUG_FLIGHTS_AND_KILLSWITCHES_FLIGHT_ID = 61863;
var DEBUG_FLIGHTS_QUERY_PARAM = 'debugFlights';
var ENABLE_FEATURES_QUERY_PARAM = 'enableFeatures';
var ENABLE_FEATURES_COOKIE_NAME = "FeatureOverrides_".concat(ENABLE_FEATURES_QUERY_PARAM);
var DISABLE_FEATURES_QUERY_PARAM = 'disableFeatures';
var DISABLE_FEATURES_COOKIE_NAME = "FeatureOverrides_".concat(DISABLE_FEATURES_QUERY_PARAM);
/**
 * NOT FOR USE BY THIRD PARTY DEVELOPERS
 *
 * This class supports Microsoft's internal deployment workflow.
 * For more information, see https://microsoft.sharepoint.com/teams/odsp/_layouts/OneNote.aspx
 * ?id=/teams/odsp/Shared%20Documents/MI-6%20Team/MI-6%20Team/Global/SPO%20Flighting
 *
 * @privateRemarks
 * SPFlight is currently being reexported by sp-client-base.  For GA, this will be sorted out by
 * VSO 278235 which will move this class back into sp-client-base (sp-core-library).
 *
 * @internal
 */
var SPFlight = /** @class */ (function () {
    function SPFlight() {
    }
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    SPFlight.initialize = function (flights) {
        this._isInitialized = true;
        this._enabledFlightsMap = flights || [];
        this._forceEnabledFlights = [];
        this._forceDisabledFlights = [];
        if (SPFlight.isEnabled(REFACTOR_DEBUG_FLIGHTS_AND_KILLSWITCHES_FLIGHT_ID)) {
            this._overrides.clear();
            var allowDebug = SPFlight.isDebugFlightEnabled || Environment_1.default.type === Environment_1.EnvironmentType.Local;
            if (allowDebug) {
                SPFlight._initializeDebugFlights();
            }
        }
    };
    Object.defineProperty(SPFlight, "isDebugFlightEnabled", {
        /**
         * Return true if the debug flight is enabled.
         */
        get: function () {
            return (SPFlight.isEnabled(SPFX_DEBUG_FLIGHT_ID) ||
                SPFlight.isEnabled(CLIENT_DEBUG_FEATURE_OVERRIDES_FLIGHT_ID) ||
                (SPKillSwitch_1.default.isActivated('f5a6830a-99fa-4cc4-8361-62d32a5805f3'
                /* DO NOT GRADUATE THIS KILLSWITCH.  It is for turning on debugging on secure broker in SPDF */
                ) &&
                    window.location.host.toLowerCase() === 'securebroker.sharepointonline.com'));
        },
        enumerable: false,
        configurable: true
    });
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     *
     * If merge is true, the incoming overrides will be added to existing overrides rather than replacing them.
     */
    SPFlight.setDebugFlights = function (debugFlights, merge) {
        var _this = this;
        if (merge === void 0) { merge = false; }
        if (!this._isInitialized) {
            throw new Error("Flights are not initialized. Can't set debug flights.");
        }
        // If allowQueryFlights then parse the 'debugFlights' query string parameter for any flights to enable for
        // the session. 'debugFlights' is expected to be a comma separated list. We store the flights as given
        // to avoid needing to do any bitmask conversions during translation and just check the
        // feature ID directly.
        if (debugFlights && debugFlights.length > 0) {
            try {
                if (SPFlight.isEnabled(REFACTOR_DEBUG_FLIGHTS_AND_KILLSWITCHES_FLIGHT_ID)) {
                    if (!merge) {
                        SPFlight._overrides.clear();
                    }
                    SPFlight._updateOverrides(debugFlights);
                    // eslint-disable-next-line no-console
                    console.log('Debug flights are enabled.');
                    SPFlight._setFeatureSettingsToCookie();
                }
                else {
                    var debugFlightStrings = debugFlights.split(',');
                    if (!merge) {
                        this._forceEnabledFlights = debugFlightStrings
                            .filter(function (value) { return value[0] !== DISABLED_FLIGHT_PREFIX; })
                            .map(function (value) {
                            return parseInt(value, 10);
                        })
                            .filter(function (value) { return !isNaN(value); });
                        this._forceDisabledFlights = debugFlightStrings
                            .filter(function (value) { return value[0] === DISABLED_FLIGHT_PREFIX; })
                            .map(function (value) {
                            return parseInt(value.slice(1), 10);
                        })
                            .filter(function (value) { return !isNaN(value); });
                    }
                    else {
                        var updateOverrideLists_1 = function (flight, enabled) {
                            var listToRemoveFrom = enabled
                                ? _this._forceDisabledFlights
                                : _this._forceEnabledFlights;
                            var listToAddTo = enabled ? _this._forceEnabledFlights : _this._forceDisabledFlights;
                            var indexToRemove = listToRemoveFrom.indexOf(flight);
                            if (indexToRemove !== -1) {
                                listToRemoveFrom.splice(indexToRemove, 1);
                            }
                            if (listToAddTo.indexOf(flight) === -1) {
                                listToAddTo.push(flight);
                            }
                        };
                        debugFlightStrings.forEach(function (value) {
                            var enabled = value[0] !== DISABLED_FLIGHT_PREFIX;
                            var flight = parseInt(enabled ? value : value.slice(1), 10);
                            if (!isNaN(flight)) {
                                updateOverrideLists_1(flight, enabled);
                            }
                        });
                    }
                    // eslint-disable-next-line no-console
                    console.log("Debug flights are enabled.");
                    if (this._forceEnabledFlights.length > 0) {
                        // eslint-disable-next-line no-console
                        console.log("Enabled flights: ".concat(this._forceEnabledFlights.join(', ')));
                    }
                    if (this._forceDisabledFlights.length > 0) {
                        // eslint-disable-next-line no-console
                        console.log("Disabled flights: ".concat(this._forceDisabledFlights.join(', ')));
                    }
                }
            }
            catch (error) {
                // If an exception is thrown, we'll log the error and clear debug flights
                this._forceEnabledFlights = [];
                this._forceDisabledFlights = [];
                this._overrides.clear();
                // eslint-disable-next-line no-console
                console.log("Error parsing debugFlights query string parameter: ".concat(error));
            }
        }
        this._validateDebugFlights();
    };
    /**
     * NOT FOR USE BY THIRD PARTY DEVELOPERS
     *
     * This function will determine if a flight is enabled in the global list.
     */
    SPFlight.isEnabled = function (flight) {
        if (!this._isInitialized && !DEPRECATED_UNIT_TEST) {
            throw new Error("Flights are not initialized. Flight requested: ".concat(flight));
        }
        if (!flight || flight < 0) {
            return false;
        }
        // Debug flights override existing flight information
        if (SPFlight._isEnabledIgnoreOverrides(REFACTOR_DEBUG_FLIGHTS_AND_KILLSWITCHES_FLIGHT_ID)) {
            var override = this._overrides.get(flight.toString());
            if (override !== undefined) {
                return override;
            }
        }
        else {
            if (this._forceEnabledFlights.indexOf(flight) !== -1) {
                return true;
            }
            if (this._forceDisabledFlights.indexOf(flight) !== -1) {
                return false;
            }
        }
        return SPFlight._isEnabledIgnoreOverrides(flight);
    };
    SPFlight._isEnabledIgnoreOverrides = function (flight) {
        if (flight >= 60000) {
            // 1. Flights currently process 2 different range sets 1. [0 - 2000]
            // and 2. [60000 - 89999] that are bit encoded as a bitarray.
            // 2. A. Flights from 0 - 2000 are encoded in bit array position
            // 0 - 2000.
            // 2. B. Flights from 60000 onwards are encoded in bit array position
            // 2001 onwards. (As the preceding range has taken up slots 0 - 2000)
            // 3. The bit array is integer encoded and sent as a javascript
            // snippet to the client page.
            // 4. This SPFlight class needs to determine the current position of
            // the flight based on the flightId in the javascript integer snippet.
            // 5. Here since all flights eventually are a single stream of bits
            // from 0 onwards. We must map the new flight range to get the right
            // index position. So RangeSet 1 [0 - 2000] flightIds maps to [0 - 2000]
            // indices in the bit array while RangeSet 2 [60000+=] flightIds
            // maps to [2001+=] indices in the bit array. So 2000 here
            // is used to indicate the previous indices which are already
            // occupied by flightIds [0 - 2000]. 1 is because arrays are 0 index
            // counters. So if the bit array count is 2000 there are actually
            // 2001 flights evauluated.
            flight = flight - 60000 + 2000 + 1; // This gets the correct flights
            // index position for flights greater than 60000.
        }
        // Determines which set of bitMasks should be used to determine if a flight is enabled.
        var enabledFlightsIndex = flight >> 5;
        if (enabledFlightsIndex < 0 || enabledFlightsIndex >= this._enabledFlightsMap.length) {
            return false;
        }
        // Masks the flight number and determines if the flight is turned on within that mask.
        // eslint-disable-next-line no-bitwise
        var bitMask = 1 << (flight & 31);
        // eslint-disable-next-line no-bitwise
        return (this._enabledFlightsMap[enabledFlightsIndex] & bitMask) !== 0;
    };
    SPFlight._validateDebugFlights = function () {
        var debugFlightsSet = new Set(this._forceEnabledFlights.concat(this._forceDisabledFlights));
        // If size is smaller than the sum of its parts, it means that there is a duplicate number in both arrays
        if (debugFlightsSet.size < this._forceEnabledFlights.length + this._forceDisabledFlights.length) {
            // note: as of PR 1578680, we do not expect to hit this case. Debug flights should be stripped of duplicates
            throw new Error('There are flights that are forced to be both enabled and disabled');
        }
    };
    // Initialize debug flights from the query params and cookies
    SPFlight._initializeDebugFlights = function () {
        var queryParams = new URLSearchParams(self.location.search);
        var getQueryParamValue = function (name) { return queryParams.get(name) || undefined; };
        var debugFlightsQueryParam = getQueryParamValue(DEBUG_FLIGHTS_QUERY_PARAM);
        var enableFeaturesQueryParam = getQueryParamValue(ENABLE_FEATURES_QUERY_PARAM);
        var disableFeaturesQueryParam = getQueryParamValue(DISABLE_FEATURES_QUERY_PARAM);
        var enableFeaturesCookieValue = SPFlight._getCookieValue(ENABLE_FEATURES_COOKIE_NAME);
        var disableFeaturesCookieValue = SPFlight._getCookieValue(DISABLE_FEATURES_COOKIE_NAME);
        // Flight overrides can come from several sources. Following the implementation in FeatureOverrides,
        // we give cookies the least precedence, followed by enableFeatures and disableFeatures QSPs, and give
        // debugFlights QSP the highest precedence.
        SPFlight._updateOverrides(enableFeaturesCookieValue);
        SPFlight._updateOverrides(disableFeaturesCookieValue, false);
        SPFlight._updateOverrides(enableFeaturesQueryParam);
        SPFlight._updateOverrides(disableFeaturesQueryParam, false);
        SPFlight._updateOverrides(debugFlightsQueryParam);
        // Now that we've resolved the overrides from possibly conflicting sources into something
        // sensible, update cookies with latest settings
        SPFlight._setFeatureSettingsToCookie();
    };
    SPFlight._getCookieValue = function (name) {
        var cookieMatch = self.document.cookie.match("(^|;)\\s*".concat(name, "\\s*=\\s*([^;]+)"));
        return cookieMatch ? cookieMatch.pop() : undefined;
    };
    SPFlight._updateOverrides = function (featureSettings, enable) {
        if (enable === void 0) { enable = true; }
        if (featureSettings) {
            for (var _i = 0, _a = featureSettings.split(','); _i < _a.length; _i++) {
                var feature = _a[_i];
                if (feature[0] === '!') {
                    SPFlight._overrides.set(feature.slice(1), !enable);
                }
                else {
                    SPFlight._overrides.set(feature, enable);
                }
            }
        }
    };
    // see FeatureOverrides.setFeatureSettingsToCookie
    SPFlight._setFeatureSettingsToCookie = function () {
        var forceEnabledFlights = [];
        var forceDisabledFlights = [];
        SPFlight._overrides.forEach(function (value, key) {
            (value ? forceEnabledFlights : forceDisabledFlights).push(key);
        });
        // eslint-disable-next-line no-console
        forceEnabledFlights.length && console.log("Enabled features: ".concat(forceEnabledFlights.join(', ')));
        // eslint-disable-next-line no-console
        forceDisabledFlights.length && console.log("Disabled features: ".concat(forceDisabledFlights.join(', ')));
        try {
            // ideally we would use Cookie.setCookie utility here, but it URI encodes commas, which the cookie parsing doesn't handle
            document.cookie = "".concat(ENABLE_FEATURES_COOKIE_NAME, "=").concat(forceEnabledFlights.join(','), ";path=/;samesite=none;secure;").concat(!forceEnabledFlights.length ? 'expires=Thu, 01 Jan 1970 00:00:01 GMT;' : '');
            document.cookie = "".concat(DISABLE_FEATURES_COOKIE_NAME, "=").concat(forceDisabledFlights.join(','), ";path=/;samesite=none;secure;").concat(!forceDisabledFlights.length ? 'expires=Thu, 01 Jan 1970 00:00:01 GMT;' : '');
        }
        catch (_a) {
            // Ignore error.
        }
    };
    SPFlight._isInitialized = false;
    /**
     * List of SharePoint flight feature IDs that are forced to be enabled
     * through the debugFlights query string parameter.
     *
     * TODO: Delete this field when graduating refactorDebugFlightsAndKillswitchesInitKS,
     * use _overrides[flightId] instead of _forceEnabledFlights.indexOf(flightId) !== -1
     */
    SPFlight._forceEnabledFlights = [];
    /**
     * List of SharePoint flight feature IDs that are forced to be disabled
     * through the debugFlights query string parameter.
     *
     * TODO: Delete this field when graduating refactorDebugFlightsAndKillswitchesInitKS,
     * use _overrides[flightId] === false instead of _forceDisabledFlights.indexOf(flightId) !== -1
     */
    SPFlight._forceDisabledFlights = [];
    /**
     * Array of bits (indexed by flight number, where 1 means that flight is enabled).
     */
    SPFlight._enabledFlightsMap = [];
    /**
     * Maps flight feature IDs to their override status, if any.
     */
    SPFlight._overrides = new Map();
    return SPFlight;
}());
exports.default = SPFlight;
//# sourceMappingURL=SPFlight.js.map