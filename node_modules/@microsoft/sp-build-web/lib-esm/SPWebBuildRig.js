function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import sass from '@microsoft/gulp-core-build-sass';
import { reload, trustDevCert, untrustDevCert } from '@microsoft/gulp-core-build-serve';
import { copyStaticAssets, jest, parallel, serial, watch } from '@microsoft/gulp-core-build';
import { webpack as webpackTask } from '@microsoft/gulp-core-build-webpack';
import * as spBuildCoreTasks from '@microsoft/sp-build-core-tasks';
import { FILE_LOADER_EXTENSIONS } from '@microsoft/sp-build-core-tasks/lib/webpack/ConfigureWebpackTask';
import { tscCmd, lintCmd, apiExtractor } from '@microsoft/gulp-core-build-typescript';
import { WebBuildRigConstants } from './WebBuildRigConstants';
import { SPBuildRig } from './SPBuildRig';
import { BuildRigConstants } from './BuildRigConstants';
export const serveWatchFilter = [
    'src/**/*.{ts,tsx,scss,resx,js,json,html}',
    '!src/**/*.{scss.ts,resx.ts}',
    'node_modules/*/*/dist/*.manifest.json'
];
export class SPWebBuildRig extends SPBuildRig {
    addPostBundleTask(tasks) {
        this.addTaskOrListOfTasks(tasks, this._postBundleTasks);
    }
    getYargs() {
        return super.getYargs().option('debug', {
            describe: 'runs tests in unit mode'
        }).option('upgrade', {
            describe: 'upgrades outdated files in the project'
        }).command(WebBuildRigConstants.tasks.bundle, 'build, localize, and bundle the project').command(WebBuildRigConstants.tasks.deployAzureStorage, 'upload the assets to a development CDN').command(WebBuildRigConstants.tasks.packageSolution, 'package the project into a SPPKG').command(WebBuildRigConstants.tasks.test, 'build, localize, and bundle the project and run tests, and verify the coverage').command(WebBuildRigConstants.tasks.testOnly, 'run the tests without running the build').command(WebBuildRigConstants.tasks.serve, 'build and bundle the project and run the development server').command(WebBuildRigConstants.tasks.trustDevCert, "generates and trusts a development certificate if one isn't already present").command(WebBuildRigConstants.tasks.untrustDevCert, 'untrusts and deletes the development certificate if it exists').command('default', 'equivalent to bundle and test').option('entry', {
            describe: 'Select which entries should be bundled. This can match the GUID or the alias of the entry.',
            string: true
        });
    }
    setupSharedConfig() {
        super.setupSharedConfig();
        webpackTask.taskConfig.webpack = require('webpack');
        sass.mergeConfig({
            preamble: '',
            postamble: '',
            sassMatch: [
                'src/**/*.scss',
                'src/**/*.sass'
            ],
            useCSSModules: false,
            warnOnCssInvalidPropertyName: true,
            dropCssFiles: true,
            warnOnNonCSSModules: true,
            // Cast is needed due to autoprefixer types mismatch due to workspace install in odsp-web
            autoprefixerOptions: {
                overrideBrowserslist: [
                    '> 1%',
                    'ie >= 11'
                ]
            }
        });
        spBuildCoreTasks.configureWebpack.mergeConfig({
            webpack: webpackTask,
            singleLocale: this.args.locale,
            useLegacyExternals: true
        });
        copyStaticAssets.setConfig({
            includeExtensions: [
                ...FILE_LOADER_EXTENSIONS,
                'resx'
            ]
        });
        tscCmd.mergeConfig({
            allowBuiltinCompiler: true
        });
        lintCmd.mergeConfig({
            allowBuiltinCompiler: true
        });
        apiExtractor.mergeConfig({
            allowBuiltinCompiler: true
        });
        jest.mergeConfig({
            writeNUnitResults: this.args.writeNUnitResults
        });
    }
    finalizeSharedConfig() {
        super.finalizeSharedConfig();
        if (this.args.lite || this.args.notest) {
            this._disableTasks(jest);
        }
    }
    getTasks() {
        const result = super.getTasks();
        result.set(BuildRigConstants.tasks.build, {
            executable: this.getBuildTask()
        });
        result.set(WebBuildRigConstants.tasks.bundle, {
            executable: this.getBundleTask()
        });
        result.set(WebBuildRigConstants.tasks.deployAzureStorage, {
            executable: spBuildCoreTasks.deployAzureStorage
        });
        result.set(WebBuildRigConstants.tasks.packageSolution, {
            executable: spBuildCoreTasks.packageSolution
        });
        // @todo VSO #167343
        result.set(WebBuildRigConstants.tasks.test, {
            executable: this.getTestTask(),
            arguments: (yargs)=>{
                return yargs.option('debug', {
                    describe: 'run tests in debug mode'
                }).option('match', {
                    describe: 'regular expression. Only run tests that match',
                    string: true
                }).option('notest', {
                    describe: 'run the build without running the test'
                });
            }
        });
        result.set(WebBuildRigConstants.tasks.serve, {
            executable: serial(spBuildCoreTasks.serve, watch(serveWatchFilter, serial(this._preTelemetryTask, // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            result.get(WebBuildRigConstants.tasks.bundle).executable, reload, this._postTelemetryTask))),
            arguments: (yargs)=>{
                return yargs.option('port', {
                    description: 'the port to serve on should be the next argument (e.g. "--port 80")'
                }).option('nobrowser', {
                    description: "don't open a browser after initial bundle"
                }).option('config', {
                    description: 'use this option to specify which configuration to use in the serve.json file'
                });
            }
        });
        result.set(WebBuildRigConstants.tasks.trustDevCert, {
            executable: trustDevCert
        });
        result.set(WebBuildRigConstants.tasks.untrustDevCert, {
            executable: untrustDevCert
        });
        result.set(WebBuildRigConstants.tasks.testOnly, {
            executable: this.getTestOnlyTask(),
            arguments: (yargs)=>{
                return yargs.option('writeNUnitResults', {
                    description: 'write the jest results to an nunit test results file',
                    boolean: true
                });
            }
        });
        result.forEach((taskDefinition, name)=>{
            result.set(name, {
                executable: serial(serial(this._preTelemetryTask), taskDefinition.executable, serial(this._postTelemetryTask)),
                arguments: taskDefinition.arguments
            });
        });
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        result.set(BuildRigConstants.tasks.default, result.get(WebBuildRigConstants.tasks.bundle));
        return result;
    }
    getTestTask() {
        return serial(this.getBundleTask(), jest);
    }
    getTestOnlyTask() {
        return serial(jest);
    }
    getCoreBuildTask() {
        return parallel(serial(sass, super.getCoreBuildTask()), copyStaticAssets);
    }
    getBundleTask() {
        return serial(this.getBuildTask(), this.getPreWebpackTasks(), spBuildCoreTasks.configureWebpack, webpackTask, this.getPreCopyAssetsTasks(), parallel(this._postBundleTasks));
    }
    getPreWebpackTasks() {
        return serial();
    }
    getPreCopyAssetsTasks() {
        return serial();
    }
    constructor(...args){
        super(...args);
        _define_property(this, "args", void 0);
        _define_property(this, "_postBundleTasks", []);
    }
}

//#sourceMappingUrl=./SPWebBuildRig.js.map