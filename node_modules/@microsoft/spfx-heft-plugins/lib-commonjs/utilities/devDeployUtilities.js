"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getDevDeployContainerDirectoryName: function() {
        return getDevDeployContainerDirectoryName;
    },
    getStorageAccountUrl: function() {
        return getStorageAccountUrl;
    }
});
const _os = require("os");
const _gitrepoinfo = /*#__PURE__*/ _interop_require_default(require("git-repo-info"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let cachedContainerName;
function getDevDeployContainerDirectoryName() {
    if (!cachedContainerName) {
        const baseContainerName = `dev-${getUserName()}-${(0, _os.hostname)()}`;
        let leaf = process.cwd();
        try {
            const repoInfo = (0, _gitrepoinfo.default)();
            if (repoInfo.root && repoInfo.branch) {
                leaf = `${repoInfo.root}-${repoInfo.branch}`;
            }
        } catch (err) {
        // Do nothing
        }
        // Ensure the path is URL-safe.
        cachedContainerName = `${baseContainerName}-${leaf}`.replace(/[^A-Za-z0-9\-\/]+/g, '_');
    }
    return cachedContainerName;
}
function getStorageAccountUrl(storageAccountName) {
    return `https://${storageAccountName}.blob.core.windows.net/`;
}
function getUserName() {
    return process.env.USERNAME || process.env.LOGNAME || process.env.USER || process.env.LNAME || 'unknown_user';
}

//#sourceMappingUrl=./devDeployUtilities.js.map