"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "UrlUtilities", {
    enumerable: true,
    get: function() {
        return UrlUtilities;
    }
});
const _url = /*#__PURE__*/ _interop_require_wildcard(require("url"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class UrlUtilities {
    static joinUrlSegments(...segments) {
        if (!segments || segments.length === 0) {
            return '';
        }
        segments = segments.filter((value)=>!!value);
        let result = segments[0];
        for(let i = 1; i < segments.length; i++){
            result = _url.resolve(`${UrlUtilities.trimTrailingSlashes(result)}/`, UrlUtilities.trimLeadingSlashes(segments[i]));
        }
        return UrlUtilities.trimTrailingSlashes(result);
    }
    static ensureTrailingSlash(str) {
        if (!str) {
            return str;
        }
        return str.replace(/\/*$/, '/');
    }
    static isUrl(path) {
        /* Matches the following:
     * http://contoso.org/foo.js
     * https://contoso
     * http:/\foo.bar
     * https:\/foo.bar
     * http:\\foo.bar
     * https:\\foo.bar
     * HTTp:\\foo.bar
     */ const urlRegex = /([hH][tT]{2}[pP]s?):[/\\]{2}/;
        return !!path.match(urlRegex);
    }
    static trimTrailingSlashes(str) {
        if (!str) {
            return '';
        }
        return str.replace(/\/+$/, '');
    }
    static trimLeadingSlashes(str) {
        if (!str) {
            return '';
        }
        return str.replace(/^\/+/, '');
    }
}

//#sourceMappingUrl=./UrlUtilities.js.map