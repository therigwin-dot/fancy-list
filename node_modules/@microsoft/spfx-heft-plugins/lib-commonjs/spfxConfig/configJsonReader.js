"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "readConfigFileAsync", {
    enumerable: true,
    get: function() {
        return readConfigFileAsync;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _nodecorelibrary = require("@rushstack/node-core-library");
const _configv2 = require("./interfaces/config-v2");
const _config20schemajson = /*#__PURE__*/ _interop_require_default(require("./schemas/config.2.0.schema.json"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const V2_SCHEMA = _nodecorelibrary.JsonSchema.fromLoadedObject(_config20schemajson.default);
/**
 * Read a V1 config file and translate it to the latest schema.
 */ async function _tryV1Async(filename, fileMetadata) {
    const result = {
        missingFile: false,
        version: '1.0',
        isLatestVersion: false
    };
    const v1Schema = _nodecorelibrary.JsonSchema.fromLoadedObject(await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./schemas/config.1.0.schema.json"))));
    try {
        const v1Config = await _nodecorelibrary.JsonFile.loadAndValidateAsync(filename, v1Schema);
        const configData = {
            $schema: _configv2.configJsonSchemaUrl,
            version: '2.0',
            bundles: {},
            localizedResources: v1Config.localizedResources,
            externals: v1Config.externals
        };
        if (v1Config.entries) {
            for (const entry of v1Config.entries){
                const name = _path.basename(entry.outputPath, _path.extname(entry.outputPath));
                configData.bundles[name] = {
                    components: [
                        {
                            entrypoint: entry.entry,
                            manifest: entry.manifest
                        }
                    ]
                };
            }
        }
        if (configData.localizedResources) {
            for (const resourceName of Object.getOwnPropertyNames(configData.localizedResources)){
                const resourcePath = configData.localizedResources[resourceName];
                configData.localizedResources[resourceName] = _path.posix.join('lib', resourcePath);
            }
        }
        result.configData = configData;
    } catch (error) {
        if (!fileMetadata.version) {
            result.readError = error;
        } else {
            // Failed to validate, not the right version
            return undefined;
        }
    }
    return result;
}
/**
 * Read a V2 config file. This is currently the latest config version
 */ async function _tryV2Async(filename, fileMetadata) {
    const result = {
        missingFile: false,
        version: '2.0',
        isLatestVersion: true
    };
    try {
        const configData = await _nodecorelibrary.JsonFile.loadAndValidateAsync(filename, V2_SCHEMA);
        result.configData = configData;
    } catch (error) {
        if (fileMetadata.version === result.version) {
            result.readError = error;
        } else {
            // Failed to validate, not the right version
            return undefined;
        }
    }
    return result;
}
const _parseFunctions = [
    _tryV2Async,
    _tryV1Async
];
async function readConfigFileAsync(logVerbose, filename) {
    let fileMetadata;
    try {
        // Read the file to detect basic metadata
        fileMetadata = await _nodecorelibrary.JsonFile.loadAsync(filename);
    } catch (error) {
        if (_nodecorelibrary.FileSystem.isNotExistError(error)) {
            return {
                missingFile: true
            };
        } else {
            return {
                missingFile: false,
                readError: error
            };
        }
    }
    logVerbose(`Found config file: ${_path.basename(filename)}`);
    let result = undefined;
    for(let i = 0; i < _parseFunctions.length && !result; i++){
        result = await _parseFunctions[i](filename, fileMetadata);
    }
    return result || {
        missingFile: false,
        version: fileMetadata.version,
        isLatestVersion: false,
        readError: 'Unknown config.json file format.'
    };
}

//#sourceMappingUrl=./configJsonReader.js.map