"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "printDevDeployLink", {
    enumerable: true,
    get: function() {
        return printDevDeployLink;
    }
});
const _terminal = require("@rushstack/terminal");
const _os = /*#__PURE__*/ _interop_require_wildcard(require("os"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const DEBUG_MANIFESTS_QUERY_PARAMETER = 'debugManifestsFile';
const TEST_URL_ENVIRONMENT_VARIABLE = 'dev_deploy_url';
function printDevDeployLink(options) {
    const { terminal, metadata, testingPageUrl = process.env[TEST_URL_ENVIRONMENT_VARIABLE] } = options;
    const queryParameters = new Map();
    queryParameters.set('debug', 'true').set('noredir', 'true');
    if (metadata.loaderUrl) {
        queryParameters.set('loader', metadata.loaderUrl);
    }
    queryParameters.set(DEBUG_MANIFESTS_QUERY_PARAMETER, metadata.debugManifestUrl);
    if (!testingPageUrl) {
        _printHelperMessage(terminal, queryParameters);
    } else {
        _printDeployString(terminal, testingPageUrl, queryParameters);
    }
}
function _printHelperMessage(terminal, queryParameters) {
    const message = `For an improved debugging experience, please set the ` + `'${TEST_URL_ENVIRONMENT_VARIABLE}' environment variable to the URL of the page you are` + ` testing.`;
    terminal.writeLine(_terminal.Colorize.yellow(message));
    terminal.writeLine(..._getAdvice());
    terminal.writeLine(_terminal.Colorize.yellow('Debug query parameters:'), ` "${_concatenateQueryParams(queryParameters)}"`);
}
function _getAdvice() {
    const sampleTestPageUrl = 'https://contoso.sharepoint.com/SitePages/TestPage.aspx';
    const osAdvice = {
        win32: [
            `For example, in Windows:${_os.EOL}`,
            _terminal.Colorize.yellow(`set ${TEST_URL_ENVIRONMENT_VARIABLE}=${sampleTestPageUrl}`)
        ],
        darwin: [
            `For example, in MacOS:${_os.EOL}`,
            _terminal.Colorize.yellow(`export ${TEST_URL_ENVIRONMENT_VARIABLE}=${sampleTestPageUrl}`)
        ],
        default: [
            'Please consult your operating system documentation for information on setting environment variables'
        ]
    };
    return osAdvice[process.platform] || osAdvice.default;
}
function _printDeployString(terminal, testingPageUrl, queryParams) {
    const testUrl = testingPageUrl + _concatenateQueryParams(queryParams);
    terminal.writeLine(_terminal.Colorize.yellow('Test URL:'), ` ${testUrl}`);
}
/**
 * Concatenates the query parameters. Note that no URL escaping is performed
 */ function _concatenateQueryParams(queryParameters) {
    if (!queryParameters.size) {
        return '';
    }
    const queryString = [];
    let firstParameter = true;
    queryParameters.forEach((value, key)=>{
        queryString.push(`${firstParameter ? '?' : '&'}${key}=${value}`);
        firstParameter = false;
    });
    return queryString.join('');
}

//#sourceMappingUrl=./DevDeployLinkPrinter.js.map