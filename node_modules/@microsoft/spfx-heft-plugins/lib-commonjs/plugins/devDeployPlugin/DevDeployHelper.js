"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DevDeployHelper", {
    enumerable: true,
    get: function() {
        return DevDeployHelper;
    }
});
const _AzureUploader = require("../../utilities/AzureUploader");
const _UrlUtilities = require("../../utilities/UrlUtilities");
const _ProgressBar = require("../../utilities/ProgressBar");
class DevDeployHelper {
    static async deployFilesAsync(terminal, deployConfig, deployData, deployPathsFunction) {
        const progressBar = new _ProgressBar.ProgressBar(deployData.filesToUpload.length);
        let uploadedCount = 0;
        if (deployPathsFunction) {
            await deployPathsFunction(deployData.filesToUpload);
        } else {
            const uploader = new _AzureUploader.AzureUploader({
                storageAccountName: deployConfig.accountName,
                containerName: deployConfig.containerName,
                sas: deployConfig.sas
            });
            const onFileUploaded = ()=>{
                progressBar.update(++uploadedCount);
            };
            await uploader.uploadFilesToAzureAsync(terminal, deployData.filesToUpload.map((fileToUpload)=>{
                const azurePath = deployConfig.folderNameInContainer ? _UrlUtilities.UrlUtilities.joinUrlSegments(deployConfig.folderNameInContainer, fileToUpload.deployPath) : fileToUpload.deployPath;
                return {
                    azurePath,
                    localPath: fileToUpload.localPath
                };
            }), undefined, deployConfig.maxRetries, undefined, onFileUploaded);
        }
    }
}

//#sourceMappingUrl=./DevDeployHelper.js.map