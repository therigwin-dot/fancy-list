"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ConfigureServe", {
    enumerable: true,
    get: function() {
        return ConfigureServe;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _terminal = require("@rushstack/terminal");
const _serveJsonReader = require("../../spfxConfig/serveJsonReader");
const _constants = require("../../utilities/constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class ConfigureServe {
    generateServeConfig() {
        const serveConfig = {
            port: _constants.DEFAULT_PORT
        };
        if (this._serveConfig) {
            if (this._serveConfig.port) {
                serveConfig.port = this._serveConfig.port;
            }
            serveConfig.contentBase = this._serveConfig.contentBase;
            serveConfig.contentBasePublicPath = this._serveConfig.contentBasePublicPath;
            if (this._serveConfig.initialPage) {
                let initialPage = this._serveConfig.initialPage;
                if (this._serveConfig.api) {
                    initialPage = initialPage.replace(`:${this._serveConfig.api.port}`, `:${serveConfig.port}`);
                }
                serveConfig.initialPage = initialPage;
            }
            if (this._serveConfig.api) {
                let apiMap = require(_path.join(this._buildFolder, this._serveConfig.api.entryPath));
                if (apiMap.default) {
                    apiMap = apiMap.default;
                }
                serveConfig.apiMap = apiMap;
            }
        }
        return serveConfig;
    }
    logRequestsMiddleware() {
        const logger = this._terminal.writeLine.bind(this._terminal);
        return (req, res, next)=>{
            const msg = [
                ' Request: '
            ];
            if (req.url.endsWith('bundle.js')) {
                msg.push(_terminal.Colorize.green(req.url));
            } else if (req.url.endsWith('.js')) {
                msg.push(_terminal.Colorize.magenta(req.url));
            } else {
                msg.push(_terminal.Colorize.cyan(req.url));
            }
            logger(...msg);
            next();
        };
    }
    _getServeConfig() {
        const configPath = _path.join(this._buildFolder, 'config', 'serve.json');
        try {
            const serveConfig = (0, _serveJsonReader.readServeConfigFile)(configPath);
            return serveConfig;
        } catch (err) {
            this._terminal.writeWarningLine('Unable to parse serve config file.', String(err));
        }
    }
    constructor(configuration, terminal){
        _define_property(this, "_buildFolder", void 0);
        _define_property(this, "_terminal", void 0);
        _define_property(this, "_serveConfig", void 0);
        this._buildFolder = configuration.buildFolderPath;
        this._terminal = terminal;
        this._serveConfig = this._getServeConfig();
    }
}

//#sourceMappingUrl=./ConfigureServe.js.map