"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return CustomizeWebpackConfigurationPlugin;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _webpack = /*#__PURE__*/ _interop_require_wildcard(require("webpack"));
const _nodecorelibrary = require("@rushstack/node-core-library");
const _PluginNames = require("./PluginNames");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const WEBPACK5_PLUGIN_NAME = 'webpack5-plugin';
class CustomizeWebpackConfigurationPlugin {
    apply(taskSession, heftConfiguration, options) {
        taskSession.requestAccessToPluginByName('@rushstack/heft-webpack5-plugin', WEBPACK5_PLUGIN_NAME, (accessor)=>{
            accessor.hooks.onConfigure.tapPromise({
                name: _PluginNames.CustomizeWebpackConfigPlugin,
                stage: Number.MAX_SAFE_INTEGER // Make sure this runs last
            }, async (webpackConfiguration)=>{
                await this._updateWebpackConfigurationAsync(taskSession, heftConfiguration, webpackConfiguration, options.customizationFilename);
            });
        });
    }
    async _updateWebpackConfigurationAsync(taskSession, heftConfiguration, webpackConfiguration, customizationFilename) {
        const scopedLogger = taskSession.logger;
        const customizeConfigFilePath = _path.join(heftConfiguration.projectConfigFolderPath, customizationFilename);
        const customizeConfigFileExists = await _nodecorelibrary.FileSystem.existsAsync(customizeConfigFilePath);
        if (customizeConfigFileExists) {
            if (!webpackConfiguration) {
                scopedLogger.emitError(new Error('A webpack configuration must be provided.'));
            } else {
                let scriptExport;
                try {
                    scriptExport = require(customizeConfigFilePath);
                } catch (e) {
                    scopedLogger.emitError(new Error(`Error importing webpack customization script "${customizeConfigFilePath}": ${e}`));
                    return;
                }
                const scriptExportNotDefault = scriptExport;
                const scriptExportAsDefault = scriptExport.default;
                if (typeof scriptExport !== 'function' && typeof scriptExportAsDefault !== 'function') {
                    scopedLogger.emitError(new Error('A webpack configuration customization script must export a function ' + 'that takes a webpack configuration to tweak.'));
                    return;
                }
                const functionToExecute = scriptExportAsDefault || scriptExportNotDefault;
                try {
                    functionToExecute(webpackConfiguration, taskSession, heftConfiguration, _webpack);
                } catch (e) {
                    scopedLogger.emitError(new Error(`An error occurred during webpack configuration customization: ${e}`));
                }
            }
        }
    }
}

//#sourceMappingUrl=./CustomizeWebpackConfigurationPlugin.js.map