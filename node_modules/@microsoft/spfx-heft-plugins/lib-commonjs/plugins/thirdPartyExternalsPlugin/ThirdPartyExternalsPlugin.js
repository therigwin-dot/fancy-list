"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return ThirdPartyExternalsPlugin;
    }
});
const _nodecorelibrary = require("@rushstack/node-core-library");
const _PluginNames = require("../PluginNames");
const _WebpackConfigurationGenerator = require("../webpackConfigurationPlugin/WebpackConfigurationGenerator");
const _LegacyExternals = require("./LegacyExternals");
const WEBPACK5_PLUGIN_NAME = 'webpack5-plugin';
class ThirdPartyExternalsPlugin {
    apply(taskSession, heftConfiguration) {
        const scopedLogger = taskSession.logger;
        taskSession.requestAccessToPluginByName('@rushstack/heft-webpack5-plugin', WEBPACK5_PLUGIN_NAME, (accessor)=>{
            accessor.hooks.onConfigure.tapPromise({
                name: _PluginNames.ThirdPartyExternalsPlugin,
                // Make sure this runs after the webpack configuration. Avoid using the onAfterConfigure hook
                // since it is possible that we will update the configuration.
                stage: Number.MAX_SAFE_INTEGER
            }, async (webpackConfiguration)=>{
                // Webpack Dev Server will only consider the first config if multiple are defined.
                if (Array.isArray(webpackConfiguration)) {
                    webpackConfiguration = webpackConfiguration[0];
                }
                const config = webpackConfiguration;
                if (!config?.[_WebpackConfigurationGenerator.IS_SPFX_WEBPACK_CONFIGURATION_SYMBOL]) {
                    const thisPackageJson = _nodecorelibrary.PackageJsonLookup.loadOwnPackageJson(__dirname);
                    scopedLogger.emitError(new Error('A SPFx webpack configuration must have already been generated. Has ' + `${_PluginNames.SpfxWebpackConfigurationPlugin} in ${thisPackageJson.name} been applied?`));
                } else {
                    const configJson = config[_WebpackConfigurationGenerator.CONFIG_JSON_SYMBOL];
                    const legacyExternals = new _LegacyExternals.LegacyExternals({
                        configJson: configJson,
                        terminal: scopedLogger.terminal,
                        selectedLocales: Array.from(taskSession.parameters.locales),
                        buildFolder: heftConfiguration.buildFolderPath,
                        serveMode: taskSession.parameters.watch && accessor.parameters.isServeMode,
                        production: taskSession.parameters.production,
                        // Forward the configured hash salt, if any
                        hashSalt: config.output?.hashSalt
                    });
                    legacyExternals.updateWebpackConfiguration(config);
                }
                return config;
            });
        });
    }
}

//#sourceMappingUrl=./ThirdPartyExternalsPlugin.js.map