/**
 * Creates an package's icon information
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createIcon;
    }
});
const _xml = /*#__PURE__*/ _interop_require_default(require("xml"));
const _uuid = /*#__PURE__*/ _interop_require_wildcard(require("uuid"));
const _createRelationshipsXml = /*#__PURE__*/ _interop_require_default(require("./createRelationshipsXml"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function createIcon(xmlSerializationOptions, iconPath) {
    if (!iconPath) {
        return;
    }
    const config = {
        filename: `${iconPath}.config.xml`,
        contents: Buffer.from((0, _xml.default)({
            AppPartConfig: [
                {
                    _attr: {
                        xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/partconfiguration'
                    }
                },
                {
                    Id: _uuid.v4()
                }
            ]
        }, xmlSerializationOptions))
    };
    const rels = (0, _createRelationshipsXml.default)(xmlSerializationOptions, iconPath, [
        {
            type: 'partconfiguration',
            target: `${iconPath}.config.xml`
        }
    ]);
    return {
        path: iconPath,
        config: config,
        relationships: rels
    };
}

//#sourceMappingUrl=./createIcon.js.map