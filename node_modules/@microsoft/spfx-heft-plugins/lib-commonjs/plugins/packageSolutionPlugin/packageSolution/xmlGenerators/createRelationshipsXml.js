/**
 * Creates XML definitions for the relationships files
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createRelationshipsXml;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _xml = /*#__PURE__*/ _interop_require_default(require("xml"));
const _constants = /*#__PURE__*/ _interop_require_default(require("../config/constants"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
let relationshipId = 0;
function relationshipToXmlDefinition(rel) {
    if (rel.target?.[0] !== '/') {
        rel.target = '/' + rel.target;
    }
    return {
        Relationship: [
            {
                _attr: {
                    Type: `http://schemas.microsoft.com/sharepoint/2012/app/relationships/${rel.type}`,
                    Target: rel.target,
                    Id: `r${relationshipId++}`
                }
            }
        ]
    };
}
function createRelationshipsXml(xmlSerializationOptions, currentFilename, rels) {
    const file = _path.basename(currentFilename);
    const folder = _path.dirname(currentFilename);
    return {
        filename: _path.posix.join(folder, _constants.default.RelsFolder, file + _constants.default.RelsXml),
        contents: Buffer.from((0, _xml.default)({
            Relationships: [
                {
                    _attr: {
                        xmlns: 'http://schemas.openxmlformats.org/package/2006/relationships'
                    }
                },
                ...rels.map((rel)=>relationshipToXmlDefinition(rel))
            ]
        }, xmlSerializationOptions))
    };
}

//#sourceMappingUrl=./createRelationshipsXml.js.map