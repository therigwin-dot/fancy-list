/**
 * Creates an package's Feature.Xml
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createFeatureXml;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _uuid = /*#__PURE__*/ _interop_require_wildcard(require("uuid"));
const _xml = /*#__PURE__*/ _interop_require_default(require("xml"));
const _lodash = require("lodash");
const _nodecorelibrary = require("@rushstack/node-core-library");
const _createRelationshipsXml = /*#__PURE__*/ _interop_require_default(require("./createRelationshipsXml"));
const _createComponentXml = /*#__PURE__*/ _interop_require_default(require("./createComponentXml"));
const _readSharepointAssets = require("../utils/readSharepointAssets");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function createFeatureXml(terminal, xmlSerializationOptions, feature, resources, clientSideAssets, featureXmlFile = `feature_${feature.id}.xml`) {
    feature = (0, _lodash.merge)({
        version: '1.0.0.0'
    }, feature);
    const featureXml = {
        filename: featureXmlFile,
        // eslint-disable-next-line @rushstack/no-null
        relationships: null,
        contents: Buffer.from((0, _xml.default)({
            Feature: [
                {
                    _attr: {
                        xmlns: 'http://schemas.microsoft.com/sharepoint/',
                        Title: feature.title,
                        Description: feature.description,
                        Id: feature.id,
                        Version: feature.version,
                        Scope: 'Web',
                        Hidden: 'FALSE'
                    }
                }
            ]
        }, xmlSerializationOptions))
    };
    const configXml = {
        filename: `${featureXmlFile}.config.xml`,
        contents: Buffer.from((0, _xml.default)({
            AppPartConfig: [
                {
                    _attr: {
                        xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/partconfiguration'
                    }
                },
                {
                    Id: _uuid.v4()
                }
            ]
        }, xmlSerializationOptions))
    };
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const componentsXml = feature.components.map((component)=>{
        return (0, _createComponentXml.default)(xmlSerializationOptions, component, feature.id);
    });
    const clientSideResources = [];
    if (clientSideAssets && clientSideAssets.length) {
        // read each hosted asset
        // iterate through every file that was found and add a relationship
        clientSideAssets.forEach(({ originalFilename, packageFilename })=>{
            // read the file into memory
            const contents = _nodecorelibrary.FileSystem.readFileToBuffer(originalFilename);
            const relativeFilename = _path.posix.join('ClientSideAssets', packageFilename);
            const file = {
                contents,
                filename: relativeFilename
            };
            clientSideResources.push(file);
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const assets = (0, _readSharepointAssets.readSharepointAssets)(terminal, feature.assets, feature.id);
    const relationshipsXml = (0, _createRelationshipsXml.default)(xmlSerializationOptions, featureXmlFile, [
        {
            type: 'partconfiguration',
            target: configXml.filename
        }
    ].concat(componentsXml.map((component)=>{
        return {
            type: 'feature-elementmanifest',
            target: component.filename
        };
    })).concat(resources.localizedResourcePaths.length > 0 ? resources.localizedResourcePaths.map((filename)=>{
        return {
            type: 'content-resource',
            target: filename
        };
    }) : []).concat(resources.defaultResourcePath ? {
        type: 'content-defaultresource',
        target: resources.defaultResourcePath
    } : []).concat(createAssetRelationships(assets)).concat(clientSideResources.map((clientSideResource)=>{
        return {
            target: clientSideResource.filename,
            type: 'clientsideasset'
        };
    })));
    return {
        filename: featureXml.filename,
        contents: featureXml.contents,
        relationships: relationshipsXml,
        config: configXml,
        components: componentsXml,
        assets,
        clientSideResources
    };
}
function createAssetRelationships(assets) {
    let relationships = [];
    if (assets) {
        relationships = relationships.concat(createAssetRelationship('feature-elementfile', assets.elementFiles), createAssetRelationship('feature-elementmanifest', assets.elementManifests), createAssetRelationship('feature-upgradeactions', assets.upgradeActions));
    }
    return relationships;
}
function createAssetRelationship(type, files = []) {
    return files.map((file)=>{
        return {
            type,
            target: file.filename
        };
    });
}

//#sourceMappingUrl=./createFeatureXml.js.map