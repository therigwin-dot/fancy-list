/**
 * Creates an package's Element.Xml for a WebPart or ClientSideSolution
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createComponentXml;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _xml = /*#__PURE__*/ _interop_require_default(require("xml"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function createComponentXml(xmlSerializationOptions, options, featureId) {
    const contents = {
        Elements: [
            {
                ...createClientSideComponentElement(options)
            }
        ]
    };
    switch(options.manifest.componentType){
        case 'WebPart':
        case 'AdaptiveCardExtension':
            contents.Elements.push({
                Module: createModule(featureId, options)
            });
            break;
        case 'Application':
        case 'Extension':
        case 'Library':
            break;
        default:
            throw new Error(`Invalid Component Type: ${options.manifest.componentType}`);
    }
    contents.Elements.push({
        _attr: {
            xmlns: 'http://schemas.microsoft.com/sharepoint/'
        }
    });
    // @todo Note that the options.id is NOT necessarily the feature ID
    return {
        filename: _path.posix.join(featureId, `${options.manifest.componentType}_${options.id}.xml`),
        contents: Buffer.from((0, _xml.default)(contents, xmlSerializationOptions))
    };
}
/**
 * Creates a ClientSideComponent element.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function createClientSideComponentElement(options) {
    const attributes = {
        Name: options.name,
        Id: options.id,
        ComponentManifest: JSON.stringify(options.manifest),
        Type: options.manifest.componentType
    };
    if (options.requiresCustomScript) {
        attributes.ReturnIfCustomScriptDisabled = !options.requiresCustomScript;
    }
    return {
        ClientSideComponent: [
            {
                _attr: attributes
            }
        ]
    };
}
/**
 * Creates a Module xml element with all the files.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function createModule(featureId, component) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const result = [
        {
            _attr: {
                Name: component.name,
                Url: '_catalogs/wp',
                List: '113'
            }
        }
    ];
    return result;
}

//#sourceMappingUrl=./createComponentXml.js.map