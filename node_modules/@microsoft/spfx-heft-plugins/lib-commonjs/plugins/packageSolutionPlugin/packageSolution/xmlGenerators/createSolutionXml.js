/**
 * Creates an package's Solution.Xml for a ClientSideSolution
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return createSolutionXml;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _uuid = /*#__PURE__*/ _interop_require_wildcard(require("uuid"));
const _xml = /*#__PURE__*/ _interop_require_default(require("xml"));
const _lodash = require("lodash");
const _createRelationshipsXml = /*#__PURE__*/ _interop_require_default(require("./createRelationshipsXml"));
const _createFeatureXml = /*#__PURE__*/ _interop_require_default(require("./createFeatureXml"));
const _createIcon = /*#__PURE__*/ _interop_require_default(require("./createIcon"));
const _constants = /*#__PURE__*/ _interop_require_default(require("../config/constants"));
const _ISolutionMetadata = require("../models/packageDefinition/ISolutionMetadata");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function createContentTypeXml(extension, mimeType) {
    return {
        Default: [
            {
                _attr: {
                    Extension: extension,
                    ContentType: mimeType
                }
            }
        ]
    };
}
function createSolutionXml(terminal, xmlSerializationOptions, solution, customFeatureFilenames, resources, contentTypes) {
    solution = (0, _lodash.merge)({
        version: '1.0.0.0'
    }, solution);
    // Create the top-level .rels file which points at the AppManifest
    const relationshipsXml = (0, _createRelationshipsXml.default)(xmlSerializationOptions, '', [
        {
            type: 'package-manifest',
            target: _constants.default.appManifestFileName
        }
    ]);
    // Create the top-level content types, defining content types in this package
    const contentTypesMap = new Map();
    if (contentTypes) {
        Object.keys(contentTypes).forEach((extension)=>{
            contentTypesMap.set(extension, contentTypes[extension]);
        });
    }
    const includeClientAssets = solution.includeClientSideAssets || solution.clientSideAssets !== undefined && solution.clientSideAssets.length > 0;
    if (includeClientAssets) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        solution.clientSideAssets.forEach((file)=>{
            const extension = _path.extname(file.originalFilename).substr(1);
            if (!contentTypesMap.has(extension)) {
                contentTypesMap.set(extension, 'application/octet-stream');
            }
        });
    }
    const contentTypeInformation = [
        {
            _attr: {
                xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types'
            }
        }
    ];
    contentTypesMap.forEach((mimeType, extension)=>{
        contentTypeInformation.push(createContentTypeXml(extension, mimeType));
    });
    const contentTypesXml = {
        filename: _constants.default.contentTypesXmlFilename,
        contents: Buffer.from((0, _xml.default)({
            Types: contentTypeInformation
        }, xmlSerializationOptions))
    };
    // Create the top-level AppManifest's XML, note that it is missing relationships
    const manifestXml = {
        filename: _constants.default.appManifestFileName,
        // eslint-disable-next-line @rushstack/no-null
        relationships: null,
        contents: Buffer.from((0, _xml.default)({
            App: buildAppManifestJson(solution)
        }, xmlSerializationOptions))
    };
    // Collect the XML for the individual features
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const featuresXml = solution.features.map((feature)=>(0, _createFeatureXml.default)(terminal, xmlSerializationOptions, feature, resources));
    const clientSideAssetsFeatureFileName = 'ClientSideAssets.xml';
    if (includeClientAssets) {
        // generate a guid
        const guid = _uuid.v4();
        const clientSideAssetsFeature = {
            title: 'Client Side Assets',
            description: 'A feature that help deploy client side component assets to SharePoint Online.',
            id: guid,
            version: '1.0.0.0',
            components: [],
            assets: {
                elementFiles: [],
                elementManifests: [],
                upgradeActions: []
            }
        };
        // create a new feature for Assets:
        //    => ClientSideAssets.xml
        //    => ClientSideAssets.xml.config.xml
        const clientSideFeatureXml = (0, _createFeatureXml.default)(terminal, xmlSerializationOptions, clientSideAssetsFeature, {
            localizedResourcePaths: [],
            defaultResourcePath: undefined
        }, solution.clientSideAssets, clientSideAssetsFeatureFileName);
        featuresXml.push(clientSideFeatureXml);
    }
    // Create icon data if a path to an icon is provided
    const icon = solution.iconPath ? (0, _createIcon.default)(xmlSerializationOptions, solution.iconPath) : undefined;
    // Ensure the Manifest's relationships to features are stored
    let relsList = featuresXml.map((feature)=>{
        return {
            type: feature.filename === clientSideAssetsFeatureFileName ? 'manifest-clientsideasset' : 'manifest-feature',
            target: feature.filename
        };
    });
    relsList = relsList.concat(customFeatureFilenames.map((filename)=>{
        return {
            type: 'manifest-feature',
            target: filename
        };
    }));
    relsList = relsList.concat(resources.localizedResourcePaths.map((filename)=>{
        return {
            type: 'content-resource',
            target: filename
        };
    }));
    if (resources.defaultResourcePath) {
        relsList = relsList.concat({
            type: 'content-defaultresource',
            target: resources.defaultResourcePath
        });
    }
    if (icon) {
        relsList = relsList.concat({
            type: 'manifest-icon',
            target: icon.path
        });
    }
    manifestXml.relationships = (0, _createRelationshipsXml.default)(xmlSerializationOptions, _constants.default.appManifestFileName, relsList);
    return {
        manifest: manifestXml,
        features: featuresXml,
        relationships: relationshipsXml,
        contentTypesXml: contentTypesXml,
        icon: icon,
        customFiles: undefined
    };
}
function buildAppManifestJson(solution) {
    const appXmlContents = [];
    appXmlContents.push({
        _attr: buildAttributesJson(solution)
    });
    appXmlContents.push({
        Properties: buildPropertiesJson(solution)
    });
    const webApiPermissionRequests = buildWebApiPermissionRequestsJson(solution);
    if (webApiPermissionRequests) {
        appXmlContents.push({
            WebApiPermissionRequests: webApiPermissionRequests
        });
    }
    return appXmlContents;
}
function buildAttributesJson(solution) {
    const attributes = {
        xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/manifest',
        Name: solution.name,
        ProductID: solution.id,
        SharePointMinVersion: '16.0.0.0',
        IsClientSideSolution: 'true'
    };
    if (solution.version) {
        attributes.Version = solution.version;
    }
    if (solution.skipFeatureDeployment) {
        // SkipFeatureDeployment should not be present in the Solution XML unless it is set to true
        attributes.SkipFeatureDeployment = solution.skipFeatureDeployment;
    }
    if (solution.isDomainIsolated !== undefined) {
        attributes.IsDomainIsolated = solution.isDomainIsolated;
    }
    return attributes;
}
function buildPropertiesJson(solution) {
    const properties = [];
    // Add title to properties
    properties.push({
        Title: solution.title ? solution.title : solution.name
    });
    if (solution.developer) {
        properties.push({
            DeveloperProperties: buildDeveloperPropertiesJson(solution.developer)
        });
    }
    // Add supported locales to properties, if needed
    const supportedLocales = solution.supportedLocales && solution.supportedLocales.length > 0 ? solution.supportedLocales.map((locale)=>{
        return {
            SupportedLocale: [
                {
                    _attr: {
                        CultureName: locale
                    }
                }
            ]
        };
    }) : undefined;
    if (supportedLocales) {
        properties.push({
            SupportedLocales: supportedLocales
        });
    }
    if (solution.iconPath) {
        properties.push({
            AppIconPath: _path.basename(solution.iconPath)
        });
    }
    const { metadata } = solution;
    if (metadata) {
        if (metadata.shortDescription) {
            const localizedShortDescription = Object.keys(metadata.shortDescription).map((key)=>{
                return {
                    LocalizedString: [
                        {
                            _attr: {
                                CultureName: key
                            }
                        },
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        metadata.shortDescription[key]
                    ]
                };
            });
            properties.push({
                ShortDescription: localizedShortDescription
            });
        }
        if (metadata.longDescription) {
            const localizedLongDescription = Object.keys(metadata.longDescription).map((key)=>{
                return {
                    LocalizedString: [
                        {
                            _attr: {
                                CultureName: key
                            }
                        },
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        metadata.longDescription[key]
                    ]
                };
            });
            properties.push({
                LongDescription: localizedLongDescription
            });
        }
        if (metadata.categories && metadata.categories.length) {
            properties.push({
                CategoryID: metadata.categories.slice(0, _ISolutionMetadata.MAX_SOLUTION_CATEGORIES_COUNT).join(',')
            });
        }
        if (metadata.screenshotPaths) {
            const screenshotPaths = metadata.screenshotPaths.map((screenshotPath)=>{
                return {
                    Screenshot: [
                        {
                            Filename: screenshotPath
                        }
                    ]
                };
            });
            properties.push({
                Screenshots: screenshotPaths
            });
        }
        if (metadata.videoUrl) {
            properties.push({
                VideoUrl: metadata.videoUrl
            });
        }
    }
    return properties;
}
function buildDeveloperPropertiesJson(solutionDevProperties) {
    const devProperties = {
        name: solutionDevProperties.name,
        websiteUrl: solutionDevProperties.websiteUrl,
        privacyUrl: solutionDevProperties.privacyUrl,
        termsOfUseUrl: solutionDevProperties.termsOfUseUrl,
        mpnId: solutionDevProperties.mpnId
    };
    return [
        JSON.stringify(devProperties)
    ];
}
function buildWebApiPermissionRequestsJson(solution) {
    const webApiPermissionRequests = solution.webApiPermissionRequests && solution.webApiPermissionRequests.length > 0 ? solution.webApiPermissionRequests.map((webApiPermissionRequest)=>{
        return {
            WebApiPermissionRequest: [
                {
                    _attr: {
                        ResourceId: webApiPermissionRequest.resource,
                        Scope: webApiPermissionRequest.scope,
                        ...webApiPermissionRequest.appId ? {
                            AppId: webApiPermissionRequest.appId,
                            ReplyUrl: webApiPermissionRequest.replyUrl
                        } : {}
                    }
                }
            ]
        };
    }) : undefined;
    return webApiPermissionRequests;
}

//#sourceMappingUrl=./createSolutionXml.js.map