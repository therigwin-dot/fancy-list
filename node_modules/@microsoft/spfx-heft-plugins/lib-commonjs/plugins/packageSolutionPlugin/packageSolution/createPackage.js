/**
 * Creates a client-side app package and writes it to disk
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, /**
 * Creates and writes a package to disk using a package definition and manifest mapping
 */ "default", {
    enumerable: true,
    get: function() {
        return createPackageAsync;
    }
});
const _terminal = require("@rushstack/terminal");
const _normalizeSolutionDefinition = /*#__PURE__*/ _interop_require_default(require("./utils/normalizeSolutionDefinition"));
const _createSolutionXml = /*#__PURE__*/ _interop_require_default(require("./xmlGenerators/createSolutionXml"));
const _readCustomFeatures = require("./utils/readCustomFeatures");
const _validateSolutionDefinition = require("./utils/validateSolutionDefinition");
const _readResources = require("./utils/readResources");
const _writePackage = require("./writePackage");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function createPackageAsync(terminal, xmlSerializationOptions, config, manifests, noSpppkg) {
    // @todo instead of using try/catch we should move config validation to a separate function
    try {
        terminal.writeLine(_terminal.Colorize.yellow('Verifying configuration...'));
        if (!manifests || !manifests.size) {
            throw new Error('The webparts manifests list is empty. ' + 'Please ensure you have done a build and that your config file is pointed at the correct folder.');
        }
        if (!config.paths.zippedPackage || config.paths.zippedPackage === '') {
            throw new Error('The package-solution.json config is missing a package name.');
        }
        terminal.writeLine(_terminal.Colorize.green('Done!'));
        terminal.writeLine();
        terminal.writeLine(_terminal.Colorize.yellow('Normalizing solution information...'));
        (0, _normalizeSolutionDefinition.default)(terminal, config, manifests);
        terminal.writeLine(_terminal.Colorize.green('Done!'));
        terminal.writeLine();
        terminal.writeLine(_terminal.Colorize.yellow('Reading custom Feature XML...'));
        try {
            const customFeatures = await (0, _readCustomFeatures.readCustomFeaturesAsync)(terminal, config);
            terminal.writeLine(_terminal.Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(_terminal.Colorize.yellow('Validating App Package...'));
            (0, _validateSolutionDefinition.validateSolutionDefinition)(terminal, config, customFeatures, manifests);
            terminal.writeLine(_terminal.Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(_terminal.Colorize.yellow('Reading resources...'));
            const resources = await (0, _readResources.readResourcesAsync)(terminal, config);
            terminal.writeLine(_terminal.Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(_terminal.Colorize.yellow('Reading Sharepoint Assets & Creating XML...'));
            const solutionXml = (0, _createSolutionXml.default)(terminal, xmlSerializationOptions, config.solution, customFeatures.customFeatureFilepath, resources, config.contentTypes);
            terminal.writeLine(_terminal.Colorize.green('Done!'));
            terminal.writeLine();
            solutionXml.customFiles = customFeatures.files;
            terminal.writeLine(_terminal.Colorize.yellow(`Writing solution XML to ${config.paths.debugDir}...`));
            await (0, _writePackage.writePackageAsync)(terminal, solutionXml, config, noSpppkg);
            terminal.writeLine(_terminal.Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(_terminal.Colorize.bold(_terminal.Colorize.green('ALL DONE!')));
            terminal.writeLine();
        } catch (error) {
            terminal.writeErrorLine(_terminal.Colorize.red(error));
        }
    } catch (error) {
        terminal.writeErrorLine(_terminal.Colorize.red(error));
        if (error.stack) {
            terminal.writeErrorLine(error.stack);
        }
        throw error;
    }
}

//#sourceMappingUrl=./createPackage.js.map