/**
 * Reads relative file paths given a working directory and a glob.
 * Relative paths are generated by removing a certain
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getFilesAsync: function() {
        return getFilesAsync;
    },
    getRelativeFilePathsAsync: function() {
        return getRelativeFilePathsAsync;
    }
});
const _fastglob = /*#__PURE__*/ _interop_require_default(require("fast-glob"));
const _nodecorelibrary = require("@rushstack/node-core-library");
const _terminal = require("@rushstack/terminal");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function getFilesAsync(terminal, cwd, globs, foundMessage = 'Found file: ') {
    const filenames = await (0, _fastglob.default)(globs, {
        cwd: cwd
    });
    const result = [];
    for (const filename of filenames){
        terminal.writeLine(foundMessage + filename);
        result.push({
            filename,
            contents: await _nodecorelibrary.FileSystem.readFileToBufferAsync(`${cwd}/${filename}`)
        });
    }
    return result;
}
async function getRelativeFilePathsAsync(terminal, cwd, globs, foundMessage = 'Found file: ') {
    const files = await (0, _fastglob.default)(globs, {
        cwd
    });
    for (const filename of files){
        terminal.writeLine(_terminal.Colorize.cyan(foundMessage + filename));
    }
    return files;
}

//#sourceMappingUrl=./getFiles.js.map