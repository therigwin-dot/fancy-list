"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "validateSolutionDefinition", {
    enumerable: true,
    get: function() {
        return validateSolutionDefinition;
    }
});
const _ISolutionMetadata = require("../models/packageDefinition/ISolutionMetadata");
function validateSolutionDefinition(terminal, options, customFeatures, manifests) {
    let hasWarning = false;
    if (options.solution.skipFeatureDeployment) {
        // iterate each feature, counting the customAssets. If there is an Extension, log a warning
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const customAssetFiles = options.solution.features.map((feature)=>{
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            feature.components.forEach((component)=>{
                // HACK: The description is a extensionType - title, but really extensionType should be a first
                // class property
                if (component.manifest.componentType === 'Extension' && component.description.substring(0, 15) === 'FieldCustomizer') {
                    terminal.writeWarningLine(`${component.manifest.alias}: Admins can make this solution available to all sites in the` + ` organization, but field customizers won't automatically appear. SharePoint Framework field ` + `customizers must be specifically associated to fields programmatically to be visible to site users.`);
                    hasWarning = true;
                }
            });
            return(// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            feature.assets.elementFiles.length + // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            feature.assets.elementManifests.length + // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            feature.assets.upgradeActions.length);
        }).reduce((prev, cur)=>{
            return cur + prev;
        });
        const hasFeatureXml = !!(customAssetFiles + customFeatures.files.length);
        // if there is feature XML or Custom Assets, we have encountered a serious error
        if (hasFeatureXml) {
            const hasExtensions = [
                ...manifests.values()
            ].some((value)=>value.componentType === 'Extension' || value.componentType === 'Application');
            const featureXmlMessage = `Admins can make this solution available to all sites immediately, but the solution also contains` + ` feature.xml elements for provisioning. Feature.xml elements are not automatically applied unless the` + ` solution is explicitly installed on a site.`;
            if (hasExtensions) {
                terminal.writeLine(featureXmlMessage);
            } else {
                terminal.writeWarningLine(featureXmlMessage);
                hasWarning = true;
            }
        }
    }
    if (options.solution.metadata && options.solution.metadata.categories && options.solution.metadata.categories.length > _ISolutionMetadata.MAX_SOLUTION_CATEGORIES_COUNT) {
        hasWarning = true;
        terminal.writeWarningLine(`You can add up to ${_ISolutionMetadata.MAX_SOLUTION_CATEGORIES_COUNT} categories for the solution. All others will be ignored.`);
    }
    return !hasWarning;
}

//#sourceMappingUrl=./validateSolutionDefinition.js.map