/**
 * Using the configuration, reads a list of Sharepoint assets of one of 3 types
 * (element manifests, element files, and upgrade actions). Returns an object with a list
 * of IFile files to include in the package.
 *
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "readSharepointAssets", {
    enumerable: true,
    get: function() {
        return readSharepointAssets;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _fs = /*#__PURE__*/ _interop_require_wildcard(require("fs"));
const _terminal = require("@rushstack/terminal");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function readSharepointAssets(terminal, assets, featureId) {
    return {
        elementManifests: readAssetFiles(terminal, assets.elementManifests, 'Element Manifest', featureId),
        elementFiles: readAssetFiles(terminal, assets.elementFiles, 'Element File'),
        upgradeActions: readAssetFiles(terminal, assets.upgradeActions, 'Upgrade Action', featureId)
    };
}
function readAssetFiles(terminal, assetFilePaths, assetFileDescription, subdir) {
    return assetFilePaths?.map((filepath)=>{
        let contents;
        const filename = _path.basename(filepath);
        try {
            contents = _fs.readFileSync(filepath);
        } catch (err) {
            throw new Error(`Could not find ${assetFileDescription}: ${filepath}`);
        }
        terminal.writeLine(_terminal.Colorize.cyan(`Found ${assetFileDescription}: ${filename}`));
        return {
            filename: subdir ? _path.posix.join(subdir, filename) : filename,
            contents
        };
    }) || [];
}

//#sourceMappingUrl=./readSharepointAssets.js.map