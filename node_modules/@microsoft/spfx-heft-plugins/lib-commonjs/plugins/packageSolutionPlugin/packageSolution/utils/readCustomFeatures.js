/**
 * Reads custom feature XML from folder specified by config. This function looks for all `.rels` files in
 * the `/_rels` folder, assumes that a Feature.xml file of the same name exists in the root folder. It
 * returns an object with a list of IFile files to include in the package, as well as the paths to all the
 * feature.xml files, which is later referenced by the `AppManifest.xml.rels` file, thereby including the
 * custom feature in the package.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "readCustomFeaturesAsync", {
    enumerable: true,
    get: function() {
        return readCustomFeaturesAsync;
    }
});
const _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
const _constants = /*#__PURE__*/ _interop_require_default(require("../config/constants"));
const _getFiles = require("./getFiles");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
async function readCustomFeaturesAsync(terminal, options) {
    const filenames = await getCustomFeatureXmlFilenamesAsync(terminal, options.paths.featureXmlDir);
    const files = await getCustomFilesAsync(terminal, options.paths.featureXmlDir);
    return {
        files: files,
        customFeatureFilepath: filenames
    };
}
/** Reads the list of feature xml filenames from a specified rels folder */ async function getCustomFeatureXmlFilenamesAsync(terminal, featureXmlDir) {
    const filenames = await (0, _getFiles.getRelativeFilePathsAsync)(terminal, _path.join(featureXmlDir, _constants.default.RelsFolder), `*${_constants.default.RelsXml}`, 'Found custom feature file: ');
    return filenames.map((filename)=>filename.replace(_constants.default.RelsExtensionRegex, ''));
}
/** Loads a directory of files into IFile objects */ async function getCustomFilesAsync(terminal, featureXmlDir) {
    return await (0, _getFiles.getFilesAsync)(terminal, featureXmlDir, '**/*.*', 'Found custom file: ');
}

//#sourceMappingUrl=./readCustomFeatures.js.map