import type { IV1ConfigJson } from './interfaces/config-v1';
import { type IConfigJson as ILatestConfigJson } from './interfaces/config-v2';
/**
 * @internal
 */
export interface IBaseConfigJsonResult {
    /**
     * True if the file is missing.
     */
    missingFile: boolean;
    /**
     * Parse error data.
     */
    readError?: {};
    /**
     * The version of the original config file.
     */
    version?: string;
    /**
     * True if the config file is the latest version.
     */
    isLatestVersion?: boolean;
}
/**
 * @internal
 */
export interface IConfigJsonResult extends IBaseConfigJsonResult {
    /**
     * The data in the config file.
     */
    configData?: ILatestConfigJson;
}
export interface IV1ConfigJsonResult extends IBaseConfigJsonResult {
    /**
     * The data in the config file.
     */
    configData?: IV1ConfigJson;
}
/**
 * @internal
 */
export declare function readConfigFileAsync(logVerbose: (message: string) => void, filename: string): Promise<IConfigJsonResult>;
//# sourceMappingURL=configJsonReader.d.ts.map