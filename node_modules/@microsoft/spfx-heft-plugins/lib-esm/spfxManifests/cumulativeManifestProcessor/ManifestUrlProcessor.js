import { UrlUtilities } from '../../utilities/UrlUtilities';
export class ManifestUrlProcessor {
    /**
   * This method takes existing manifest data and a configured baseUrl, and
   * attempts to correct or create manifest loaderConfig values for
   * internalModuleBaseUrls paths, if needed.
   *
   * @param manifest - the manifest data for a component.
   * @param relativePath - the manifest path relative to the current build root.
   * @param baseUrl - the base web url for asset resource loading.
   */ static processInternalModuleBaseUrls(manifest, relativePath, baseUrl) {
        relativePath = encodeURI(relativePath.replace(/\\/g, '/'));
        const url = UrlUtilities.joinUrlSegments(baseUrl, relativePath);
        const manifestBaseUrls = manifest.loaderConfig.internalModuleBaseUrls || [];
        if (manifestBaseUrls.length === 0) {
            manifestBaseUrls.push(url);
        } else if (manifestBaseUrls[0].indexOf(url) !== 0) {
            // Ensure the first internalModuleBaseUrl contains the calculated url.
            manifestBaseUrls.unshift(url);
        }
        manifest.loaderConfig.internalModuleBaseUrls = manifestBaseUrls.map((manifestBaseUrl)=>{
            return UrlUtilities.ensureTrailingSlash(manifestBaseUrl);
        });
    }
}

//#sourceMappingUrl=./ManifestUrlProcessor.js.map