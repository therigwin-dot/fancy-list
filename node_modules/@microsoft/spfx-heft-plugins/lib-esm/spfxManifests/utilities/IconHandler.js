import { FileSystem } from '@rushstack/node-core-library';
import * as path from 'path';
import { getFullHash } from './getFullHash';
export var IconPathType;
(function(IconPathType) {
    /**
   * Something that doesn't fit into another category. A warning will be printed.
   */ IconPathType[IconPathType["Malformed"] = 0] = "Malformed";
    /**
   * An absolute URL. Something that begins with a protocol (i.e. - http://...).
   */ IconPathType[IconPathType["AbsoluteUrl"] = 1] = "AbsoluteUrl";
    /**
   * A relative URL. Something that begins with an alphanumeric character, but doesn't look like a protocol.
   */ IconPathType[IconPathType["RelativeUrl"] = 2] = "RelativeUrl";
    /**
   * A relative filesystem path. Something that begins with "./" or "../"
   */ IconPathType[IconPathType["RelativePath"] = 3] = "RelativePath";
    /**
   * A data:image;... url
   */ IconPathType[IconPathType["DataUrl"] = 4] = "DataUrl";
})(IconPathType || (IconPathType = {}));
/**
 * @internal
 */ export class IconHandler {
    static getIconPathType(iconPath) {
        if (!iconPath) {
            return undefined;
        } else if (iconPath.match(/^\.{1,2}\/.+/)) {
            return 3;
        } else if (iconPath.match(/^data:image\/.+/)) {
            return 4;
        } else if (iconPath.match(/^\w+:\/\/.+/)) {
            return 1;
        } else if (iconPath.match(/^\w+/)) {
            return 2;
        } else {
            return 0;
        }
    }
    static processIconPath(terminal, compilation, manifestPath, iconPath) {
        const iconPathType = IconHandler.getIconPathType(iconPath);
        const { WebpackError, sources: { RawSource } } = compilation.compiler.webpack;
        switch(iconPathType){
            case 3:
                {
                    const iconAbsolutePath = path.resolve(path.dirname(manifestPath), iconPath || '');
                    terminal.writeVerboseLine(`Found relative icon path "${iconPath}", resolved to "${iconAbsolutePath}"`);
                    if (!FileSystem.exists(iconAbsolutePath)) {
                        compilation.errors.push(new WebpackError(`Icon file missing from resolved path "${iconAbsolutePath}". The manifest icon will be missing.`));
                        return undefined;
                    } else {
                        const ext = path.extname(iconAbsolutePath);
                        const iconBaseName = path.basename(iconAbsolutePath, ext);
                        const iconContent = FileSystem.readFileToBuffer(iconAbsolutePath);
                        const hash = getFullHash(iconContent, compilation.outputOptions.hashSalt);
                        const iconFilename = `${iconBaseName}_${hash}${ext}`;
                        compilation.fileDependencies.add(iconAbsolutePath);
                        compilation.assets[iconFilename] = new RawSource(iconContent);
                        return iconFilename;
                    }
                }
            case 1:
                {
                    terminal.writeVerboseLine(`Found absolute icon URL "${iconPath}"`);
                    break;
                }
            case 4:
                {
                    terminal.writeVerboseLine(`Found data:image icon URL "${iconPath}"`);
                    break;
                }
            case 2:
                {
                    compilation.warnings.push(new WebpackError(`The icon path "${iconPath}" appears to be a relative web URL. This means that when the ` + 'icon is rendered, this URL will be relative to the CDN url for the rest of the package assets. If a ' + 'relative filesystem path was intended, prepend the path with "./".'));
                    break;
                }
            case undefined:
                {
                    break;
                }
            default:
                {
                    compilation.warnings.push(new WebpackError(`The icon path "${iconPath}" appears to be malformed. The icon may not render as expected.`));
                    break;
                }
        }
        return iconPath;
    }
}

//#sourceMappingUrl=./IconHandler.js.map