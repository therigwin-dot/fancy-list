function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import * as path from 'path';
import { Colorize } from '@rushstack/terminal';
import { readServeConfigFile } from '../../spfxConfig/serveJsonReader';
import { DEFAULT_PORT } from '../../utilities/constants';
export class ConfigureServe {
    generateServeConfig() {
        const serveConfig = {
            port: DEFAULT_PORT
        };
        if (this._serveConfig) {
            if (this._serveConfig.port) {
                serveConfig.port = this._serveConfig.port;
            }
            serveConfig.contentBase = this._serveConfig.contentBase;
            serveConfig.contentBasePublicPath = this._serveConfig.contentBasePublicPath;
            if (this._serveConfig.initialPage) {
                let initialPage = this._serveConfig.initialPage;
                if (this._serveConfig.api) {
                    initialPage = initialPage.replace(`:${this._serveConfig.api.port}`, `:${serveConfig.port}`);
                }
                serveConfig.initialPage = initialPage;
            }
            if (this._serveConfig.api) {
                let apiMap = require(path.join(this._buildFolder, this._serveConfig.api.entryPath));
                if (apiMap.default) {
                    apiMap = apiMap.default;
                }
                serveConfig.apiMap = apiMap;
            }
        }
        return serveConfig;
    }
    logRequestsMiddleware() {
        const logger = this._terminal.writeLine.bind(this._terminal);
        return (req, res, next)=>{
            const msg = [
                ' Request: '
            ];
            if (req.url.endsWith('bundle.js')) {
                msg.push(Colorize.green(req.url));
            } else if (req.url.endsWith('.js')) {
                msg.push(Colorize.magenta(req.url));
            } else {
                msg.push(Colorize.cyan(req.url));
            }
            logger(...msg);
            next();
        };
    }
    _getServeConfig() {
        const configPath = path.join(this._buildFolder, 'config', 'serve.json');
        try {
            const serveConfig = readServeConfigFile(configPath);
            return serveConfig;
        } catch (err) {
            this._terminal.writeWarningLine('Unable to parse serve config file.', String(err));
        }
    }
    constructor(configuration, terminal){
        _define_property(this, "_buildFolder", void 0);
        _define_property(this, "_terminal", void 0);
        _define_property(this, "_serveConfig", void 0);
        this._buildFolder = configuration.buildFolderPath;
        this._terminal = terminal;
        this._serveConfig = this._getServeConfig();
    }
}

//#sourceMappingUrl=./ConfigureServe.js.map