import { Colorize } from '@rushstack/terminal';
import * as os from 'os';
const DEBUG_MANIFESTS_QUERY_PARAMETER = 'debugManifestsFile';
const TEST_URL_ENVIRONMENT_VARIABLE = 'dev_deploy_url';
/**
 * Prints out a link to a page where you can test your changes. Note that loaderUrl and debugManifestFile
 * should both be fully qualified URLs. If the dev_deploy_url environment variable is not set,
 * advice is given on how to set it and the query parameters & hash are printed separately.
 */ export function printDevDeployLink(options) {
    const { terminal, metadata, testingPageUrl = process.env[TEST_URL_ENVIRONMENT_VARIABLE] } = options;
    const queryParameters = new Map();
    queryParameters.set('debug', 'true').set('noredir', 'true');
    if (metadata.loaderUrl) {
        queryParameters.set('loader', metadata.loaderUrl);
    }
    queryParameters.set(DEBUG_MANIFESTS_QUERY_PARAMETER, metadata.debugManifestUrl);
    if (!testingPageUrl) {
        _printHelperMessage(terminal, queryParameters);
    } else {
        _printDeployString(terminal, testingPageUrl, queryParameters);
    }
}
function _printHelperMessage(terminal, queryParameters) {
    const message = `For an improved debugging experience, please set the ` + `'${TEST_URL_ENVIRONMENT_VARIABLE}' environment variable to the URL of the page you are` + ` testing.`;
    terminal.writeLine(Colorize.yellow(message));
    terminal.writeLine(..._getAdvice());
    terminal.writeLine(Colorize.yellow('Debug query parameters:'), ` "${_concatenateQueryParams(queryParameters)}"`);
}
function _getAdvice() {
    const sampleTestPageUrl = 'https://contoso.sharepoint.com/SitePages/TestPage.aspx';
    const osAdvice = {
        win32: [
            `For example, in Windows:${os.EOL}`,
            Colorize.yellow(`set ${TEST_URL_ENVIRONMENT_VARIABLE}=${sampleTestPageUrl}`)
        ],
        darwin: [
            `For example, in MacOS:${os.EOL}`,
            Colorize.yellow(`export ${TEST_URL_ENVIRONMENT_VARIABLE}=${sampleTestPageUrl}`)
        ],
        default: [
            'Please consult your operating system documentation for information on setting environment variables'
        ]
    };
    return osAdvice[process.platform] || osAdvice.default;
}
function _printDeployString(terminal, testingPageUrl, queryParams) {
    const testUrl = testingPageUrl + _concatenateQueryParams(queryParams);
    terminal.writeLine(Colorize.yellow('Test URL:'), ` ${testUrl}`);
}
/**
 * Concatenates the query parameters. Note that no URL escaping is performed
 */ function _concatenateQueryParams(queryParameters) {
    if (!queryParameters.size) {
        return '';
    }
    const queryString = [];
    let firstParameter = true;
    queryParameters.forEach((value, key)=>{
        queryString.push(`${firstParameter ? '?' : '&'}${key}=${value}`);
        firstParameter = false;
    });
    return queryString.join('');
}

//#sourceMappingUrl=./DevDeployLinkPrinter.js.map