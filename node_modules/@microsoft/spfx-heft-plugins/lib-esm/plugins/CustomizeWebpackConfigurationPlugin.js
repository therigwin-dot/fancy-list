import * as path from 'path';
import * as webpack from 'webpack';
import { FileSystem } from '@rushstack/node-core-library';
import { CustomizeWebpackConfigPlugin as PLUGIN_NAME } from './PluginNames';
const WEBPACK5_PLUGIN_NAME = 'webpack5-plugin';
class CustomizeWebpackConfigurationPlugin {
    apply(taskSession, heftConfiguration, options) {
        taskSession.requestAccessToPluginByName('@rushstack/heft-webpack5-plugin', WEBPACK5_PLUGIN_NAME, (accessor)=>{
            accessor.hooks.onConfigure.tapPromise({
                name: PLUGIN_NAME,
                stage: Number.MAX_SAFE_INTEGER // Make sure this runs last
            }, async (webpackConfiguration)=>{
                await this._updateWebpackConfigurationAsync(taskSession, heftConfiguration, webpackConfiguration, options.customizationFilename);
            });
        });
    }
    async _updateWebpackConfigurationAsync(taskSession, heftConfiguration, webpackConfiguration, customizationFilename) {
        const scopedLogger = taskSession.logger;
        const customizeConfigFilePath = path.join(heftConfiguration.projectConfigFolderPath, customizationFilename);
        const customizeConfigFileExists = await FileSystem.existsAsync(customizeConfigFilePath);
        if (customizeConfigFileExists) {
            if (!webpackConfiguration) {
                scopedLogger.emitError(new Error('A webpack configuration must be provided.'));
            } else {
                let scriptExport;
                try {
                    scriptExport = require(customizeConfigFilePath);
                } catch (e) {
                    scopedLogger.emitError(new Error(`Error importing webpack customization script "${customizeConfigFilePath}": ${e}`));
                    return;
                }
                const scriptExportNotDefault = scriptExport;
                const scriptExportAsDefault = scriptExport.default;
                if (typeof scriptExport !== 'function' && typeof scriptExportAsDefault !== 'function') {
                    scopedLogger.emitError(new Error('A webpack configuration customization script must export a function ' + 'that takes a webpack configuration to tweak.'));
                    return;
                }
                const functionToExecute = scriptExportAsDefault || scriptExportNotDefault;
                try {
                    functionToExecute(webpackConfiguration, taskSession, heftConfiguration, webpack);
                } catch (e) {
                    scopedLogger.emitError(new Error(`An error occurred during webpack configuration customization: ${e}`));
                }
            }
        }
    }
}
/**
 * @internal
 */ export { CustomizeWebpackConfigurationPlugin as default };

//#sourceMappingUrl=./CustomizeWebpackConfigurationPlugin.js.map