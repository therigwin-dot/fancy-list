/**
 * Creates a client-side app package and writes it to disk
 */ import { Colorize } from '@rushstack/terminal';
import normalizeSolutionDefinition from './utils/normalizeSolutionDefinition';
import createSolutionXml from './xmlGenerators/createSolutionXml';
import { readCustomFeaturesAsync } from './utils/readCustomFeatures';
import { validateSolutionDefinition } from './utils/validateSolutionDefinition';
import { readResourcesAsync } from './utils/readResources';
import { writePackageAsync } from './writePackage';
/**
 * Creates and writes a package to disk using a package definition and manifest mapping
 */ export default async function createPackageAsync(terminal, xmlSerializationOptions, config, manifests, noSpppkg) {
    // @todo instead of using try/catch we should move config validation to a separate function
    try {
        terminal.writeLine(Colorize.yellow('Verifying configuration...'));
        if (!manifests || !manifests.size) {
            throw new Error('The webparts manifests list is empty. ' + 'Please ensure you have done a build and that your config file is pointed at the correct folder.');
        }
        if (!config.paths.zippedPackage || config.paths.zippedPackage === '') {
            throw new Error('The package-solution.json config is missing a package name.');
        }
        terminal.writeLine(Colorize.green('Done!'));
        terminal.writeLine();
        terminal.writeLine(Colorize.yellow('Normalizing solution information...'));
        normalizeSolutionDefinition(terminal, config, manifests);
        terminal.writeLine(Colorize.green('Done!'));
        terminal.writeLine();
        terminal.writeLine(Colorize.yellow('Reading custom Feature XML...'));
        try {
            const customFeatures = await readCustomFeaturesAsync(terminal, config);
            terminal.writeLine(Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(Colorize.yellow('Validating App Package...'));
            validateSolutionDefinition(terminal, config, customFeatures, manifests);
            terminal.writeLine(Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(Colorize.yellow('Reading resources...'));
            const resources = await readResourcesAsync(terminal, config);
            terminal.writeLine(Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(Colorize.yellow('Reading Sharepoint Assets & Creating XML...'));
            const solutionXml = createSolutionXml(terminal, xmlSerializationOptions, config.solution, customFeatures.customFeatureFilepath, resources, config.contentTypes);
            terminal.writeLine(Colorize.green('Done!'));
            terminal.writeLine();
            solutionXml.customFiles = customFeatures.files;
            terminal.writeLine(Colorize.yellow(`Writing solution XML to ${config.paths.debugDir}...`));
            await writePackageAsync(terminal, solutionXml, config, noSpppkg);
            terminal.writeLine(Colorize.green('Done!'));
            terminal.writeLine();
            terminal.writeLine(Colorize.bold(Colorize.green('ALL DONE!')));
            terminal.writeLine();
        } catch (error) {
            terminal.writeErrorLine(Colorize.red(error));
        }
    } catch (error) {
        terminal.writeErrorLine(Colorize.red(error));
        if (error.stack) {
            terminal.writeErrorLine(error.stack);
        }
        throw error;
    }
}

//#sourceMappingUrl=./createPackage.js.map