/**
 * Using the configuration, reads a list of Sharepoint assets of one of 3 types
 * (element manifests, element files, and upgrade actions). Returns an object with a list
 * of IFile files to include in the package.
 *
 */ import * as path from 'path';
import * as fs from 'fs';
import { Colorize } from '@rushstack/terminal';
/**
 * Reads a special folder containing SharePoint assets which should automatically be integrated into a feature.
 * You can think of this as a slightly more useful version of readCustomFeatures, which allows for custom features
 * to be created, but is more cumbersome when you want to do something simple like include an upgrade action into
 * the SPPKG.
 */ export function readSharepointAssets(terminal, assets, featureId) {
    return {
        elementManifests: readAssetFiles(terminal, assets.elementManifests, 'Element Manifest', featureId),
        elementFiles: readAssetFiles(terminal, assets.elementFiles, 'Element File'),
        upgradeActions: readAssetFiles(terminal, assets.upgradeActions, 'Upgrade Action', featureId)
    };
}
function readAssetFiles(terminal, assetFilePaths, assetFileDescription, subdir) {
    return assetFilePaths?.map((filepath)=>{
        let contents;
        const filename = path.basename(filepath);
        try {
            contents = fs.readFileSync(filepath);
        } catch (err) {
            throw new Error(`Could not find ${assetFileDescription}: ${filepath}`);
        }
        terminal.writeLine(Colorize.cyan(`Found ${assetFileDescription}: ${filename}`));
        return {
            filename: subdir ? path.posix.join(subdir, filename) : filename,
            contents
        };
    }) || [];
}

//#sourceMappingUrl=./readSharepointAssets.js.map