/**
 * Creates an package's Element.Xml for a WebPart or ClientSideSolution
 */ import * as path from 'path';
import XmlGenerator from 'xml';
export default function createComponentXml(xmlSerializationOptions, options, featureId) {
    const contents = {
        Elements: [
            {
                ...createClientSideComponentElement(options)
            }
        ]
    };
    switch(options.manifest.componentType){
        case 'WebPart':
        case 'AdaptiveCardExtension':
            contents.Elements.push({
                Module: createModule(featureId, options)
            });
            break;
        case 'Application':
        case 'Extension':
        case 'Library':
            break;
        default:
            throw new Error(`Invalid Component Type: ${options.manifest.componentType}`);
    }
    contents.Elements.push({
        _attr: {
            xmlns: 'http://schemas.microsoft.com/sharepoint/'
        }
    });
    // @todo Note that the options.id is NOT necessarily the feature ID
    return {
        filename: path.posix.join(featureId, `${options.manifest.componentType}_${options.id}.xml`),
        contents: Buffer.from(XmlGenerator(contents, xmlSerializationOptions))
    };
}
/**
 * Creates a ClientSideComponent element.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function createClientSideComponentElement(options) {
    const attributes = {
        Name: options.name,
        Id: options.id,
        ComponentManifest: JSON.stringify(options.manifest),
        Type: options.manifest.componentType
    };
    if (options.requiresCustomScript) {
        attributes.ReturnIfCustomScriptDisabled = !options.requiresCustomScript;
    }
    return {
        ClientSideComponent: [
            {
                _attr: attributes
            }
        ]
    };
}
/**
 * Creates a Module xml element with all the files.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function createModule(featureId, component) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const result = [
        {
            _attr: {
                Name: component.name,
                Url: '_catalogs/wp',
                List: '113'
            }
        }
    ];
    return result;
}

//#sourceMappingUrl=./createComponentXml.js.map