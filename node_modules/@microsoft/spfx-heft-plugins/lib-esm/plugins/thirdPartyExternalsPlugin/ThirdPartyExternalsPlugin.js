import { PackageJsonLookup } from '@rushstack/node-core-library';
import { ThirdPartyExternalsPlugin as PLUGIN_NAME, SpfxWebpackConfigurationPlugin as SPFX_WEBPACK_CONFIGURATION_PLUGIN_NAME } from '../PluginNames';
import { CONFIG_JSON_SYMBOL, IS_SPFX_WEBPACK_CONFIGURATION_SYMBOL } from '../webpackConfigurationPlugin/WebpackConfigurationGenerator';
import { LegacyExternals } from './LegacyExternals';
const WEBPACK5_PLUGIN_NAME = 'webpack5-plugin';
class ThirdPartyExternalsPlugin {
    apply(taskSession, heftConfiguration) {
        const scopedLogger = taskSession.logger;
        taskSession.requestAccessToPluginByName('@rushstack/heft-webpack5-plugin', WEBPACK5_PLUGIN_NAME, (accessor)=>{
            accessor.hooks.onConfigure.tapPromise({
                name: PLUGIN_NAME,
                // Make sure this runs after the webpack configuration. Avoid using the onAfterConfigure hook
                // since it is possible that we will update the configuration.
                stage: Number.MAX_SAFE_INTEGER
            }, async (webpackConfiguration)=>{
                // Webpack Dev Server will only consider the first config if multiple are defined.
                if (Array.isArray(webpackConfiguration)) {
                    webpackConfiguration = webpackConfiguration[0];
                }
                const config = webpackConfiguration;
                if (!config?.[IS_SPFX_WEBPACK_CONFIGURATION_SYMBOL]) {
                    const thisPackageJson = PackageJsonLookup.loadOwnPackageJson(__dirname);
                    scopedLogger.emitError(new Error('A SPFx webpack configuration must have already been generated. Has ' + `${SPFX_WEBPACK_CONFIGURATION_PLUGIN_NAME} in ${thisPackageJson.name} been applied?`));
                } else {
                    const configJson = config[CONFIG_JSON_SYMBOL];
                    const legacyExternals = new LegacyExternals({
                        configJson: configJson,
                        terminal: scopedLogger.terminal,
                        selectedLocales: Array.from(taskSession.parameters.locales),
                        buildFolder: heftConfiguration.buildFolderPath,
                        serveMode: taskSession.parameters.watch && accessor.parameters.isServeMode,
                        production: taskSession.parameters.production,
                        // Forward the configured hash salt, if any
                        hashSalt: config.output?.hashSalt
                    });
                    legacyExternals.updateWebpackConfiguration(config);
                }
                return config;
            });
        });
    }
}
/**
 * @internal
 */ export { ThirdPartyExternalsPlugin as default };

//#sourceMappingUrl=./ThirdPartyExternalsPlugin.js.map