function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import * as path from 'path';
import { FileSystem } from '@rushstack/node-core-library';
import glob from 'fast-glob';
import { escapeRegExp } from 'lodash';
import { getFullHash } from '../../spfxManifests/utilities/getFullHash';
import { ManifestPlugin } from '../../spfxManifests/webpack/ManifestPlugin';
import { LocalizedManifestModuleProcessor } from '../../spfxManifests/webpack/LocalizedManifestModuleProcessor';
import { normalizeLocaleName } from '../../utilities/normalizeLocaleName';
const LOCALE_TOKEN = '{locale}';
// eslint-disable-next-line @rushstack/security/no-unsafe-regexp
const ESCAPED_TOKEN_REGEXP = new RegExp(escapeRegExp(escapeRegExp(LOCALE_TOKEN)));
// eslint-disable-next-line @rushstack/security/no-unsafe-regexp
const ESCAPED_TOKEN_GLOBAL_REGEXP = new RegExp(escapeRegExp(escapeRegExp(LOCALE_TOKEN)), 'g');
// eslint-disable-next-line @rushstack/security/no-unsafe-regexp
const LOCALE_TOKEN_REGEXP = new RegExp(LOCALE_TOKEN, 'g');
/**
 * @internal
 */ export class LegacyExternals {
    updateWebpackConfiguration(webpackConfiguration) {
        webpackConfiguration.externals = [
            ...webpackConfiguration.externals || [],
            ...Object.keys(this._configJson.localizedResources || {}),
            ...Object.keys(this._configJson.externals || {})
        ];
        let foundManifestPlugin = false;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        for (const plugin of webpackConfiguration.plugins){
            if (plugin instanceof ManifestPlugin) {
                plugin._options.tryGetLegacyExternalByNameAsync = async (name)=>{
                    return await this._tryGetLegacyExternalsByNameAsync(name);
                };
                foundManifestPlugin = true;
            }
        }
        if (!foundManifestPlugin) {
            throw new Error('Unable to find SPFx Manifest Plugin');
        }
    }
    async _ensureLocalizedResourcesAsync() {
        if (!this._discoveredLocalizedResources) {
            const localizedResourceEntries = Object.entries(this._configJson.localizedResources || {});
            this._terminal.writeVerboseLine(`${localizedResourceEntries.length} localized resources defined.`);
            this._discoveredLocalizedResources = new Map();
            for (const [resourceId, pattern] of localizedResourceEntries){
                let result = await this._collectResourcesForKeyAsync(pattern);
                if (this._selectedLocales && this._selectedLocales.length > 0) {
                    const selectedLocalesData = {};
                    for (const selectedLocale of this._selectedLocales){
                        const selectedLocaleData = result[selectedLocale];
                        if (!selectedLocaleData) {
                            throw new Error(`The selected locale (${selectedLocale}) is not present in the localized data for resource ` + `"${resourceId}".`);
                        }
                        selectedLocalesData[selectedLocale] = selectedLocaleData;
                    }
                    result = selectedLocalesData;
                }
                this._discoveredLocalizedResources.set(resourceId, result);
            }
        }
        return this._discoveredLocalizedResources;
    }
    async _collectResourcesForKeyAsync(rawPattern) {
        // If the pattern doesn't have a leading slash, include one so the glob pattern resolves to under the root directory
        const rawPatternMatches = rawPattern.match(/(?:^\/+)(.+)/);
        const pattern = rawPatternMatches ? rawPatternMatches[1] : rawPattern;
        if (rawPatternMatches) {
            this._terminal.writeVerboseLine(`The localized file pattern "${rawPattern}" contains a leading slash. These patterns resolve ` + `to paths under the root directory ("${this._buildFolder}"), so they are intended to ` + 'be relative. A leading slash is not recommended and may produce unexpected behavior.');
        }
        if (!pattern.match(LOCALE_TOKEN_REGEXP)) {
            // Singleton locale, no pattern token
            const fullPath = path.join(this._buildFolder, pattern);
            if (await FileSystem.existsAsync(fullPath)) {
                // Singleton found, resolve as the default locale
                return {
                    default: fullPath
                };
            } else {
                // Singleton not found, throw an error
                throw new Error(`Singleton resource "${rawPattern}" not found.`);
            }
        } else {
            const globPattern = pattern.replace(LOCALE_TOKEN_REGEXP, '*');
            const files = await glob(globPattern, {
                cwd: this._buildFolder
            });
            if (!files || files.length === 0) {
                throw new Error(`No localized files found under the root directory ("${this._buildFolder}") matching ` + `pattern "${rawPattern}"`);
            } else {
                // This turns a pattern that looks something like this: "asdf\{locale}/{locale}/{locale}.js"
                // into a regex that looks something like this: /asdf\/(.+)\/(?:\\1)\/(?:\\1).js/
                const normalizedPattern = path.posix.resolve('/', pattern).substr(1);
                // eslint-disable-next-line @rushstack/security/no-unsafe-regexp
                const regexPattern = new RegExp(escapeRegExp(normalizedPattern).replace(ESCAPED_TOKEN_REGEXP, '(.+)').replace(ESCAPED_TOKEN_GLOBAL_REGEXP, '(?:\\1)'));
                const result = {};
                for (const file of files){
                    const posixFile = file.replace(/\\/g, '/');
                    const match = posixFile.match(regexPattern);
                    if (!match) {
                        this._terminal.writeVerboseLine(`Unexpected file path: "${file}"`);
                    } else {
                        const locale = match[1];
                        this._terminal.writeVerboseLine(`Found file "${file}", identified as locale "${locale}"`);
                        result[locale] = path.join(this._buildFolder, file);
                    }
                }
                return result;
            }
        }
    }
    async _tryGetLegacyExternalsByNameAsync(externalName) {
        let result = this._legacyExternalsByName.get(externalName);
        const configJsonExternals = this._configJson.externals;
        const hashSalt = this._hashSalt;
        if (!result) {
            const discoveredLocalizedResources = await this._ensureLocalizedResourcesAsync();
            const localizedFiles = discoveredLocalizedResources.get(externalName);
            if (localizedFiles) {
                const manifestModulePaths = {};
                const assets = {};
                let localesProcessed = 0;
                let singleLocaleName = undefined;
                for (const [localeName, filePath] of Object.entries(localizedFiles)){
                    const fileContents = await FileSystem.readFileAsync(filePath);
                    const assetFilenameParts = [
                        `${externalName}_${localeName}`
                    ];
                    if (!this._serveMode && this._production) {
                        const fileHash = getFullHash(fileContents, hashSalt);
                        assetFilenameParts.push(`_${fileHash}`);
                    }
                    assetFilenameParts.push(path.extname(filePath));
                    const assetFilename = assetFilenameParts.join('');
                    const normalizedLocaleName = normalizeLocaleName(localeName);
                    manifestModulePaths[normalizedLocaleName] = assetFilename;
                    assets[assetFilename] = fileContents;
                    localesProcessed++;
                    if (localesProcessed === 1) {
                        singleLocaleName = normalizedLocaleName;
                    } else {
                        singleLocaleName = undefined;
                    }
                }
                let manifestModule;
                if (singleLocaleName) {
                    manifestModule = {
                        type: 'path',
                        path: manifestModulePaths[singleLocaleName]
                    };
                } else {
                    manifestModule = {
                        type: 'localizedPath',
                        paths: manifestModulePaths,
                        defaultPath: LocalizedManifestModuleProcessor.findDefaultString(manifestModulePaths)
                    };
                }
                // eslint-disable-next-line require-atomic-updates
                result = {
                    moduleConfigurations: {
                        [externalName]: manifestModule
                    },
                    assets: assets
                };
            } else if (configJsonExternals?.[externalName]) {
                const external = configJsonExternals[externalName];
                // eslint-disable-next-line require-atomic-updates
                result = {
                    moduleConfigurations: {},
                    assets: {}
                };
                const includeExternalAsync = async (name, externalModule)=>{
                    let externalPath;
                    let globalExportName;
                    let globalDependencies;
                    if (typeof externalModule === 'string') {
                        externalPath = externalModule;
                    } else {
                        externalPath = externalModule.path;
                        globalExportName = externalModule.globalName;
                        globalDependencies = externalModule.globalDependencies;
                        if (globalDependencies) {
                            await Promise.all(globalDependencies.map(async (dependencyName)=>{
                                const dependency = configJsonExternals[dependencyName];
                                if (!dependency) {
                                    throw new Error(`Dependency "${dependencyName}" of external "${name}" is not defined. ` + 'It must be defined as an external and it must not be a SPFx component.');
                                }
                                await includeExternalAsync(dependencyName, dependency);
                            }));
                        }
                    }
                    let assetLoadPath;
                    if (/^https?\:/.test(externalPath)) {
                        assetLoadPath = externalPath;
                    } else {
                        let fileContents;
                        const externalFullPath = path.join(this._buildFolder, externalPath);
                        try {
                            fileContents = await FileSystem.readFileAsync(externalPath);
                        } catch (e) {
                            if (FileSystem.isNotExistError(e)) {
                                throw new Error(`"${externalFullPath}" does not exist. Ensure the path is correct and relative to ` + 'the project root.');
                            } else {
                                throw e;
                            }
                        }
                        const assetFilenameParts = [
                            externalName
                        ];
                        if (!this._serveMode) {
                            const fileHash = getFullHash(fileContents);
                            assetFilenameParts.push(`_${fileHash}`);
                        }
                        assetFilenameParts.push(path.extname(externalPath));
                        const assetFilename = assetFilenameParts.join('');
                        assetLoadPath = assetFilename;
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        result.assets[assetFilename] = fileContents;
                    }
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    result.moduleConfigurations[name] = {
                        type: 'path',
                        path: assetLoadPath,
                        globalName: globalExportName,
                        globalDependencies: globalDependencies
                    };
                };
                await includeExternalAsync(externalName, external);
            }
            if (result) {
                this._legacyExternalsByName.set(externalName, result);
            }
        }
        return result;
    }
    constructor(options){
        _define_property(this, "_configJson", void 0);
        _define_property(this, "_terminal", void 0);
        _define_property(this, "_buildFolder", void 0);
        _define_property(this, "_serveMode", void 0);
        _define_property(this, "_production", void 0);
        _define_property(this, "_selectedLocales", void 0);
        _define_property(this, "_hashSalt", void 0);
        _define_property(this, "_discoveredLocalizedResources", void 0);
        _define_property(this, "_legacyExternalsByName", new Map());
        this._configJson = options.configJson;
        this._terminal = options.terminal;
        this._selectedLocales = options.selectedLocales;
        this._buildFolder = options.buildFolder;
        this._serveMode = options.serveMode;
        this._production = options.production;
        this._hashSalt = options.hashSalt;
    }
}

//#sourceMappingUrl=./LegacyExternals.js.map