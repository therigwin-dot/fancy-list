import glob from 'fast-glob';
import { ConfigurationFile } from '@rushstack/heft-config-file';
import { Colorize } from '@rushstack/terminal';
import { DeployAzureStoragePlugin as PLUGIN_NAME } from '../PluginNames';
import { AzureUploader } from '../../utilities/AzureUploader';
import { getStorageAccountUrl } from '../../utilities/devDeployUtilities';
import schema from './deploy-azure-storage.schema.json';
const configFile = new ConfigurationFile({
    projectRelativeFilePath: 'config/deploy-azure-storage.json',
    jsonSchemaObject: schema
});
class DeployAzureStoragePlugin {
    static async deployToAzureAsync({ terminal, buildFolder, emitError, rigConfig, tryCreateContainer }) {
        const config = await configFile.tryLoadConfigurationFileForProjectAsync(terminal, buildFolder, rigConfig) || {};
        if (!config.workingDir) {
            config.workingDir = `${buildFolder}/release/assets`;
        } else {
            // Trim trailing slashes
            config.workingDir = config.workingDir.replace(/[\/\\]+$/, '');
        }
        if (!config.uploadPath) {
            config.uploadPath = '**/*';
        }
        if (!config.container) {
            emitError(new Error('Config file missing container name.'));
            return;
        }
        if (!config.account) {
            emitError(new Error('Config file missing Azure account name.'));
            return;
        }
        if (!config.accessKey) {
            emitError(new Error('Config file missing Azure access key.'));
            return;
        }
        terminal.writeLine(`Uploading files '${config.uploadPath}' from directory '${config.workingDir}' to Azure`);
        const files = await glob(config.uploadPath, {
            cwd: config.workingDir
        });
        const filesToUpload = files.map((filename)=>{
            return {
                azurePath: filename,
                localPath: `${config.workingDir}/${filename}`
            };
        });
        const azureUploader = new AzureUploader({
            storageAccountName: config.account,
            containerName: config.container,
            storageKey: config.accessKey
        });
        try {
            if (tryCreateContainer) {
                await azureUploader.ensureContainerExistsAsync(terminal);
            }
            await azureUploader.uploadFilesToAzureAsync(terminal, filesToUpload);
        } catch (e) {
            emitError(e);
        }
        terminal.writeLine(Colorize.green('Upload complete!\n'));
        terminal.writeLine(`Access your files at: ${getStorageAccountUrl(config.account)}/${config.container}\n`);
    }
    apply(taskSession, heftConfiguration) {
        const scopedLogger = taskSession.logger;
        const skipTryCreateContainerParameter = taskSession.parameters.getFlagParameter('--skip-try-create-container');
        // TODO: Add incremental upload support
        taskSession.hooks.run.tapPromise(PLUGIN_NAME, async ()=>{
            await DeployAzureStoragePlugin.deployToAzureAsync({
                terminal: heftConfiguration.globalTerminal,
                emitError: scopedLogger.emitError.bind(scopedLogger),
                buildFolder: heftConfiguration.buildFolderPath,
                // TODO: Update this to use an interface instead of a class
                rigConfig: heftConfiguration.rigConfig,
                tryCreateContainer: !skipTryCreateContainerParameter.value
            });
        });
    }
}
/**
 * @internal
 */ export { DeployAzureStoragePlugin as default };

//#sourceMappingUrl=./DeployAzureStoragePlugin.js.map