import * as path from 'path';
import { JsonFile, JsonSchema, FileSystem } from '@rushstack/node-core-library';
import { configJsonSchemaUrl } from './interfaces/config-v2';
import v2SchemaObject from './schemas/config.2.0.schema.json';
const V2_SCHEMA = JsonSchema.fromLoadedObject(v2SchemaObject);
/**
 * Read a V1 config file and translate it to the latest schema.
 */ async function _tryV1Async(filename, fileMetadata) {
    const result = {
        missingFile: false,
        version: '1.0',
        isLatestVersion: false
    };
    const v1Schema = JsonSchema.fromLoadedObject(await import('./schemas/config.1.0.schema.json'));
    try {
        const v1Config = await JsonFile.loadAndValidateAsync(filename, v1Schema);
        const configData = {
            $schema: configJsonSchemaUrl,
            version: '2.0',
            bundles: {},
            localizedResources: v1Config.localizedResources,
            externals: v1Config.externals
        };
        if (v1Config.entries) {
            for (const entry of v1Config.entries){
                const name = path.basename(entry.outputPath, path.extname(entry.outputPath));
                configData.bundles[name] = {
                    components: [
                        {
                            entrypoint: entry.entry,
                            manifest: entry.manifest
                        }
                    ]
                };
            }
        }
        if (configData.localizedResources) {
            for (const resourceName of Object.getOwnPropertyNames(configData.localizedResources)){
                const resourcePath = configData.localizedResources[resourceName];
                configData.localizedResources[resourceName] = path.posix.join('lib', resourcePath);
            }
        }
        result.configData = configData;
    } catch (error) {
        if (!fileMetadata.version) {
            result.readError = error;
        } else {
            // Failed to validate, not the right version
            return undefined;
        }
    }
    return result;
}
/**
 * Read a V2 config file. This is currently the latest config version
 */ async function _tryV2Async(filename, fileMetadata) {
    const result = {
        missingFile: false,
        version: '2.0',
        isLatestVersion: true
    };
    try {
        const configData = await JsonFile.loadAndValidateAsync(filename, V2_SCHEMA);
        result.configData = configData;
    } catch (error) {
        if (fileMetadata.version === result.version) {
            result.readError = error;
        } else {
            // Failed to validate, not the right version
            return undefined;
        }
    }
    return result;
}
const _parseFunctions = [
    _tryV2Async,
    _tryV1Async
];
/**
 * @internal
 */ export async function readConfigFileAsync(logVerbose, filename) {
    let fileMetadata;
    try {
        // Read the file to detect basic metadata
        fileMetadata = await JsonFile.loadAsync(filename);
    } catch (error) {
        if (FileSystem.isNotExistError(error)) {
            return {
                missingFile: true
            };
        } else {
            return {
                missingFile: false,
                readError: error
            };
        }
    }
    logVerbose(`Found config file: ${path.basename(filename)}`);
    let result = undefined;
    for(let i = 0; i < _parseFunctions.length && !result; i++){
        result = await _parseFunctions[i](filename, fileMetadata);
    }
    return result || {
        missingFile: false,
        version: fileMetadata.version,
        isLatestVersion: false,
        readError: 'Unknown config.json file format.'
    };
}

//#sourceMappingUrl=./configJsonReader.js.map