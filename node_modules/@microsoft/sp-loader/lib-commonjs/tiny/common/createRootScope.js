"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRootScope = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_dynamic_data_1 = require("@microsoft/sp-dynamic-data");
var sp_http_base_1 = require("@microsoft/sp-http-base");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var flights_1 = require("./flights");
var killSwitches_1 = require("./killSwitches");
var KillSwitches_1 = require("../../utilities/KillSwitches");
/**
 * Create a root service scope and initialize with SPFx services:
 *   - PageContext
 *   - DynamicDataManager
 *   - HttpClient
 *   - SPHttpClient
 *   - GraphHttpClientContext
 *   - DigestCache
 *
 * @param pageContext - the current SPPageContext
 *
 * @returns - the root scope
 */
function createRootScope(pageContext, clientSideApplicationManifest) {
    var root = sp_core_library_1.ServiceScope.startNewRoot();
    root.provide(sp_diagnostics_1._logSourceServiceKey, sp_diagnostics_1._LogSource.create('RootServiceScope'));
    root.createDefaultAndProvide(sp_page_context_1.PageContext.serviceKey);
    root.createDefaultAndProvide(sp_dynamic_data_1._DynamicDataUtilities.IDynamicDataManagerServiceKey);
    root.createDefaultAndProvide(sp_http_base_1.HttpClient.serviceKey);
    var spHttpClient = root.createDefaultAndProvide(sp_http_base_1.SPHttpClient.serviceKey);
    var graphContext = root.createDefaultAndProvide(sp_http_base_1._GraphHttpClientContext.serviceKey);
    var digestCache = root.createDefaultAndProvide(sp_http_base_1.DigestCache.serviceKey);
    // create ClientManifestData service to track the client-side application
    if (clientSideApplicationManifest) {
        root.provide(sp_core_library_1._ClientManifestData.serviceKey, new sp_core_library_1._ClientManifestData(root, clientSideApplicationManifest));
    }
    root.finish();
    initializeGraphHttpClient(pageContext, spHttpClient, graphContext);
    initializeDigestCache(pageContext, digestCache);
    return root;
}
exports.createRootScope = createRootScope;
function getThirdPartyToken(servicePrincipalId, aadTokenProvider, firstPartyConfiguration, appId, claims, refresh) {
    var options = {
        useCachedToken: !refresh,
        claims: claims ? claims[0] : undefined
    };
    // We ignore appId because we always want to ask the 1p app for the 3p token
    return aadTokenProvider._getTokenInternal(servicePrincipalId, firstPartyConfiguration, options);
}
function initializeGraphHttpClient(pageContext, spHttpClient, graphContext) {
    var _a, _b;
    var aadInstanceUrl = pageContext.aadInstanceUrl, aadSessionId = pageContext.aadSessionId, aadTenantId = pageContext.aadTenantId, aadUserId = pageContext.aadUserId, CorrelationId = pageContext.CorrelationId, env = pageContext.env, isAnonymousGuestUser = pageContext.isAnonymousGuestUser, isExternalGuestUser = pageContext.isExternalGuestUser, isEmailAuthenticationGuestUser = pageContext.isEmailAuthenticationGuestUser, msGraphEndpointUrl = pageContext.msGraphEndpointUrl, IsMsalTokenProviderPopupEnabled = pageContext.IsMsalTokenProviderPopupEnabled, spfx3rdPartyServicePrincipalId = pageContext.spfx3rdPartyServicePrincipalId, spfx3rdPartyCustomServicePrincipalId = pageContext.spfx3rdPartyCustomServicePrincipalId, thirdPartyReplyUrisUpdated = pageContext.thirdPartyReplyUrisUpdated, userPrincipalName = pageContext.userPrincipalName, webAbsoluteUrl = pageContext.webAbsoluteUrl, webServerRelativeUrl = pageContext.webServerRelativeUrl;
    if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Local) {
        graphContext.initialize(webServerRelativeUrl, msGraphEndpointUrl, webAbsoluteUrl);
    }
    //
    // TODO: remove the var and if after APEXSpfxCustomAppPrincipalClient graduation
    //
    var servicePrincipalId = spfx3rdPartyServicePrincipalId;
    var shouldUseOboConfig = true;
    if ((0, flights_1.isAPEXSpfxCustomAppPrincipalClientEnabled)() &&
        spfx3rdPartyCustomServicePrincipalId &&
        !(0, killSwitches_1.isDoNotApplyCustomSpfxPrincipalToIsolationKSActive)() &&
        !isThirdPartyIsolatedDomain(servicePrincipalId)) {
        servicePrincipalId = spfx3rdPartyCustomServicePrincipalId;
        shouldUseOboConfig = false;
    }
    else if ((0, flights_1.isUseFirstPartyForThirdPartyAuthenticationFlightEnabled)() &&
        !isThirdPartyIsolatedDomain(servicePrincipalId)) {
        servicePrincipalId = sp_http_base_1._AadConstants.PRE_AUTHORIZED_APP_PRINCIPAL_ID;
    }
    var defaultAadConfig = {
        aadInstanceUrl: aadInstanceUrl,
        aadSessionId: aadSessionId,
        aadTenantId: aadTenantId,
        aadUserId: aadUserId,
        redirectUri: "".concat(window.location.origin, "/_forms/").concat(sp_http_base_1._AadConstants.SPFX_SINGLE_SIGN_ON_REPLY_URL),
        servicePrincipalId: servicePrincipalId,
        spRequestGuid: CorrelationId,
        thirdPartyReplyUrisUpdated: thirdPartyReplyUrisUpdated,
        userPrincipalName: isAnonymousGuestUser || isExternalGuestUser ? undefined : userPrincipalName,
        isMsalTokenProviderPopupEnabled: IsMsalTokenProviderPopupEnabled,
        isAnonymousGuestUser: isAnonymousGuestUser,
        isEmailAuthenticationGuestUser: isEmailAuthenticationGuestUser
    };
    var oboConfig;
    defaultAadConfig.aadInstanceUrl =
        !env || env.toLowerCase() !== 'edog'
            ? (0, killSwitches_1.isUseAADTenantUrlFromContextKSActivated)()
                ? 'https://login.microsoftonline.com'
                : aadInstanceUrl
            : 'https://login.windows-ppe.net';
    var isTeamsAndNaaIsEnabled = (0, flights_1.isNaaFlightEnabled)() && sp_core_library_1._BrowserUtilities.isTeamsHosted();
    var isMobileAndNaaIsEnabled = window.nestedAppAuthBridge &&
        (((0, flights_1.isNaaFlightEnabledForSharePointMobile)() && sp_core_library_1._BrowserUtilities.isMobileWebView()) ||
            ((0, flights_1.isNaaFlightEnabledForVCM)() && sp_core_library_1._BrowserUtilities.isMEEBridgeApplicationHosted()));
    if (isTeamsAndNaaIsEnabled || isMobileAndNaaIsEnabled) {
        defaultAadConfig.isNaaSupported = true;
    }
    var msalV3EnabledAndNotTeams = (0, flights_1.isMsalBrowserV3FlightEnabled)() && !sp_core_library_1._BrowserUtilities.isTeamsHosted();
    if (!(0, killSwitches_1.isAlwaysInitOboConfigKSActive)() ||
        !(0, killSwitches_1.isTeamsBrowserHostedKSActive)() ||
        (((0, flights_1.isOBOForAllTeamsScenariosEnabled)() && sp_core_library_1._BrowserUtilities.isTeamsHosted()) ||
            (!(
            // eslint-disable-next-line react-hooks/rules-of-hooks
            (0, killSwitches_1.useOBOInWebForSecureBrokerKSActivated)()) &&
                sp_core_library_1._BrowserUtilities.isUsingSecureBroker())
            ? sp_core_library_1._BrowserUtilities.isTeamsHosted()
            : sp_core_library_1._BrowserUtilities.isWebViewHosted()) ||
        ((0, flights_1.isSafariAuthPatchEnabled)() && /.*AppleWebKit.*Safari/.test(navigator.userAgent)) ||
        msalV3EnabledAndNotTeams) {
        oboConfig = { spHttpClient: spHttpClient, serverRelativeUrl: webAbsoluteUrl };
    }
    if ((0, flights_1.isUseMsalV3For3pRequestsEnabled)() && !shouldUseOboConfig) {
        // We don't want obo set so that we use MSAL V3 as dev geos is not released to prod
        // and only used by MSIT.  They have setup the single tenant apps to be compatible
        // with MSAL V3.
        oboConfig = undefined;
    }
    try {
        if (isFirstPartyIsolatedDomain(defaultAadConfig === null || defaultAadConfig === void 0 ? void 0 : defaultAadConfig.servicePrincipalId, (_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.host)) {
            if (!(0, KillSwitches_1.notReadTenantIdAndUserIdFromQueryParametersOnFirstPartyIsloatedDomainKSActivated)() &&
                !(defaultAadConfig === null || defaultAadConfig === void 0 ? void 0 : defaultAadConfig.aadTenantId)) {
                var queryParameters = new URL(window.location.href).searchParams;
                if (!(0, killSwitches_1.isGetSessionIdFromQueryParametersKSActivated)()) {
                    defaultAadConfig.aadSessionId =
                        queryParameters.get('sessionId') || defaultAadConfig.aadSessionId;
                }
                defaultAadConfig.aadTenantId = queryParameters.get('tenantId');
                defaultAadConfig.aadUserId = queryParameters.get('userId');
                defaultAadConfig.userPrincipalName = queryParameters.get('userPrincipalName');
                defaultAadConfig.isMsalTokenProviderPopupEnabled =
                    ((_b = queryParameters.get('isMsalTokenProviderPopupEnabled')) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'true';
                sp_diagnostics_1._TraceLogger.logVerbose(sp_diagnostics_1._LogSource.create('RootServiceScope'), "reading tenant id ".concat(defaultAadConfig === null || defaultAadConfig === void 0 ? void 0 : defaultAadConfig.aadTenantId, ", user id ").concat(defaultAadConfig === null || defaultAadConfig === void 0 ? void 0 : defaultAadConfig.aadUserId, ", user principal name ").concat(defaultAadConfig === null || defaultAadConfig === void 0 ? void 0 : defaultAadConfig.userPrincipalName, " from query parameter"));
            }
            sp_http_base_1._AadTokenProviders._initialize(new sp_http_base_1.AadTokenProvider(defaultAadConfig, oboConfig), defaultAadConfig);
        }
        else {
            var aadTokenProvider = new sp_http_base_1.AadTokenProvider(defaultAadConfig, oboConfig);
            var firstPartyConfig = tslib_1.__assign(tslib_1.__assign({}, defaultAadConfig), { servicePrincipalId: sp_http_base_1._AadConstants.PRE_AUTHORIZED_APP_PRINCIPAL_ID });
            if (msalV3EnabledAndNotTeams &&
                ((0, killSwitches_1.isDoNotSetCallbackForVivaMobileKSActive)() || !sp_core_library_1._BrowserUtilities.isTeamsVivaMobile()) &&
                ((0, killSwitches_1.isDoNotSetCallbackForSharePointMobileKSActive)() || !isSharePointMobile())) {
                aadTokenProvider._oboThirdPartyTokenCallback = getThirdPartyToken.bind(null, servicePrincipalId, aadTokenProvider, firstPartyConfig);
            }
            sp_http_base_1._AadTokenProviders._initialize(aadTokenProvider, firstPartyConfig);
        }
    }
    catch (e) {
        sp_diagnostics_1._TraceLogger.logVerbose(sp_diagnostics_1._LogSource.create('RootServiceScope'), 'AadTokenProviders: Failed to initialize');
    }
}
function initializeDigestCache(pageContext, digestCache) {
    var formDigestTimeoutSeconds = pageContext.formDigestTimeoutSeconds, formDigestValue = pageContext.formDigestValue, serverTime = pageContext.serverTime, webAbsoluteUrl = pageContext.webAbsoluteUrl, webServerRelativeUrl = pageContext.webServerRelativeUrl;
    // Value of serverTime is same as what comes as part of formDigestValue
    // but is in locale neutral ISO 8601 format. So it will get correctly
    // parsed by Date class irrespective of client locale.
    // serverTime is accurate to the order of ms, while DateTime which comes
    // as part of formDigestValue is trimmed to order of seconds. Subtract
    // 30s from expirationTimeStamp to avoid any timing errors b/w server and client
    var expirationTimestamp = new Date(serverTime).getTime() + 1000 * formDigestTimeoutSeconds - 30000;
    for (var _i = 0, _a = [webAbsoluteUrl, webServerRelativeUrl]; _i < _a.length; _i++) {
        var url = _a[_i];
        digestCache.addDigestToCache(url, formDigestValue, expirationTimestamp);
    }
}
/**
 * Checking if Sharepoint is running on 1st party isolated domain.
 * @param principleId - server principle id
 * @param windowHost - current window host
 * @returns true if the current server is 1st party isolated domain
 */
function isFirstPartyIsolatedDomain(principleId, windowHost) {
    if ((0, killSwitches_1.notUseFirstPartyIsolatedAppIdOnSecurebrokerDomain)()) {
        return false;
    }
    if (!principleId || !windowHost) {
        return false;
    }
    var firstPartyIsolatedAppId = '3bc2296e-aa22-4ed2-9e1e-946d05afa6a2';
    var firstPartyIsolatedDomain = 'securebroker.sharepointonline.com';
    return principleId === firstPartyIsolatedAppId && windowHost === firstPartyIsolatedDomain;
}
function isThirdPartyIsolatedDomain(principalId) {
    if (!(window === null || window === void 0 ? void 0 : window.location)) {
        return false;
    }
    // parentiWindowOrigin should be set for isolated web part
    var searchParams = new URL(window.location.href).searchParams;
    var parentWindowOrigin = searchParams.get('parentWindowOrigin') || undefined;
    if (!parentWindowOrigin) {
        return false;
    }
    var parentWindowOriginHostName = '';
    try {
        parentWindowOriginHostName = new URL(parentWindowOrigin).hostname;
    }
    catch (_a) {
        return false; // parentWindowOrigin is not a valid URL
    }
    var currentHostName = window.location.hostname;
    return (currentHostName !== parentWindowOriginHostName &&
        !isFirstPartyIsolatedDomain(principalId, currentHostName) // we don't want to change the logic of secure broker isolation
    );
}
function isSharePointMobile() {
    /*
      Mozilla/5.0 (Linux; Android 12; SM-G973U Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/122.0.6261.119 Mobile Safari/537.36 SharePoint for Android
      SharePoint for iOS/v4.51.4.b20240214.Release (iOS/15.0.1;en;Apple/iPhone10,4)
    */
    var ua = navigator.userAgent;
    return /.*SharePoint for (Android|iOS).*/.test(ua);
}
//# sourceMappingURL=createRootScope.js.map