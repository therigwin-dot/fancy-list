"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSPFxDebugSessionData = exports.DebugManager = exports.EMPTY_DEBUG_LOAD_RESULT = exports.LOADER_QUERY_PARAM_NAME = exports.DEBUG_MANIFESTS_FILE_QUERY_PARAM_NAME = exports.SPFX_DEBUG_SESSION_VAR_ID = void 0;
var sp_core_library_1 = require("@microsoft/sp-core-library");
/**
 * Put debug data in a session variable so it gets cleared when the browser or tab is closed.
 */
exports.SPFX_DEBUG_SESSION_VAR_ID = 'spfx-debug';
/**
 * The ?debugManifestsFile query parameter
 */
exports.DEBUG_MANIFESTS_FILE_QUERY_PARAM_NAME = 'debugManifestsFile';
/**
 * The ?loader query parameter. This is replacing the ?moduleLoader query parameter
 */
exports.LOADER_QUERY_PARAM_NAME = 'loader';
/**
 * Resets the debug state. Mutually exclusive to all other debug parameters.
 */
var RESET_QUERY_PARAM_NAME = 'reset';
exports.EMPTY_DEBUG_LOAD_RESULT = {
    debugLoader: undefined,
    debugManifests: undefined,
    liveReload: false,
    registerAsNonDebug: false
};
/**
 * Provides APIs to manage debug scripts.
 *
 * This is used in order to provide security measures before running arbitrary code, and to provide
 * improved debugging experience when a debug loader is used.
 *
 * @internal
 */
var DebugManager = /** @class */ (function () {
    function DebugManager() {
    }
    /**
     * Checks if debug scripts are requested.
     * This method is the first thing called after flights are initialized in SPStarter.start() and should not be called
     * anywhere else.
     *
     * The following cases are supported (in order):
     *  - If the ?reset query parameter is present, clear the debug data and load the page normally.
     *  - If there is SPFX Debug session data containing the testMode property, load the scripts specified in the
     *      session data and return the debug loader and/or manifests. This case is only used for integration tests. The
     *      session data will get set externally by the test harness.
     *  - If the ?loader and/or the ?debugManifestsFile query parameter is present, prompt for
     *      consent and, if consent is granted, load the scripts, record the URLs in the SPFX Debug session data, and
     *      return the debug loader and/or manifests.
     *  - If there is SPFX Debug session data containing a loader URL and/or a manifests file URL, prompt for consent and,
     *      if consent is granted, load the scripts and return the debug loader and/or debug manifests.
     *  - In all other cases, return with no debug loader or manifests.
     *
     * @param componentLoader - The component loader to use to load debug scripts.
     * @param debugData - If defined, the currently executing loader is already a debug loader and the
     *  specified debug data was loaded by the non-debug loader. If the currently executing loader is already a debug
     *  loader, just set these manifests in the manifest store and return.
     *
     * @returns Promise optionally resolving to a debug loader.
     */
    DebugManager.initializeAsync = function (componentLoader, debugData) {
        var currentUrl = new URL(window.location.href);
        if (debugData) {
            return DebugManager.ensureDebugHandlersAsync().then(function (_a) {
                var dangerouslyEnableDebug = _a.dangerouslyEnableDebug, handleDebugDataAsync = _a.handleDebugDataAsync;
                dangerouslyEnableDebug();
                return handleDebugDataAsync(componentLoader, debugData, currentUrl);
            });
        }
        if (!DebugManager._initializationPromise) {
            var spfxDebugSessionData = getSPFxDebugSessionData();
            var isSpfxDebugEnabled = sp_core_library_1._SPFlight.isDebugFlightEnabled;
            DebugManager._initializationPromise = DebugManager._handleDebugParametersAsync(componentLoader, spfxDebugSessionData, currentUrl.searchParams, isSpfxDebugEnabled);
        }
        return DebugManager._initializationPromise;
    };
    DebugManager.ensureDebugHandlersAsync = function () {
        if (!DebugManager._debugHandlers) {
            DebugManager._debugHandlers = Promise.resolve().then(function () { return __importStar(require(
            /* webpackChunkName: 'sp-loader-debug-handlers' */
            './debugHandlers')); });
        }
        return DebugManager._debugHandlers;
    };
    DebugManager._handleDebugParametersAsync = function (componentLoader, spfxDebugSessionData, queryParameters, isSpfxDebugEnabled) {
        return new Promise(function (resolve) {
            if (queryParameters.get(RESET_QUERY_PARAM_NAME) !== null) {
                // The ?reset query parameter is present, clear the debug data and load the page normally.
                spfxDebugSessionData.testMode = undefined;
                sessionStorage.removeItem(exports.SPFX_DEBUG_SESSION_VAR_ID);
                resolve(exports.EMPTY_DEBUG_LOAD_RESULT);
            }
            else if (isSpfxDebugEnabled && spfxDebugSessionData.testMode) {
                // The test mode session property is set
                void DebugManager.ensureDebugHandlersAsync().then(function (_a) {
                    var handleTestMode = _a.handleTestMode;
                    return handleTestMode(componentLoader, spfxDebugSessionData, resolve);
                });
            }
            else {
                // We aren't in test mode, so keep going with the normal debug loader flow
                DebugManager._handleNonTestModeDebugParameters(componentLoader, spfxDebugSessionData, queryParameters, isSpfxDebugEnabled, resolve);
            }
        });
    };
    DebugManager._handleNonTestModeDebugParameters = function (componentLoader, spfxDebugSessionData, queryParameters, isSpfxDebugEnabled, resolve) {
        var debugManifestsFileUrl = queryParameters.get(exports.DEBUG_MANIFESTS_FILE_QUERY_PARAM_NAME) ||
            spfxDebugSessionData.manifestsFileUrl ||
            undefined;
        var debugLoaderUrl = isSpfxDebugEnabled
            ? queryParameters.get(exports.LOADER_QUERY_PARAM_NAME) || spfxDebugSessionData.loaderUrl || undefined
            : undefined;
        if (debugLoaderUrl || debugManifestsFileUrl) {
            void DebugManager.ensureDebugHandlersAsync().then(function (_a) {
                var handleNonTestModeDebug = _a.handleNonTestModeDebug;
                return handleNonTestModeDebug(componentLoader, spfxDebugSessionData, debugManifestsFileUrl, debugLoaderUrl, queryParameters, isSpfxDebugEnabled, resolve);
            });
        }
        else {
            // No debug scripts requested.
            resolve(exports.EMPTY_DEBUG_LOAD_RESULT);
        }
    };
    return DebugManager;
}());
exports.DebugManager = DebugManager;
/**
 * @returns - Some set of debug session data.
 */
function getSPFxDebugSessionData() {
    var spfxDebugSessionData = {};
    try {
        spfxDebugSessionData = JSON.parse(sessionStorage.getItem(exports.SPFX_DEBUG_SESSION_VAR_ID) || '{}');
    }
    catch (e) {
        spfxDebugSessionData = {};
    }
    return spfxDebugSessionData;
}
exports.getSPFxDebugSessionData = getSPFxDebugSessionData;
//# sourceMappingURL=DebugManager.js.map