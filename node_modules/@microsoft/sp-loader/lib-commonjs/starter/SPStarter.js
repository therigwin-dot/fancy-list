"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EVAL_FRAME_FLAG = exports._APP_WORKLOAD_QSP = exports._INCLUDE_APP_WORKLOAD = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_http_base_1 = require("@microsoft/sp-http-base");
var DebugManager_1 = require("../debug/DebugManager");
var showBrowserDevToolsWarning_1 = require("../DeveloperTools/BrowserDeveloperToolsWarning/showBrowserDevToolsWarning");
var developerToolsLoader = tslib_1.__importStar(require("../DeveloperTools/DeveloperToolsLoader"));
var IframeLoadRedirector_1 = require("../iframeLoadRedirector/IframeLoadRedirector");
var LocaleStore_1 = tslib_1.__importDefault(require("../stores/LocaleStore"));
var ManifestStore_1 = tslib_1.__importDefault(require("../stores/ManifestStore"));
var createRootScope_1 = require("../tiny/common/createRootScope");
var SPComponentLoader_1 = require("../tiny/componentLoader/SPComponentLoader");
var RequireLoader_1 = require("../tiny/requireLoader/RequireLoader");
var ManifestStore_2 = require("../tiny/store/ManifestStore");
var componentConstants = tslib_1.__importStar(require("../utilities/componentConstants"));
var ResourceUrlChecker_1 = tslib_1.__importDefault(require("../utilities/ResourceUrlChecker"));
var SPLoaderFlights_1 = tslib_1.__importDefault(require("../utilities/SPLoaderFlights"));
var Starter_resx_1 = tslib_1.__importDefault(require("./Starter.resx"));
var overrideXMLHttpRequest_1 = require("./overrideXMLHttpRequest");
var killSwitches_1 = require("../tiny/common/killSwitches");
var KillSwitches_1 = require("../utilities/KillSwitches");
// !!! Show the developer tools warning as soon as the page loads !!!
if (!DEBUG && !DEPRECATED_UNIT_TEST) {
    (0, showBrowserDevToolsWarning_1.showBrowserDevToolsWarning)();
}
// Flight to enable refactor of flight/KS override bootstrapping into SPFlight and SPKillSwitch respectively,
// and setting cookies with feature overrides
var REFACTOR_DEBUG_FLIGHTS_AND_KILLSWITCHES_FLIGHT_ID = 61863;
var DEBUG_FLIGHTS_QUERY_PARAM = 'debugFlights';
var DEBUG_KILLSWITCHES_QUERY_PARAM = 'debugKillSwitches';
var ENABLE_FEATURES_QUERY_PARAM = 'enableFeatures';
var ENABLE_FEATURES_COOKIE_NAME = "FeatureOverrides_".concat(ENABLE_FEATURES_QUERY_PARAM);
var DISABLE_FEATURES_QUERY_PARAM = 'disableFeatures';
var DISABLE_FEATURES_COOKIE_NAME = "FeatureOverrides_".concat(DISABLE_FEATURES_QUERY_PARAM);
var COMPONENT_LOADER_GLOBAL_VARIABLE = '_spComponentLoader';
var EARLY_QOS_KS = '0f88ae27-bd27-471a-a18e-1b833134575e';
var DISABLE_TOKEN_FETCH_KS = '2bf3e1ce-55da-4552-bc41-e3d072202d3c';
var DO_NOT_ENSURE_GUEST_USERS_KS = '83f6380b-bbb5-4143-8a64-2e422da65bcd';
var USE_AAD_TOKEN_PROVIDERS_CONFIGURABLE_KS = '88944eea-f19b-43fd-ac37-d46746038196';
var ENABLE_FOUNDATION_TELEMETRY_CONTEXT_FIELD_KS = 'ba3dbc95-59b7-41bf-a18c-125ad56f41cf';
var ENABLE_ECS_CLIENT_FLIGHTS_MANIFEST_KS = '736d3cc7-2938-474b-9846-e3bf87bf9bb7';
/**
 * ExperimentalData key for whether to used the app id passed in the query string
 * @internal
 */
exports._INCLUDE_APP_WORKLOAD = 'includeAppWorkload';
/**
 * Query string key used for getting the value to appened to a workload
 * @internal
 */
exports._APP_WORKLOAD_QSP = 'app';
/**
 * Error message returned from the frame used to evaluate assemblies
 *
 * @internal
 */
exports.EVAL_FRAME_FLAG = 'SuccessfulEvalFrame';
// QoS constants
var startQosScenarioName = 'SPComponentLoader.start';
/**
 * Bootstrapper for the application
 * @internal
 */
var SPStarter = /** @class */ (function () {
    function SPStarter() {
    }
    /**
     * Takes an array of components included in the assembly. These components will be added to the component loader
     * during initialization, so they won't need to be loaded afterwards.
     * The array is of the form `[['id', 'version', { ... component ... }]]`
     *
     * @internal
     */
    SPStarter._initializeAssembly = function (assemblyComponents) {
        SPStarter._assemblyComponents = assemblyComponents;
        var bundledComponents = {};
        for (var _i = 0, assemblyComponents_1 = assemblyComponents; _i < assemblyComponents_1.length; _i++) {
            var assemblyComponent = assemblyComponents_1[_i];
            bundledComponents[assemblyComponent[0]] = assemblyComponent[2];
        }
        SPStarter._bundledComponents = bundledComponents;
    };
    /**
     * Raise the `onSecondFlush` event to resume starting with the full set of preloaded data.
     * This is called by the page scripts to resume loading the framework. Do not call it from your own code.
     *
     * @param preloadedData - Full set of preloaded data for the current session.
     */
    SPStarter.startSecondFlush = function (preloadedData) {
        sp_telemetry_1._PerformanceLogger.setPerformanceProperty('SPStarter.startSecondFlush');
        window[COMPONENT_LOADER_GLOBAL_VARIABLE].registerManifests(preloadedData.manifests);
        sp_core_library_1._SPEventManager.instance.raiseStickyEvent('onSecondFlush', preloadedData);
    };
    /**
     * This is called by the page scripts to start loading the framework. Do not call it from your own code.
     * @param preloadedData - Data initialized on the page by the server.
     * @param handleFailure - Error handler function provided by the server to execute if there is SPFx can't be loaded.
     *  It may redirect to an error page or log error data in the console.
     * @param debugData - This parameter is used when the loader initializes a debug loader and
     *  should never be provided by any external callers.
     * @param isFirstFlush - Indicates whether the caller intends to call `startSecondFlush` to finish starting SPFx.
     */
    SPStarter.start = function (preloadedData, handleFailure, debugData, isFirstFlush) {
        var _this = this;
        sp_telemetry_1._PerformanceLogger.devMark('SPStarter.start');
        var _a = preloadedData.clientSideApplicationId, clientSideApplicationId = _a === void 0 ? '00000000-0000-0000-0000-000000000000' : _a, spPageContextInfo = preloadedData.spPageContextInfo, buildNumber = preloadedData.buildNumber;
        var correlationId = spPageContextInfo.CorrelationId;
        this.initializeFlightsAndKillswitches(spPageContextInfo);
        if (!(0, killSwitches_1.overrideXMLHttpRequestKSActivated)()) {
            (0, overrideXMLHttpRequest_1.overrideXMLHttpRequest)();
        }
        if (SPLoaderFlights_1.default._isSafariIsolationEnabled()) {
            var redirectUrl = new URLSearchParams(window.location.search).get(IframeLoadRedirector_1.REDIRECT_PARAM);
            if (redirectUrl) {
                window.location.href = decodeURIComponent(redirectUrl);
            }
            if (window.parent !== window) {
                window.parent.postMessage(IframeLoadRedirector_1.APPLICATION_STARTED_DATA, '*');
            }
        }
        var clientSideApplicationManifest;
        if (!(0, KillSwitches_1.isPassClientSideApplicationManifestToRootScopeKSActivated)()) {
            // trying to find the manifest
            clientSideApplicationManifest = preloadedData.manifests.find(function (manifest) { return manifest.id === clientSideApplicationId; });
        }
        var serviceScope = (0, createRootScope_1.createRootScope)(spPageContextInfo, clientSideApplicationManifest);
        ManifestStore_1.default.instance = new ManifestStore_2.OldManifestStoreShim(serviceScope, spPageContextInfo.webAbsoluteUrl, buildNumber);
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        var spLoader = require('../index');
        ResourceUrlChecker_1.default.useSecondaryCdn = SPStarter.useSecondaryCdn;
        var componentLoader = new SPComponentLoader_1.SPComponentLoader({
            preloadedData: preloadedData,
            serviceScope: serviceScope,
            assemblyComponents: SPStarter._assemblyComponents,
            ctor: RequireLoader_1.RequireLoader,
            debugData: debugData || {},
            useSecondaryCdn: SPStarter.useSecondaryCdn
        });
        var qosMonitor = undefined;
        try {
            // Initialize telemetry
            sp_core_library_1.Log._initialize(new sp_diagnostics_1._LogHandler());
            SPStarter._initializeEnvironment(clientSideApplicationId);
            sp_core_library_1.Session._initialize({
                clientSideApplicationId: clientSideApplicationId,
                applicationId: correlationId
            });
            SPStarter._initializeTelemetry(preloadedData);
            sp_telemetry_1._PerformanceLogger.markSpLoaderStart();
            qosMonitor = new sp_diagnostics_1._QosMonitor(startQosScenarioName);
            // Set locale
            LocaleStore_1.default.setLocale(spPageContextInfo.currentUICultureName);
            if (!sp_core_library_1._SPKillSwitch.isActivated(ENABLE_ECS_CLIENT_FLIGHTS_MANIFEST_KS)) {
                if (!sp_core_library_1._EcsFlight.isEcsFlightEnabled('SPOClientCanaryFlight')) {
                    sp_core_library_1.Log.warn('SPStarter', 'SPOClientCanaryFlight is disabled');
                }
                else {
                    sp_core_library_1.Log.info('SPStarter', 'SPOClientCanaryFlight is enabled');
                }
            }
            // Initialize the proxies
            componentLoader._initialize(preloadedData, SPStarter._assemblyComponents, debugData || {});
            spLoader.SPComponentLoader._initialize(componentLoader);
            window[COMPONENT_LOADER_GLOBAL_VARIABLE] = spLoader.SPComponentLoader;
        }
        catch (error) {
            if (!sp_core_library_1._SPKillSwitch.isActivated(EARLY_QOS_KS /* 10/31/2023, early create of QosMonitor */)) {
                qosMonitor === null || qosMonitor === void 0 ? void 0 : qosMonitor.writeUnexpectedFailure('StartApplication', error);
            }
            return Promise.reject(error);
        }
        return DebugManager_1.DebugManager.initializeAsync(componentLoader, debugData)
            .then(function (debugLoadResult) {
            if (debugLoadResult.debugLoader) {
                // The debug loader will initialize telemetry handlers. To prevent double logging, we skip them in this case.
                if (!sp_core_library_1._SPKillSwitch.isActivated('49c783a0-5b5e-4b25-972b-daa087fadb73' /* 09/11/24, finnnavin: prevent main loader from handling telemetry when debug is enabled */)) {
                    SPStarter._isTelemetryDisabled = true;
                }
                else {
                    sp_telemetry_1._Telemetry.haltBackend();
                }
                // If we're loading a debug loader, call "start" on it instead of continuing with the normal initialization
                // flow
                componentLoader._unloadComponents();
                return debugLoadResult.debugLoader.start(preloadedData, handleFailure, debugLoadResult, isFirstFlush);
            }
            if (!sp_core_library_1._SPKillSwitch.isActivated(DISABLE_TOKEN_FETCH_KS)) {
                try {
                    var _a = preloadedData.spPageContextInfo, aadInstanceUrl = _a.aadInstanceUrl, aadSessionId = _a.aadSessionId, aadTenantId = _a.aadTenantId, aadUserId = _a.aadUserId, spRequestGuid = _a.CorrelationId, userPrincipalName = _a.userPrincipalName, isAnonymousGuestUser = _a.isAnonymousGuestUser, isExternalGuestUser = _a.isExternalGuestUser, isEmailAuthenticationGuestUser = _a.isEmailAuthenticationGuestUser;
                    if (!isAnonymousGuestUser &&
                        (sp_core_library_1._SPKillSwitch.isActivated(DO_NOT_ENSURE_GUEST_USERS_KS) ||
                            (!isExternalGuestUser && !isEmailAuthenticationGuestUser))) {
                        if (!sp_core_library_1._SPKillSwitch.isActivated(USE_AAD_TOKEN_PROVIDERS_CONFIGURABLE_KS)) {
                            var aadTokenProvider = new sp_http_base_1.AadTokenProvider(sp_http_base_1._AadTokenProviders.preAuthorizedConfiguration);
                            void aadTokenProvider._ensureState();
                        }
                        else {
                            var aadTokenProvider = new sp_http_base_1.AadTokenProvider({
                                aadInstanceUrl: aadInstanceUrl,
                                aadSessionId: aadSessionId,
                                aadTenantId: aadTenantId,
                                aadUserId: aadUserId,
                                redirectUri: "".concat(window.location.origin, "/_forms/").concat(sp_http_base_1._AadConstants.SPFX_SINGLE_SIGN_ON_REPLY_URL),
                                servicePrincipalId: sp_http_base_1._AadConstants.PRE_AUTHORIZED_APP_PRINCIPAL_ID,
                                spRequestGuid: spRequestGuid,
                                thirdPartyReplyUrisUpdated: true,
                                userPrincipalName: userPrincipalName
                            });
                            void aadTokenProvider._ensureState();
                        }
                    }
                }
                catch (e) {
                    // Ignore
                }
            }
            // Load the dev tools after the debug loader to reference the right diagnostics component
            developerToolsLoader.initialize(serviceScope);
            // Only run the experiment if the tiny loader is running
            if (SPLoaderFlights_1.default._isOptimisticPreloadEnabled()) {
                spLoader.SPComponentLoader._preloadComponents();
            }
            if (SPLoaderFlights_1.default._isMinimalStartFlightEnabled() && !isFirstFlush) {
                sp_core_library_1._SPEventManager.instance.raiseStickyEvent('onSecondFlush', preloadedData);
            }
            var status = sp_core_library_1._SPExperiment.getVariantAndLogExposure(90033 /* PagesClientServerRequestOptimzationExperiment */) === 1;
            sp_telemetry_1._PerformanceLogger.trackExperiment(90033, status ? 'Treatment' : 'Control');
            var ecsPerformanceTracking = sp_core_library_1._SPExperiment.getVariantAndLogExposure(90215 /* ECSSupportEnabledInSPOExperiment */) === 1;
            sp_telemetry_1._PerformanceLogger.trackExperiment(90215, ecsPerformanceTracking ? 'Treatment' : 'Control');
            // Start the application
            return spLoader.SPComponentLoader._startApplication(preloadedData);
        })
            .then(function (application) {
            qosMonitor.writeSuccess();
            // Log telemetry data from buffers to the server
            SPStarter._logDataInRealTime();
            return application;
        })
            .catch(function (error) {
            if (error.message === exports.EVAL_FRAME_FLAG) {
                return {};
            }
            if (qosMonitor) {
                if (error.message === 'Out of stack space') {
                    qosMonitor.writeExpectedFailure('ConflictingPolyfill', error);
                }
                else {
                    qosMonitor.writeUnexpectedFailure('StartApplication', error);
                }
            }
            SPStarter._logDataInRealTime();
            return _this._handleError(error, Starter_resx_1.default.loaderUserFriendlyError, sp_telemetry_1._Telemetry.isInitialized ? 'ClientError' : 'ClientErrorBeforeTelemetry', correlationId, preloadedData);
        });
    };
    /**
     * Initializes the flights and killswitches.  This should only ever be called during page load.  It is broken out
     * so that we can initialize the killswitches before trying to do any work as that allows killswitches and flights
     * to be used before start is run.
     *
     * @internal
     */
    SPStarter.initializeFlightsAndKillswitches = function (spPageContextInfo) {
        var _a, _b;
        // We can't put a killswitch on the new code so we just check a static boolean to ensure we only do this once
        if (!this._isKillSwitchAndFlightingInitialized) {
            this._isKillSwitchAndFlightingInitialized = true;
            // Initialize flights and killswitches with the data from the server
            sp_core_library_1._SPFlight.initialize(spPageContextInfo.ExpFeatures);
            sp_core_library_1._SPKillSwitch.initialize(spPageContextInfo.killSwitches);
            if (!sp_core_library_1._SPKillSwitch.isActivated(ENABLE_ECS_CLIENT_FLIGHTS_MANIFEST_KS)) {
                sp_core_library_1._EcsFlight.initialize(spPageContextInfo.ECSClientFeatures);
            }
            // Initialize debug flights and killswitches from the query params and cookies
            var allowDebug = sp_core_library_1._SPFlight.isDebugFlightEnabled || sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.Local;
            if (allowDebug) {
                if (!sp_core_library_1._SPFlight.isEnabled(REFACTOR_DEBUG_FLIGHTS_AND_KILLSWITCHES_FLIGHT_ID)) {
                    var debugFlightsQueryParam = this._getQueryParamValue(DEBUG_FLIGHTS_QUERY_PARAM);
                    var enableFeaturesQueryParam = this._getQueryParamValue(ENABLE_FEATURES_QUERY_PARAM);
                    var disableFeaturesQueryParam = this._getQueryParamValue(DISABLE_FEATURES_QUERY_PARAM);
                    var enableFeaturesCookieValue = this._getCookieValue(ENABLE_FEATURES_COOKIE_NAME);
                    var disableFeaturesCookieValue = this._getCookieValue(DISABLE_FEATURES_COOKIE_NAME);
                    var debugFlights = new Set([].concat((debugFlightsQueryParam === null || debugFlightsQueryParam === void 0 ? void 0 : debugFlightsQueryParam.split(',')) || [], (enableFeaturesQueryParam === null || enableFeaturesQueryParam === void 0 ? void 0 : enableFeaturesQueryParam.split(',')) || [], (enableFeaturesCookieValue === null || enableFeaturesCookieValue === void 0 ? void 0 : enableFeaturesCookieValue.split(',')) || [], ((_a = disableFeaturesQueryParam === null || disableFeaturesQueryParam === void 0 ? void 0 : disableFeaturesQueryParam.split(',')) === null || _a === void 0 ? void 0 : _a.map(function (f) { return "!".concat(f); })) || [], ((_b = disableFeaturesCookieValue === null || disableFeaturesCookieValue === void 0 ? void 0 : disableFeaturesCookieValue.split(',')) === null || _b === void 0 ? void 0 : _b.map(function (f) { return "!".concat(f); })) || []));
                    var debugFlightsStr = debugFlights.size
                        ? Array.from(debugFlights).join(',')
                        : undefined;
                    sp_core_library_1._SPFlight.setDebugFlights(debugFlightsStr);
                }
                sp_core_library_1._SPKillSwitch.setDebugKillswitches(this._getQueryParamValue(DEBUG_KILLSWITCHES_QUERY_PARAM));
            }
        }
    };
    SPStarter._logDataInRealTime = function () {
        if (!SPStarter._isTelemetryDisabled && !SPStarter._isTelemetryLoggingInRealTime) {
            sp_telemetry_1._Telemetry.startRealTimeProcessing();
            SPStarter._isTelemetryLoggingInRealTime = true;
        }
    };
    SPStarter._initializeEnvironment = function (clientSideApplicationId) {
        var type;
        if (window.location.hostname === 'localhost' ||
            (window.ENVIRONMENTTYPE && window.ENVIRONMENTTYPE === 'Local')) {
            type = sp_core_library_1.EnvironmentType.Local;
        }
        else if (clientSideApplicationId === 'eb4b666b-5c29-4dad-9a99-23613f21a2b7') {
            // 'eb4b666b-5c29-4dad-9a99-23613f21a2b7' is the classic page application id.
            type = sp_core_library_1.EnvironmentType.ClassicSharePoint;
        }
        else {
            type = sp_core_library_1.EnvironmentType.SharePoint;
        }
        sp_core_library_1.Environment._initialize({ type: type });
    };
    SPStarter._initializeTelemetry = function (preloadedData) {
        var _a;
        var buildNumber = preloadedData.buildNumber, clientSideApplicationId = preloadedData.clientSideApplicationId, listItemId = preloadedData.listItemId, manifests = preloadedData.manifests, spPageContextInfo = preloadedData.spPageContextInfo;
        var CorrelationId = spPageContextInfo.CorrelationId, listId = spPageContextInfo.listId, siteId = spPageContextInfo.siteId, webId = spPageContextInfo.webId;
        var appManifest = manifests[0];
        if (!(0, KillSwitches_1.isFindAppManifestInsteadUsingFirstKSActivated)()) {
            var foundManifest = manifests.find(function (manifest) { return manifest.id === clientSideApplicationId; });
            if (foundManifest) {
                appManifest = foundManifest;
            }
        }
        var workload = appManifest.alias;
        if (!(0, killSwitches_1.overrideWorkloadKSActivated)() &&
            appManifest.experimentalData &&
            appManifest.experimentalData[exports._INCLUDE_APP_WORKLOAD]) {
            try {
                var locationUrl = new URL(location.href);
                if (locationUrl.searchParams.get(exports._APP_WORKLOAD_QSP)) {
                    workload += '-' + locationUrl.searchParams.get(exports._APP_WORKLOAD_QSP);
                }
            }
            catch (_b) {
                // No-op as workload should be left as the default value
            }
        }
        var isFoundation = undefined;
        if (!sp_core_library_1._SPKillSwitch.isActivated(ENABLE_FOUNDATION_TELEMETRY_CONTEXT_FIELD_KS /* 1/29/2025, lmarulanda: add isFoundation telemetry context field */)) {
            // isFoundation will be included in the minimal preloaded data
            isFoundation = (_a = preloadedData.isFoundation) !== null && _a !== void 0 ? _a : false;
        }
        // The first manifest is always the application's manifest.
        sp_telemetry_1._Telemetry.initialize(workload, spPageContextInfo, buildNumber, clientSideApplicationId, isFoundation);
        sp_diagnostics_1._Diagnostics.initialize({
            enableConsoleLog: SPStarter._isConsoleLogEnabled(),
            siteId: siteId,
            webId: webId,
            listId: listId,
            listItemUniqueId: listItemId,
            correlationId: CorrelationId
        });
    };
    SPStarter._isQueryParameterTrue = function (name) {
        var parameterValue;
        try {
            parameterValue = this._getQueryParamValue(name) === 'true';
        }
        catch (error) {
            parameterValue = false;
        }
        return parameterValue;
    };
    SPStarter._isConsoleLogEnabled = function () {
        return SPStarter._isQueryParameterTrue('enableConsoleLog');
    };
    SPStarter._handleError = function (error, userFriendlyMessage, operationName, correlationId, preloadedData) {
        var errorInformation = {
            message: userFriendlyMessage,
            correlationId: correlationId,
            error: error,
            operationName: operationName
        };
        if (this._isRedirectDisabled(preloadedData)) {
            this._consoleErrorHandleFailure(errorInformation);
        }
        else {
            this._errorAspxHandleFailure(errorInformation, preloadedData);
        }
        return Promise.reject(error);
    };
    SPStarter._isRedirectDisabled = function (preloadedData) {
        return (SPStarter._isQueryParameterTrue('noredir') ||
            sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.ClassicSharePoint || // Classic pages
            sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.Local || // Local workbench
            preloadedData.clientSideApplicationId === componentConstants.listViewHostComponentId); // ListView application
    };
    SPStarter._consoleErrorHandleFailure = function (errorInformation) {
        // eslint-disable-next-line no-console
        console.error(errorInformation.message);
        if (errorInformation.correlationId) {
            // eslint-disable-next-line no-console
            console.error("Correlation Id: " + errorInformation.correlationId);
        }
        if (errorInformation.operationName) {
            // eslint-disable-next-line no-console
            console.error("Operation name: " + errorInformation.operationName);
        }
        if (errorInformation.error) {
            // eslint-disable-next-line no-console
            console.error(errorInformation.error.message);
            // eslint-disable-next-line no-console
            console.error("CALL STACK: " + errorInformation.error.stack);
        }
    };
    SPStarter._errorAspxHandleFailure = function (errorInformation, preloadedData) {
        var _a;
        window.location.href =
            (((_a = preloadedData.spPageContextInfo) === null || _a === void 0 ? void 0 : _a.webAbsoluteUrl) || '') +
                '/_layouts/15/error.aspx' +
                '?ErrorCorrelationId=' +
                encodeURIComponent(errorInformation.correlationId || '') +
                '&ErrorText=' +
                encodeURIComponent(errorInformation.message) +
                '&ErrorDetails=' +
                encodeURIComponent(errorInformation.error ? errorInformation.error.toString() : '') +
                '&Name=' +
                encodeURIComponent(errorInformation.operationName || 'DefaultOperation') +
                '&ErrorCategory=spfx';
    };
    SPStarter._getQueryParamValue = function (name) {
        if (!this._queryParams) {
            this._queryParams = new URLSearchParams(self.location.search);
        }
        if (this._queryParams.has(name)) {
            return this._queryParams.get(name);
        } // else returns undefined
    };
    // delete this when graduating 61583 flight
    SPStarter._getCookieValue = function (name) {
        var cookieMatch = self.document.cookie.match("(^|;)\\s*".concat(name, "\\s*=\\s*([^;]+)"));
        return cookieMatch ? cookieMatch.pop() : undefined;
    };
    /**
     * Value indicating if we should load scripts from the secondary CDN.
     */
    SPStarter.useSecondaryCdn = false;
    SPStarter._isTelemetryDisabled = false;
    SPStarter._isTelemetryLoggingInRealTime = false;
    SPStarter._isKillSwitchAndFlightingInitialized = false;
    return SPStarter;
}());
exports.default = SPStarter;
//# sourceMappingURL=SPStarter.js.map