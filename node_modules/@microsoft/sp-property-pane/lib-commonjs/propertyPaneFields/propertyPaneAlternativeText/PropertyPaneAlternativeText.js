"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyPaneAlternativeText = void 0;
var tslib_1 = require("tslib");
var Strings_resx_1 = tslib_1.__importDefault(require("../../loc/Strings.resx"));
var IPropertyPaneField_1 = require("../propertyPaneField/IPropertyPaneField");
var PropertyPaneLabel_1 = require("../propertyPaneLabel/PropertyPaneLabel");
var PropertyPaneLink_1 = require("../propertyPaneLink/PropertyPaneLink");
var Styling_1 = require("@fluentui/react/lib/Styling");
var PropertyPaneHeading_1 = require("../propertyPaneHeading/PropertyPaneHeading");
var office_ui_fabric_react_bundle_1 = require("@ms/office-ui-fabric-react-bundle");
var screen_reader_alert_1 = require("@ms/screen-reader-alert");
var sp_component_utilities_1 = require("@ms/sp-component-utilities");
var react_1 = tslib_1.__importDefault(require("react"));
var KillSwitches_1 = require("../../common/KillSwitches");
var Flights_1 = require("../../common/Flights");
/**
 * Helper method to create an AlternativeText box and decorative toggle on the PropertyPane.
 * @param properties - Strongly typed AlternativeText box and toggle properties.
 *
 * @internal
 */
function PropertyPaneAlternativeText(properties, isDecorativeHidden) {
    return tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], (properties.disableHeading
        ? []
        : [
            (0, PropertyPaneHeading_1.PropertyPaneHeading)('accessibilityHeading', {
                text: Strings_resx_1.default.AccessibilityTitle,
                headingLevel: 'h3'
            })
        ]), true), [
        (0, PropertyPaneLabel_1.PropertyPaneLabel)('altTextDescription', getPropertyPaneLabelProperties(Strings_resx_1.default.AltTextDesc)),
        (0, PropertyPaneLink_1.PropertyPaneLink)('webAIMLink', {
            ariaLabel: Strings_resx_1.default.WebAIMLink,
            text: Strings_resx_1.default.WebAIMLink,
            target: '_blank',
            href: 'https://go.microsoft.com/fwlink/?LinkId=734040'
        }),
        {
            type: IPropertyPaneField_1.PropertyPaneFieldType.TextField,
            targetProperty: properties.altTextPropertyName,
            shouldFocus: properties.shouldFocusInAltText,
            properties: tslib_1.__assign({ logName: { moduleName: properties.moduleName, controlName: 'AltText' }, multiline: properties.isMultiline, rows: properties.multilineRows, disabled: properties.isDecorative, dataAutomationId: 'image-alt-text-input', resizable: false, ariaLabel: Strings_resx_1.default.AltText }, {
                styles: {
                    root: {
                        marginTop: '8px'
                    }
                }
            })
        }
    ], false), (isDecorativeHidden
        ? []
        : [
            {
                type: IPropertyPaneField_1.PropertyPaneFieldType.Toggle,
                targetProperty: properties.isDecorativePropertyName,
                shouldFocus: properties.shouldFocusInAltText,
                properties: getPropertyPaneToggleProperties(properties.isDecorative, properties.moduleName, 'image-mark-as-decorative-toggle', 'MarkImageAsDecorative')
            }
        ]), true);
}
exports.PropertyPaneAlternativeText = PropertyPaneAlternativeText;
function getPropertyPaneLabelProperties(text, fontWeight, fontSize) {
    return tslib_1.__assign({ text: text }, {
        styles: {
            root: {
                fontWeight: fontWeight ? fontWeight : Styling_1.FontWeights.regular,
                fontSize: fontSize ? fontSize : undefined
            }
        }
    });
}
function getPropertyPaneToggleProperties(isDecorative, moduleName, dataAutomationId, controlName) {
    // Switch migration is kept behind card motion flight to control rollout.
    var shouldUseInlineLabelForSwitch = !(0, KillSwitches_1.isFixInlineLabelKSActivated)() && !(0, KillSwitches_1.isMigrateToggleToSwitchKSActivated)() && (0, Flights_1.isCardMotionEnabled)();
    return tslib_1.__assign({ inlineLabel: true, onAriaLabel: Strings_resx_1.default.OnAriaLabel, offAriaLabel: Strings_resx_1.default.OffAriaLabel, dataAutomationId: dataAutomationId, checked: isDecorative, _label: shouldUseInlineLabelForSwitch ? getSwitchInlineLabel() : getToggleLabel() }, {
        logName: { moduleName: moduleName, controlName: controlName }
    });
}
function getToggleLabel() {
    return (react_1.default.createElement("div", { style: { display: 'inline-flex', fontWeight: 400, marginLeft: '-8px' } },
        react_1.default.createElement("p", null, Strings_resx_1.default.MarkImageAsDecorative),
        react_1.default.createElement(office_ui_fabric_react_bundle_1.TooltipHost, { content: Strings_resx_1.default.DecorativeTooltipDesc, 
            // eslint-disable-next-line react/jsx-no-bind
            onTooltipToggle: function (isOpen) {
                if (isOpen) {
                    if (!(0, KillSwitches_1.isSwitchToCommonScreenReaderAlertKSActivated)()) {
                        screen_reader_alert_1.ScreenReaderAlert.read(Strings_resx_1.default.DecorativeTooltipDesc, 2);
                    }
                    else {
                        sp_component_utilities_1.ScreenReaderAlert.read(Strings_resx_1.default.DecorativeTooltipDesc, 2);
                    }
                }
            } },
            react_1.default.createElement(office_ui_fabric_react_bundle_1.IconButton, { style: { marginTop: '8px' }, "aria-label": Strings_resx_1.default.IconAriaLabel, iconProps: { iconName: 'info' }, ariaDescription: Strings_resx_1.default.MarkImageAsDecorative }))));
}
function onTooltipToggle(isOpen) {
    if (isOpen) {
        screen_reader_alert_1.ScreenReaderAlert.read(Strings_resx_1.default.DecorativeTooltipDesc, 2);
    }
}
function getSwitchInlineLabel() {
    return (react_1.default.createElement("div", { style: { display: 'inline-flex', fontWeight: 400 } },
        react_1.default.createElement("span", null, Strings_resx_1.default.MarkImageAsDecorative),
        react_1.default.createElement(office_ui_fabric_react_bundle_1.TooltipHost, { content: Strings_resx_1.default.DecorativeTooltipDesc, onTooltipToggle: onTooltipToggle },
            react_1.default.createElement(office_ui_fabric_react_bundle_1.IconButton, { style: { height: '24px' }, "aria-label": Strings_resx_1.default.IconAriaLabel, iconProps: { iconName: 'info' }, ariaDescription: Strings_resx_1.default.MarkImageAsDecorative }))));
}
//# sourceMappingURL=PropertyPaneAlternativeText.js.map