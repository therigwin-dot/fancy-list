"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyPaneTabList = void 0;
var tslib_1 = require("tslib");
var react_components_1 = require("@fluentui/react-components");
var React = tslib_1.__importStar(require("react"));
var PropertyPaneTabList_styles_1 = require("./PropertyPaneTabList.styles");
var react_icons_1 = require("@fluentui/react-icons");
var PropertyPaneTablistStrings_resx_1 = tslib_1.__importDefault(require("./PropertyPaneTablistStrings.resx"));
var odsp_utilities_bundle_1 = require("@ms/odsp-utilities-bundle");
var OverflowMenuItem = function (props) {
    var tab = props.tab, onClick = props.onClick;
    var isVisible = (0, react_components_1.useIsOverflowItemVisible)(tab.id.toString());
    if (isVisible) {
        return React.createElement(React.Fragment, null);
    }
    return (React.createElement(react_components_1.MenuItem, { key: tab.id, onClick: onClick },
        React.createElement("div", null, tab.title)));
};
var OverflowMenu = function (props) {
    var onOverflowSelected = props.onOverflowSelected, tabs = props.tabs;
    var _a = (0, react_components_1.useOverflowMenu)(), ref = _a.ref, isOverflowing = _a.isOverflowing, overflowCount = _a.overflowCount;
    var styles = (0, PropertyPaneTabList_styles_1.getPropertyPaneClassNames)(PropertyPaneTabList_styles_1.getPropertyPaneStyles);
    if (!isOverflowing) {
        return React.createElement(React.Fragment, null);
    }
    return (React.createElement(react_components_1.Menu, null,
        React.createElement(react_components_1.MenuTrigger, { disableButtonEnhancement: true },
            React.createElement(react_components_1.Button, { appearance: 'transparent', className: styles.menuButton, ref: ref, icon: React.createElement(react_icons_1.MoreHorizontalRegular, null), "aria-label": odsp_utilities_bundle_1.StringHelper.format(PropertyPaneTablistStrings_resx_1.default.MoreTabsAriaLabel, overflowCount), role: 'tab' })),
        React.createElement(react_components_1.MenuPopover, null,
            React.createElement(react_components_1.MenuList, { className: styles.menu }, tabs.map(function (tab) { return (React.createElement(OverflowMenuItem, { key: tab.id, tab: tab, 
                // eslint-disable-next-line react/jsx-no-bind
                onClick: function () { return onOverflowSelected(tab.id); } })); })))));
};
var PropertyPaneTabList = function (props) {
    var onChangeTab = props.onChangeTab, pages = props.pages, currentPage = props.currentPage;
    var tabs = (pages || []).map(function (item, index) {
        return { title: item.title, id: index };
    });
    var styles = (0, PropertyPaneTabList_styles_1.getPropertyPaneClassNames)(PropertyPaneTabList_styles_1.getPropertyPaneStyles);
    var onTabSelected = React.useCallback(function (event, data) {
        onChangeTab(Number(data.value));
    }, [onChangeTab]);
    var onOverflowSelected = React.useCallback(function (tabId) {
        onChangeTab(tabId);
    }, [onChangeTab]);
    return (React.createElement("div", { className: (0, react_components_1.mergeClasses)(styles.horizontalTablist) },
        React.createElement(react_components_1.Overflow, { minimumVisible: 2 },
            React.createElement(react_components_1.TabList, { selectedValue: currentPage, onTabSelect: onTabSelected, className: styles.tablist },
                tabs.map(function (tab) { return (React.createElement(react_components_1.OverflowItem, { key: tab.id, id: tab.id.toString(), priority: tab.id === currentPage ? 2 : 1 },
                    React.createElement(react_components_1.Tab, { className: styles.tabItem, key: tab.id, id: tab.id.toString(), value: tab.id }, tab.title))); }),
                React.createElement(OverflowMenu, { tabs: tabs, onOverflowSelected: onOverflowSelected })))));
};
exports.PropertyPaneTabList = PropertyPaneTabList;
//# sourceMappingURL=PropertyPaneTabList.js.map