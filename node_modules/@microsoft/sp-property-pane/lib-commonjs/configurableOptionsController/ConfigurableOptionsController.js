"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurableOptionsController = void 0;
var tslib_1 = require("tslib");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var PropertyPaneController_1 = tslib_1.__importDefault(require("../propertyPaneController/PropertyPaneController"));
var Flights_1 = require("../common/Flights");
var DeferredContentPanelController_1 = require("../contentPanelController/DeferredContentPanelController");
var KillSwitches_1 = require("../common/KillSwitches");
var COMPONENT_NAME = 'ConfigurableOptionsController';
var logSource = sp_diagnostics_1._LogSource.create(COMPONENT_NAME);
/**
 * Class which manages all the interactions between property pane and the property pane consumers, such as web parts.
 *
 * **Expanded responsibilities:**
 * - Manages the Content Panel for propertyPane consumers it supports
 * - Handles conflict resolutions between the PropertyPaneController and ContentPanel.
 *
 * @internal
 */
var ConfigurableOptionsController = /** @class */ (function () {
    function ConfigurableOptionsController() {
        var _this = this;
        /**
         * Temporary map of consumers until _contentPanelControllerPromise is resolved.
         */
        this._temporaryConsumerRegistry = new Map();
        this._connectedConsumerWaitSet = new Map();
        /**
         * Listen for updates to the content panel so conflicts can be resolved.
         */
        this._onContentPanelUpdate = function () {
            // Conflict resolution:
            // When there is a conflict after the content panel updates. Given the logic in requestAction...
            // We can assume someone interacted directly with Content Panel and it didn't come through our requestAction,
            // so close PropertyPaneController.
            if (_this._propertyPaneController.isOpen() && _this.isContentPanelOpen()) {
                if (!(0, KillSwitches_1.isForceCloseWithoutFiringEventsKSActivated)()) {
                    _this._propertyPaneController.forceClose();
                }
                else {
                    _this._propertyPaneController.requestAction(_this._propertyPaneController.currentlyConfiguredConsumerId || '', 'Close');
                }
                sp_diagnostics_1._TraceLogger.logVerbose(logSource, "Conflict: closed property pane");
            }
        };
        this._propertyPaneController = new PropertyPaneController_1.default();
        if ((0, Flights_1.isConfigurationToolsEnabled)()) {
            this._contentPanelController = new DeferredContentPanelController_1.DeferredContentPanelController();
            this._contentPanelController.waitForController().then(function () { var _a; return (_a = _this._contentPanelController) === null || _a === void 0 ? void 0 : _a.addOnUpdateListener(_this._onContentPanelUpdate); }, function (error) {
                sp_diagnostics_1._TraceLogger.logError(logSource, error);
            });
        }
    }
    Object.defineProperty(ConfigurableOptionsController.prototype, "_contentPanelControllerCasted", {
        get: function () {
            return this._contentPanelController;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConfigurableOptionsController.prototype, "currentlyConfiguredConsumerId", {
        get: function () {
            var _a;
            return this.isContentPanelOpen()
                ? (_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a.currentlyConfiguredConsumerId
                : this._propertyPaneController.currentlyConfiguredConsumerId;
        },
        enumerable: false,
        configurable: true
    });
    ConfigurableOptionsController.prototype.registerOnPropertyPaneFieldChangedListener = function (instanceId, callback) {
        // note: ContentPanelController doesn't implement this api
        return this._propertyPaneController.registerOnPropertyPaneFieldChangedListener(instanceId, callback);
    };
    ConfigurableOptionsController.prototype.registerConsumer = function (instanceId, consumer) {
        var _this = this;
        if (!this._contentPanelController) {
            this._propertyPaneController.registerConsumer(instanceId, consumer);
            return;
        }
        this._registerConsumerPromise || (this._registerConsumerPromise = this._contentPanelController.waitForController());
        this._registerConsumerPromise = this._registerConsumerPromise
            .then(function () {
            _this._registerConsumerWithBothControllers(instanceId, consumer);
        })
            .catch(function (error) {
            sp_diagnostics_1._TraceLogger.logError(logSource, error);
            _this._propertyPaneController.registerConsumer(instanceId, consumer);
        });
    };
    ConfigurableOptionsController.prototype.isConsumerRegistered = function (instanceId) {
        return (this._temporaryConsumerRegistry.has(instanceId) ||
            this._isConsumerRegisteredToContentPanelOrPropertyPane(instanceId));
    };
    ConfigurableOptionsController.prototype.requestAction = function (toBeConfiguredConsumerId, propertyPaneAction, renderedByWebPart, context) {
        var _this = this;
        if (propertyPaneAction === void 0) { propertyPaneAction = 'Default'; }
        sp_diagnostics_1._TraceLogger.logVerbose(logSource, "request '".concat(propertyPaneAction, "' action for '").concat(toBeConfiguredConsumerId, "'"));
        if (!this._contentPanelController) {
            this._propertyPaneController.requestAction(toBeConfiguredConsumerId, propertyPaneAction, renderedByWebPart, context);
            return;
        }
        this._registerConsumerPromise || (this._registerConsumerPromise = this._contentPanelController.waitForController());
        this._registerConsumerPromise
            .then(function () {
            _this._requestionActionWithBothController(toBeConfiguredConsumerId, propertyPaneAction, renderedByWebPart, context);
        })
            .catch(function (error) {
            sp_diagnostics_1._TraceLogger.logError(logSource, error);
            _this._propertyPaneController.requestAction(toBeConfiguredConsumerId, propertyPaneAction, renderedByWebPart, context);
        });
    };
    ConfigurableOptionsController.prototype.isRenderedByConsumer = function () {
        var _a;
        return this.isContentPanelOpen()
            ? !!((_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a.isRenderedByConsumer())
            : this._propertyPaneController.isRenderedByConsumer();
    };
    ConfigurableOptionsController.prototype.isOpen = function (instanceId) {
        var _a, _b;
        if (typeof instanceId === 'string') {
            return this._isContentPanelComponent(instanceId)
                ? !!((_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a.isOpen())
                : this._propertyPaneController.isOpen();
        }
        return ((_b = this._contentPanelController) === null || _b === void 0 ? void 0 : _b.isOpen()) || this._propertyPaneController.isOpen();
    };
    ConfigurableOptionsController.prototype.isContentPanelOpen = function () {
        var _a;
        return !!((_a = this._contentPanelControllerCasted) === null || _a === void 0 ? void 0 : _a.isAnyContentPanelOpen());
    };
    ConfigurableOptionsController.prototype.onConsumerDelete = function (id) {
        var _a;
        sp_diagnostics_1._TraceLogger.logVerbose(logSource, "Deleting ".concat(id));
        this._temporaryConsumerRegistry.delete(id);
        this._propertyPaneController.onConsumerDelete(id);
        (_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a.onConsumerDelete(id);
    };
    ConfigurableOptionsController.prototype._setAppPagePropertyPaneTopData = function (topControl, title) {
        var _a;
        this._propertyPaneController._setAppPagePropertyPaneTopData(topControl, title);
        (_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a._setAppPagePropertyPaneTopData(topControl, title);
    };
    ConfigurableOptionsController.prototype._setPropertyPaneToNarrowRender = function (narrow) {
        var _a;
        this._propertyPaneController._setPropertyPaneToNarrowRender(narrow);
        (_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a._setPropertyPaneToNarrowRender(narrow);
    };
    ConfigurableOptionsController.prototype._registerConsumerWithBothControllers = function (instanceId, consumer) {
        var _this = this;
        var _a, _b;
        // skip registering consumer if it is already registered
        if (!(0, KillSwitches_1.isReduceContentPanelControllerLogsKSActivated)() &&
            this._isConsumerRegisteredToContentPanelOrPropertyPane(instanceId)) {
            return;
        }
        var connectedConsumerId = (_a = consumer._getConnectedConsumerId) === null || _a === void 0 ? void 0 : _a.call(consumer);
        var tryRegisteringDeferredConsumer = function (controller) {
            var deferredConnectedConsumer = _this._connectedConsumerWaitSet.get(instanceId);
            if (deferredConnectedConsumer) {
                _this._connectedConsumerWaitSet.delete(instanceId);
                _this._temporaryConsumerRegistry.delete(deferredConnectedConsumer[0]);
                controller === null || controller === void 0 ? void 0 : controller.registerConsumer.apply(controller, deferredConnectedConsumer);
                sp_diagnostics_1._TraceLogger.logVerbose(logSource, "'".concat(deferredConnectedConsumer[0], "' registered"));
            }
        };
        // defer registering this component until the component it is connected to is registered
        if (connectedConsumerId && !this._isConsumerRegisteredToContentPanelOrPropertyPane(connectedConsumerId)) {
            this._temporaryConsumerRegistry.set(instanceId, consumer);
            // if we see this connected consumer again, then retry registering this consumer.
            this._connectedConsumerWaitSet.set(connectedConsumerId, [instanceId, consumer]);
            sp_diagnostics_1._TraceLogger.logVerbose(logSource, "Delay registering '".concat(instanceId, "' until '").concat(connectedConsumerId, "' is registered"));
        }
        else if ((connectedConsumerId && this._isContentPanelComponent(connectedConsumerId)) ||
            (!connectedConsumerId && this._isContentPanelComponent(instanceId, consumer))) {
            (_b = this._contentPanelController) === null || _b === void 0 ? void 0 : _b.registerConsumer(instanceId, consumer);
            tryRegisteringDeferredConsumer(this._contentPanelController);
            sp_diagnostics_1._TraceLogger.logVerbose(logSource, "'".concat(instanceId, "' registered to ContentPanelController"));
        }
        else {
            this._propertyPaneController.registerConsumer(instanceId, consumer);
            tryRegisteringDeferredConsumer(this._propertyPaneController);
            sp_diagnostics_1._TraceLogger.logVerbose(logSource, "'".concat(instanceId, "' registered to PropertyPaneController"));
        }
    };
    ConfigurableOptionsController.prototype._requestionActionWithBothController = function (toBeConfiguredConsumerId, propertyPaneAction, renderedByWebPart, context) {
        var _a, _b;
        if (propertyPaneAction === void 0) { propertyPaneAction = 'Default'; }
        var requestActionFromController = function (controller, action) {
            if (action === void 0) { action = propertyPaneAction; }
            controller === null || controller === void 0 ? void 0 : controller.requestAction(toBeConfiguredConsumerId, action, renderedByWebPart, context);
        };
        if (propertyPaneAction === 'BackgroundRefresh') {
            if (!((_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a.isOpen())) {
                requestActionFromController(this._contentPanelController);
            }
            if (!this._propertyPaneController.isOpen()) {
                requestActionFromController(this._propertyPaneController);
            }
        }
        // note that consumers may call this api with empty string consumerId
        else if (propertyPaneAction === 'Close' || propertyPaneAction === 'Unmount') {
            requestActionFromController(this._contentPanelController);
            requestActionFromController(this._propertyPaneController);
        }
        else if (this._isContentPanelComponent(toBeConfiguredConsumerId)) {
            requestActionFromController(this._contentPanelController);
            // Conflict resolution:
            // Given requestAction is sync, doing it after requestAction gaurantees the correct isOpen state
            if (this._propertyPaneController.isOpen() && this.isContentPanelOpen()) {
                if (!(0, KillSwitches_1.isForceCloseWithoutFiringEventsKSActivated)()) {
                    this._propertyPaneController.forceClose();
                }
                else {
                    requestActionFromController(this._propertyPaneController, 'Close');
                }
                sp_diagnostics_1._TraceLogger.logVerbose(logSource, "Conflict: closed property pane");
            }
        }
        else {
            requestActionFromController(this._propertyPaneController);
            // Conflict resolution:
            // Given requestAction is sync, doing it after requestAction gaurantees the correct isOpen state
            if (this._propertyPaneController.isOpen() && this.isContentPanelOpen()) {
                (_b = this._contentPanelControllerCasted) === null || _b === void 0 ? void 0 : _b.forceClose();
                sp_diagnostics_1._TraceLogger.logVerbose(logSource, "Conflict: closed content panel");
            }
        }
    };
    ConfigurableOptionsController.prototype._isConsumerRegisteredToContentPanelOrPropertyPane = function (instanceId) {
        var _a;
        return (this._propertyPaneController.isConsumerRegistered(instanceId) ||
            !!((_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a.isConsumerRegistered(instanceId)));
    };
    /**
     * Determines if the specified instanceId is supported by the ContentPanelController
     */
    ConfigurableOptionsController.prototype._isContentPanelComponent = function (instanceId, consumer) {
        var _a;
        var isSupported = !!((_a = this._contentPanelControllerCasted) === null || _a === void 0 ? void 0 : _a.isComponentSupported(instanceId, consumer));
        return isSupported;
    };
    return ConfigurableOptionsController;
}());
exports.ConfigurableOptionsController = ConfigurableOptionsController;
//# sourceMappingURL=ConfigurableOptionsController.js.map