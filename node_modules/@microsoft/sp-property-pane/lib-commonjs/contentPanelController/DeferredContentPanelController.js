"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeferredContentPanelController = void 0;
var tslib_1 = require("tslib");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_pages_content_panel_context_1 = require("@ms/sp-pages-content-panel-context");
var Flights_1 = require("../common/Flights");
var PriorityQueue_1 = require("./PriorityQueue");
var logSource_1 = require("./logSource");
var notSupported = 'Content Panel is not supported';
var DCPC = /** @class */ (function () {
    function DCPC() {
        var _this = this;
        this._priorityQueue = new PriorityQueue_1.PriorityQueue();
        if ((0, Flights_1.isConfigurationToolsEnabled)() && !DCPC._contentPanelControllerPromise) {
            DCPC._contentPanelControllerPromise = (0, sp_pages_content_panel_context_1.monitorChunkLoad)(logSource_1.COMPONENT_NAME, Promise.resolve().then(function () { return tslib_1.__importStar(require(/* webpackChunkName: 'ContentPanelController' */ './ContentPanelController')); }).then(function (module) {
                _this._contentPanelController = new module.ContentPanelController();
            }, function (error) {
                sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, error);
                throw error;
            })
                .finally(function () { return _this._priorityQueue.clearQueue(); }));
        }
    }
    /**
     * A decorator to execute the method it is decorating or enqueue the method if _contentPanelController
     * is not loaded.
     */
    DCPC._executeOrQueue = function (priority) {
        return function (target, key, descriptor) {
            if (typeof descriptor.value === 'function') {
                var origFnc_1 = descriptor.value;
                descriptor.value = function () {
                    var _this = this;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    this._priorityQueue.executeOrQueue(priority, function () { return origFnc_1.apply(_this, args); });
                };
            }
        };
    };
    /**
     * A decorator that replaces the method it is decorating with the _contentPanelController instance's implementation,
     * provided the _contentPanelController is loaded.
     */
    DCPC._implementLater = function (target, key, descriptor) {
        if (typeof descriptor.value === 'function') {
            var origFnc_2 = descriptor.value;
            descriptor.value = function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var instanceMethod = (_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a[key];
                return instanceMethod && this._contentPanelController
                    ? instanceMethod.apply(this._contentPanelController, args)
                    : origFnc_2.apply(this, args);
            };
        }
    };
    /**
     * Returns the load chunk promise of the ContentPanelController or Promise.reject if the
     * content panel is not supported.
     */
    DCPC.prototype.waitForController = function () {
        if (!DCPC._contentPanelControllerPromise) {
            throw new Error(notSupported);
        }
        return DCPC._contentPanelControllerPromise;
    };
    Object.defineProperty(DCPC.prototype, "currentlyConfiguredConsumerId", {
        /////                               /////
        ///// Begin IContentPanelController /////
        /////                               /////
        get: function () {
            var _a;
            return (_a = this._contentPanelController) === null || _a === void 0 ? void 0 : _a.currentlyConfiguredConsumerId;
        },
        enumerable: false,
        configurable: true
    });
    DCPC.prototype.registerOnPropertyPaneFieldChangedListener = function (instanceId, callback) {
        return function () { };
    };
    DCPC.prototype.addOnUpdateListener = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return function () { };
    };
    DCPC.prototype.isAnyContentPanelOpen = function () {
        return false;
    };
    DCPC.prototype.isComponentSupported = function (instanceId, consumer) {
        return false;
    };
    DCPC.prototype.isConsumerRegistered = function (instanceId) {
        return false;
    };
    DCPC.prototype.isRenderedByConsumer = function () {
        return false;
    };
    DCPC.prototype.isOpen = function () {
        return false;
    };
    DCPC.prototype.forceClose = function () { };
    DCPC.prototype.registerConsumer = function (instanceId, consumer) { };
    DCPC.prototype.onConsumerDelete = function (id) { };
    DCPC.prototype._setAppPagePropertyPaneTopData = function (topControl, title) { };
    DCPC.prototype._setPropertyPaneToNarrowRender = function (narrow) { };
    DCPC.prototype.requestAction = function (toBeConfiguredConsumerId, propertyPaneAction, renderedByWebPart, context) { };
    tslib_1.__decorate([
        DCPC._implementLater
    ], DCPC.prototype, "registerOnPropertyPaneFieldChangedListener", null);
    tslib_1.__decorate([
        DCPC._implementLater
    ], DCPC.prototype, "addOnUpdateListener", null);
    tslib_1.__decorate([
        DCPC._implementLater
    ], DCPC.prototype, "isAnyContentPanelOpen", null);
    tslib_1.__decorate([
        DCPC._implementLater
    ], DCPC.prototype, "isComponentSupported", null);
    tslib_1.__decorate([
        DCPC._implementLater
    ], DCPC.prototype, "isConsumerRegistered", null);
    tslib_1.__decorate([
        DCPC._implementLater
    ], DCPC.prototype, "isRenderedByConsumer", null);
    tslib_1.__decorate([
        DCPC._implementLater
    ], DCPC.prototype, "isOpen", null);
    tslib_1.__decorate([
        DCPC._implementLater
    ], DCPC.prototype, "forceClose", null);
    tslib_1.__decorate([
        DCPC._executeOrQueue(PriorityQueue_1.Priority.High),
        DCPC._implementLater
    ], DCPC.prototype, "registerConsumer", null);
    tslib_1.__decorate([
        DCPC._executeOrQueue(PriorityQueue_1.Priority.Medium),
        DCPC._implementLater
    ], DCPC.prototype, "onConsumerDelete", null);
    tslib_1.__decorate([
        DCPC._executeOrQueue(PriorityQueue_1.Priority.Medium),
        DCPC._implementLater
    ], DCPC.prototype, "_setAppPagePropertyPaneTopData", null);
    tslib_1.__decorate([
        DCPC._executeOrQueue(PriorityQueue_1.Priority.Medium),
        DCPC._implementLater
    ], DCPC.prototype, "_setPropertyPaneToNarrowRender", null);
    tslib_1.__decorate([
        DCPC._executeOrQueue(PriorityQueue_1.Priority.Low),
        DCPC._implementLater
    ], DCPC.prototype, "requestAction", null);
    return DCPC;
}());
exports.DeferredContentPanelController = DCPC;
//# sourceMappingURL=DeferredContentPanelController.js.map