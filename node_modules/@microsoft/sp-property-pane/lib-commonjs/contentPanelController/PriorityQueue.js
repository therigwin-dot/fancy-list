"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriorityQueue = exports.Priority = void 0;
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var logSource_1 = require("./logSource");
/**
 * Determines the priority when adding a function to the ContentPanelControllerLoader waiting queue.
 */
var Priority;
(function (Priority) {
    /**
     * Priority for api calls that rely on all configuration api calls to be resolved.
     *
     * eg: api calls that perform actions using existing configurations like `requestAction`.
     */
    Priority[Priority["Low"] = 2] = "Low";
    /**
     * Priority for api calls that deal with configurations.
     */
    Priority[Priority["Medium"] = 1] = "Medium";
    /**
     * Priority for api calls that deal with higher priority configurations.
     */
    Priority[Priority["High"] = 0] = "High"; // 0 must be the lowest number given it's usage in the array
})(Priority || (exports.Priority = Priority = {}));
var PriorityQueue = /** @class */ (function () {
    function PriorityQueue() {
        this._isQueueCleared = false;
        this._priorityQueue = [];
    }
    PriorityQueue.prototype.executeOrQueue = function (priority, handleLoad) {
        var _a;
        // if it is .unSupported, then still call handleLoad
        if (this._isQueueCleared) {
            handleLoad();
        }
        else {
            (_a = this._priorityQueue)[priority] || (_a[priority] = new Set());
            this._priorityQueue[priority].add(handleLoad);
        }
    };
    PriorityQueue.prototype.clearQueue = function () {
        this._isQueueCleared = true;
        // _priorityQueue is a sparsed array (may have empty indices).
        // .forEach callback is not invoked for the missing values so this is safe.
        // https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.foreach
        this._priorityQueue.forEach(function (queue) {
            queue.forEach(function (dequeue) {
                try {
                    dequeue();
                }
                catch (e) {
                    sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, e);
                }
            });
        });
        this._priorityQueue = [];
    };
    return PriorityQueue;
}());
exports.PriorityQueue = PriorityQueue;
//# sourceMappingURL=PriorityQueue.js.map