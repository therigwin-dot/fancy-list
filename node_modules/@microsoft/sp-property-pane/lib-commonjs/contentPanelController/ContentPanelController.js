"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentPanelController = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_pages_content_panel_context_1 = require("@ms/sp-pages-content-panel-context");
var odsp_core_bundle_1 = require("@ms/odsp-core-bundle");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_loader_1 = require("@microsoft/sp-loader");
var propertyPaneConsumer_1 = require("../propertyPaneConsumer");
var Flights_1 = require("../common/Flights");
var constants_1 = require("../propertyPaneController/constants");
var excludedPanels_1 = require("./excludedPanels");
var includedWebpart_1 = require("./includedWebpart");
var logSource_1 = require("./logSource");
var KillSwitches_1 = require("../common/KillSwitches");
var supportedPivotUtils_1 = require("./supportedPivotUtils");
/**
 * @internal
 */
var ContentPanelController = /** @class */ (function () {
    function ContentPanelController() {
        var _this = this;
        /**
         * Dictionary of all the registered property pane consumers.
         */
        this._consumers = new Map();
        /**
         * Tracks the currently configured consumer id for each supported panel.
         */
        this._currentlyConfiguredConsumerIdByPivot = new Map((0, supportedPivotUtils_1.getSupportedPivots)().map(function (supportedPivot) { return [supportedPivot, undefined]; }));
        this.addOnUpdateListener = function (watcher) {
            return sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().addOnUpdateListener(watcher);
        };
        /**
         * Manages updates to content panel.
         *
         * Eg: when active pivot changes, we change currently configured consumer
         */
        this._onContentPanelUpdated = function (_a) {
            var stateContext = _a.stateContext;
            var currentlyConfiguredConsumerIdForActivePivot = _this._currentlyConfiguredConsumerIdByPivot.get(stateContext.activePivot);
            if (!_this._currentlyConfiguredConsumerIdByPivot.has(stateContext.activePivot) ||
                currentlyConfiguredConsumerIdForActivePivot === _this.currentlyConfiguredConsumerId) {
                return;
            }
            if (!currentlyConfiguredConsumerIdForActivePivot ||
                _this._consumers.has(currentlyConfiguredConsumerIdForActivePivot)) {
                _this._setCurrentlyConfiguredConsumerId(currentlyConfiguredConsumerIdForActivePivot);
            }
            // this._consumers is out of sync with this._currentlyConfiguredConsumerIdByPivot
            else {
                _this._setCurrentlyConfiguredConsumerId(undefined);
                _this._currentlyConfiguredConsumerIdByPivot.set(stateContext.activePivot, undefined);
            }
        };
        /**
         * Register command listeners on mount.
         * Note this is called multiple times throughout this component's lifespan as a user navigates to different pages.
         */
        this._onContentPanelMount = function (_a) {
            var subscriberContext = _a.subscriberContext;
            sp_diagnostics_1._TraceLogger.logVerbose(logSource_1.logSource, 'ContentPanel mounted');
            var handlerId = 'ContentPanelController';
            subscriberContext.addCommandListener({
                handlerId: handlerId,
                commandId: sp_pages_content_panel_context_1.SPPagesContentPanelCommandId.propertyPaneConfigurationEvent,
                commandHandler: function (_a) {
                    var commandData = _a.commandData;
                    _this._onConfigurationEvent(commandData);
                }
            });
            subscriberContext.addCommandListener({
                handlerId: handlerId,
                commandId: sp_pages_content_panel_context_1.SPPagesContentPanelCommandId.propertyPaneFieldChange,
                commandHandler: function (_a) {
                    var consumerId = _a.consumerId, commandData = _a.commandData;
                    if (consumerId === _this.currentlyConfiguredConsumerId) {
                        _this._onPropertyPaneFieldChanged.apply(_this, commandData);
                    }
                }
            });
            subscriberContext.addCommandListener({
                handlerId: handlerId,
                commandId: sp_pages_content_panel_context_1.SPPagesContentPanelCommandId.refreshPropertyPane,
                commandHandler: function (_a) {
                    var consumerId = _a.consumerId;
                    if (_this.currentlyConfiguredConsumerId === consumerId && consumerId) {
                        _this._updateContentPanelData(_this.currentlyConfiguredConsumerId).catch(function (error) {
                            sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, error);
                        });
                    }
                }
            });
        };
        // method bindings
        this._onPropertyPaneFieldChanged = this._onPropertyPaneFieldChanged.bind(this);
        this._onConfigurationEvent = this._onConfigurationEvent.bind(this);
        this._fireConfigurationEvent = this._fireConfigurationEvent.bind(this);
        sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().addOnMountListener(this._onContentPanelMount, function (error) {
            sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, error);
        });
        if ((0, Flights_1.isPageDetailsEnabled)()) {
            sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().addOnUpdateListener(this._onContentPanelUpdated);
        }
    }
    Object.defineProperty(ContentPanelController.prototype, "currentlyConfiguredConsumerId", {
        get: function () {
            return this._currentlyConfiguredConsumerId;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Determines if the Content Panel is supported in the current environment.
     */
    ContentPanelController.isContentPanelSupported = function () {
        var subscriberContext = sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().subscriberContext;
        return ((0, Flights_1.isConfigurationToolsEnabled)() &&
            ((0, Flights_1.isPageDetailsEnabled)()
                ? (0, supportedPivotUtils_1.getSupportedPivots)().some(function (supportedPivot) { return subscriberContext === null || subscriberContext === void 0 ? void 0 : subscriberContext.isPivotRendered(supportedPivot); })
                : !!(subscriberContext === null || subscriberContext === void 0 ? void 0 : subscriberContext.isPivotRendered(sp_pages_content_panel_context_1.SPPagesContentPanelPivot.configurationTools))));
    };
    /**
     * Determines if the Pivot that renders the toBeConfiguredConsumerId is the
     * current active pivot for content panel.
     *
     * Ex: The close action triggered by page details pane should not close the configuration tools pane.
     */
    ContentPanelController._isConsumerPivotTheActivePivot = function (toBeConfiguredConsumerId) {
        var _a;
        return ((0, supportedPivotUtils_1.getPivotFromConsumerId)(toBeConfiguredConsumerId) ===
            ((_a = sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().stateContext) === null || _a === void 0 ? void 0 : _a.activePivot));
    };
    ContentPanelController.prototype.registerOnPropertyPaneFieldChangedListener = function (instanceId, callback) {
        return function () { };
    };
    ContentPanelController.prototype.registerConsumer = function (instanceId, consumer) {
        sp_core_library_1.Validate.isNonemptyString(instanceId, 'instanceId');
        sp_core_library_1.Validate.isNotNullOrUndefined(consumer, 'consumer');
        this._consumers.set(instanceId, consumer);
        if (this._unregistredBackgroundRefreshConsumerId === instanceId) {
            this.requestAction(instanceId, 'BackgroundRefresh');
        }
    };
    ContentPanelController.prototype.isConsumerRegistered = function (instanceId) {
        return this._consumers.has(instanceId);
    };
    ContentPanelController.prototype.requestAction = function (toBeConfiguredConsumerId, propertyPaneAction, renderedByWebPart, context) {
        if (propertyPaneAction === void 0) { propertyPaneAction = 'Default'; }
        this._unregistredBackgroundRefreshConsumerId = undefined;
        switch (propertyPaneAction) {
            case 'Open':
            case 'OpenDetails':
                this._openContentPanel(toBeConfiguredConsumerId, renderedByWebPart, propertyPaneAction === 'OpenDetails', context).catch(function (error) {
                    sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, error);
                });
                break;
            // Property pane should close.
            case 'Close':
            case 'Unmount':
                // note: close can be called without a consumerId
                //  This method will treat it as a force closed when it is called like that
                this._closeContentPanel(toBeConfiguredConsumerId);
                break;
            /**
             * Property pane should toggle i.e., if it's open, close it else open it.
             *
             * Conditions inherited from PropertyPane (copied from PropertyPaneController):
             *   - When closed: in this case we open the property pane and start the configuration process.
             *       Example - This happens when web part configure button is clicked.
             *   - When open: in this case, if the incoming consumer id
             *       is different than the one being currently configured, we keep the property pane open
             *       and change the active consumer being configured.
             */
            case 'Toggle':
                if ((0, Flights_1.isPageDetailsEnabled)()) {
                    if (this.isOpen() &&
                        ContentPanelController._isConsumerPivotTheActivePivot(toBeConfiguredConsumerId) &&
                        ((0, KillSwitches_1.isAlignContentPanelControllerToggleAPIWithPropertyPaneKSActivated)() ||
                            this._isCurrentlyConfiguredConsumerForPivot(toBeConfiguredConsumerId))) {
                        this.requestAction(toBeConfiguredConsumerId, 'Close', renderedByWebPart, context);
                    }
                    else {
                        this.requestAction(toBeConfiguredConsumerId, 'Open', renderedByWebPart, context);
                    }
                }
                else {
                    if (this.isOpen()) {
                        this.requestAction(toBeConfiguredConsumerId, 'Close', renderedByWebPart, context);
                    }
                    else {
                        this.requestAction(toBeConfiguredConsumerId, 'Open', renderedByWebPart, context);
                    }
                }
                break;
            // Keep the property pane open if it's already open, else no-op.
            case 'Default':
                if (this.isOpen()) {
                    // This check is to make sure that the propertypane does not obtain and render a host that is rendered
                    // in configuration tools
                    this.requestAction(toBeConfiguredConsumerId, 'Open', renderedByWebPart, context);
                }
                break;
            /**
             * Refresh the contents of the property pane if the property pane is open for the requesting component.
             *  - This condition is prechecked in 'requestPropertyPaneAction' method.
             *
             * Conditions:
             *  - if the content panel is not open (either configuration tools or page details), do nothing
             *  - if the content panel is open (either configuraiton tools or page details), and
             *      The toBeConfiguredConsumerId is the currently configured consumer for the respective pivot, refresh; OR
             *      The toBeConfiguredConsumerId is not the currently configured consumer for the respective pivot, do nothing
             */
            case 'Refresh':
                if (this.isOpen() &&
                    ((0, Flights_1.isPageDetailsEnabled)()
                        ? this._isCurrentlyConfiguredConsumerForPivot(toBeConfiguredConsumerId)
                        : this.currentlyConfiguredConsumerId === toBeConfiguredConsumerId)) {
                    this._updateContentPanelData(toBeConfiguredConsumerId).catch(function (error) {
                        sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, error);
                    });
                }
                break;
            /**
             * Refresh the contents of the property pane in the background if the property pane is not open
             * when the currently configured consumer is changed.
             */
            case 'BackgroundRefresh':
                var consumer = this._consumers.get(toBeConfiguredConsumerId);
                if (!this.isOpen() ||
                    ((0, Flights_1.isPageDetailsEnabled)() && (!(0, propertyPaneConsumer_1.isConsumerWithManifest)(consumer) || !(0, propertyPaneConsumer_1.isWebpart)(consumer)))) {
                    if (this.isComponentSupported(toBeConfiguredConsumerId)) {
                        this._setCurrentlyConfiguredConsumerId(toBeConfiguredConsumerId);
                        this._updateContentPanelData(toBeConfiguredConsumerId).catch(function (error) {
                            sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, error);
                        });
                    }
                    else {
                        if (!this.isConsumerRegistered(toBeConfiguredConsumerId)) {
                            sp_diagnostics_1._TraceLogger.logVerbose(logSource_1.logSource, "Waiting to register consumer before BackgroundRefresh");
                            this._unregistredBackgroundRefreshConsumerId = toBeConfiguredConsumerId;
                        }
                        this._resetCurrentlyConfiguredConsumer();
                    }
                }
                break;
        }
    };
    ContentPanelController.prototype.isRenderedByConsumer = function () {
        return !!this._isPaneRenderedByWebPart;
    };
    /**
     * Determines if configuration tools or page details is open in the content panel.
     *
     * Warning: This returns false if other panels are open.
     */
    ContentPanelController.prototype.isOpen = function () {
        var stateContext = sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().stateContext;
        return (this.isAnyContentPanelOpen() &&
            ((0, Flights_1.isPageDetailsEnabled)()
                ? (0, supportedPivotUtils_1.getSupportedPivots)().some(function (supportedPivot) { return (stateContext === null || stateContext === void 0 ? void 0 : stateContext.activePivot) === supportedPivot; })
                : (stateContext === null || stateContext === void 0 ? void 0 : stateContext.activePivot) === sp_pages_content_panel_context_1.SPPagesContentPanelPivot.configurationTools));
    };
    ContentPanelController.prototype.isAnyContentPanelOpen = function () {
        var _a;
        return !!((_a = sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().stateContext) === null || _a === void 0 ? void 0 : _a.isVisible);
    };
    ContentPanelController.prototype.forceClose = function () {
        var _a;
        // let close logic run before we setIsVisible false
        this._closeContentPanel(undefined, !(0, KillSwitches_1.isForceCloseWithoutFiringEventsKSActivated)());
        (_a = sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().subscriberContext) === null || _a === void 0 ? void 0 : _a.setIsVisible(false);
        this._resetCurrentlyConfiguredConsumer();
    };
    ContentPanelController.prototype.onConsumerDelete = function (id) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        if (id === this.currentlyConfiguredConsumerId) {
            this._resetCurrentlyConfiguredConsumer();
        }
        else if ((0, Flights_1.isPageDetailsEnabled)() && this._isCurrentlyConfiguredConsumerForPivot(id)) {
            this._resetLoader(id);
        }
        // Remove consumer from map on dispose to prevent memory leak.
        this._consumers.delete(id);
        if ((0, Flights_1.isPageDetailsEnabled)()) {
            var stateContext = sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().stateContext;
            if ((stateContext === null || stateContext === void 0 ? void 0 : stateContext.activePivot) &&
                this._currentlyConfiguredConsumerIdByPivot.has(stateContext.activePivot) &&
                this._currentlyConfiguredConsumerIdByPivot.get(stateContext.activePivot) === id) {
                this._currentlyConfiguredConsumerIdByPivot.set(stateContext.activePivot, undefined);
            }
        }
    };
    ContentPanelController.prototype._setAppPagePropertyPaneTopData = function (topControl, title) {
        this._title = title;
        this._topControl = topControl;
    };
    ContentPanelController.prototype._setPropertyPaneToNarrowRender = function (narrow) {
        this._isNarrow = narrow;
    };
    /**
     * Determines if the specified component can be rendered in the Content Panel
     */
    ContentPanelController.prototype.isComponentSupported = function (instanceId, consumer) {
        if (consumer === void 0) { consumer = this._consumers.get(instanceId); }
        // guard against excluded consumers, and feature flags
        if (!consumer ||
            !ContentPanelController.isContentPanelSupported() ||
            (0, excludedPanels_1.getExcludedPanels)().has(instanceId)) {
            sp_diagnostics_1._TraceLogger.logVerbose(logSource_1.logSource, "".concat(instanceId, " is not supported. (isContentPanelSupported: ").concat(!!ContentPanelController.isContentPanelSupported(), ")"));
            return false;
        }
        // already registered consumers and non webparts that are not excluded are supported
        if (this.isConsumerRegistered(instanceId) || !(0, propertyPaneConsumer_1.isConsumerWithManifest)(consumer) || !(0, propertyPaneConsumer_1.isWebpart)(consumer)) {
            return true;
        }
        var verifiedManifest = sp_loader_1.SPComponentLoader.tryGetManifestById(consumer.context.manifest.id || '');
        // webparts
        if ((0, Flights_1.isContentPanelV2Enabled)() && !(0, KillSwitches_1.isSupport3rdPartyInContentPanelKSActivated)()) {
            return (verifiedManifest === null || verifiedManifest === void 0 ? void 0 : verifiedManifest.componentType) === 'WebPart';
        }
        return !!(typeof (verifiedManifest === null || verifiedManifest === void 0 ? void 0 : verifiedManifest.isInternal) === 'boolean'
            ? verifiedManifest.isInternal
            : (verifiedManifest === null || verifiedManifest === void 0 ? void 0 : verifiedManifest.id) && includedWebpart_1.includedWebparts.has(verifiedManifest.id));
    };
    /**
     * Determines if the specified component is the currently configured consumer for the pivot that renders it.
     * @param componentId - Id of the consumer to be checked.
     */
    ContentPanelController.prototype._isCurrentlyConfiguredConsumerForPivot = function (componentId) {
        return (componentId === this._currentlyConfiguredConsumerIdByPivot.get((0, supportedPivotUtils_1.getPivotFromConsumerId)(componentId)));
    };
    /**
     * Sets the currently configured consumer id and syncs it with the configured consumer id for each respective panel.
     * @param consumerId - Id of the consumer to be set as currently configured consumer.
     */
    ContentPanelController.prototype._setCurrentlyConfiguredConsumerId = function (consumerId) {
        this._currentlyConfiguredConsumerId = consumerId;
        if ((0, Flights_1.isPageDetailsEnabled)() && consumerId) {
            var pivot = (0, supportedPivotUtils_1.getPivotFromConsumerId)(consumerId);
            this._currentlyConfiguredConsumerIdByPivot.set(pivot, consumerId);
        }
    };
    /**
     * Callback to handle the configuration events that originate in the property pane.
     *
     * @example
     * PropertyPaneClosed, PropertyPaneApplyClicked etc.,
     */
    ContentPanelController.prototype._onConfigurationEvent = function (configurationEvent) {
        sp_diagnostics_1._TraceLogger.logVerbose(logSource_1.logSource, "Configuration event '".concat(configurationEvent, "'. (currentlyConfiguredConsumerId: ").concat(this._currentlyConfiguredConsumerId, ")"));
        switch (configurationEvent) {
            /**
             * For the event 'PropertyPaneClosed' we need to fire both the 'PropertyPaneClosed' and
             * 'PropertyPaneConfigurationComplete' events to the consumer.
             * '_togglePropertyPanePosition' internally fires both the events.
             */
            case 'Closed':
                this.requestAction(this.currentlyConfiguredConsumerId || '', 'Close', this.isRenderedByConsumer());
                break;
            /**
             * For these events we need to fire two events:
             *  - 'PropertyPaneConfigurationComplete' and
             *  - Whatever the event the caller has passed in 'configurationEvent'.
             */
            case 'ApplyClicked':
            case 'LostFocus':
                this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, configurationEvent);
                this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, 'ConfigurationComplete');
                break;
            case 'BackClicked':
                !(0, KillSwitches_1.isShowBackButtonBackKSActivated)() &&
                    this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, configurationEvent);
        }
    };
    /**
     * Property pane field change event handler.
     *
     * @param propertyName - Name of the property pane field changed.
     * @param newValue - New value.
     *  This value could be undefined/empty in the case of custom field.
     */
    ContentPanelController.prototype._onPropertyPaneFieldChanged = function (propertyName, newValue, fieldType) {
        sp_diagnostics_1._TraceLogger.logVerbose(logSource_1.logSource, "property pane field '".concat(propertyName, "' changed. currentlyConfiguredConsumerId: ").concat(this._currentlyConfiguredConsumerId));
        if (!this._currentlyConfiguredConsumerId) {
            var error = new Error('onPropertyPaneFieldChanged event is not expected when no consumer is being configured');
            sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, error);
            throw error;
        }
        var consumer = this._consumers.get(this._currentlyConfiguredConsumerId);
        if (consumer) {
            consumer._onPropertyPaneFieldChanged(propertyName, newValue, fieldType);
            // Resetting the boolean value.
            this._updateContentPanelData(this.currentlyConfiguredConsumerId || '').catch(function (error) {
                sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, error);
            });
        }
        if (consumer === null || consumer === void 0 ? void 0 : consumer._isPropertyPaneReactive()) {
            this._resetConfigurationCompleteTimeout();
        }
    };
    /**
     * Method to fire the configuration event to the host and the consumer.
     *
     * @param componentId - Id of the consumer to which the event needs to be sent.
     * @param configurationEvent - Kind of configuration event to fire.
     */
    ContentPanelController.prototype._fireConfigurationEvent = function (componentId, configurationEvent) {
        this._clearConfigurationCompleteTimeout();
        // Up to IWebPartGetter to handle an undefined string.
        var consumer = this._consumers.get(componentId || '');
        if (consumer) {
            var eventArgs = {
                componentId: componentId,
                configurationEvent: configurationEvent
            };
            sp_core_library_1._SPEventManager.instance.raiseEvent('propertyPaneEvent', eventArgs);
            // Raise the event to the consumer.
            consumer._onPropertyPaneLifeCycleEvent(configurationEvent);
        }
    };
    /**
     * Reset configuration completion timeout.
     */
    ContentPanelController.prototype._resetConfigurationCompleteTimeout = function () {
        this._clearConfigurationCompleteTimeout();
        this._configurationCompletionTimeout = window.setTimeout(this._fireConfigurationEvent, constants_1.CONFIGURATION_COMPLETE_TIMEOUT, this._currentlyConfiguredConsumerId, 'ConfigurationComplete');
    };
    /**
     * Clear configuration completion timeout.
     */
    ContentPanelController.prototype._clearConfigurationCompleteTimeout = function () {
        if (this._configurationCompletionTimeout) {
            window.clearTimeout(this._configurationCompletionTimeout);
            this._configurationCompletionTimeout = undefined;
        }
    };
    /**
     * Opens the supported panel in the content panel for the specified componentId.
     * Content Panel may support different consumer panels and this will handle the logic for each consumer
     * and render them in their respective panel.
     */
    ContentPanelController.prototype._openContentPanel = function (componentId, renderedByWebPart) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var subscriberContext, componentIdPivot, paneOpenBeforeRender, newConsumer;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConsumerRegistered(componentId)) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().waitForContext];
                    case 1:
                        subscriberContext = (_a.sent()).subscriberContext;
                        if ((0, Flights_1.isPageDetailsEnabled)()) {
                            componentIdPivot = (0, supportedPivotUtils_1.getPivotFromConsumerId)(componentId);
                            // pivot is not rendered so do nothing
                            if (!subscriberContext.isPivotRendered(componentIdPivot)) {
                                sp_diagnostics_1._TraceLogger.logVerbose(logSource_1.logSource, "Skipping opening, '".concat(componentIdPivot, "' is not rendered"));
                                return [2 /*return*/];
                            }
                        }
                        paneOpenBeforeRender = !!this.isOpen();
                        newConsumer = this._consumers.get(componentId);
                        if (componentId !== this._currentlyConfiguredConsumerId) {
                            /**
                             * Premptively asking consumer(if exists, consumer can be undefined for canvas toolbox hint.)
                             * to load async resources for its property pane before the data
                             * is requested via _getPropertyPaneData call.
                             * We make this call when the active webpart has changed and the property pane is shown.
                             */
                            newConsumer === null || newConsumer === void 0 ? void 0 : newConsumer._loadPropertyPaneResources();
                            // Raise the event to the consumer.
                            this._fireConfigurationEvent(componentId, 'ActiveWebPartChanged');
                        }
                        /**
                         * If pane is 'open' before '_renderPropertyPane' is called that means property pane did not toggle.
                         * Hence no events were fired. So fire the events explicitly.
                         */
                        if (paneOpenBeforeRender) {
                            // Firing events for the current consumer.
                            this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, 'ConfigurationComplete');
                            // Firing events for the new consumer.
                            this._fireConfigurationEvent(componentId, 'ConfigurationStart');
                        }
                        else {
                            // Raise the event to the consumer.
                            this._fireConfigurationEvent(componentId, 'ConfigurationStart');
                            this._fireConfigurationEvent(componentId, 'Opened');
                        }
                        this._isPaneRenderedByWebPart = renderedByWebPart;
                        this._setCurrentlyConfiguredConsumerId(componentId);
                        subscriberContext.setIsVisible((0, Flights_1.isPageDetailsEnabled)()
                            ? (0, supportedPivotUtils_1.getPivotFromConsumerId)(componentId)
                            : sp_pages_content_panel_context_1.SPPagesContentPanelPivot.configurationTools);
                        return [4 /*yield*/, this._updateContentPanelData.apply(this, tslib_1.__spreadArray([componentId], args, false))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Function that updates the data in the content panel
     */
    ContentPanelController.prototype._updateContentPanelData = function (componentId) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var subscriberContext;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().waitForContext];
                    case 1:
                        subscriberContext = (_a.sent()).subscriberContext;
                        subscriberContext.setLoader((0, Flights_1.isPageDetailsEnabled)()
                            ? (0, supportedPivotUtils_1.getPivotFromConsumerId)(componentId)
                            : sp_pages_content_panel_context_1.SPPagesContentPanelPivot.configurationTools, function () {
                            var propertyPaneConsumer = _this._consumers.get(componentId);
                            var qosMonitor = new sp_diagnostics_1._QosMonitor((0, sp_pages_content_panel_context_1.getQOSName)(logSource_1.COMPONENT_NAME, sp_pages_content_panel_context_1.SPPagesContentPanelQOSScenarios.rendering, 'getPropertyPaneData'));
                            return propertyPaneConsumer === null || propertyPaneConsumer === void 0 ? void 0 : propertyPaneConsumer._getPropertyPaneData.apply(propertyPaneConsumer, args).then(function (propertyPaneData) {
                                qosMonitor.writeSuccess();
                                return {
                                    propertyPaneData: tslib_1.__assign(tslib_1.__assign({}, propertyPaneData), { title: _this._title || propertyPaneData.title }),
                                    componentId: componentId,
                                    isNarrow: _this._isNarrow,
                                    topControl: _this._topControl
                                };
                            }).catch(function (error) {
                                var customError = new odsp_core_bundle_1.CustomError({
                                    message: (0, odsp_core_bundle_1.markPrivacyData)("Failed to get property pane data for '".concat(componentId, "'"), 'safe'),
                                    innerError: error
                                });
                                sp_diagnostics_1._TraceLogger.logError(logSource_1.logSource, customError);
                                qosMonitor.writeUnexpectedFailure('UnhandledError', customError, {
                                    manifestId: (0, propertyPaneConsumer_1.isConsumerWithManifest)(propertyPaneConsumer)
                                        ? propertyPaneConsumer.context.manifest.id
                                        : undefined
                                });
                                return undefined;
                            });
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Resets the currently configured consumer and resets the data hosted
     * in the respective panel's.
     *
     * Note this does not close the content panel
     */
    ContentPanelController.prototype._resetCurrentlyConfiguredConsumer = function () {
        var consumerIdToReset = this._currentlyConfiguredConsumerId;
        this._setCurrentlyConfiguredConsumerId(undefined);
        this._isPaneRenderedByWebPart = undefined;
        this._resetLoader(consumerIdToReset);
    };
    /**
     * Resets the data loader for the pivot that renders the specified consumerId.
     */
    ContentPanelController.prototype._resetLoader = function (consumerId) {
        var _a;
        if ((0, Flights_1.isPageDetailsEnabled)() && !consumerId) {
            return;
        }
        (_a = sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance().subscriberContext) === null || _a === void 0 ? void 0 : _a.setLoader(
        // when isPageDetailsEnabled is graduated, just use getPivotFromConsumerId(consumerIdToReset) w/o the if check here
        (0, Flights_1.isPageDetailsEnabled)() && consumerId
            ? (0, supportedPivotUtils_1.getPivotFromConsumerId)(consumerId)
            : sp_pages_content_panel_context_1.SPPagesContentPanelPivot.configurationTools, function () { return undefined; });
    };
    /**
     * Closes the content panel if the current open panel is a panel supported by this component.
     */
    ContentPanelController.prototype._closeContentPanel = function (consumerId, skipFiringEvents) {
        var _a = sp_pages_content_panel_context_1.SPPagesContentPanelProviderContext.getInstance(), stateContext = _a.stateContext, subscriberContext = _a.subscriberContext;
        if ((stateContext === null || stateContext === void 0 ? void 0 : stateContext.isVisible) &&
            ((0, Flights_1.isPageDetailsEnabled)()
                ? consumerId
                    ? (stateContext === null || stateContext === void 0 ? void 0 : stateContext.activePivot) === (0, supportedPivotUtils_1.getPivotFromConsumerId)(consumerId)
                    : // if no consumerId is provided, then this is a force close
                        // so we check if the active pivot is supported
                        (0, supportedPivotUtils_1.getSupportedPivots)().some(function (supportedPivot) { return supportedPivot === stateContext.activePivot; })
                : (stateContext === null || stateContext === void 0 ? void 0 : stateContext.activePivot) === sp_pages_content_panel_context_1.SPPagesContentPanelPivot.configurationTools)) {
            subscriberContext === null || subscriberContext === void 0 ? void 0 : subscriberContext.setIsVisible(false);
            if (!skipFiringEvents) {
                this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, 'ConfigurationComplete');
                this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, 'Closed');
            }
            sp_diagnostics_1._TraceLogger.logVerbose(logSource_1.logSource, "Closed content panel");
        }
    };
    return ContentPanelController;
}());
exports.ContentPanelController = ContentPanelController;
//# sourceMappingURL=ContentPanelController.js.map