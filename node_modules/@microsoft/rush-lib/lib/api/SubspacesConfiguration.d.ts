import type { RushConfiguration } from './RushConfiguration';
/**
 * The allowed naming convention for subspace names.
 * Allows for names to be formed of identifiers separated by hyphens (-)
 *
 * Example: "my-subspace"
 */
export declare const SUBSPACE_NAME_REGEXP: RegExp;
export declare const SPLIT_WORKSPACE_SUBSPACE_NAME_REGEXP: RegExp;
/**
 * This represents the JSON data structure for the "subspaces.json" configuration file.
 * See subspace.schema.json for documentation.
 */
export interface ISubspacesConfigurationJson {
    subspacesEnabled: boolean;
    splitWorkspaceCompatibility?: boolean;
    preventSelectingAllSubspaces?: boolean;
    subspaceNames: string[];
}
/**
 * This represents the subspace configurations for a repository, based on the "subspaces.json"
 * configuration file.
 * @beta
 */
export declare class SubspacesConfiguration {
    private static _jsonSchema;
    /**
     * The absolute path to the "subspaces.json" configuration file that was loaded to construct this object.
     */
    readonly subspaceJsonFilePath: string;
    readonly subspacesEnabled: boolean;
    /**
     * This determines if the subspaces feature supports adding configuration files under the project folder itself
     */
    readonly splitWorkspaceCompatibility: boolean;
    /**
     * This determines if selectors are required when installing and building
     */
    readonly preventSelectingAllSubspaces: boolean;
    /**
     * A set of the available subspaces
     */
    readonly subspaceNames: ReadonlySet<string>;
    private constructor();
    /**
     * Checks whether the provided string could be used as a subspace name.
     * Returns `undefined` if the name is valid; otherwise returns an error message.
     * @remarks
     * This is a syntax check only; it does not test whether the subspace is actually defined in the Rush configuration.
     */
    static explainIfInvalidSubspaceName(subspaceName: string, splitWorkspaceCompatibility?: boolean): string | undefined;
    /**
     * Checks whether the provided string could be used as a subspace name.
     * If not, an exception is thrown.
     * @remarks
     * This is a syntax check only; it does not test whether the subspace is actually defined in the Rush configuration.
     */
    static requireValidSubspaceName(subspaceName: string, splitWorkspaceCompatibility?: boolean): void;
    static tryLoadFromConfigurationFile(subspaceJsonFilePath: string): SubspacesConfiguration | undefined;
    static tryLoadFromDefaultLocation(rushConfiguration: RushConfiguration): SubspacesConfiguration | undefined;
}
//# sourceMappingURL=SubspacesConfiguration.d.ts.map