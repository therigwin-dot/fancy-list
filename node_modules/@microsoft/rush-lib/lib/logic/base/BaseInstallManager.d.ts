import { type ITerminal } from '@rushstack/terminal';
import type { AsyncRecycler } from '../../utilities/AsyncRecycler';
import type { BaseShrinkwrapFile } from './BaseShrinkwrapFile';
import { type LastInstallFlag } from '../../api/LastInstallFlag';
import type { PurgeManager } from '../PurgeManager';
import type { RushConfiguration } from '../../api/RushConfiguration';
import type { RushGlobalFolder } from '../../api/RushGlobalFolder';
import type { IInstallManagerOptions } from './BaseInstallManagerTypes';
import type { Subspace } from '../../api/Subspace';
import { ProjectImpactGraphGenerator } from '../ProjectImpactGraphGenerator';
/**
 * Pnpm don't support --ignore-compatibility-db, so use --config.ignoreCompatibilityDb for now.
 */
export declare const pnpmIgnoreCompatibilityDbParameter: string;
/**
 * This class implements common logic between "rush install" and "rush update".
 */
export declare abstract class BaseInstallManager {
    private readonly _commonTempLinkFlag;
    private _npmSetupValidated;
    private _syncNpmrcAlreadyCalled;
    protected readonly _terminal: ITerminal;
    protected readonly rushConfiguration: RushConfiguration;
    protected readonly rushGlobalFolder: RushGlobalFolder;
    protected readonly installRecycler: AsyncRecycler;
    protected readonly options: IInstallManagerOptions;
    protected readonly subspaceInstallFlags: Map<string, LastInstallFlag>;
    constructor(rushConfiguration: RushConfiguration, rushGlobalFolder: RushGlobalFolder, purgeManager: PurgeManager, options: IInstallManagerOptions);
    doInstallAsync(): Promise<void>;
    protected abstract prepareCommonTempAsync(subspace: Subspace, shrinkwrapFile: BaseShrinkwrapFile | undefined): Promise<{
        shrinkwrapIsUpToDate: boolean;
        shrinkwrapWarnings: string[];
    }>;
    protected abstract installAsync(cleanInstall: boolean, subspace: Subspace): Promise<void>;
    protected abstract postInstallAsync(subspace: Subspace): Promise<void>;
    protected canSkipInstallAsync(lastModifiedDate: Date, subspace: Subspace, variant: string | undefined): Promise<boolean>;
    protected prepareAsync(subspace: Subspace, variant: string | undefined, projectImpactGraphGenerator: ProjectImpactGraphGenerator | undefined): Promise<{
        shrinkwrapIsUpToDate: boolean;
        npmrcHash: string | undefined;
        projectImpactGraphIsUpToDate: boolean;
        variantIsUpToDate: boolean;
    }>;
    /**
     * Git hooks are only installed if the repo opts in by including files in /common/git-hooks
     */
    private _installGitHooksAsync;
    /**
     * Used when invoking the NPM tool.  Appends the common configuration options
     * to the command-line.
     */
    protected pushConfigurationArgs(args: string[], options: IInstallManagerOptions, subspace: Subspace): void;
    private _checkIfReleaseIsPublishedAsync;
    private _queryIfReleaseIsPublishedAsync;
    private _syncTempShrinkwrap;
    protected validateNpmSetupAsync(): Promise<void>;
}
//# sourceMappingURL=BaseInstallManager.d.ts.map