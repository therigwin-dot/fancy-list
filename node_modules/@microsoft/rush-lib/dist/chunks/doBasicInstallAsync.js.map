{"version":3,"file":"chunks/doBasicInstallAsync.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACiE;AACpB;AACE;AACkC;AAC1E;AACP,YAAY,mHAAmH;AAC/H,IAAI,yFAAqB;AACzB;AACA;AACA,KAAK;AACL,IAAI,qDAAW;AACf,6BAA6B,uDAAY;AACzC,iCAAiC,yEAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@microsoft/rush-lib/./lib-esnext/logic/installManager/doBasicInstallAsync.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nimport { InstallManagerFactory } from '../InstallManagerFactory';\nimport { SetupChecks } from '../SetupChecks';\nimport { PurgeManager } from '../PurgeManager';\nimport { VersionMismatchFinder } from '../versionMismatch/VersionMismatchFinder';\nexport async function doBasicInstallAsync(options) {\n    const { rushConfiguration, rushGlobalFolder, isDebug, variant, terminal, beforeInstallAsync, afterInstallAsync, subspace } = options;\n    VersionMismatchFinder.ensureConsistentVersions(rushConfiguration, terminal, {\n        variant,\n        subspace\n    });\n    SetupChecks.validate(rushConfiguration);\n    const purgeManager = new PurgeManager(rushConfiguration, rushGlobalFolder);\n    const installManager = await InstallManagerFactory.getInstallManagerAsync(rushConfiguration, rushGlobalFolder, purgeManager, {\n        debug: isDebug,\n        allowShrinkwrapUpdates: false,\n        checkOnly: false,\n        bypassPolicy: false,\n        noLink: false,\n        fullUpgrade: false,\n        recheckShrinkwrap: false,\n        offline: false,\n        collectLogFile: false,\n        pnpmFilterArgumentValues: [],\n        selectedProjects: new Set(rushConfiguration.projects),\n        maxInstallAttempts: 1,\n        networkConcurrency: undefined,\n        subspace,\n        terminal,\n        variant,\n        afterInstallAsync,\n        beforeInstallAsync\n    });\n    try {\n        await installManager.doInstallAsync();\n    }\n    finally {\n        await purgeManager.startDeleteAllAsync();\n    }\n}\n//# sourceMappingURL=doBasicInstallAsync.js.map"],"names":[],"sourceRoot":""}