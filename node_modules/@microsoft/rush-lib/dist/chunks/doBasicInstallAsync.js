"use strict";
exports.id = "doBasicInstallAsync";
exports.ids = ["doBasicInstallAsync"];
exports.modules = {

/***/ 474147:
/*!****************************************************************!*\
  !*** ./lib-esnext/logic/installManager/doBasicInstallAsync.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doBasicInstallAsync: () => (/* binding */ doBasicInstallAsync)
/* harmony export */ });
/* harmony import */ var _InstallManagerFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../InstallManagerFactory */ 438212);
/* harmony import */ var _SetupChecks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SetupChecks */ 772736);
/* harmony import */ var _PurgeManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PurgeManager */ 877700);
/* harmony import */ var _versionMismatch_VersionMismatchFinder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../versionMismatch/VersionMismatchFinder */ 121671);
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.




async function doBasicInstallAsync(options) {
    const { rushConfiguration, rushGlobalFolder, isDebug, variant, terminal, beforeInstallAsync, afterInstallAsync, subspace } = options;
    _versionMismatch_VersionMismatchFinder__WEBPACK_IMPORTED_MODULE_0__.VersionMismatchFinder.ensureConsistentVersions(rushConfiguration, terminal, {
        variant,
        subspace
    });
    _SetupChecks__WEBPACK_IMPORTED_MODULE_1__.SetupChecks.validate(rushConfiguration);
    const purgeManager = new _PurgeManager__WEBPACK_IMPORTED_MODULE_2__.PurgeManager(rushConfiguration, rushGlobalFolder);
    const installManager = await _InstallManagerFactory__WEBPACK_IMPORTED_MODULE_3__.InstallManagerFactory.getInstallManagerAsync(rushConfiguration, rushGlobalFolder, purgeManager, {
        debug: isDebug,
        allowShrinkwrapUpdates: false,
        checkOnly: false,
        bypassPolicy: false,
        noLink: false,
        fullUpgrade: false,
        recheckShrinkwrap: false,
        offline: false,
        collectLogFile: false,
        pnpmFilterArgumentValues: [],
        selectedProjects: new Set(rushConfiguration.projects),
        maxInstallAttempts: 1,
        networkConcurrency: undefined,
        subspace,
        terminal,
        variant,
        afterInstallAsync,
        beforeInstallAsync
    });
    try {
        await installManager.doInstallAsync();
    }
    finally {
        await purgeManager.startDeleteAllAsync();
    }
}
//# sourceMappingURL=doBasicInstallAsync.js.map

/***/ })

};
;
//# sourceMappingURL=doBasicInstallAsync.js.map