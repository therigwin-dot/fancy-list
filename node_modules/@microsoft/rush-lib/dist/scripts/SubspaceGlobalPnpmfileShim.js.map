{"version":3,"file":"scripts/SubspaceGlobalPnpmfileShim.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,OAAuB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qDAAc,CAAC,oDAAa;AAC/D;AACA,kDAAkD,iDAAQ,OAAO,mDAAU;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qDAAc,CAAC,oDAAa;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qDAAc,CAAC,oDAAa;AACjE;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sD","sources":["webpack://@microsoft/rush-lib/external node-commonjs \"path\"","webpack://@microsoft/rush-lib/webpack/bootstrap","webpack://@microsoft/rush-lib/webpack/runtime/compat get default export","webpack://@microsoft/rush-lib/webpack/runtime/define property getters","webpack://@microsoft/rush-lib/webpack/runtime/hasOwnProperty shorthand","webpack://@microsoft/rush-lib/webpack/runtime/make namespace object","webpack://@microsoft/rush-lib/./lib-esnext/logic/pnpm/SubspaceGlobalPnpmfileShim.js"],"sourcesContent":["module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar _a;\n// The \"rush install\" or \"rush update\" commands will copy this template to\n// \"common/temp-split/global-pnpmfile.js\" so that it can implement Rush-specific features.\n// It reads its input data from \"common/temp/pnpmfileSettings.json\". The pnpmfile is\n// required directly by this shim and is called after Rush's transformations are applied.\nimport path from 'path';\nlet settings;\nlet userPnpmfile;\nlet semver;\n// Initialize all external aspects of the pnpmfile shim. When using the shim, settings\n// are always expected to be available. Init must be called before running any hook that\n// depends on a resource obtained from or related to the settings, and will require modules\n// once so they aren't repeatedly required in the hook functions.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction init(context) {\n    // Sometimes PNPM may provide us a context arg that doesn't fit spec, ex.:\n    // https://github.com/pnpm/pnpm/blob/97c64bae4d14a8c8f05803f1d94075ee29c2df2f/packages/get-context/src/index.ts#L134\n    // So we need to normalize the context format before we move on\n    if (typeof context !== 'object' || Array.isArray(context)) {\n        context = {\n            log: (message) => { },\n            originalContext: context\n        };\n    }\n    if (!settings) {\n        // Initialize the settings from file\n        if (!context.splitWorkspacePnpmfileShimSettings) {\n            context.splitWorkspacePnpmfileShimSettings = __non_webpack_require__('./pnpmfileSettings.json');\n        }\n        settings = context.splitWorkspacePnpmfileShimSettings;\n    }\n    else if (!context.splitWorkspacePnpmfileShimSettings) {\n        // Reuse the already initialized settings\n        context.splitWorkspacePnpmfileShimSettings = settings;\n    }\n    // If a userPnpmfilePath is provided, we expect it to exist\n    if (!userPnpmfile && settings.userPnpmfilePath) {\n        userPnpmfile = require(settings.userPnpmfilePath);\n    }\n    // If a semverPath is provided, we expect it to exist\n    if (!semver && settings.semverPath) {\n        semver = require(settings.semverPath);\n    }\n    // Return the normalized context\n    return context;\n}\n// Rewrite rush project referenced in split workspace.\n// For example: \"project-a\": \"workspace:*\" --> \"project-a\": \"link:../../project-a\"\nfunction rewriteRushProjectVersions(packageName, dependencies) {\n    if (!dependencies) {\n        return;\n    }\n    if (!settings) {\n        throw new Error(`splitWorkspaceGlobalPnpmfileShimSettings not initialized`);\n    }\n    const workspaceProject = settings.subspaceProjects[packageName] || settings.workspaceProjects[packageName];\n    if (!workspaceProject) {\n        return;\n    }\n    for (const dependencyName of Object.keys(dependencies)) {\n        const currentVersion = dependencies[dependencyName];\n        if (currentVersion.startsWith('workspace:')) {\n            const workspaceProjectInfo = settings.workspaceProjects[dependencyName];\n            if (workspaceProjectInfo) {\n                // Case 1. \"<package_name>\": \"workspace:*\"\n                let workspaceVersionProtocol = 'link:';\n                const injectedDependenciesSet = new Set(workspaceProject.injectedDependencies);\n                if (injectedDependenciesSet.has(dependencyName)) {\n                    workspaceVersionProtocol = 'file:';\n                }\n                let relativePath = path.normalize(path.relative(workspaceProject.projectRelativeFolder, workspaceProjectInfo.projectRelativeFolder));\n                // convert path in posix style, otherwise pnpm install will fail in subspace case\n                relativePath = relativePath.split(path.sep).join(path.posix.sep);\n                const newVersion = workspaceVersionProtocol + relativePath;\n                dependencies[dependencyName] = newVersion;\n            }\n            else {\n                // Case 2. \"<alias>\": \"workspace:<aliased_package_name>@<version>\"\n                const packageSpec = currentVersion.slice('workspace:'.length);\n                const nameEndsAt = packageSpec[0] === '@' ? packageSpec.slice(1).indexOf('@') + 1 : packageSpec.indexOf('@');\n                const aliasedPackageName = nameEndsAt > 0 ? packageSpec.slice(0, nameEndsAt) : packageSpec;\n                // const depVersion: string = nameEndsAt > 0 ? packageSpec.slice(nameEndsAt + 1) : '';\n                const aliasedWorkspaceProjectInfo = settings.workspaceProjects[aliasedPackageName];\n                if (aliasedWorkspaceProjectInfo) {\n                    const relativePath = path.normalize(path.relative(workspaceProject.projectRelativeFolder, aliasedWorkspaceProjectInfo.projectRelativeFolder));\n                    const newVersion = 'link:' + relativePath;\n                    dependencies[dependencyName] = newVersion;\n                }\n            }\n        }\n        else if (currentVersion.startsWith('npm:')) {\n            // Case 3. \"<alias>\": \"npm:<package_name>@<dep_version>\"\n            const packageSpec = currentVersion.slice('npm:'.length);\n            const nameEndsAt = packageSpec[0] === '@' ? packageSpec.slice(1).indexOf('@') + 1 : packageSpec.indexOf('@');\n            const aliasedPackageName = nameEndsAt > 0 ? packageSpec.slice(0, nameEndsAt) : packageSpec;\n            // const depVersion: string = nameEndsAt > 0 ? packageSpec.slice(nameEndsAt + 1) : '';\n            const aliasedWorkspaceProjectInfo = settings.workspaceProjects[aliasedPackageName];\n            if (aliasedWorkspaceProjectInfo) {\n                const relativePath = path.normalize(path.relative(workspaceProject.projectRelativeFolder, aliasedWorkspaceProjectInfo.projectRelativeFolder));\n                const newVersion = 'link:' + relativePath;\n                dependencies[dependencyName] = newVersion;\n            }\n        }\n    }\n}\nexport const hooks = {\n    // Call the original pnpmfile (if it exists)\n    afterAllResolved: (lockfile, context) => {\n        var _a;\n        context = init(context);\n        return ((_a = userPnpmfile === null || userPnpmfile === void 0 ? void 0 : userPnpmfile.hooks) === null || _a === void 0 ? void 0 : _a.afterAllResolved)\n            ? userPnpmfile.hooks.afterAllResolved(lockfile, context)\n            : lockfile;\n    },\n    // Rewrite workspace protocol to link protocol for non split workspace projects\n    readPackage: (pkg, context) => {\n        var _a;\n        context = init(context);\n        rewriteRushProjectVersions(pkg.name, pkg.dependencies);\n        rewriteRushProjectVersions(pkg.name, pkg.devDependencies);\n        return ((_a = userPnpmfile === null || userPnpmfile === void 0 ? void 0 : userPnpmfile.hooks) === null || _a === void 0 ? void 0 : _a.readPackage) ? userPnpmfile.hooks.readPackage(pkg, context) : pkg;\n    },\n    // Call the original pnpmfile (if it exists)\n    filterLog: (_a = userPnpmfile === null || userPnpmfile === void 0 ? void 0 : userPnpmfile.hooks) === null || _a === void 0 ? void 0 : _a.filterLog\n};\n//# sourceMappingURL=SubspaceGlobalPnpmfileShim.js.map"],"names":[],"sourceRoot":""}