{"version":3,"file":"child_process.js","sourceRoot":"","sources":["../../src/__mocks__/child_process.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,oBAAoB;AAEpB,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEvC,MAAM,YAAY,GAAQ,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;AAClE,MAAM,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;AAC/D,YAAY,CAAC,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;AAC7C,YAAY,CAAC,oBAAoB,GAAG,kBAAkB,CAAC;AAEvD,IAAI,eAAe,GAAG,wBAAwB,EAAE,CAAC;AAEjD;;GAEG;AACH,SAAS,wBAAwB,CAAC,WAAiB;IACjD,MAAM,MAAM,GAAG,WAAW,IAAI,EAAE,CAAC;IACjC,OAAO;QACL,SAAS,EAAE,OAAO,MAAM,CAAC,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK;QAC7E,UAAU,EAAE,OAAO,MAAM,CAAC,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC7E,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,SAAS,kBAAkB,CAAC,WAAgB;IAC1C,eAAe,GAAG,wBAAwB,CAAC,WAAW,CAAC,CAAC;AAC1D,CAAC;AAED;;GAEG;AACH,SAAS,KAAK,CAAC,IAAY,EAAE,IAAc,EAAE,OAAW;IACtD,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,YAAY,EAAE,CAAC;IAE/C,gGAAgG;IAChG,oCAAoC;IACpC,MAAM,SAAS,GAAG,IAAI,YAAY,EAAE,CAAC;IACrC,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE;QACnC,KAAK,EAAE,IAAI,YAAY,EAAE;QACzB,MAAM,EAAE,IAAI,YAAY,EAAE;QAC1B,MAAM,EAAE,IAAI,YAAY,EAAE;QAC1B,EAAE,EAAE,SAAS,CAAC,EAAE;QAChB,IAAI,EAAE,SAAS,CAAC,IAAI;KACrB,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACd,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,IAAI,IAAI,wBAAwB,CAAC,CAAC;QAEhE,IAAI,eAAe,CAAC,SAAS,EAAE,CAAC;YAC9B,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,IAAI,IAAI,qCAAqC,CAAC,CAAC;QAC/E,CAAC;QAED,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,OAAO,EAAE,CAAC;AACZ,CAAC;AAED;;GAEG;AACH,YAAY,CAAC,SAAS,GAAG,kBAAkB,CAAC,SAAS,CAAC;AAEtD,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/* eslint-disable */\n\nconst EventEmitter = require('events');\n\nconst childProcess: any = jest.genMockFromModule('child_process');\nconst childProcessActual = jest.requireActual('child_process');\nchildProcess.spawn.mockImplementation(spawn);\nchildProcess.__setSpawnMockConfig = setSpawnMockConfig;\n\nlet spawnMockConfig = normalizeSpawnMockConfig();\n\n/**\n * Helper to initialize how the `spawn` mock should behave.\n */\nfunction normalizeSpawnMockConfig(maybeConfig?: any) {\n  const config = maybeConfig || {};\n  return {\n    emitError: typeof config.emitError !== 'undefined' ? config.emitError : false,\n    returnCode: typeof config.returnCode !== 'undefined' ? config.returnCode : 0\n  };\n}\n\n/**\n * Initialize the `spawn` mock behavior.\n *\n * Not a pure function.\n */\nfunction setSpawnMockConfig(spawnConfig: any) {\n  spawnMockConfig = normalizeSpawnMockConfig(spawnConfig);\n}\n\n/**\n * Mock of `spawn`.\n */\nfunction spawn(file: string, args: string[], options: {}) {\n  const cpMock = new childProcess.ChildProcess();\n\n  // Add working event emitters ourselves since `genMockFromModule` does not add them because they\n  // are dynamically added by `spawn`.\n  const cpEmitter = new EventEmitter();\n  const cp = Object.assign({}, cpMock, {\n    stdin: new EventEmitter(),\n    stdout: new EventEmitter(),\n    stderr: new EventEmitter(),\n    on: cpEmitter.on,\n    emit: cpEmitter.emit\n  });\n\n  setTimeout(() => {\n    cp.stdout.emit('data', `${file} ${args}: Mock task is spawned`);\n\n    if (spawnMockConfig.emitError) {\n      cp.stderr.emit('data', `${file} ${args}: A mock error occurred in the task`);\n    }\n\n    cp.emit('close', spawnMockConfig.returnCode);\n  }, 0);\n\n  return cp;\n}\n\n/**\n * Ensure the real spawnSync function is used, otherwise LockFile breaks.\n */\nchildProcess.spawnSync = childProcessActual.spawnSync;\n\nmodule.exports = childProcess;\n"]}