{"version":3,"file":"ApprovedPackagesPolicy.js","sourceRoot":"","sources":["../../src/api/ApprovedPackagesPolicy.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAE7B,mFAAgF;AAChF,0DAAuD;AAOvD;;;;GAIG;AACH,MAAa,sBAAsB;IAgDjC,gBAAgB;IAChB,YAAmB,iBAAoC,EAAE,qBAA6C;QACpG,MAAM,sBAAsB,GAC1B,qBAAqB,CAAC,sBAAsB,IAAI,EAAE,CAAC;QAErD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,qBAAqB,CAAC,sBAAsB,CAAC;QAC9D,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,CAAS,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;QACjF,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,CAAS,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;QAEjF,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;gBAChC,MAAM,IAAI,KAAK,CACb,mDAAmD,6BAAa,CAAC,gBAAgB,4BAA4B;oBAC3G,0BAA0B,CAC7B,CAAC;YACJ,CAAC;QACH,CAAC;QAED,sCAAsC;QACtC,MAAM,2BAA2B,GAAW,IAAI,CAAC,IAAI,CACnD,iBAAiB,CAAC,sBAAsB,EACxC,6BAAa,CAAC,+BAA+B,CAC9C,CAAC;QACF,IAAI,CAAC,uBAAuB,GAAG,IAAI,6DAA6B,CAAC,2BAA2B,CAAC,CAAC;QAC9F,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE3D,yCAAyC;QACzC,MAAM,8BAA8B,GAAW,IAAI,CAAC,IAAI,CACtD,iBAAiB,CAAC,sBAAsB,EACxC,6BAAa,CAAC,kCAAkC,CACjD,CAAC;QACF,IAAI,CAAC,0BAA0B,GAAG,IAAI,6DAA6B,CAAC,8BAA8B,CAAC,CAAC;QACpG,IAAI,CAAC,0BAA0B,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChE,CAAC;CACF;AAlFD,wDAkFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\n\nimport { ApprovedPackagesConfiguration } from './ApprovedPackagesConfiguration';\nimport { RushConstants } from '../logic/RushConstants';\nimport type {\n  RushConfiguration,\n  IRushConfigurationJson,\n  IApprovedPackagesPolicyJson\n} from './RushConfiguration';\n\n/**\n * This is a helper object for RushConfiguration.\n * It exposes the \"approvedPackagesPolicy\" feature from rush.json.\n * @public\n */\nexport class ApprovedPackagesPolicy {\n  /**\n   * Whether the feature is enabled.  The feature is enabled if the \"approvedPackagesPolicy\"\n   * field is assigned in rush.json.\n   */\n  public readonly enabled: boolean;\n\n  /**\n   * A list of NPM package scopes that will be excluded from review (e.g. `@types`)\n   */\n  public readonly ignoredNpmScopes: ReadonlySet<string>;\n\n  /**\n   * A list of category names that are valid for usage as the RushConfigurationProject.reviewCategory field.\n   * This array will never be undefined.\n   */\n  public readonly reviewCategories: ReadonlySet<string>;\n\n  /**\n   * Packages approved for usage in a web browser.  This is the stricter of the two types, so by default\n   * all new packages are added to this file.\n   *\n   * @remarks\n   *\n   * This is part of an optional approval workflow, whose purpose is to review any new dependencies\n   * that are introduced (e.g. maybe a legal review is required, or maybe we are trying to minimize bloat).\n   * When Rush discovers a new dependency has been added to package.json, it will update the file.\n   * The intent is that the file will be stored in Git and tracked by a branch policy that notifies\n   * reviewers when a PR attempts to modify the file.\n   *\n   * Example filename: `C:\\MyRepo\\common\\config\\rush\\browser-approved-packages.json`\n   */\n  public readonly browserApprovedPackages: ApprovedPackagesConfiguration;\n\n  /**\n   * Packages approved for usage everywhere *except* in a web browser.\n   *\n   * @remarks\n   *\n   * This is part of an optional approval workflow, whose purpose is to review any new dependencies\n   * that are introduced (e.g. maybe a legal review is required, or maybe we are trying to minimize bloat).\n   * The intent is that the file will be stored in Git and tracked by a branch policy that notifies\n   * reviewers when a PR attempts to modify the file.\n   *\n   * Example filename: `C:\\MyRepo\\common\\config\\rush\\browser-approved-packages.json`\n   */\n  public readonly nonbrowserApprovedPackages: ApprovedPackagesConfiguration;\n\n  /** @internal */\n  public constructor(rushConfiguration: RushConfiguration, rushConfigurationJson: IRushConfigurationJson) {\n    const approvedPackagesPolicy: IApprovedPackagesPolicyJson =\n      rushConfigurationJson.approvedPackagesPolicy || {};\n\n    this.enabled = !!rushConfigurationJson.approvedPackagesPolicy;\n    this.ignoredNpmScopes = new Set<string>(approvedPackagesPolicy.ignoredNpmScopes);\n    this.reviewCategories = new Set<string>(approvedPackagesPolicy.reviewCategories);\n\n    if (this.enabled) {\n      if (!this.reviewCategories.size) {\n        throw new Error(\n          `The \"approvedPackagesPolicy\" feature is enabled ${RushConstants.rushJsonFilename}, but the reviewCategories` +\n            ` list is not configured.`\n        );\n      }\n    }\n\n    // Load browser-approved-packages.json\n    const browserApprovedPackagesPath: string = path.join(\n      rushConfiguration.commonRushConfigFolder,\n      RushConstants.browserApprovedPackagesFilename\n    );\n    this.browserApprovedPackages = new ApprovedPackagesConfiguration(browserApprovedPackagesPath);\n    this.browserApprovedPackages.tryLoadFromFile(this.enabled);\n\n    // Load nonbrowser-approved-packages.json\n    const nonbrowserApprovedPackagesPath: string = path.join(\n      rushConfiguration.commonRushConfigFolder,\n      RushConstants.nonbrowserApprovedPackagesFilename\n    );\n    this.nonbrowserApprovedPackages = new ApprovedPackagesConfiguration(nonbrowserApprovedPackagesPath);\n    this.nonbrowserApprovedPackages.tryLoadFromFile(this.enabled);\n  }\n}\n"]}