{"version":3,"file":"Subspace.js","sourceRoot":"","sources":["../../src/api/Subspace.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as crypto from 'crypto';\n\nimport { FileSystem } from '@rushstack/node-core-library';\nimport type { RushConfiguration } from './RushConfiguration';\nimport type { RushConfigurationProject } from './RushConfigurationProject';\nimport { EnvironmentConfiguration } from './EnvironmentConfiguration';\nimport { RushConstants } from '../logic/RushConstants';\nimport { CommonVersionsConfiguration } from './CommonVersionsConfiguration';\nimport { RepoStateFile } from '../logic/RepoStateFile';\nimport type { PnpmPackageManager } from './packageManager/PnpmPackageManager';\nimport { PnpmOptionsConfiguration } from '../logic/pnpm/PnpmOptionsConfiguration';\nimport type { IPackageJson } from '@rushstack/node-core-library';\nimport { SubspacePnpmfileConfiguration } from '../logic/pnpm/SubspacePnpmfileConfiguration';\nimport type { ISubspacePnpmfileShimSettings } from '../logic/pnpm/IPnpmfile';\n\n/**\n * @internal\n */\nexport interface ISubspaceOptions {\n  subspaceName: string;\n  rushConfiguration: RushConfiguration;\n  splitWorkspaceCompatibility: boolean;\n}\n\ninterface ISubspaceDetail {\n  subspaceConfigFolderPath: string;\n  subspacePnpmPatchesFolderPath: string;\n  subspaceTempFolderPath: string;\n  tempShrinkwrapFilePath: string;\n  tempShrinkwrapPreinstallFilePath: string;\n}\n\ninterface IPackageJsonLite extends Omit<IPackageJson, 'version'> {}\n\n/**\n * This represents the subspace configurations for a repository, based on the \"subspaces.json\"\n * configuration file.\n * @public\n */\nexport class Subspace {\n  public readonly subspaceName: string;\n  private readonly _rushConfiguration: RushConfiguration;\n  private readonly _projects: RushConfigurationProject[] = [];\n  private readonly _splitWorkspaceCompatibility: boolean;\n  private _commonVersionsConfiguration: CommonVersionsConfiguration | undefined = undefined;\n\n  private _detail: ISubspaceDetail | undefined;\n\n  private _cachedPnpmOptions: PnpmOptionsConfiguration | undefined = undefined;\n  // If true, then _cachedPnpmOptions has been initialized.\n  private _cachedPnpmOptionsInitialized: boolean = false;\n\n  public constructor(options: ISubspaceOptions) {\n    this.subspaceName = options.subspaceName;\n    this._rushConfiguration = options.rushConfiguration;\n    this._splitWorkspaceCompatibility = options.splitWorkspaceCompatibility;\n  }\n\n  /**\n   * Returns the list of projects belonging to this subspace.\n   * @beta\n   */\n  public getProjects(): RushConfigurationProject[] {\n    return this._projects;\n  }\n\n  /**\n   * Returns the parsed contents of the pnpm-config.json config file.\n   * @beta\n   */\n  public getPnpmOptions(): PnpmOptionsConfiguration | undefined {\n    if (!this._cachedPnpmOptionsInitialized) {\n      // Calculate these outside the try/catch block since their error messages shouldn't be annotated:\n      const subspaceTempFolder: string = this.getSubspaceTempFolderPath();\n      try {\n        this._cachedPnpmOptions = PnpmOptionsConfiguration.loadFromJsonFileOrThrow(\n          this.getPnpmConfigFilePath(),\n          subspaceTempFolder\n        );\n        this._cachedPnpmOptionsInitialized = true;\n      } catch (e) {\n        if (FileSystem.isNotExistError(e as Error)) {\n          this._cachedPnpmOptions = undefined;\n          this._cachedPnpmOptionsInitialized = true;\n        } else {\n          throw new Error(\n            `The subspace \"${this.subspaceName}\" has an invalid pnpm-config.json file:\\n` + e.message\n          );\n        }\n      }\n    }\n    return this._cachedPnpmOptions;\n  }\n\n  private _ensureDetail(): ISubspaceDetail {\n    if (!this._detail) {\n      const rushConfiguration: RushConfiguration = this._rushConfiguration;\n      let subspaceConfigFolderPath: string;\n      let subspacePnpmPatchesFolderPath: string;\n\n      if (rushConfiguration.subspacesFeatureEnabled) {\n        if (!rushConfiguration.pnpmOptions.useWorkspaces) {\n          throw new Error(\n            `The Rush subspaces feature is enabled.  You must set useWorkspaces=true in pnpm-config.json.`\n          );\n        }\n\n        // If this subspace doesn't have a configuration folder, check if it is in the project folder itself\n        // if the splitWorkspaceCompatibility option is enabled in the subspace configuration\n\n        // Example: C:\\MyRepo\\common\\config\\subspaces\\my-subspace\n        const standardSubspaceConfigFolder: string = `${rushConfiguration.commonFolder}/config/subspaces/${this.subspaceName}`;\n\n        subspaceConfigFolderPath = standardSubspaceConfigFolder;\n\n        if (this._splitWorkspaceCompatibility && this.subspaceName.startsWith('split_')) {\n          if (FileSystem.exists(standardSubspaceConfigFolder + '/pnpm-lock.yaml')) {\n            throw new Error(\n              `The split workspace subspace \"${this.subspaceName}\" cannot use a common/config folder: ` +\n                standardSubspaceConfigFolder\n            );\n          }\n\n          if (this._projects.length !== 1) {\n            throw new Error(\n              `The split workspace subspace \"${this.subspaceName}\" contains ${this._projects.length}` +\n                ` projects; there must be exactly one project.`\n            );\n          }\n          const project: RushConfigurationProject = this._projects[0];\n\n          subspaceConfigFolderPath = `${project.projectFolder}/subspace/${this.subspaceName}`;\n\n          // Ensure that this project does not have it's own pnpmfile.cjs or .npmrc file\n          if (FileSystem.exists(`${project.projectFolder}/.npmrc`)) {\n            throw new Error(\n              `The project level configuration file ${project.projectFolder}/.npmrc is no longer valid. Please use a ${subspaceConfigFolderPath}/.npmrc file instead.`\n            );\n          }\n          if (FileSystem.exists(`${project.projectFolder}/.pnpmfile.cjs`)) {\n            throw new Error(\n              `The project level configuration file ${project.projectFolder}/.pnpmfile.cjs is no longer valid. Please use a ${subspaceConfigFolderPath}/.pnpmfile.cjs file instead.`\n            );\n          }\n        }\n\n        if (!FileSystem.exists(subspaceConfigFolderPath)) {\n          throw new Error(\n            `The configuration folder for the \"${this.subspaceName}\" subspace does not exist: ` +\n              subspaceConfigFolderPath\n          );\n        }\n\n        subspacePnpmPatchesFolderPath = `${subspaceConfigFolderPath}/${RushConstants.pnpmPatchesCommonFolderName}`;\n      } else {\n        // Example: C:\\MyRepo\\common\\config\\rush\n        subspaceConfigFolderPath = rushConfiguration.commonRushConfigFolder;\n        // Example: C:\\MyRepo\\common\\pnpm-patches\n        subspacePnpmPatchesFolderPath = `${rushConfiguration.commonFolder}/${RushConstants.pnpmPatchesCommonFolderName}`;\n      }\n\n      // Example: C:\\MyRepo\\common\\temp\n      const commonTempFolder: string =\n        EnvironmentConfiguration.rushTempFolderOverride || rushConfiguration.commonTempFolder;\n\n      let subspaceTempFolderPath: string;\n      if (rushConfiguration.subspacesFeatureEnabled) {\n        // Example: C:\\MyRepo\\common\\temp\\my-subspace\n        subspaceTempFolderPath = `${commonTempFolder}/${this.subspaceName}`;\n      } else {\n        // Example: C:\\MyRepo\\common\\temp\n        subspaceTempFolderPath = commonTempFolder;\n      }\n\n      // Example: C:\\MyRepo\\common\\temp\\my-subspace\\pnpm-lock.yaml\n      const tempShrinkwrapFilePath: string = `${subspaceTempFolderPath}/${rushConfiguration.shrinkwrapFilename}`;\n\n      /// From \"C:\\MyRepo\\common\\temp\\pnpm-lock.yaml\" --> \"C:\\MyRepo\\common\\temp\\pnpm-lock-preinstall.yaml\"\n      const parsedPath: path.ParsedPath = path.parse(tempShrinkwrapFilePath);\n      const tempShrinkwrapPreinstallFilePath: string = `${parsedPath.dir}/${parsedPath.name}-preinstall${parsedPath.ext}`;\n\n      this._detail = {\n        subspaceConfigFolderPath,\n        subspacePnpmPatchesFolderPath,\n        subspaceTempFolderPath,\n        tempShrinkwrapFilePath,\n        tempShrinkwrapPreinstallFilePath\n      };\n    }\n    return this._detail;\n  }\n\n  /**\n   * Returns the full path of the folder containing this subspace's variant-dependent configuration files\n   * such as `pnpm-lock.yaml`.\n   *\n   * Example: `common/config/subspaces/my-subspace` or `common/config/subspaces/my-subspace/variants/my-variant`\n   * @beta\n   *\n   * @remarks\n   * The following files may be variant-dependent:\n   * - Lockfiles: (i.e. - `pnpm-lock.yaml`, `npm-shrinkwrap.json`, `yarn.lock`, etc)\n   * - 'common-versions.json'\n   * - 'pnpmfile.js'/'.pnpmfile.cjs'\n   */\n  public getVariantDependentSubspaceConfigFolderPath(variant: string | undefined): string {\n    const subspaceConfigFolderPath: string = this.getSubspaceConfigFolderPath();\n    if (!variant) {\n      return subspaceConfigFolderPath;\n    } else {\n      return `${subspaceConfigFolderPath}/${RushConstants.rushVariantsFolderName}/${variant}`;\n    }\n  }\n\n  /**\n   * Returns the full path of the folder containing this subspace's configuration files such as `pnpm-lock.yaml`.\n   *\n   * Example: `common/config/subspaces/my-subspace`\n   * @beta\n   */\n  public getSubspaceConfigFolderPath(): string {\n    return this._ensureDetail().subspaceConfigFolderPath;\n  }\n\n  /**\n   * Returns the full path of the folder containing this subspace's configuration files such as `pnpm-lock.yaml`.\n   *\n   * Example: `common/config/subspaces/my-subspace/pnpm-patches` (subspaces feature enabled)\n   * Example: `common/config/pnpm-patches` (subspaces feature disabled)\n   * @beta\n   */\n  public getSubspacePnpmPatchesFolderPath(): string {\n    return this._ensureDetail().subspacePnpmPatchesFolderPath;\n  }\n\n  /**\n   * The folder where the subspace's node_modules and other temporary files will be stored.\n   *\n   * Example: `common/temp/subspaces/my-subspace`\n   * @beta\n   */\n  public getSubspaceTempFolderPath(): string {\n    return this._ensureDetail().subspaceTempFolderPath;\n  }\n\n  /**\n   * Returns full path of the temporary shrinkwrap file for a specific subspace and returns the common workspace\n   * shrinkwrap if no subspaceName is provided.\n   * @remarks\n   * This function takes the subspace name, and returns the full path for the subspace's shrinkwrap file.\n   * This function also consults the deprecated option to allow for shrinkwraps to be stored under a package folder.\n   * This shrinkwrap file is used during \"rush install\", and may be rewritten by the package manager during installation\n   * This property merely reports the filename, the file itself may not actually exist.\n   * example: `C:\\MyRepo\\common\\<subspace_name>\\pnpm-lock.yaml`\n   * @beta\n   */\n  public getTempShrinkwrapFilename(): string {\n    return this._ensureDetail().tempShrinkwrapFilePath;\n  }\n\n  /**\n   * @deprecated - Use {@link Subspace.getTempShrinkwrapPreinstallFilePath} instead.\n   */\n  public getTempShrinkwrapPreinstallFilename(subspaceName?: string | undefined): string {\n    return this.getTempShrinkwrapPreinstallFilePath();\n  }\n\n  /**\n   * The full path of a backup copy of tempShrinkwrapFilename. This backup copy is made\n   * before installation begins, and can be compared to determine how the package manager\n   * modified tempShrinkwrapFilename.\n   * @remarks\n   * This property merely reports the filename; the file itself may not actually exist.\n   * Example: `C:\\MyRepo\\common\\temp\\npm-shrinkwrap-preinstall.json`\n   * or `C:\\MyRepo\\common\\temp\\pnpm-lock-preinstall.yaml`\n   * @beta\n   */\n  public getTempShrinkwrapPreinstallFilePath(): string {\n    return this._ensureDetail().tempShrinkwrapPreinstallFilePath;\n  }\n\n  /**\n   * Gets the path to the common-versions.json config file for this subspace.\n   *\n   * Example: `C:\\MyRepo\\common\\subspaces\\my-subspace\\common-versions.json`\n   * @beta\n   */\n  public getCommonVersionsFilePath(variant?: string): string {\n    return (\n      this.getVariantDependentSubspaceConfigFolderPath(variant) + '/' + RushConstants.commonVersionsFilename\n    );\n  }\n\n  /**\n   * Gets the path to the pnpm-config.json config file for this subspace.\n   *\n   * Example: `C:\\MyRepo\\common\\subspaces\\my-subspace\\pnpm-config.json`\n   * @beta\n   */\n  public getPnpmConfigFilePath(): string {\n    return this.getSubspaceConfigFolderPath() + '/' + RushConstants.pnpmConfigFilename;\n  }\n\n  /**\n   * Gets the settings from the common-versions.json config file.\n   * @beta\n   */\n  public getCommonVersions(variant?: string): CommonVersionsConfiguration {\n    const commonVersionsFilePath: string = this.getCommonVersionsFilePath(variant);\n    if (!this._commonVersionsConfiguration) {\n      this._commonVersionsConfiguration = CommonVersionsConfiguration.loadFromFile(\n        commonVersionsFilePath,\n        this._rushConfiguration\n      );\n    }\n    return this._commonVersionsConfiguration;\n  }\n\n  /**\n   * Gets the ensureConsistentVersions property from the common-versions.json config file,\n   * or from the rush.json file if it isn't defined in common-versions.json\n   * @beta\n   */\n  public shouldEnsureConsistentVersions(variant?: string): boolean {\n    // If the ensureConsistentVersions field is defined, return the value of the field\n    const commonVersions: CommonVersionsConfiguration = this.getCommonVersions(variant);\n    if (commonVersions.ensureConsistentVersions !== undefined) {\n      return commonVersions.ensureConsistentVersions;\n    }\n\n    // Fallback to ensureConsistentVersions in rush.json if the setting is not defined in\n    // the common-versions.json file\n    return this._rushConfiguration.ensureConsistentVersions;\n  }\n\n  /**\n   * Gets the path to the repo-state.json file.\n   * @beta\n   */\n  public getRepoStateFilePath(): string {\n    return this.getSubspaceConfigFolderPath() + '/' + RushConstants.repoStateFilename;\n  }\n\n  /**\n   * Gets the contents from the repo-state.json file.\n   * @param subspaceName - The name of the subspace in use by the active command.\n   * @beta\n   */\n  public getRepoState(): RepoStateFile {\n    const repoStateFilePath: string = this.getRepoStateFilePath();\n    return RepoStateFile.loadFromFile(repoStateFilePath);\n  }\n\n  /**\n   * @deprecated - Use {@link Subspace.getCommittedShrinkwrapFilePath} instead.\n   */\n  public getCommittedShrinkwrapFilename(): string {\n    return this.getCommittedShrinkwrapFilePath(undefined);\n  }\n\n  /**\n   * Gets the committed shrinkwrap file name for a specific variant.\n   * @param variant - The name of the current variant in use by the active command.\n   * @beta\n   */\n  public getCommittedShrinkwrapFilePath(variant?: string): string {\n    const subspaceConfigFolderPath: string = this.getVariantDependentSubspaceConfigFolderPath(variant);\n    return `${subspaceConfigFolderPath}/${this._rushConfiguration.shrinkwrapFilename}`;\n  }\n\n  /**\n   * Gets the absolute path for \"pnpmfile.js\" for a specific subspace.\n   * @param subspace - The name of the current subspace in use by the active command.\n   * @remarks\n   * The file path is returned even if PNPM is not configured as the package manager.\n   * @beta\n   */\n  public getPnpmfilePath(variant?: string): string {\n    const subspaceConfigFolderPath: string = this.getVariantDependentSubspaceConfigFolderPath(variant);\n\n    const pnpmFilename: string = (this._rushConfiguration.packageManagerWrapper as PnpmPackageManager)\n      .pnpmfileFilename;\n\n    return `${subspaceConfigFolderPath}/${pnpmFilename}`;\n  }\n\n  /**\n   * Returns true if the specified project belongs to this subspace.\n   * @beta\n   */\n  public contains(project: RushConfigurationProject): boolean {\n    return project.subspace.subspaceName === this.subspaceName;\n  }\n\n  /** @internal */\n  public _addProject(project: RushConfigurationProject): void {\n    this._projects.push(project);\n  }\n\n  /**\n   * Returns hash value of injected dependencies in related package.json.\n   * @beta\n   */\n  public getPackageJsonInjectedDependenciesHash(variant?: string): string | undefined {\n    const allPackageJson: IPackageJsonLite[] = [];\n\n    const relatedProjects: RushConfigurationProject[] = [];\n    const subspacePnpmfileShimSettings: ISubspacePnpmfileShimSettings =\n      SubspacePnpmfileConfiguration.getSubspacePnpmfileShimSettings(this._rushConfiguration, this, variant);\n\n    for (const rushProject of this.getProjects()) {\n      const injectedDependencies: Array<string> =\n        subspacePnpmfileShimSettings?.subspaceProjects[rushProject.packageName]?.injectedDependencies || [];\n      if (injectedDependencies.length === 0) {\n        continue;\n      }\n\n      const injectedDependencySet: Set<string> = new Set(injectedDependencies);\n\n      for (const dependencyProject of rushProject.dependencyProjects) {\n        if (injectedDependencySet.has(dependencyProject.packageName)) {\n          relatedProjects.push(dependencyProject);\n        }\n      }\n    }\n\n    // this means no injected dependencies found for current subspace\n    if (relatedProjects.length === 0) {\n      return undefined;\n    }\n\n    const allWorkspaceProjectSet: Set<string> = new Set(\n      this._rushConfiguration.projects.map((rushProject) => rushProject.packageName)\n    );\n\n    // get all related package.json\n    while (relatedProjects.length > 0) {\n      const rushProject: RushConfigurationProject = relatedProjects.pop()!;\n      // collect fields that could update the `pnpm-lock.yaml`\n      const {\n        name,\n        bin,\n        dependencies,\n        devDependencies,\n        peerDependencies,\n        optionalDependencies,\n        dependenciesMeta,\n        peerDependenciesMeta,\n        resolutions\n      } = rushProject.packageJson;\n\n      // special handing for peerDependencies\n      // for workspace packages, the version range is meaningless here.\n      if (peerDependencies) {\n        for (const packageName of Object.keys(peerDependencies)) {\n          if (allWorkspaceProjectSet.has(packageName)) {\n            peerDependencies[packageName] = 'workspace:*';\n          }\n        }\n      }\n\n      allPackageJson.push({\n        name,\n        bin,\n        dependencies,\n        devDependencies,\n        peerDependencies,\n        optionalDependencies,\n        dependenciesMeta,\n        peerDependenciesMeta,\n        resolutions\n      });\n\n      relatedProjects.push(...rushProject.dependencyProjects);\n    }\n\n    const collator: Intl.Collator = new Intl.Collator('en');\n    allPackageJson.sort((pa, pb) => collator.compare(pa.name, pb.name));\n    const hash: crypto.Hash = crypto.createHash('sha1');\n    for (const packageFile of allPackageJson) {\n      hash.update(JSON.stringify(packageFile));\n    }\n\n    const packageJsonInjectedDependenciesHash: string = hash.digest('hex');\n\n    return packageJsonInjectedDependenciesHash;\n  }\n}\n"]}