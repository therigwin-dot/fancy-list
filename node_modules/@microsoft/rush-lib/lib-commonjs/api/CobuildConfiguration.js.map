{"version":3,"file":"CobuildConfiguration.js","sourceRoot":"","sources":["../../src/api/CobuildConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, JsonFile, JsonSchema } from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { EnvironmentConfiguration } from './EnvironmentConfiguration';\nimport type { CobuildLockProviderFactory, RushSession } from '../pluginFramework/RushSession';\nimport { RushConstants } from '../logic/RushConstants';\nimport type { ICobuildLockProvider } from '../logic/cobuild/ICobuildLockProvider';\nimport type { RushConfiguration } from './RushConfiguration';\nimport schemaJson from '../schemas/cobuild.schema.json';\n\n/**\n * @beta\n */\nexport interface ICobuildJson {\n  cobuildFeatureEnabled: boolean;\n  cobuildLockProvider: string;\n}\n\n/**\n * @beta\n */\nexport interface ICobuildConfigurationOptions {\n  cobuildJson: ICobuildJson;\n  rushConfiguration: RushConfiguration;\n  rushSession: RushSession;\n  cobuildLockProviderFactory: CobuildLockProviderFactory;\n}\n\n/**\n * Use this class to load and save the \"common/config/rush/cobuild.json\" config file.\n * This file provides configuration options for the Rush Cobuild feature.\n * @beta\n */\nexport class CobuildConfiguration {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  /**\n   * Indicates whether the cobuild feature is enabled.\n   * Typically it is enabled in the cobuild.json config file.\n   *\n   * Note: The orchestrator (or local users) should always have to opt into running with cobuilds by\n   * providing a cobuild context id. Even if cobuilds are \"enabled\" as a feature, they don't\n   * actually turn on for that particular build unless the cobuild context id is provided as an\n   * non-empty string.\n   */\n  public readonly cobuildFeatureEnabled: boolean;\n\n  /**\n   * Cobuild context id\n   *\n   * @remarks\n   * The cobuild feature won't be enabled until the context id is provided as an non-empty string.\n   */\n  public readonly cobuildContextId: string | undefined;\n\n  /**\n   * This is a name of the participating cobuild runner. It can be specified by the environment variable\n   * RUSH_COBUILD_RUNNER_ID. If it is not provided, a random id will be generated to identify the runner.\n   */\n  public readonly cobuildRunnerId: string;\n  /**\n   * If true, Rush will automatically handle the leaf project with build cache \"disabled\" by writing\n   * to the cache in a special \"log files only mode\". This is useful when you want to use Cobuilds\n   * to improve the performance in CI validations and the leaf projects have not enabled cache.\n   */\n  public readonly cobuildLeafProjectLogOnlyAllowed: boolean;\n\n  /**\n   * If true, operations can opt into leveraging cobuilds without restoring from the build cache.\n   *  Operations will need to us the allowCobuildWithoutCache flag to opt into this behavior per phase.\n   */\n  public readonly cobuildWithoutCacheAllowed: boolean;\n\n  private _cobuildLockProvider: ICobuildLockProvider | undefined;\n  private readonly _cobuildLockProviderFactory: CobuildLockProviderFactory;\n  private readonly _cobuildJson: ICobuildJson;\n\n  private constructor(options: ICobuildConfigurationOptions) {\n    const { cobuildJson, cobuildLockProviderFactory, rushConfiguration } = options;\n\n    this.cobuildContextId = EnvironmentConfiguration.cobuildContextId;\n    this.cobuildFeatureEnabled = this.cobuildContextId ? cobuildJson.cobuildFeatureEnabled : false;\n    this.cobuildRunnerId = EnvironmentConfiguration.cobuildRunnerId || uuidv4();\n    this.cobuildLeafProjectLogOnlyAllowed =\n      EnvironmentConfiguration.cobuildLeafProjectLogOnlyAllowed ?? false;\n    this.cobuildWithoutCacheAllowed =\n      rushConfiguration.experimentsConfiguration.configuration.allowCobuildWithoutCache ?? false;\n\n    this._cobuildLockProviderFactory = cobuildLockProviderFactory;\n    this._cobuildJson = cobuildJson;\n  }\n\n  /**\n   * Attempts to load the cobuild.json data from the standard file path `common/config/rush/cobuild.json`.\n   * If the file has not been created yet, then undefined is returned.\n   */\n  public static async tryLoadAsync(\n    terminal: ITerminal,\n    rushConfiguration: RushConfiguration,\n    rushSession: RushSession\n  ): Promise<CobuildConfiguration | undefined> {\n    const jsonFilePath: string = CobuildConfiguration.getCobuildConfigFilePath(rushConfiguration);\n    try {\n      return await CobuildConfiguration._loadAsync(jsonFilePath, terminal, rushConfiguration, rushSession);\n    } catch (err) {\n      if (!FileSystem.isNotExistError(err)) {\n        throw err;\n      }\n    }\n  }\n\n  public static getCobuildConfigFilePath(rushConfiguration: RushConfiguration): string {\n    return `${rushConfiguration.commonRushConfigFolder}/${RushConstants.cobuildFilename}`;\n  }\n\n  private static async _loadAsync(\n    jsonFilePath: string,\n    terminal: ITerminal,\n    rushConfiguration: RushConfiguration,\n    rushSession: RushSession\n  ): Promise<CobuildConfiguration | undefined> {\n    let cobuildJson: ICobuildJson | undefined;\n    try {\n      cobuildJson = await JsonFile.loadAndValidateAsync(jsonFilePath, CobuildConfiguration._jsonSchema);\n    } catch (e) {\n      if (FileSystem.isNotExistError(e)) {\n        return undefined;\n      }\n      throw e;\n    }\n\n    if (!cobuildJson?.cobuildFeatureEnabled) {\n      return undefined;\n    }\n\n    const cobuildLockProviderFactory: CobuildLockProviderFactory | undefined =\n      rushSession.getCobuildLockProviderFactory(cobuildJson.cobuildLockProvider);\n    if (!cobuildLockProviderFactory) {\n      throw new Error(`Unexpected cobuild lock provider: ${cobuildJson.cobuildLockProvider}`);\n    }\n\n    return new CobuildConfiguration({\n      cobuildJson,\n      rushConfiguration,\n      rushSession,\n      cobuildLockProviderFactory\n    });\n  }\n\n  public async createLockProviderAsync(terminal: ITerminal): Promise<void> {\n    if (this.cobuildFeatureEnabled) {\n      terminal.writeLine(`Running cobuild (runner ${this.cobuildContextId}/${this.cobuildRunnerId})`);\n      const cobuildLockProvider: ICobuildLockProvider = await this._cobuildLockProviderFactory(\n        this._cobuildJson\n      );\n      this._cobuildLockProvider = cobuildLockProvider;\n      await this._cobuildLockProvider.connectAsync();\n    }\n  }\n\n  public async destroyLockProviderAsync(): Promise<void> {\n    if (this.cobuildFeatureEnabled) {\n      await this._cobuildLockProvider?.disconnectAsync();\n    }\n  }\n\n  public getCobuildLockProvider(): ICobuildLockProvider {\n    if (!this._cobuildLockProvider) {\n      throw new Error(`Cobuild lock provider has not been created`);\n    }\n    return this._cobuildLockProvider;\n  }\n}\n"]}