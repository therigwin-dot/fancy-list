"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubspacesConfiguration = exports.SPLIT_WORKSPACE_SUBSPACE_NAME_REGEXP = exports.SUBSPACE_NAME_REGEXP = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const subspaces_schema_json_1 = __importDefault(require("../schemas/subspaces.schema.json"));
const RushConstants_1 = require("../logic/RushConstants");
/**
 * The allowed naming convention for subspace names.
 * Allows for names to be formed of identifiers separated by hyphens (-)
 *
 * Example: "my-subspace"
 */
exports.SUBSPACE_NAME_REGEXP = /^[a-z][a-z0-9]*(-[a-z0-9]+)*$/;
exports.SPLIT_WORKSPACE_SUBSPACE_NAME_REGEXP = /^[a-z0-9][+_\-a-z0-9]*$/;
/**
 * This represents the subspace configurations for a repository, based on the "subspaces.json"
 * configuration file.
 * @beta
 */
class SubspacesConfiguration {
    constructor(configuration, subspaceJsonFilePath) {
        this.subspaceJsonFilePath = subspaceJsonFilePath;
        this.subspacesEnabled = configuration.subspacesEnabled;
        this.splitWorkspaceCompatibility = !!configuration.splitWorkspaceCompatibility;
        this.preventSelectingAllSubspaces = !!configuration.preventSelectingAllSubspaces;
        const subspaceNames = new Set();
        for (const subspaceName of configuration.subspaceNames) {
            SubspacesConfiguration.requireValidSubspaceName(subspaceName, this.splitWorkspaceCompatibility);
            subspaceNames.add(subspaceName);
        }
        // Add the default subspace if it wasn't explicitly declared
        subspaceNames.add(RushConstants_1.RushConstants.defaultSubspaceName);
        this.subspaceNames = subspaceNames;
    }
    /**
     * Checks whether the provided string could be used as a subspace name.
     * Returns `undefined` if the name is valid; otherwise returns an error message.
     * @remarks
     * This is a syntax check only; it does not test whether the subspace is actually defined in the Rush configuration.
     */
    static explainIfInvalidSubspaceName(subspaceName, splitWorkspaceCompatibility = false) {
        if (subspaceName.length === 0) {
            return `The subspace name cannot be empty`;
        }
        let regexToUse;
        if (splitWorkspaceCompatibility) {
            regexToUse = exports.SPLIT_WORKSPACE_SUBSPACE_NAME_REGEXP;
        }
        else {
            regexToUse = exports.SUBSPACE_NAME_REGEXP;
        }
        if (!regexToUse.test(subspaceName)) {
            if (splitWorkspaceCompatibility) {
                return (`Invalid name "${subspaceName}". ` +
                    `Subspace names must consist of lowercase letters and numbers separated by hyphens, underscores, or plus signs.`);
            }
            return (`Invalid name "${subspaceName}". ` +
                `Subspace names must consist of lowercase letters and numbers separated by hyphens.`);
        }
        return undefined; // name is okay
    }
    /**
     * Checks whether the provided string could be used as a subspace name.
     * If not, an exception is thrown.
     * @remarks
     * This is a syntax check only; it does not test whether the subspace is actually defined in the Rush configuration.
     */
    static requireValidSubspaceName(subspaceName, splitWorkspaceCompatibility = false) {
        const message = SubspacesConfiguration.explainIfInvalidSubspaceName(subspaceName, splitWorkspaceCompatibility);
        if (message) {
            throw new Error(message);
        }
    }
    static tryLoadFromConfigurationFile(subspaceJsonFilePath) {
        let configuration;
        try {
            configuration = node_core_library_1.JsonFile.loadAndValidate(subspaceJsonFilePath, SubspacesConfiguration._jsonSchema);
        }
        catch (e) {
            if (!node_core_library_1.FileSystem.isNotExistError(e)) {
                throw e;
            }
        }
        if (configuration) {
            return new SubspacesConfiguration(configuration, subspaceJsonFilePath);
        }
    }
    static tryLoadFromDefaultLocation(rushConfiguration) {
        const commonRushConfigFolder = rushConfiguration.commonRushConfigFolder;
        const subspaceJsonLocation = `${commonRushConfigFolder}/${RushConstants_1.RushConstants.subspacesConfigFilename}`;
        return SubspacesConfiguration.tryLoadFromConfigurationFile(subspaceJsonLocation);
    }
}
exports.SubspacesConfiguration = SubspacesConfiguration;
SubspacesConfiguration._jsonSchema = node_core_library_1.JsonSchema.fromLoadedObject(subspaces_schema_json_1.default);
//# sourceMappingURL=SubspacesConfiguration.js.map