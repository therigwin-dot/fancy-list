{"version":3,"file":"RushCommandLine.js","sourceRoot":"","sources":["../../src/api/RushCommandLine.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,gEAAsE;AAEtE,wEAAqE;AA0DrE,MAAM,iCAAiC,GAAsC,IAAI,GAAG,EAAE,CAAC;AAEvF;;;;GAIG;AACH,MAAa,eAAe;IACnB,MAAM,CAAC,UAAU,CAAC,cAAsB;QAC7C,IAAI,MAAM,GAAqC,iCAAiC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAErG,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,iBAAiB,GAA0B,IAAI,6CAAqB,CAAC,EAAE,GAAG,EAAE,cAAc,EAAE,CAAC,CAAC;YAEpG,wEAAwE;YACxE,MAAM,OAAO,GAA6B,EAAE,CAAC;YAC7C,KAAK,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,EAAE,IAAI,iBAAiB,CAAC,OAAO,EAAE,CAAC;gBAClF,MAAM,UAAU,GAAgC,EAAE,CAAC;gBACnD,KAAK,MAAM,EACT,IAAI,EAAE,OAAO,EACb,QAAQ,EACR,SAAS,EACT,WAAW,EACX,QAAQ,EACR,mBAAmB,EACpB,IAAI,aAAa,EAAE,CAAC;oBACnB,UAAU,CAAC,IAAI,CAAC;wBACd,IAAI,EAAE,0CAAwB,CAAC,OAAO,CAA0C;wBAChF,QAAQ;wBACR,SAAS;wBACT,WAAW;wBACX,QAAQ;wBACR,mBAAmB;qBACpB,CAAC,CAAC;gBACL,CAAC;gBAED,OAAO,CAAC,IAAI,CAAC;oBACX,UAAU;oBACV,UAAU;iBACX,CAAC,CAAC;YACL,CAAC;YAED,MAAM,GAAG,EAAE,OAAO,EAAE,CAAC;YACrB,iCAAiC,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAChE,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAzCD,0CAyCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { CommandLineParameterKind } from '@rushstack/ts-command-line';\n\nimport { RushCommandLineParser } from '../cli/RushCommandLineParser';\n\n/**\n * Information about the available parameters associated with a Rush action\n *\n * @beta\n */\nexport interface IRushCommandLineParameter {\n  /**\n   * The corresponding string representation of CliParameterKind\n   */\n  readonly kind: keyof typeof CommandLineParameterKind;\n\n  /**\n   * The long name of the flag including double dashes, e.g. \"--do-something\"\n   */\n  readonly longName: string;\n\n  /**\n   * An optional short name for the flag including the dash, e.g. \"-d\"\n   */\n  readonly shortName?: string;\n\n  /**\n   * Documentation for the parameter that will be shown when invoking the tool with \"--help\"\n   */\n  readonly description: string;\n\n  /**\n   * If true, then an error occurs if the parameter was not included on the command-line.\n   */\n  readonly required?: boolean;\n\n  /**\n   * If provided, this parameter can also be provided by an environment variable with the specified name.\n   */\n  readonly environmentVariable?: string;\n}\n\n/**\n * The full spec of an available Rush command line action\n *\n * @beta\n */\nexport interface IRushCommandLineAction {\n  actionName: string;\n  parameters: IRushCommandLineParameter[];\n}\n\n/**\n * The full spec of a Rush CLI\n *\n * @beta\n */\nexport interface IRushCommandLineSpec {\n  actions: IRushCommandLineAction[];\n}\n\nconst _commandLineSpecByWorkspaceFolder: Map<string, IRushCommandLineSpec> = new Map();\n\n/**\n * Information about the available CLI commands\n *\n * @beta\n */\nexport class RushCommandLine {\n  public static getCliSpec(rushJsonFolder: string): IRushCommandLineSpec {\n    let result: IRushCommandLineSpec | undefined = _commandLineSpecByWorkspaceFolder.get(rushJsonFolder);\n\n    if (!result) {\n      const commandLineParser: RushCommandLineParser = new RushCommandLineParser({ cwd: rushJsonFolder });\n\n      // extract the set of command line elements from the command line parser\n      const actions: IRushCommandLineAction[] = [];\n      for (const { actionName, parameters: rawParameters } of commandLineParser.actions) {\n        const parameters: IRushCommandLineParameter[] = [];\n        for (const {\n          kind: rawKind,\n          longName,\n          shortName,\n          description,\n          required,\n          environmentVariable\n        } of rawParameters) {\n          parameters.push({\n            kind: CommandLineParameterKind[rawKind] as keyof typeof CommandLineParameterKind,\n            longName,\n            shortName,\n            description,\n            required,\n            environmentVariable\n          });\n        }\n\n        actions.push({\n          actionName,\n          parameters\n        });\n      }\n\n      result = { actions };\n      _commandLineSpecByWorkspaceFolder.set(rushJsonFolder, result);\n    }\n\n    return result;\n  }\n}\n"]}