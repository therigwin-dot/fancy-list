{"version":3,"file":"ChangeFile.js","sourceRoot":"","sources":["../../src/api/ChangeFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAI7B,oEAAwD;AAIxD,sCAAmC;AAEnC;;GAEG;AACH,MAAa,UAAU;IAIrB;;OAEG;IACH,YAAmB,cAA2B,EAAE,iBAAoC;QAClF,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAC7D,CAAC;QAED,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,IAAiB;QAChC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,WAAmB;QACnC,MAAM,OAAO,GAAkB,EAAE,CAAC;QAClC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;YAChD,IAAI,IAAI,CAAC,WAAW,KAAK,WAAW,EAAE,CAAC;gBACrC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC;QACH,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACI,SAAS;QACd,MAAM,QAAQ,GAAW,IAAI,CAAC,YAAY,EAAE,CAAC;QAC7C,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,EAAE;YAC5C,kBAAkB,EAAE,IAAI;SACzB,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACI,YAAY;QACjB,IAAI,MAAM,GAAuB,SAAS,CAAC;QAC3C,MAAM,GAAG,GAAQ,IAAI,SAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAClD,MAAM,QAAQ,GAAoC,GAAG,CAAC,UAAU,EAAE,CAAC;QACnE,MAAM,GAAG,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,0EAA0E,CAAC,CAAC;QAC1F,CAAC;QAED,yDAAyD;QACzD,MAAM,QAAQ,GAAW,MAAM;YAC7B,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,MAAM,IAAI,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC;YAChE,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC;QACnC,MAAM,QAAQ,GAAW,IAAI,CAAC,IAAI,CAChC,IAAI,CAAC,kBAAkB,CAAC,aAAa,EACrC,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,EAC9C,QAAQ,CACT,CAAC;QACF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;OAGG;IACK,aAAa,CAAC,aAAsB,KAAK;QAC/C,6CAA6C;QAE7C,4CAA4C;QAC5C,MAAM,UAAU,GAAW,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;QAE/C,oDAAoD;QACpD,MAAM,cAAc,GAAW,4DAA4D,CAAC;QAE5F,8BAA8B;QAC9B,4BAA4B;QAC5B,MAAM,OAAO,GAA4B,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAE1E,IAAI,OAAO,EAAE,CAAC;YACZ,iCAAiC;YACjC,MAAM,aAAa,GAAW,OAAO,CAAC,CAAC,CAAC,CAAC;YAEzC,IAAI,aAAqB,CAAC;YAC1B,IAAI,UAAU,EAAE,CAAC;gBACf,+BAA+B;gBAC/B,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC/C,CAAC;iBAAM,CAAC;gBACN,4BAA4B;gBAC5B,MAAM,SAAS,GAAa,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAClD,aAAa,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;YACpD,CAAC;YAED,OAAO,GAAG,aAAa,IAAI,aAAa,EAAE,CAAC;QAC7C,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,eAAe,CAAC,QAAgB,EAAE,WAAmB,GAAG;QAC9D,yFAAyF;QACzF,MAAM,aAAa,GAAW,kBAAkB,CAAC;QACjD,OAAO,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;CACF;AA3HD,gCA2HC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\n\nimport type gitInfo from 'git-repo-info';\n\nimport { JsonFile } from '@rushstack/node-core-library';\n\nimport type { RushConfiguration } from './RushConfiguration';\nimport type { IChangeFile, IChangeInfo } from './ChangeManagement';\nimport { Git } from '../logic/Git';\n\n/**\n * This class represents a single change file.\n */\nexport class ChangeFile {\n  private _changeFileData: IChangeFile;\n  private _rushConfiguration: RushConfiguration;\n\n  /**\n   * @internal\n   */\n  public constructor(changeFileData: IChangeFile, rushConfiguration: RushConfiguration) {\n    if (!changeFileData) {\n      throw new Error(`changeFileData does not have a value`);\n    }\n\n    if (!rushConfiguration) {\n      throw new Error(`rushConfiguration does not have a value`);\n    }\n\n    this._changeFileData = changeFileData;\n    this._rushConfiguration = rushConfiguration;\n  }\n\n  /**\n   * Adds a change entry into the change file\n   * @param data - change information\n   */\n  public addChange(data: IChangeInfo): void {\n    this._changeFileData.changes.push(data);\n  }\n\n  /**\n   * Gets all the change entries about the specified package from the change file.\n   * @param packageName - package name\n   */\n  public getChanges(packageName: string): IChangeInfo[] {\n    const changes: IChangeInfo[] = [];\n    for (const info of this._changeFileData.changes) {\n      if (info.packageName === packageName) {\n        changes.push(info);\n      }\n    }\n    return changes;\n  }\n\n  /**\n   * Writes the change file to disk in sync mode.\n   * Returns the file path.\n   * @returns the path to the file that was written (based on generatePath())\n   */\n  public writeSync(): string {\n    const filePath: string = this.generatePath();\n    JsonFile.save(this._changeFileData, filePath, {\n      ensureFolderExists: true\n    });\n    return filePath;\n  }\n\n  /**\n   * Generates a file path for storing the change file to disk.\n   * Note that this value may change if called twice in a row,\n   * as it is partially based on the current date/time.\n   */\n  public generatePath(): string {\n    let branch: string | undefined = undefined;\n    const git: Git = new Git(this._rushConfiguration);\n    const repoInfo: gitInfo.GitRepoInfo | undefined = git.getGitInfo();\n    branch = repoInfo && repoInfo.branch;\n    if (!branch) {\n      // eslint-disable-next-line no-console\n      console.log('Could not automatically detect git branch name, using timestamp instead.');\n    }\n\n    // example filename: yourbranchname_2017-05-01-20-20.json\n    const filename: string = branch\n      ? this._escapeFilename(`${branch}_${this._getTimestamp()}.json`)\n      : `${this._getTimestamp()}.json`;\n    const filePath: string = path.join(\n      this._rushConfiguration.changesFolder,\n      ...this._changeFileData.packageName.split('/'),\n      filename\n    );\n    return filePath;\n  }\n\n  /**\n   * Gets the current time, formatted as YYYY-MM-DD-HH-MM\n   * Optionally will include seconds\n   */\n  private _getTimestamp(useSeconds: boolean = false): string | undefined {\n    // Create a date string with the current time\n\n    // dateString === \"2016-10-19T22:47:49.606Z\"\n    const dateString: string = new Date().toJSON();\n\n    // Parse out 2 capture groups, the date and the time\n    const dateParseRegex: RegExp = /([0-9]{4}-[0-9]{2}-[0-9]{2}).*([0-9]{2}:[0-9]{2}:[0-9]{2})/;\n\n    // matches[1] === \"2016-10-19\"\n    // matches[2] === \"22:47:49\"\n    const matches: RegExpMatchArray | null = dateString.match(dateParseRegex);\n\n    if (matches) {\n      // formattedDate === \"2016-10-19\"\n      const formattedDate: string = matches[1];\n\n      let formattedTime: string;\n      if (useSeconds) {\n        // formattedTime === \"22-47-49\"\n        formattedTime = matches[2].replace(':', '-');\n      } else {\n        // formattedTime === \"22-47\"\n        const timeParts: string[] = matches[2].split(':');\n        formattedTime = `${timeParts[0]}-${timeParts[1]}`;\n      }\n\n      return `${formattedDate}-${formattedTime}`;\n    }\n    return undefined;\n  }\n\n  private _escapeFilename(filename: string, replacer: string = '-'): string {\n    // Removes / ? < > \\ : * | \", really anything that isn't a letter, number, '.' '_' or '-'\n    const badCharacters: RegExp = /[^a-zA-Z0-9._-]/g;\n    return filename.replace(badCharacters, replacer);\n  }\n}\n"]}