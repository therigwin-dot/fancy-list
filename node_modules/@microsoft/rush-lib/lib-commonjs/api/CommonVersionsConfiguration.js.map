{"version":3,"file":"CommonVersionsConfiguration.js","sourceRoot":"","sources":["../../src/api/CommonVersionsConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport crypto from 'crypto';\nimport * as path from 'path';\nimport {\n  JsonFile,\n  JsonSchema,\n  MapExtensions,\n  ProtectableMap,\n  FileSystem,\n  Sort\n} from '@rushstack/node-core-library';\n\nimport { PackageNameParsers } from './PackageNameParsers';\nimport { JsonSchemaUrls } from '../logic/JsonSchemaUrls';\nimport type { RushConfiguration } from './RushConfiguration';\nimport { RushConstants } from '../logic/RushConstants';\nimport schemaJson from '../schemas/common-versions.schema.json';\n\n/**\n * Part of the ICommonVersionsJson structure.\n */\nexport declare interface ICommonVersionsJsonVersionMap {\n  /**\n   * The key is the name of a dependency.  The value is a Semantic Versioning (SemVer)\n   * range specifier.\n   */\n  [dependencyName: string]: string;\n}\n\n/**\n * Part of the ICommonVersionsJson structure.\n */\nexport declare interface ICommonVersionsJsonVersionsMap {\n  /**\n   * The key is the name of a dependency.  The value is a list of Semantic Versioning (SemVer)\n   * range specifiers.\n   */\n  [dependencyName: string]: string[];\n}\n\n/**\n * Describes the file structure for the \"common/config/rush/common-versions.json\" config file.\n */\ninterface ICommonVersionsJson {\n  $schema?: string;\n\n  preferredVersions?: ICommonVersionsJsonVersionMap;\n\n  implicitlyPreferredVersions?: boolean;\n\n  allowedAlternativeVersions?: ICommonVersionsJsonVersionsMap;\n\n  ensureConsistentVersions?: boolean;\n}\n\n/**\n * Use this class to load and save the \"common/config/rush/common-versions.json\" config file.\n * This config file stores dependency version information that affects all projects in the repo.\n * @public\n */\nexport class CommonVersionsConfiguration {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  private _preferredVersions: ProtectableMap<string, string>;\n  private _allowedAlternativeVersions: ProtectableMap<string, string[]>;\n  private _modified: boolean = false;\n\n  /**\n   * Get the absolute file path of the common-versions.json file.\n   */\n  public readonly filePath: string;\n\n  /**\n   * When set to true, for all projects in the repo, all dependencies will be automatically added as preferredVersions,\n   * except in cases where different projects specify different version ranges for a given dependency.  For older\n   * package managers, this tended to reduce duplication of indirect dependencies.  However, it can sometimes cause\n   * trouble for indirect dependencies with incompatible peerDependencies ranges.\n   *\n   * If the value is `undefined`, then the default value is `true`.\n   */\n  public readonly implicitlyPreferredVersions: boolean | undefined;\n\n  /**\n   * If true, then consistent version specifiers for dependencies will be enforced.\n   * I.e. \"rush check\" is run before some commands.\n   */\n  public readonly ensureConsistentVersions: boolean;\n\n  /**\n   * A table that specifies a \"preferred version\" for a given NPM package.  This feature is typically used\n   * to hold back an indirect dependency to a specific older version, or to reduce duplication of indirect dependencies.\n   *\n   * @remarks\n   * The \"preferredVersions\" value can be any SemVer range specifier (e.g. `~1.2.3`).  Rush injects these values into\n   * the \"dependencies\" field of the top-level common/temp/package.json, which influences how the package manager\n   * will calculate versions.  The specific effect depends on your package manager.  Generally it will have no\n   * effect on an incompatible or already constrained SemVer range.  If you are using PNPM, similar effects can be\n   * achieved using the pnpmfile.js hook.  See the Rush documentation for more details.\n   *\n   * After modifying this field, it's recommended to run `rush update --full` so that the package manager\n   * will recalculate all version selections.\n   */\n  public readonly preferredVersions: Map<string, string>;\n\n  /**\n   * A table that stores, for a given dependency, a list of SemVer ranges that will be accepted\n   * by \"rush check\" in addition to the normal version range.\n   *\n   * @remarks\n   * The \"rush check\" command can be used to enforce that every project in the repo\n   * must specify the same SemVer range for a given dependency.  However, sometimes\n   * exceptions are needed.  The allowedAlternativeVersions table allows you to list\n   * other SemVer ranges that will be accepted by \"rush check\" for a given dependency.\n   * Note that the normal version range (as inferred by looking at all projects in the repo)\n   * should NOT be included in this list.\n   */\n  public readonly allowedAlternativeVersions: Map<string, ReadonlyArray<string>>;\n\n  private constructor(\n    commonVersionsJson: ICommonVersionsJson | undefined,\n    filePath: string,\n    rushConfiguration: RushConfiguration | undefined\n  ) {\n    this._preferredVersions = new ProtectableMap<string, string>({\n      onSet: this._onSetPreferredVersions.bind(this)\n    });\n    this.preferredVersions = this._preferredVersions.protectedView;\n\n    if (commonVersionsJson && commonVersionsJson.implicitlyPreferredVersions !== undefined) {\n      this.implicitlyPreferredVersions = commonVersionsJson.implicitlyPreferredVersions;\n    } else {\n      this.implicitlyPreferredVersions = undefined;\n    }\n\n    this._allowedAlternativeVersions = new ProtectableMap<string, string[]>({\n      onSet: this._onSetAllowedAlternativeVersions.bind(this)\n    });\n    this.allowedAlternativeVersions = this._allowedAlternativeVersions.protectedView;\n\n    const subspacesFeatureEnabled: boolean | undefined = rushConfiguration?.subspacesFeatureEnabled;\n    const rushJsonEnsureConsistentVersions: boolean | undefined =\n      rushConfiguration?._ensureConsistentVersionsJsonValue;\n    const commonVersionsEnsureConsistentVersions: boolean | undefined =\n      commonVersionsJson?.ensureConsistentVersions;\n    if (subspacesFeatureEnabled && rushJsonEnsureConsistentVersions !== undefined) {\n      throw new Error(\n        `When using subspaces, the ensureConsistentVersions config is now defined in the ${RushConstants.commonVersionsFilename} file, ` +\n          `you must remove the old setting \"ensureConsistentVersions\" from ${RushConstants.rushJsonFilename}`\n      );\n    } else if (\n      !subspacesFeatureEnabled &&\n      rushJsonEnsureConsistentVersions !== undefined &&\n      commonVersionsEnsureConsistentVersions !== undefined\n    ) {\n      throw new Error(\n        `When the ensureConsistentVersions config is defined in the ${RushConstants.rushJsonFilename} file, ` +\n          `it cannot also be defined in the ${RushConstants.commonVersionsFilename} file`\n      );\n    }\n\n    this.ensureConsistentVersions =\n      commonVersionsEnsureConsistentVersions ?? rushJsonEnsureConsistentVersions ?? false;\n\n    if (commonVersionsJson) {\n      try {\n        CommonVersionsConfiguration._deserializeTable(\n          this.preferredVersions,\n          commonVersionsJson.preferredVersions\n        );\n        CommonVersionsConfiguration._deserializeTable(\n          this.allowedAlternativeVersions,\n          commonVersionsJson.allowedAlternativeVersions\n        );\n      } catch (e) {\n        throw new Error(`Error loading \"${path.basename(filePath)}\": ${(e as Error).message}`);\n      }\n    }\n    this.filePath = filePath;\n  }\n\n  /**\n   * Loads the common-versions.json data from the specified file path.\n   * If the file has not been created yet, then an empty object is returned.\n   */\n  public static loadFromFile(\n    jsonFilePath: string,\n    rushConfiguration?: RushConfiguration\n  ): CommonVersionsConfiguration {\n    let commonVersionsJson: ICommonVersionsJson | undefined = undefined;\n\n    if (FileSystem.exists(jsonFilePath)) {\n      commonVersionsJson = JsonFile.loadAndValidate(jsonFilePath, CommonVersionsConfiguration._jsonSchema);\n    }\n\n    return new CommonVersionsConfiguration(commonVersionsJson, jsonFilePath, rushConfiguration);\n  }\n\n  private static _deserializeTable<TValue>(\n    map: Map<string, TValue>,\n    object: { [key: string]: TValue } | undefined\n  ): void {\n    if (object) {\n      for (const [key, value] of Object.entries(object)) {\n        map.set(key, value);\n      }\n    }\n  }\n\n  private static _serializeTable<TValue>(map: Map<string, TValue>): { [key: string]: TValue } {\n    const table: { [key: string]: TValue } = {};\n\n    const keys: string[] = [...map.keys()];\n    keys.sort();\n    for (const key of keys) {\n      table[key] = map.get(key)!;\n    }\n\n    return table;\n  }\n\n  /**\n   * Get a sha1 hash of the preferred versions.\n   */\n  public getPreferredVersionsHash(): string {\n    // Sort so that the hash is stable\n    const orderedPreferredVersions: Map<string, string> = new Map<string, string>(\n      this._preferredVersions.protectedView\n    );\n    Sort.sortMapKeys(orderedPreferredVersions);\n\n    // JSON.stringify does not support maps, so we need to convert to an object first\n    const preferredVersionsObj: { [dependency: string]: string } =\n      MapExtensions.toObject(orderedPreferredVersions);\n    return crypto.createHash('sha1').update(JSON.stringify(preferredVersionsObj)).digest('hex');\n  }\n\n  /**\n   * Writes the \"common-versions.json\" file to disk, using the filename that was passed to loadFromFile().\n   */\n  public save(): boolean {\n    if (this._modified) {\n      JsonFile.save(this._serialize(), this.filePath, { updateExistingFile: true });\n      this._modified = false;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns preferredVersions.\n   */\n  public getAllPreferredVersions(): Map<string, string> {\n    const allPreferredVersions: Map<string, string> = new Map<string, string>();\n    MapExtensions.mergeFromMap(allPreferredVersions, this.preferredVersions);\n    return allPreferredVersions;\n  }\n\n  private _onSetPreferredVersions(\n    source: ProtectableMap<string, string>,\n    key: string,\n    value: string\n  ): string {\n    PackageNameParsers.permissive.validate(key);\n\n    this._modified = true;\n\n    return value;\n  }\n\n  private _onSetAllowedAlternativeVersions(\n    source: ProtectableMap<string, string[]>,\n    key: string,\n    value: string[]\n  ): string[] {\n    PackageNameParsers.permissive.validate(key);\n\n    this._modified = true;\n\n    return value;\n  }\n\n  private _serialize(): ICommonVersionsJson {\n    const result: ICommonVersionsJson = {\n      $schema: JsonSchemaUrls.commonVersions\n    };\n\n    if (this._preferredVersions.size) {\n      result.preferredVersions = CommonVersionsConfiguration._serializeTable(this.preferredVersions);\n    }\n\n    if (this._allowedAlternativeVersions.size) {\n      result.allowedAlternativeVersions = CommonVersionsConfiguration._serializeTable(\n        this.allowedAlternativeVersions\n      ) as ICommonVersionsJsonVersionsMap;\n    }\n\n    return result;\n  }\n}\n"]}