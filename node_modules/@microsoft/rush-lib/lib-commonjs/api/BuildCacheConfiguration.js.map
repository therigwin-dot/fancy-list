{"version":3,"file":"BuildCacheConfiguration.js","sourceRoot":"","sources":["../../src/api/BuildCacheConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport {\n  JsonFile,\n  JsonSchema,\n  FileSystem,\n  type JsonObject,\n  AlreadyReportedError\n} from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from './RushConfiguration';\nimport { FileSystemBuildCacheProvider } from '../logic/buildCache/FileSystemBuildCacheProvider';\nimport { RushConstants } from '../logic/RushConstants';\nimport type { ICloudBuildCacheProvider } from '../logic/buildCache/ICloudBuildCacheProvider';\nimport { RushUserConfiguration } from './RushUserConfiguration';\nimport { EnvironmentConfiguration } from './EnvironmentConfiguration';\nimport { CacheEntryId, type GetCacheEntryIdFunction } from '../logic/buildCache/CacheEntryId';\nimport type { CloudBuildCacheProviderFactory, RushSession } from '../pluginFramework/RushSession';\nimport schemaJson from '../schemas/build-cache.schema.json';\n\n/**\n * Describes the file structure for the \"common/config/rush/build-cache.json\" config file.\n */\nexport interface IBaseBuildCacheJson {\n  buildCacheEnabled: boolean;\n  cacheProvider: string;\n  /**\n   * Used to specify the cache entry ID format. If this property is set, it must\n   * contain a `[hash]` token. It may also contain one of the following tokens:\n   * - `[projectName]`\n   * - `[projectName:normalize]`\n   * - `[phaseName]`\n   * - `[phaseName:normalize]`\n   * - `[phaseName:trimPrefix]`\n   * - `[os]`\n   * - `[arch]`\n   * @privateRemarks\n   * NOTE: If you update this comment, make sure to update build-cache.json in the \"rush init\" template.\n   * The token parser is in CacheEntryId.ts\n   */\n  cacheEntryNamePattern?: string;\n  /**\n   * An optional salt to inject during calculation of the cache key. This can be used to invalidate the cache for all projects when the salt changes.\n   */\n  cacheHashSalt?: string;\n}\n\n/**\n * @public\n */\nexport interface ILocalBuildCacheJson extends IBaseBuildCacheJson {\n  readonly cacheProvider: 'local-only';\n}\n\n/**\n * @beta\n */\nexport interface ICloudBuildCacheJson extends IBaseBuildCacheJson {\n  readonly cacheProvider: string;\n  [otherConfigKey: string]: JsonObject;\n}\n\n/**\n * @beta\n */\nexport type IBuildCacheJson = ICloudBuildCacheJson | ILocalBuildCacheJson;\n\ninterface IBuildCacheConfigurationOptions {\n  buildCacheJson: IBuildCacheJson;\n  getCacheEntryId: GetCacheEntryIdFunction;\n  rushConfiguration: RushConfiguration;\n  rushUserConfiguration: RushUserConfiguration;\n  rushSession: RushSession;\n  cloudCacheProvider: ICloudBuildCacheProvider | undefined;\n}\n\n/**\n * Use this class to load and save the \"common/config/rush/build-cache.json\" config file.\n * This file provides configuration options for cached project build output.\n * @beta\n */\nexport class BuildCacheConfiguration {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  /**\n   * Indicates whether the build cache feature is enabled.\n   * Typically it is enabled in the build-cache.json config file.\n   */\n  public readonly buildCacheEnabled: boolean;\n  /**\n   * Indicates whether or not writing to the cache is enabled.\n   */\n  public cacheWriteEnabled: boolean;\n  /**\n   * Method to calculate the cache entry id for a project, phase, and project state.\n   */\n  public readonly getCacheEntryId: GetCacheEntryIdFunction;\n  /**\n   * The provider for interacting with the local build cache.\n   */\n  public readonly localCacheProvider: FileSystemBuildCacheProvider;\n  /**\n   * The provider for interacting with the cloud build cache, if configured.\n   */\n  public readonly cloudCacheProvider: ICloudBuildCacheProvider | undefined;\n  /**\n   * An optional salt to inject during calculation of the cache key. This can be used to invalidate the cache for all projects when the salt changes.\n   */\n  public readonly cacheHashSalt: string | undefined;\n\n  private constructor({\n    getCacheEntryId,\n    buildCacheJson,\n    rushUserConfiguration,\n    rushConfiguration,\n    cloudCacheProvider\n  }: IBuildCacheConfigurationOptions) {\n    this.buildCacheEnabled = EnvironmentConfiguration.buildCacheEnabled ?? buildCacheJson.buildCacheEnabled;\n    this.cacheWriteEnabled =\n      !!this.buildCacheEnabled && EnvironmentConfiguration.buildCacheWriteAllowed !== false;\n\n    this.getCacheEntryId = getCacheEntryId;\n    this.localCacheProvider = new FileSystemBuildCacheProvider({\n      rushUserConfiguration: rushUserConfiguration,\n      rushConfiguration: rushConfiguration\n    });\n    this.cloudCacheProvider = cloudCacheProvider;\n    this.cacheHashSalt = buildCacheJson.cacheHashSalt;\n  }\n\n  /**\n   * Attempts to load the build-cache.json data from the standard file path `common/config/rush/build-cache.json`.\n   * If the file has not been created yet, then undefined is returned.\n   */\n  public static async tryLoadAsync(\n    terminal: ITerminal,\n    rushConfiguration: RushConfiguration,\n    rushSession: RushSession\n  ): Promise<BuildCacheConfiguration | undefined> {\n    const jsonFilePath: string = BuildCacheConfiguration.getBuildCacheConfigFilePath(rushConfiguration);\n    if (!FileSystem.exists(jsonFilePath)) {\n      return undefined;\n    }\n    return await BuildCacheConfiguration._loadAsync(jsonFilePath, terminal, rushConfiguration, rushSession);\n  }\n\n  /**\n   * Loads the build-cache.json data from the standard file path `common/config/rush/build-cache.json`.\n   * If the file has not been created yet, or if the feature is not enabled, then an error is reported.\n   */\n  public static async loadAndRequireEnabledAsync(\n    terminal: ITerminal,\n    rushConfiguration: RushConfiguration,\n    rushSession: RushSession\n  ): Promise<BuildCacheConfiguration> {\n    const jsonFilePath: string = BuildCacheConfiguration.getBuildCacheConfigFilePath(rushConfiguration);\n    if (!FileSystem.exists(jsonFilePath)) {\n      terminal.writeErrorLine(\n        `The build cache feature is not enabled. This config file is missing:\\n` + jsonFilePath\n      );\n      terminal.writeLine(`\\nThe Rush website documentation has instructions for enabling the build cache.`);\n      throw new AlreadyReportedError();\n    }\n\n    const buildCacheConfiguration: BuildCacheConfiguration = await BuildCacheConfiguration._loadAsync(\n      jsonFilePath,\n      terminal,\n      rushConfiguration,\n      rushSession\n    );\n\n    if (!buildCacheConfiguration.buildCacheEnabled) {\n      terminal.writeErrorLine(\n        `The build cache feature is not enabled. You can enable it by editing this config file:\\n` +\n          jsonFilePath\n      );\n      throw new AlreadyReportedError();\n    }\n    return buildCacheConfiguration;\n  }\n\n  /**\n   * Gets the absolute path to the build-cache.json file in the specified rush workspace.\n   */\n  public static getBuildCacheConfigFilePath(rushConfiguration: RushConfiguration): string {\n    return path.resolve(rushConfiguration.commonRushConfigFolder, RushConstants.buildCacheFilename);\n  }\n\n  private static async _loadAsync(\n    jsonFilePath: string,\n    terminal: ITerminal,\n    rushConfiguration: RushConfiguration,\n    rushSession: RushSession\n  ): Promise<BuildCacheConfiguration> {\n    const buildCacheJson: IBuildCacheJson = await JsonFile.loadAndValidateAsync(\n      jsonFilePath,\n      BuildCacheConfiguration._jsonSchema\n    );\n    const rushUserConfiguration: RushUserConfiguration = await RushUserConfiguration.initializeAsync();\n\n    let getCacheEntryId: GetCacheEntryIdFunction;\n    try {\n      getCacheEntryId = CacheEntryId.parsePattern(buildCacheJson.cacheEntryNamePattern);\n    } catch (e) {\n      terminal.writeErrorLine(\n        `Error parsing cache entry name pattern \"${buildCacheJson.cacheEntryNamePattern}\": ${e}`\n      );\n      throw new AlreadyReportedError();\n    }\n\n    let cloudCacheProvider: ICloudBuildCacheProvider | undefined;\n    // Don't configure a cloud cache provider if local-only\n    if (buildCacheJson.cacheProvider !== 'local-only') {\n      const cloudCacheProviderFactory: CloudBuildCacheProviderFactory | undefined =\n        rushSession.getCloudBuildCacheProviderFactory(buildCacheJson.cacheProvider);\n      if (!cloudCacheProviderFactory) {\n        throw new Error(`Unexpected cache provider: ${buildCacheJson.cacheProvider}`);\n      }\n      cloudCacheProvider = await cloudCacheProviderFactory(buildCacheJson as ICloudBuildCacheJson);\n    }\n\n    return new BuildCacheConfiguration({\n      buildCacheJson,\n      getCacheEntryId,\n      rushConfiguration,\n      rushUserConfiguration,\n      rushSession,\n      cloudCacheProvider\n    });\n  }\n}\n"]}