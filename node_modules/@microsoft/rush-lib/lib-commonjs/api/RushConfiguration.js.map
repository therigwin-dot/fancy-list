{"version":3,"file":"RushConfiguration.js","sourceRoot":"","sources":["../../src/api/RushConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/* eslint max-lines: off */\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport {\n  JsonFile,\n  JsonSchema,\n  Path,\n  FileSystem,\n  type PackageNameParser,\n  type FileSystemStats,\n  InternalError,\n  type JsonNull\n} from '@rushstack/node-core-library';\nimport { LookupByPath } from '@rushstack/lookup-by-path';\nimport { trueCasePathSync } from 'true-case-path';\n\nimport { Rush } from './Rush';\nimport { RushConfigurationProject, type IRushConfigurationProjectJson } from './RushConfigurationProject';\nimport { RushConstants } from '../logic/RushConstants';\nimport { ApprovedPackagesPolicy } from './ApprovedPackagesPolicy';\nimport { EventHooks } from './EventHooks';\nimport { VersionPolicyConfiguration } from './VersionPolicyConfiguration';\nimport { EnvironmentConfiguration } from './EnvironmentConfiguration';\nimport type { CommonVersionsConfiguration } from './CommonVersionsConfiguration';\nimport { Utilities } from '../utilities/Utilities';\nimport type { PackageManagerName, PackageManager } from './packageManager/PackageManager';\nimport { NpmPackageManager } from './packageManager/NpmPackageManager';\nimport { YarnPackageManager } from './packageManager/YarnPackageManager';\nimport { PnpmPackageManager } from './packageManager/PnpmPackageManager';\nimport { ExperimentsConfiguration } from './ExperimentsConfiguration';\nimport { PackageNameParsers } from './PackageNameParsers';\nimport type { RepoStateFile } from '../logic/RepoStateFile';\nimport { RushPluginsConfiguration } from './RushPluginsConfiguration';\nimport { type IPnpmOptionsJson, PnpmOptionsConfiguration } from '../logic/pnpm/PnpmOptionsConfiguration';\nimport { type INpmOptionsJson, NpmOptionsConfiguration } from '../logic/npm/NpmOptionsConfiguration';\nimport { type IYarnOptionsJson, YarnOptionsConfiguration } from '../logic/yarn/YarnOptionsConfiguration';\nimport schemaJson from '../schemas/rush.schema.json';\n\nimport type * as DependencyAnalyzerModuleType from '../logic/DependencyAnalyzer';\nimport type { PackageManagerOptionsConfigurationBase } from '../logic/base/BasePackageManagerOptionsConfiguration';\nimport { CustomTipsConfiguration } from './CustomTipsConfiguration';\nimport { SubspacesConfiguration } from './SubspacesConfiguration';\nimport { Subspace } from './Subspace';\n\nconst MINIMUM_SUPPORTED_RUSH_JSON_VERSION: string = '0.0.0';\nconst DEFAULT_BRANCH: string = 'main';\nconst DEFAULT_REMOTE: string = 'origin';\n\n/**\n * A list of known config filenames that are expected to appear in the \"./common/config/rush\" folder.\n * To avoid confusion/mistakes, any extra files will be reported as an error.\n */\nconst knownRushConfigFilenames: string[] = [\n  '.npmrc-publish',\n  '.npmrc',\n  'deploy.json',\n  RushConstants.artifactoryFilename,\n  RushConstants.browserApprovedPackagesFilename,\n  RushConstants.buildCacheFilename,\n  RushConstants.cobuildFilename,\n  RushConstants.commandLineFilename,\n  RushConstants.commonVersionsFilename,\n  RushConstants.customTipsFilename,\n  RushConstants.experimentsFilename,\n  RushConstants.nonbrowserApprovedPackagesFilename,\n  RushConstants.pinnedVersionsFilename,\n  RushConstants.repoStateFilename,\n  RushConstants.versionPoliciesFilename,\n  RushConstants.rushPluginsConfigFilename,\n  RushConstants.pnpmConfigFilename,\n  RushConstants.subspacesConfigFilename,\n  RushConstants.rushAlertsConfigFilename\n];\n\n/**\n * Part of IRushConfigurationJson.\n */\nexport interface IApprovedPackagesPolicyJson {\n  reviewCategories?: string[];\n  ignoredNpmScopes?: string[];\n}\n\n/**\n * Part of IRushConfigurationJson.\n */\nexport interface IRushGitPolicyJson {\n  allowedEmailRegExps?: string[];\n  sampleEmail?: string;\n  versionBumpCommitMessage?: string;\n  changeLogUpdateCommitMessage?: string;\n  changefilesCommitMessage?: string;\n  tagSeparator?: string;\n}\n\n/**\n * Part of IRushConfigurationJson.\n * @beta\n */\nexport interface IEventHooksJson {\n  /**\n   * The list of scripts to run after every Rush build command finishes\n   */\n  postRushBuild?: string[];\n}\n\n/**\n * Part of IRushConfigurationJson.\n */\nexport interface IRushRepositoryJsonBase {\n  /**\n   * The default branch name. This tells \"rush change\" which remote branch to compare against.\n   */\n  defaultBranch?: string;\n\n  /**\n   * The default remote. This tells \"rush change\" which remote to compare against if the remote URL is not set\n   * or if a remote matching the provided remote URL is not found.\n   */\n  defaultRemote?: string;\n}\n\nexport interface IRushRepositoryJsonSingleUrl extends IRushRepositoryJsonBase {\n  /**\n   * The remote url of the repository. If a value is provided,\n   * \\\"rush change\\\" will use it to find the right remote to compare against.\n   *\n   * @deprecated Use \"urls\" instead.\n   */\n  url?: string;\n}\n\nexport interface IRushRepositoryJsonMultipleUrls extends IRushRepositoryJsonBase {\n  /**\n   * Remote url(s) of the repository. If a value is provided, \\\"rush change\\\" will\n   * use one of these to find the right remote to compare against. Specifying multiple URLs\n   * is useful if a GitHub repository is renamed or for `<projectName>.visualstudio.com` versus\n   * `dev.azure.com/<projectName>` URLs.\n   */\n  urls?: string[];\n}\n\nexport type IRushRepositoryJson = IRushRepositoryJsonSingleUrl | IRushRepositoryJsonMultipleUrls;\n\n/**\n * Options defining an allowed variant as part of IRushConfigurationJson.\n */\nexport interface IRushVariantOptionsJson {\n  variantName: string;\n  description: string;\n}\n\n/**\n * This represents the JSON data structure for the \"rush.json\" configuration file.\n * See rush.schema.json for documentation.\n */\nexport interface IRushConfigurationJson {\n  $schema: string;\n  npmVersion?: string;\n  pnpmVersion?: string;\n  yarnVersion?: string;\n  rushVersion: string;\n  repository?: IRushRepositoryJson;\n  nodeSupportedVersionRange?: string;\n  nodeSupportedVersionInstructions?: string;\n  suppressNodeLtsWarning?: boolean;\n  suppressRushIsPublicVersionCheck?: boolean;\n  projectFolderMinDepth?: number;\n  projectFolderMaxDepth?: number;\n  allowMostlyStandardPackageNames?: boolean;\n  approvedPackagesPolicy?: IApprovedPackagesPolicyJson;\n  gitPolicy?: IRushGitPolicyJson;\n  telemetryEnabled?: boolean;\n  allowedProjectTags?: string[];\n  projects: IRushConfigurationProjectJson[];\n  eventHooks?: IEventHooksJson;\n  hotfixChangeEnabled?: boolean;\n  npmOptions?: INpmOptionsJson;\n  pnpmOptions?: IPnpmOptionsJson;\n  yarnOptions?: IYarnOptionsJson;\n  ensureConsistentVersions?: boolean;\n  variants?: IRushVariantOptionsJson[];\n}\n\n/**\n * This represents the JSON data structure for the \"current-variant.json\" data file.\n */\nexport interface ICurrentVariantJson {\n  variant: string | JsonNull;\n}\n\n/**\n * The filter parameters to search from all projects\n */\nexport interface IRushConfigurationProjectsFilter {\n  /**\n   * A string representation of the subspace to filter for\n   */\n  subspace: string;\n}\n\n/**\n * Options for `RushConfiguration.tryFindRushJsonLocation`.\n * @public\n */\nexport interface ITryFindRushJsonLocationOptions {\n  /**\n   * Whether to show verbose console messages.  Defaults to false.\n   */\n  showVerbose?: boolean; // Defaults to false (inverse of old `verbose` parameter)\n\n  /**\n   * The folder path where the search will start.  Defaults to the current working directory.\n   */\n  startingFolder?: string; // Defaults to cwd\n}\n\n/**\n * This represents the Rush configuration for a repository, based on the \"rush.json\"\n * configuration file.\n * @public\n */\nexport class RushConfiguration {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  private readonly _pathTrees: Map<string, LookupByPath<RushConfigurationProject>>;\n\n  /**\n   * @internal\n   */\n  public _currentVariantJsonLoadingPromise: Promise<ICurrentVariantJson | undefined> | undefined;\n\n  // Lazily loaded when the projects() getter is called.\n  private _projects: RushConfigurationProject[] | undefined;\n\n  // Lazily loaded when the projectsByName() getter is called.\n  private _projectsByName: Map<string, RushConfigurationProject> | undefined;\n\n  // Lazily loaded when the projectsByTag() getter is called.\n  private _projectsByTag: ReadonlyMap<string, ReadonlySet<RushConfigurationProject>> | undefined;\n\n  // subspaceName -> subspace\n  private readonly _subspacesByName: Map<string, Subspace>;\n  private readonly _subspaces: Subspace[] = [];\n\n  /**\n   * The name of the package manager being used to install dependencies\n   */\n  public readonly packageManager!: PackageManagerName;\n\n  /**\n   * If true, the repository is using PNPM as its package manager.\n   */\n  public readonly isPnpm!: boolean;\n\n  /**\n   * {@inheritdoc PackageManager}\n   *\n   * @privateremarks\n   * In the next major breaking API change, we will rename this property to \"packageManager\" and eliminate the\n   * old property with that name.\n   *\n   * @beta\n   */\n  public readonly packageManagerWrapper: PackageManager;\n\n  /**\n   * Gets the JSON data structure for the \"rush.json\" configuration file.\n   *\n   * @internal\n   */\n  public readonly rushConfigurationJson: IRushConfigurationJson;\n\n  /**\n   * The absolute path to the \"rush.json\" configuration file that was loaded to construct this object.\n   */\n  public readonly rushJsonFile: string;\n\n  /**\n   * The absolute path of the folder that contains rush.json for this project.\n   */\n  public readonly rushJsonFolder: string;\n\n  /**\n   * The folder that contains all change files.\n   */\n  public readonly changesFolder: string;\n\n  /**\n   * The fully resolved path for the \"common\" folder where Rush will store settings that\n   * affect all Rush projects.  This is always a subfolder of the folder containing \"rush.json\".\n   * Example: `C:\\MyRepo\\common`\n   */\n  public readonly commonFolder: string;\n\n  /**\n   * The folder where Rush's additional config files are stored.  This folder is always a\n   * subfolder called `config\\rush` inside the common folder.  (The `common\\config` folder\n   * is reserved for configuration files used by other tools.)  To avoid confusion or mistakes,\n   * Rush will report an error if this this folder contains any unrecognized files.\n   *\n   * Example: `C:\\MyRepo\\common\\config\\rush`\n   */\n  public readonly commonRushConfigFolder: string;\n\n  /**\n   * The folder where temporary files will be stored.  This is always a subfolder called \"temp\"\n   * under the common folder.\n   * Example: `C:\\MyRepo\\common\\temp`\n   */\n  public readonly commonTempFolder: string;\n\n  /**\n   * The folder where automation scripts are stored.  This is always a subfolder called \"scripts\"\n   * under the common folder.\n   * Example: `C:\\MyRepo\\common\\scripts`\n   */\n  public readonly commonScriptsFolder: string;\n\n  /**\n   * The local folder that will store the NPM package cache.  Rush does not rely on the\n   * npm's default global cache folder, because npm's caching implementation does not\n   * reliably handle multiple processes.  (For example, if a build box is running\n   * \"rush install\" simultaneously for two different working folders, it may fail randomly.)\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\npm-cache`\n   */\n  public readonly npmCacheFolder: string;\n\n  /**\n   * The local folder where npm's temporary files will be written during installation.\n   * Rush does not rely on the global default folder, because it may be on a different\n   * hard disk.\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\npm-tmp`\n   */\n  public readonly npmTmpFolder: string;\n\n  /**\n   * The local folder that will store the Yarn package cache.\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\yarn-cache`\n   */\n  public readonly yarnCacheFolder: string;\n\n  /**\n   * The filename (without any path) of the shrinkwrap file that is used by the package manager.\n   * @remarks\n   * This property merely reports the filename; the file itself may not actually exist.\n   * Example: `npm-shrinkwrap.json` or `pnpm-lock.yaml`\n   */\n  public readonly shrinkwrapFilename: string;\n\n  /**\n   * The object that specifies subspace configurations if they are provided in the rush workspace.\n   * @beta\n   */\n  public readonly subspacesConfiguration: SubspacesConfiguration | undefined;\n\n  /**\n   * Returns true if subspaces.json is present with \"subspacesEnabled=true\".\n   */\n  public readonly subspacesFeatureEnabled: boolean;\n\n  /**\n   * The filename of the variant dependency data file.  By default this is\n   * called 'current-variant.json' and resides in the Rush common folder.\n   * Its data structure is defined by ICurrentVariantJson.\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\current-variant.json`\n   */\n  public readonly currentVariantJsonFilePath: string;\n\n  /**\n   * The version of the locally package manager tool.  (Example: \"1.2.3\")\n   */\n  public readonly packageManagerToolVersion: string;\n\n  /**\n   * The absolute path to the locally package manager tool.  If \"rush install\" has not\n   * been run, then this file may not exist yet.\n   * Example: `C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm`\n   */\n  public readonly packageManagerToolFilename: string;\n\n  /**\n   * The minimum allowable folder depth for the projectFolder field in the rush.json file.\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\n   * which implements a standard 2-level hierarchy of `<categoryFolder>/<projectFolder>/package.json`.\n   */\n  public readonly projectFolderMinDepth: number;\n\n  /**\n   * The maximum allowable folder depth for the projectFolder field in the rush.json file.\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\n   * which implements on a standard convention of `<categoryFolder>/<projectFolder>/package.json`.\n   */\n  public readonly projectFolderMaxDepth: number;\n\n  /**\n   * Today the npmjs.com registry enforces fairly strict naming rules for packages, but in the early\n   * days there was no standard and hardly any enforcement.  A few large legacy projects are still using\n   * nonstandard package names, and private registries sometimes allow it.  Set \"allowMostlyStandardPackageNames\"\n   * to true to relax Rush's enforcement of package names.  This allows upper case letters and in the future may\n   * relax other rules, however we want to minimize these exceptions.  Many popular tools use certain punctuation\n   * characters as delimiters, based on the assumption that they will never appear in a package name; thus if we relax\n   * the rules too much it is likely to cause very confusing malfunctions.\n   *\n   * The default value is false.\n   */\n  public readonly allowMostlyStandardPackageNames: boolean;\n\n  /**\n   * The \"approvedPackagesPolicy\" settings.\n   */\n  public readonly approvedPackagesPolicy: ApprovedPackagesPolicy;\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * A list of regular expressions describing allowable email patterns for Git commits.\n   * They are case-insensitive anchored JavaScript RegExps.\n   * Example: `\".*@example\\.com\"`\n   * This array will never be undefined.\n   */\n  public readonly gitAllowedEmailRegExps: string[];\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * An example valid email address that conforms to one of the allowedEmailRegExps.\n   * Example: `\"foxtrot@example\\.com\"`\n   * This will never be undefined, and will always be nonempty if gitAllowedEmailRegExps is used.\n   */\n  public readonly gitSampleEmail: string;\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * The commit message to use when committing changes during 'rush publish'\n   */\n  public readonly gitVersionBumpCommitMessage: string | undefined;\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * The commit message to use when committing change log files 'rush version'\n   */\n  public readonly gitChangeLogUpdateCommitMessage: string | undefined;\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * The commit message to use when committing change log files 'rush version'\n   */\n  public readonly gitChangefilesCommitMessage: string | undefined;\n\n  /**\n   * [Part of the \"gitPolicy\" feature.]\n   * The separator between package name and version in git tag.\n   */\n  public readonly gitTagSeparator: string | undefined;\n\n  /**\n   * [Part of the \"hotfixChange\" feature.]\n   * Enables creating hotfix changes\n   */\n  public readonly hotfixChangeEnabled: boolean;\n\n  /**\n   * Remote URL(s) of the repository. If a value is provided, \\\"rush change\\\" will\n   * use one of these to find the right remote to compare against. Specifying multiple URLs\n   * is useful if a GitHub repository is renamed or for `<projectName>.visualstudio.com` versus\n   * `dev.azure.com/<projectName>` URLs.\n   */\n  public readonly repositoryUrls: string[];\n\n  /**\n   * The default branch name. This tells \"rush change\" which remote branch to compare against.\n   */\n  public readonly repositoryDefaultBranch: string;\n\n  /**\n   * The default remote. This tells \"rush change\" which remote to compare against if the remote URL is not set\n   * or if a remote matching the provided remote URL is not found.\n   */\n  public readonly repositoryDefaultRemote: string;\n\n  /**\n   * Odd-numbered major versions of Node.js are experimental.  Even-numbered releases\n   * spend six months in a stabilization period before the first Long Term Support (LTS) version.\n   * For example, 8.9.0 was the first LTS version of Node.js 8.  Pre-LTS versions are not recommended\n   * for production usage because they frequently have bugs.  They may cause Rush itself\n   * to malfunction.\n   *\n   * Rush normally prints a warning if it detects a pre-LTS Node.js version.  If you are testing\n   * pre-LTS versions in preparation for supporting the first LTS version, you can use this setting\n   * to disable Rush's warning.\n   */\n  public readonly suppressNodeLtsWarning: boolean;\n\n  /**\n   * The raw value of `ensureConsistentVersions` from the `rush.json` file.\n   *\n   * @internal\n   */\n  public readonly _ensureConsistentVersionsJsonValue: boolean | undefined;\n\n  /**\n   * If true, then consistent version specifiers for dependencies will be enforced.\n   * I.e. \"rush check\" is run before some commands.\n   *\n   * @deprecated\n   * This setting was moved from `rush.json` to `common-versions.json`.\n   * Read it using {@link Subspace.shouldEnsureConsistentVersions} instead.\n   */\n  public readonly ensureConsistentVersions: boolean;\n\n  /**\n   * Indicates whether telemetry collection is enabled for Rush runs.\n   * @beta\n   */\n  public readonly telemetryEnabled: boolean;\n\n  /**\n   * {@inheritDoc NpmOptionsConfiguration}\n   */\n  public readonly npmOptions: NpmOptionsConfiguration;\n\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration}\n   */\n  public readonly pnpmOptions: PnpmOptionsConfiguration;\n\n  /**\n   * {@inheritDoc YarnOptionsConfiguration}\n   */\n  public readonly yarnOptions: YarnOptionsConfiguration;\n\n  /**\n   * The configuration options used by the current package manager.\n   * @remarks\n   * For package manager specific variants, reference {@link RushConfiguration.npmOptions | npmOptions},\n   * {@link RushConfiguration.pnpmOptions | pnpmOptions}, or {@link RushConfiguration.yarnOptions | yarnOptions}.\n   */\n  public readonly packageManagerOptions!: PackageManagerOptionsConfigurationBase;\n\n  /**\n   * The rush hooks. It allows customized scripts to run at the specified point.\n   * @beta\n   */\n  public readonly eventHooks: EventHooks;\n\n  /**\n   * The rush hooks. It allows customized scripts to run at the specified point.\n   */\n  public readonly packageNameParser: PackageNameParser;\n\n  /**\n   * @beta\n   */\n  public readonly versionPolicyConfiguration: VersionPolicyConfiguration;\n\n  /**\n   * @beta\n   */\n  public readonly versionPolicyConfigurationFilePath: string;\n\n  /**\n   * Accesses the custom-tips.json configuration.\n   * @beta\n   */\n  public readonly customTipsConfiguration: CustomTipsConfiguration;\n\n  /**\n   * The absolute path to the custom tips configuration file.\n   * @beta\n   */\n  public readonly customTipsConfigurationFilePath: string;\n\n  /**\n   * This configuration object contains settings repo maintainers have specified to enable\n   * and disable experimental Rush features.\n   *\n   * @beta\n   */\n  public readonly experimentsConfiguration: ExperimentsConfiguration;\n\n  /**\n   * @internal\n   */\n  public readonly _rushPluginsConfiguration: RushPluginsConfiguration;\n\n  /**\n   * The variants specified in the rush.json configuration file.\n   *\n   * @beta\n   */\n  public readonly variants: ReadonlySet<string>;\n\n  /**\n   * Use RushConfiguration.loadFromConfigurationFile() or Use RushConfiguration.loadFromDefaultLocation()\n   * instead.\n   */\n  private constructor(rushConfigurationJson: IRushConfigurationJson, rushJsonFilename: string) {\n    this.rushConfigurationJson = rushConfigurationJson;\n    EnvironmentConfiguration.validate();\n\n    if (rushConfigurationJson.nodeSupportedVersionRange) {\n      if (!semver.validRange(rushConfigurationJson.nodeSupportedVersionRange)) {\n        throw new Error(\n          'Error parsing the node-semver expression in the \"nodeSupportedVersionRange\"' +\n            ` field from ${RushConstants.rushJsonFilename}: \"${rushConfigurationJson.nodeSupportedVersionRange}\"`\n        );\n      }\n      if (!semver.satisfies(process.version, rushConfigurationJson.nodeSupportedVersionRange)) {\n        let message: string =\n          `Your dev environment is running Node.js version ${process.version} which does` +\n          ` not meet the requirements for building this repository.  (The ${RushConstants.rushJsonFilename} configuration` +\n          ` requires nodeSupportedVersionRange=\"${rushConfigurationJson.nodeSupportedVersionRange}\")`;\n\n        if (rushConfigurationJson.nodeSupportedVersionInstructions) {\n          message += '\\n\\n' + rushConfigurationJson.nodeSupportedVersionInstructions;\n        }\n\n        if (EnvironmentConfiguration.allowUnsupportedNodeVersion) {\n          // eslint-disable-next-line no-console\n          console.warn(message);\n        } else {\n          throw new Error(message);\n        }\n      }\n    }\n\n    this.rushJsonFile = rushJsonFilename;\n    this.rushJsonFolder = path.dirname(rushJsonFilename);\n\n    this.commonFolder = path.resolve(path.join(this.rushJsonFolder, RushConstants.commonFolderName));\n\n    this.commonRushConfigFolder = path.join(this.commonFolder, 'config', 'rush');\n\n    this.commonTempFolder =\n      EnvironmentConfiguration.rushTempFolderOverride ||\n      path.join(this.commonFolder, RushConstants.rushTempFolderName);\n\n    this.commonScriptsFolder = path.join(this.commonFolder, 'scripts');\n\n    this.npmCacheFolder = path.resolve(path.join(this.commonTempFolder, 'npm-cache'));\n    this.npmTmpFolder = path.resolve(path.join(this.commonTempFolder, 'npm-tmp'));\n    this.yarnCacheFolder = path.resolve(path.join(this.commonTempFolder, 'yarn-cache'));\n\n    this.changesFolder = path.join(this.commonFolder, RushConstants.changeFilesFolderName);\n\n    this.currentVariantJsonFilePath = path.join(this.commonTempFolder, RushConstants.currentVariantsFilename);\n\n    this.suppressNodeLtsWarning = !!rushConfigurationJson.suppressNodeLtsWarning;\n\n    this._ensureConsistentVersionsJsonValue = rushConfigurationJson.ensureConsistentVersions;\n    this.ensureConsistentVersions = !!rushConfigurationJson.ensureConsistentVersions;\n\n    // Try getting a subspace configuration\n    this.subspacesConfiguration = SubspacesConfiguration.tryLoadFromDefaultLocation(this);\n    this.subspacesFeatureEnabled = !!this.subspacesConfiguration?.subspacesEnabled;\n\n    this._subspacesByName = new Map();\n\n    const experimentsConfigFile: string = path.join(\n      this.commonRushConfigFolder,\n      RushConstants.experimentsFilename\n    );\n    this.experimentsConfiguration = new ExperimentsConfiguration(experimentsConfigFile);\n\n    const rushPluginsConfigFilename: string = path.join(\n      this.commonRushConfigFolder,\n      RushConstants.rushPluginsConfigFilename\n    );\n    this._rushPluginsConfiguration = new RushPluginsConfiguration(rushPluginsConfigFilename);\n\n    this.npmOptions = new NpmOptionsConfiguration(rushConfigurationJson.npmOptions || {});\n    this.yarnOptions = new YarnOptionsConfiguration(rushConfigurationJson.yarnOptions || {});\n    try {\n      this.pnpmOptions = PnpmOptionsConfiguration.loadFromJsonFileOrThrow(\n        `${this.commonRushConfigFolder}/${RushConstants.pnpmConfigFilename}`,\n        this.commonTempFolder\n      );\n      if (rushConfigurationJson.pnpmOptions) {\n        throw new Error(\n          'Because the new config file \"common/config/rush/pnpm-config.json\" is being used, ' +\n            `you must remove the old setting \"pnpmOptions\" from ${RushConstants.rushJsonFilename}`\n        );\n      }\n    } catch (error) {\n      if (FileSystem.isNotExistError(error as Error)) {\n        this.pnpmOptions = PnpmOptionsConfiguration.loadFromJsonObject(\n          rushConfigurationJson.pnpmOptions || {},\n          this.commonTempFolder\n        );\n      } else {\n        throw error;\n      }\n    }\n\n    // TODO: Add an actual \"packageManager\" field in rush.json\n    const packageManagerFields: string[] = [];\n\n    this.isPnpm = false;\n    if (rushConfigurationJson.npmVersion) {\n      this.packageManager = 'npm';\n      this.packageManagerOptions = this.npmOptions;\n      packageManagerFields.push('npmVersion');\n    }\n\n    if (rushConfigurationJson.pnpmVersion) {\n      this.packageManager = 'pnpm';\n      this.isPnpm = true;\n      this.packageManagerOptions = this.pnpmOptions;\n      packageManagerFields.push('pnpmVersion');\n    }\n\n    if (rushConfigurationJson.yarnVersion) {\n      this.packageManager = 'yarn';\n      this.packageManagerOptions = this.yarnOptions;\n      packageManagerFields.push('yarnVersion');\n    }\n\n    if (packageManagerFields.length === 0) {\n      throw new Error(\n        `The ${RushConstants.rushJsonFilename} configuration must specify one of: npmVersion, pnpmVersion, or yarnVersion`\n      );\n    }\n\n    if (packageManagerFields.length > 1) {\n      throw new Error(\n        `The ${RushConstants.rushJsonFilename} configuration cannot specify both ${packageManagerFields[0]}` +\n          ` and ${packageManagerFields[1]} `\n      );\n    }\n\n    if (this.packageManager === 'npm') {\n      this.packageManagerToolVersion = rushConfigurationJson.npmVersion!;\n      this.packageManagerWrapper = new NpmPackageManager(this.packageManagerToolVersion);\n    } else if (this.packageManager === 'pnpm') {\n      this.packageManagerToolVersion = rushConfigurationJson.pnpmVersion!;\n      this.packageManagerWrapper = new PnpmPackageManager(this.packageManagerToolVersion);\n    } else {\n      this.packageManagerToolVersion = rushConfigurationJson.yarnVersion!;\n      this.packageManagerWrapper = new YarnPackageManager(this.packageManagerToolVersion);\n    }\n\n    this.shrinkwrapFilename = this.packageManagerWrapper.shrinkwrapFilename;\n\n    this.packageManagerToolFilename = path.resolve(\n      path.join(\n        this.commonTempFolder,\n        `${this.packageManager}-local`,\n        'node_modules',\n        '.bin',\n        `${this.packageManager}`\n      )\n    );\n\n    RushConfiguration._validateCommonRushConfigFolder(\n      this.commonRushConfigFolder,\n      this.packageManagerWrapper,\n      this.experimentsConfiguration,\n      this.subspacesFeatureEnabled\n    );\n\n    this.projectFolderMinDepth =\n      rushConfigurationJson.projectFolderMinDepth !== undefined\n        ? rushConfigurationJson.projectFolderMinDepth\n        : 1;\n    if (this.projectFolderMinDepth < 1) {\n      throw new Error('Invalid projectFolderMinDepth; the minimum possible value is 1');\n    }\n\n    this.projectFolderMaxDepth =\n      rushConfigurationJson.projectFolderMaxDepth !== undefined\n        ? rushConfigurationJson.projectFolderMaxDepth\n        : 2;\n    if (this.projectFolderMaxDepth < this.projectFolderMinDepth) {\n      throw new Error('The projectFolderMaxDepth cannot be smaller than the projectFolderMinDepth');\n    }\n\n    this.allowMostlyStandardPackageNames = !!rushConfigurationJson.allowMostlyStandardPackageNames;\n    this.packageNameParser = this.allowMostlyStandardPackageNames\n      ? PackageNameParsers.mostlyStandard\n      : PackageNameParsers.rushDefault;\n\n    this.approvedPackagesPolicy = new ApprovedPackagesPolicy(this, rushConfigurationJson);\n\n    this.gitAllowedEmailRegExps = [];\n    this.gitSampleEmail = '';\n    if (rushConfigurationJson.gitPolicy) {\n      if (rushConfigurationJson.gitPolicy.sampleEmail) {\n        this.gitSampleEmail = rushConfigurationJson.gitPolicy.sampleEmail;\n      }\n\n      if (rushConfigurationJson.gitPolicy.allowedEmailRegExps) {\n        this.gitAllowedEmailRegExps = rushConfigurationJson.gitPolicy.allowedEmailRegExps;\n\n        if (this.gitSampleEmail.trim().length < 1) {\n          throw new Error(\n            `The ${RushConstants.rushJsonFilename} file is missing the \"sampleEmail\" option, ` +\n              'which is required when using \"allowedEmailRegExps\"'\n          );\n        }\n      }\n\n      if (rushConfigurationJson.gitPolicy.versionBumpCommitMessage) {\n        this.gitVersionBumpCommitMessage = rushConfigurationJson.gitPolicy.versionBumpCommitMessage;\n      }\n\n      if (rushConfigurationJson.gitPolicy.changeLogUpdateCommitMessage) {\n        this.gitChangeLogUpdateCommitMessage = rushConfigurationJson.gitPolicy.changeLogUpdateCommitMessage;\n      }\n\n      if (rushConfigurationJson.gitPolicy.changefilesCommitMessage) {\n        this.gitChangefilesCommitMessage = rushConfigurationJson.gitPolicy.changefilesCommitMessage;\n      }\n\n      if (rushConfigurationJson.gitPolicy.tagSeparator) {\n        this.gitTagSeparator = rushConfigurationJson.gitPolicy.tagSeparator;\n      }\n    }\n\n    this.hotfixChangeEnabled = false;\n    if (rushConfigurationJson.hotfixChangeEnabled) {\n      this.hotfixChangeEnabled = rushConfigurationJson.hotfixChangeEnabled;\n    }\n\n    if (!rushConfigurationJson.repository) {\n      rushConfigurationJson.repository = {};\n    }\n\n    this.repositoryDefaultBranch = rushConfigurationJson.repository.defaultBranch || DEFAULT_BRANCH;\n    this.repositoryDefaultRemote = rushConfigurationJson.repository.defaultRemote || DEFAULT_REMOTE;\n    const repositoryFieldWithMultipleUrls: IRushRepositoryJsonMultipleUrls =\n      rushConfigurationJson.repository as IRushRepositoryJsonMultipleUrls;\n    const repositoryFieldWithSingleUrl: IRushRepositoryJsonSingleUrl =\n      rushConfigurationJson.repository as IRushRepositoryJsonSingleUrl;\n    if (repositoryFieldWithMultipleUrls.urls) {\n      if (repositoryFieldWithSingleUrl.url) {\n        throw new Error(\"The 'repository.url' field cannot be used when 'repository.urls' is present\");\n      }\n\n      this.repositoryUrls = repositoryFieldWithMultipleUrls.urls;\n    } else if (repositoryFieldWithSingleUrl.url) {\n      this.repositoryUrls = [repositoryFieldWithSingleUrl.url];\n    } else {\n      this.repositoryUrls = [];\n    }\n\n    this.telemetryEnabled = !!rushConfigurationJson.telemetryEnabled;\n    this.eventHooks = new EventHooks(rushConfigurationJson.eventHooks || {});\n\n    this.versionPolicyConfigurationFilePath = path.join(\n      this.commonRushConfigFolder,\n      RushConstants.versionPoliciesFilename\n    );\n    this.versionPolicyConfiguration = new VersionPolicyConfiguration(this.versionPolicyConfigurationFilePath);\n\n    this.customTipsConfigurationFilePath = path.join(\n      this.commonRushConfigFolder,\n      RushConstants.customTipsFilename\n    );\n    this.customTipsConfiguration = new CustomTipsConfiguration(this.customTipsConfigurationFilePath);\n\n    const variants: Set<string> = new Set();\n    for (const variantOptions of rushConfigurationJson.variants ?? []) {\n      const { variantName } = variantOptions;\n\n      if (variants.has(variantName)) {\n        throw new Error(`Duplicate variant named '${variantName}' specified in configuration.`);\n      }\n\n      variants.add(variantName);\n    }\n\n    this.variants = variants;\n\n    this._pathTrees = new Map();\n  }\n\n  private _initializeAndValidateLocalProjects(): void {\n    this._projects = [];\n    this._projectsByName = new Map<string, RushConfigurationProject>();\n    this._subspacesByName.clear();\n    this._subspaces.length = 0;\n\n    // Build the subspaces map\n    const subspaceNames: string[] = [];\n    let splitWorkspaceCompatibility: boolean = false;\n    if (this.subspacesConfiguration?.subspacesEnabled) {\n      splitWorkspaceCompatibility = this.subspacesConfiguration.splitWorkspaceCompatibility;\n\n      subspaceNames.push(...this.subspacesConfiguration.subspaceNames);\n    }\n    if (subspaceNames.indexOf(RushConstants.defaultSubspaceName) < 0) {\n      subspaceNames.push(RushConstants.defaultSubspaceName);\n    }\n\n    // Sort the subspaces in alphabetical order.  This ensures that they are processed\n    // in a deterministic order by the various Rush algorithms.\n    subspaceNames.sort();\n    for (const subspaceName of subspaceNames) {\n      const subspace: Subspace = new Subspace({\n        subspaceName,\n        rushConfiguration: this,\n        splitWorkspaceCompatibility\n      });\n      this._subspacesByName.set(subspaceName, subspace);\n      this._subspaces.push(subspace);\n    }\n    const defaultSubspace: Subspace | undefined = this._subspacesByName.get(\n      RushConstants.defaultSubspaceName\n    );\n    if (!defaultSubspace) {\n      throw new InternalError('The default subspace was not created');\n    }\n\n    // Sort the projects array in alphabetical order.  This ensures that the packages\n    // are processed in a deterministic order by the various Rush algorithms.\n    const sortedProjectJsons: IRushConfigurationProjectJson[] = this.rushConfigurationJson.projects.slice(0);\n    sortedProjectJsons.sort((a: IRushConfigurationProjectJson, b: IRushConfigurationProjectJson) =>\n      a.packageName.localeCompare(b.packageName)\n    );\n\n    const allowedProjectTags: Set<string> | undefined = this.rushConfigurationJson.allowedProjectTags\n      ? new Set(this.rushConfigurationJson.allowedProjectTags)\n      : undefined;\n    const usedTempNames: Set<string> = new Set();\n    for (let i: number = 0, len: number = sortedProjectJsons.length; i < len; i++) {\n      const projectJson: IRushConfigurationProjectJson = sortedProjectJsons[i];\n      const tempProjectName: string | undefined = RushConfiguration._generateTempNameForProject(\n        projectJson,\n        usedTempNames\n      );\n\n      let subspace: Subspace | undefined = undefined;\n      if (this.subspacesFeatureEnabled) {\n        if (projectJson.subspaceName) {\n          subspace = this._subspacesByName.get(projectJson.subspaceName);\n          if (subspace === undefined) {\n            throw new Error(\n              `The project \"${projectJson.packageName}\" in ${RushConstants.rushJsonFilename} references` +\n                ` a nonexistent subspace \"${projectJson.subspaceName}\"`\n            );\n          }\n        }\n      }\n      if (subspace === undefined) {\n        subspace = defaultSubspace;\n      }\n\n      const project: RushConfigurationProject = new RushConfigurationProject({\n        projectJson,\n        rushConfiguration: this,\n        tempProjectName,\n        allowedProjectTags,\n        subspace\n      });\n      subspace._addProject(project);\n\n      this._projects.push(project);\n      if (this._projectsByName.has(project.packageName)) {\n        throw new Error(\n          `The project name \"${project.packageName}\" was specified more than once` +\n            ` in the ${RushConstants.rushJsonFilename} configuration file.`\n        );\n      }\n      this._projectsByName.set(project.packageName, project);\n    }\n\n    for (const project of this._projects) {\n      project.decoupledLocalDependencies.forEach((decoupledLocalDependency: string) => {\n        if (!this.getProjectByName(decoupledLocalDependency)) {\n          throw new Error(\n            `In ${RushConstants.rushJsonFilename}, the \"${decoupledLocalDependency}\" project does not exist,` +\n              ` but was referenced by the decoupledLocalDependencies (previously cyclicDependencyProjects) for ${project.packageName}`\n          );\n        }\n      });\n      this.versionPolicyConfiguration.validate(this.projectsByName);\n\n      // Consumer relationships will be established the first time one is requested\n    }\n  }\n\n  /**\n   * Loads the configuration data from an Rush.json configuration file and returns\n   * an RushConfiguration object.\n   */\n  public static loadFromConfigurationFile(rushJsonFilename: string): RushConfiguration {\n    let resolvedRushJsonFilename: string = path.resolve(rushJsonFilename);\n    // Load the rush.json before we fix the casing. If the case is wrong on a case-sensitive filesystem,\n    // the next line show throw.\n    const rushConfigurationJson: IRushConfigurationJson = JsonFile.load(resolvedRushJsonFilename);\n\n    try {\n      resolvedRushJsonFilename = trueCasePathSync(resolvedRushJsonFilename);\n    } catch (error) {\n      /* ignore errors from true-case-path */\n    }\n\n    // Check the Rush version *before* we validate the schema, since if the version is outdated\n    // then the schema may have changed. This should no longer be a problem after Rush 4.0 and the C2R wrapper,\n    // but we'll validate anyway.\n    const expectedRushVersion: string = rushConfigurationJson.rushVersion;\n\n    const rushJsonBaseName: string = path.basename(resolvedRushJsonFilename);\n\n    // If the version is missing or malformed, fall through and let the schema handle it.\n    if (expectedRushVersion && semver.valid(expectedRushVersion)) {\n      // Make sure the requested version isn't too old\n      if (semver.lt(expectedRushVersion, MINIMUM_SUPPORTED_RUSH_JSON_VERSION)) {\n        throw new Error(\n          `${rushJsonBaseName} is version ${expectedRushVersion}, which is too old for this tool. ` +\n            `The minimum supported version is ${MINIMUM_SUPPORTED_RUSH_JSON_VERSION}.`\n        );\n      }\n\n      // Make sure the requested version isn't too new.\n      //\n      // If the major/minor versions are the same, then we consider the file to be compatible.\n      // This is somewhat lax, e.g. \"5.0.2-dev.3\" will be assumed to be loadable by rush-lib 5.0.0.\n      //\n      // IMPORTANT: Whenever a breaking change is introduced for one of the config files, we must\n      // increment the minor version number for Rush.\n      if (\n        semver.major(Rush.version) !== semver.major(expectedRushVersion) ||\n        semver.minor(Rush.version) !== semver.minor(expectedRushVersion)\n      ) {\n        // If the major/minor are different, then make sure it's an older version.\n        if (semver.lt(Rush.version, expectedRushVersion)) {\n          throw new Error(\n            `Unable to load ${rushJsonBaseName} because its RushVersion is` +\n              ` ${rushConfigurationJson.rushVersion}, whereas @microsoft/rush-lib is version ${Rush.version}.` +\n              ` Consider upgrading the library.`\n          );\n        }\n      }\n    }\n\n    RushConfiguration._jsonSchema.validateObject(rushConfigurationJson, resolvedRushJsonFilename);\n\n    return new RushConfiguration(rushConfigurationJson, resolvedRushJsonFilename);\n  }\n\n  public static tryLoadFromDefaultLocation(\n    options?: ITryFindRushJsonLocationOptions\n  ): RushConfiguration | undefined {\n    const rushJsonLocation: string | undefined = RushConfiguration.tryFindRushJsonLocation(options);\n    if (rushJsonLocation) {\n      return RushConfiguration.loadFromConfigurationFile(rushJsonLocation);\n    }\n  }\n\n  public static loadFromDefaultLocation(options?: ITryFindRushJsonLocationOptions): RushConfiguration {\n    const rushConfiguration: RushConfiguration | undefined =\n      RushConfiguration.tryLoadFromDefaultLocation(options);\n\n    if (rushConfiguration) {\n      return rushConfiguration;\n    } else {\n      throw Utilities.getRushConfigNotFoundError();\n    }\n  }\n\n  /**\n   * Find the rush.json location and return the path, or undefined if a rush.json can't be found.\n   *\n   * @privateRemarks\n   * Keep this in sync with `findRushJsonLocation` in `rush-sdk/src/index.ts`.\n   */\n  public static tryFindRushJsonLocation(options?: ITryFindRushJsonLocationOptions): string | undefined {\n    const optionsIn: ITryFindRushJsonLocationOptions = options || {};\n    const verbose: boolean = optionsIn.showVerbose || false;\n    let currentFolder: string = optionsIn.startingFolder || process.cwd();\n    let parentFolder: string = path.dirname(currentFolder);\n\n    // look upwards at parent folders until we find a folder containing rush.json,\n    // or we reach the root directory without finding a rush.json file\n    while (parentFolder && parentFolder !== currentFolder) {\n      const rushJsonFilename: string = path.join(currentFolder, RushConstants.rushJsonFilename);\n      if (FileSystem.exists(rushJsonFilename)) {\n        if (currentFolder !== optionsIn.startingFolder && verbose) {\n          // eslint-disable-next-line no-console\n          console.log('Found configuration in ' + rushJsonFilename);\n        }\n\n        if (verbose) {\n          // eslint-disable-next-line no-console\n          console.log('');\n        }\n\n        return rushJsonFilename;\n      }\n      currentFolder = parentFolder;\n      parentFolder = path.dirname(currentFolder);\n    }\n\n    // no match\n    return undefined;\n  }\n\n  /**\n   * This generates the unique names that are used to create temporary projects\n   * in the Rush common folder.\n   * NOTE: sortedProjectJsons is sorted by the caller.\n   */\n  private static _generateTempNameForProject(\n    projectJson: IRushConfigurationProjectJson,\n    usedTempNames: Set<string>\n  ): string {\n    // If the name is \"@ms/MyProject\", extract the \"MyProject\" part\n    const unscopedName: string = PackageNameParsers.permissive.getUnscopedName(projectJson.packageName);\n\n    // Generate a unique like name \"@rush-temp/MyProject\", or \"@rush-temp/MyProject-2\" if\n    // there is a naming conflict\n    let counter: number = 0;\n    let tempProjectName: string = `${RushConstants.rushTempNpmScope}/${unscopedName}`;\n    while (usedTempNames.has(tempProjectName)) {\n      ++counter;\n      tempProjectName = `${RushConstants.rushTempNpmScope}/${unscopedName}-${counter}`;\n    }\n    usedTempNames.add(tempProjectName);\n\n    return tempProjectName;\n  }\n\n  /**\n   * If someone adds a config file in the \"common/rush/config\" folder, it would be a bad\n   * experience for Rush to silently ignore their file simply because they misspelled the\n   * filename, or maybe it's an old format that's no longer supported.  The\n   * _validateCommonRushConfigFolder() function makes sure that this folder only contains\n   * recognized config files.\n   */\n  private static _validateCommonRushConfigFolder(\n    commonRushConfigFolder: string,\n    packageManagerWrapper: PackageManager,\n    experiments: ExperimentsConfiguration,\n    subspacesFeatureEnabled: boolean\n  ): void {\n    if (!FileSystem.exists(commonRushConfigFolder)) {\n      // eslint-disable-next-line no-console\n      console.log(`Creating folder: ${commonRushConfigFolder}`);\n      FileSystem.ensureFolder(commonRushConfigFolder);\n      return;\n    }\n\n    for (const filename of FileSystem.readFolderItemNames(commonRushConfigFolder)) {\n      // Ignore things that aren't actual files\n      const stat: FileSystemStats = FileSystem.getLinkStatistics(path.join(commonRushConfigFolder, filename));\n      if (!stat.isFile() && !stat.isSymbolicLink()) {\n        continue;\n      }\n\n      // Ignore harmless file extensions\n      const fileExtension: string = path.extname(filename);\n      if (['.bak', '.disabled', '.md', '.old', '.orig'].indexOf(fileExtension) >= 0) {\n        continue;\n      }\n\n      // Check if there are prohibited files when subspaces is enabled\n      if (subspacesFeatureEnabled) {\n        if (filename === RushConstants.pnpmfileV6Filename || filename === RushConstants.pnpmfileV1Filename) {\n          throw new Error(\n            'When the subspaces feature is enabled, a separate lockfile is stored in each subspace folder. ' +\n              `To avoid confusion, remove this file: ${commonRushConfigFolder}/${filename}`\n          );\n        }\n      }\n\n      // Ignore hidden files such as \".DS_Store\"\n      if (filename.startsWith('.')) {\n        continue;\n      }\n\n      if (filename.startsWith('deploy-') && fileExtension === '.json') {\n        // Ignore \"rush deploy\" files, which use the naming pattern \"deploy-<scenario-name>.json\".\n        continue;\n      }\n\n      const knownSet: Set<string> = new Set<string>(knownRushConfigFilenames.map((x) => x.toUpperCase()));\n\n      // Add the shrinkwrap filename for the package manager to the known set.\n      knownSet.add(packageManagerWrapper.shrinkwrapFilename.toUpperCase());\n\n      // If the package manager is pnpm, then also add the pnpm file to the known set.\n      if (packageManagerWrapper.packageManager === 'pnpm') {\n        const pnpmPackageManager: PnpmPackageManager = packageManagerWrapper as PnpmPackageManager;\n        knownSet.add(pnpmPackageManager.pnpmfileFilename.toUpperCase());\n      }\n\n      // Is the filename something we know?  If not, report an error.\n      if (!knownSet.has(filename.toUpperCase())) {\n        throw new Error(\n          `An unrecognized file \"${filename}\" was found in the Rush config folder:` +\n            ` ${commonRushConfigFolder}`\n        );\n      }\n    }\n\n    const pinnedVersionsFilename: string = path.join(\n      commonRushConfigFolder,\n      RushConstants.pinnedVersionsFilename\n    );\n    if (FileSystem.exists(pinnedVersionsFilename)) {\n      throw new Error(\n        'The \"pinned-versions.json\" config file is no longer supported;' +\n          ' please move your settings to the \"preferredVersions\" field of a \"common-versions.json\" config file.' +\n          ` (See the ${RushConstants.rushWebSiteUrl} documentation for details.)\\n\\n` +\n          pinnedVersionsFilename\n      );\n    }\n  }\n\n  /**\n   * The fully resolved path for the \"autoinstallers\" folder.\n   * Example: `C:\\MyRepo\\common\\autoinstallers`\n   */\n  public get commonAutoinstallersFolder(): string {\n    return path.join(this.commonFolder, 'autoinstallers');\n  }\n\n  /**\n   * The folder where rush-plugin options json files are stored.\n   * Example: `C:\\MyRepo\\common\\config\\rush-plugins`\n   */\n  public get rushPluginOptionsFolder(): string {\n    return path.join(this.commonFolder, 'config', 'rush-plugins');\n  }\n\n  /**\n   * The full path of the temporary shrinkwrap file that is used during \"rush install\".\n   * This file may get rewritten by the package manager during installation.\n   * @remarks\n   * This property merely reports the filename; the file itself may not actually exist.\n   * Example: `C:\\MyRepo\\common\\temp\\npm-shrinkwrap.json` or `C:\\MyRepo\\common\\temp\\pnpm-lock.yaml`\n   *\n   * @deprecated Introduced with subspaces is subspace specific tempShrinkwrapFilename accessible from the Subspace class.\n   */\n  public get tempShrinkwrapFilename(): string {\n    if (this.subspacesFeatureEnabled) {\n      throw new Error(\n        'tempShrinkwrapFilename() is not available when using subspaces. Use the subspace specific temp shrinkwrap filename.'\n      );\n    }\n    return path.join(this.commonTempFolder, this.shrinkwrapFilename);\n  }\n\n  /**\n   * The full path of a backup copy of tempShrinkwrapFilename. This backup copy is made\n   * before installation begins, and can be compared to determine how the package manager\n   * modified tempShrinkwrapFilename.\n   * @remarks\n   * This property merely reports the filename; the file itself may not actually exist.\n   * Example: `C:\\MyRepo\\common\\temp\\npm-shrinkwrap-preinstall.json`\n   * or `C:\\MyRepo\\common\\temp\\pnpm-lock-preinstall.yaml`\n   *\n   * @deprecated Introduced with subspaces is subspace specific tempShrinkwrapPreinstallFilename accessible from the Subspace class.\n   */\n  public get tempShrinkwrapPreinstallFilename(): string {\n    if (this.subspacesFeatureEnabled) {\n      throw new Error(\n        'tempShrinkwrapPreinstallFilename() is not available when using subspaces. Use the subspace specific temp shrinkwrap preinstall filename.'\n      );\n    }\n    const parsedPath: path.ParsedPath = path.parse(this.tempShrinkwrapFilename);\n    return path.join(parsedPath.dir, parsedPath.name + '-preinstall' + parsedPath.ext);\n  }\n\n  /**\n   * Returns an English phrase such as \"shrinkwrap file\" that can be used in logging messages\n   * to refer to the shrinkwrap file using appropriate terminology for the currently selected\n   * package manager.\n   */\n  public get shrinkwrapFilePhrase(): string {\n    return `shrinkwrap file (${this.shrinkwrapFilename})`;\n  }\n\n  /**\n   * The filename of the build dependency data file.  By default this is\n   * called 'rush-link.json' resides in the Rush common folder.\n   * Its data structure is defined by IRushLinkJson.\n   *\n   * Example: `C:\\MyRepo\\common\\temp\\rush-link.json`\n   *\n   * @deprecated The \"rush-link.json\" file was removed in Rush 5.30.0.\n   * Use `RushConfigurationProject.localDependencyProjects` instead.\n   */\n  public get rushLinkJsonFilename(): string {\n    throw new Error(\n      'The \"rush-link.json\" file was removed in Rush 5.30.0. Use ' +\n        'RushConfigurationProject.localDependencyProjects instead.'\n    );\n  }\n\n  /**\n   * The default fully-qualified git remote branch of the repository. This helps \"rush change\" find the right branch to compare against.\n   */\n  public get repositoryDefaultFullyQualifiedRemoteBranch(): string {\n    return `${this.repositoryDefaultRemote}/${this.repositoryDefaultBranch}`;\n  }\n\n  public get projects(): RushConfigurationProject[] {\n    if (!this._projects) {\n      this._initializeAndValidateLocalProjects();\n    }\n\n    return this._projects!;\n  }\n\n  /**\n   * @beta\n   */\n  public get defaultSubspace(): Subspace {\n    // TODO: Enable the default subspace to be obtained without initializing the full set of all projects\n    if (!this._projects) {\n      this._initializeAndValidateLocalProjects();\n    }\n    const defaultSubspace: Subspace | undefined = this.tryGetSubspace(RushConstants.defaultSubspaceName);\n    if (!defaultSubspace) {\n      throw new InternalError('Default subspace was not created');\n    }\n    return defaultSubspace;\n  }\n\n  /**\n   * A list of all the available subspaces in this workspace.\n   * @beta\n   */\n  public get subspaces(): readonly Subspace[] {\n    if (!this._projects) {\n      this._initializeAndValidateLocalProjects();\n    }\n    return this._subspaces;\n  }\n\n  /**\n   * @beta\n   */\n  public tryGetSubspace(subspaceName: string): Subspace | undefined {\n    if (!this._projects) {\n      this._initializeAndValidateLocalProjects();\n    }\n    const subspace: Subspace | undefined = this._subspacesByName.get(subspaceName);\n    if (!subspace) {\n      // If the name is not even valid, that is more important information than if the subspace doesn't exist\n      SubspacesConfiguration.requireValidSubspaceName(\n        subspaceName,\n        this.subspacesConfiguration?.splitWorkspaceCompatibility\n      );\n    }\n    return subspace;\n  }\n\n  /**\n   * @beta\n   */\n  public getSubspace(subspaceName: string): Subspace {\n    const subspace: Subspace | undefined = this.tryGetSubspace(subspaceName);\n    if (!subspace) {\n      throw new Error(`The specified subspace \"${subspaceName}\" does not exist`);\n    }\n    return subspace;\n  }\n\n  /**\n   * Returns the set of subspaces that the given projects belong to\n   * @beta\n   */\n  public getSubspacesForProjects(projects: Iterable<RushConfigurationProject>): ReadonlySet<Subspace> {\n    if (!this._projects) {\n      this._initializeAndValidateLocalProjects();\n    }\n\n    const subspaceSet: Set<Subspace> = new Set();\n    for (const project of projects) {\n      subspaceSet.add(project.subspace);\n    }\n\n    return subspaceSet;\n  }\n\n  /**\n   * @beta\n   */\n  public get projectsByName(): ReadonlyMap<string, RushConfigurationProject> {\n    if (!this._projectsByName) {\n      this._initializeAndValidateLocalProjects();\n    }\n\n    return this._projectsByName!;\n  }\n\n  /**\n   * Obtains the mapping from custom tags to projects.\n   * @beta\n   */\n  public get projectsByTag(): ReadonlyMap<string, ReadonlySet<RushConfigurationProject>> {\n    if (!this._projectsByTag) {\n      const projectsByTag: Map<string, Set<RushConfigurationProject>> = new Map();\n      for (const project of this.projects) {\n        for (const tag of project.tags) {\n          let collection: Set<RushConfigurationProject> | undefined = projectsByTag.get(tag);\n          if (!collection) {\n            projectsByTag.set(tag, (collection = new Set()));\n          }\n          collection.add(project);\n        }\n      }\n      this._projectsByTag = projectsByTag;\n    }\n    return this._projectsByTag;\n  }\n\n  /**\n   * Settings from the common-versions.json config file.\n   * @remarks\n   * If the common-versions.json file is missing, this property will not be undefined.\n   * Instead it will be initialized in an empty state, and calling CommonVersionsConfiguration.save()\n   * will create the file.\n   *\n   * @deprecated Use `getCommonVersions` instead, which gets the correct common version data\n   * for a given active variant.\n   */\n  public get commonVersions(): CommonVersionsConfiguration {\n    return this.defaultSubspace.getCommonVersions(undefined);\n  }\n\n  /**\n   * Gets the currently-installed variant, if an installation has occurred.\n   * For Rush operations which do not take a --variant parameter, this method\n   * determines which variant, if any, was last specified when performing \"rush install\"\n   * or \"rush update\".\n   */\n  public async getCurrentlyInstalledVariantAsync(): Promise<string | undefined> {\n    if (!this._currentVariantJsonLoadingPromise) {\n      this._currentVariantJsonLoadingPromise = this._loadCurrentVariantJsonAsync();\n    }\n\n    return (await this._currentVariantJsonLoadingPromise)?.variant ?? undefined;\n  }\n\n  /**\n   * @deprecated Use {@link Subspace.getCommonVersionsFilePath} instead\n   */\n  public getCommonVersionsFilePath(subspace?: Subspace, variant?: string): string {\n    return (subspace ?? this.defaultSubspace).getCommonVersionsFilePath(variant);\n  }\n\n  /**\n   * @deprecated Use {@link Subspace.getCommonVersions} instead\n   */\n  public getCommonVersions(subspace?: Subspace, variant?: string): CommonVersionsConfiguration {\n    return (subspace ?? this.defaultSubspace).getCommonVersions(variant);\n  }\n\n  /**\n   * Returns a map of all direct dependencies that only have a single semantic version specifier.\n   *\n   * @param subspace - The subspace to use\n   * @param variant - The name of the current variant in use by the active command.\n   *\n   * @returns A map of dependency name --\\> version specifier for implicitly preferred versions.\n   */\n  public getImplicitlyPreferredVersions(subspace?: Subspace, variant?: string): Map<string, string> {\n    // TODO: During the next major release of Rush, replace this `require` call with a dynamic import, and\n    // change this function to be async.\n    const DependencyAnalyzerModule: typeof DependencyAnalyzerModuleType = require('../logic/DependencyAnalyzer');\n    const dependencyAnalyzer: DependencyAnalyzerModuleType.DependencyAnalyzer =\n      DependencyAnalyzerModule.DependencyAnalyzer.forRushConfiguration(this);\n    const dependencyAnalysis: DependencyAnalyzerModuleType.IDependencyAnalysis =\n      dependencyAnalyzer.getAnalysis(subspace, variant, false);\n    return dependencyAnalysis.implicitlyPreferredVersionByPackageName;\n  }\n\n  /**\n   * @deprecated Use {@link Subspace.getRepoStateFilePath} instead\n   */\n  public getRepoStateFilePath(subspace?: Subspace): string {\n    return (subspace ?? this.defaultSubspace).getRepoStateFilePath();\n  }\n\n  /**\n   * @deprecated Use {@link Subspace.getRepoState} instead\n   */\n  public getRepoState(subspace?: Subspace): RepoStateFile {\n    return (subspace ?? this.defaultSubspace).getRepoState();\n  }\n\n  /**\n   * @deprecated Use {@link Subspace.getCommittedShrinkwrapFilePath} instead\n   */\n  public getCommittedShrinkwrapFilename(subspace?: Subspace, variant?: string): string {\n    return (subspace ?? this.defaultSubspace).getCommittedShrinkwrapFilePath(variant);\n  }\n\n  /**\n   * @deprecated Use {@link Subspace.getPnpmfilePath} instead\n   */\n  public getPnpmfilePath(subspace?: Subspace, variant?: string): string {\n    return (subspace ?? this.defaultSubspace).getPnpmfilePath(variant);\n  }\n\n  /**\n   * Looks up a project in the projectsByName map.  If the project is not found,\n   * then undefined is returned.\n   */\n  public getProjectByName(projectName: string): RushConfigurationProject | undefined {\n    return this.projectsByName.get(projectName);\n  }\n\n  /**\n   * This is used e.g. by command-line interfaces such as \"rush build --to example\".\n   * If \"example\" is not a project name, then it also looks for a scoped name\n   * like `@something/example`.  If exactly one project matches this heuristic, it\n   * is returned.  Otherwise, undefined is returned.\n   */\n  public findProjectByShorthandName(shorthandProjectName: string): RushConfigurationProject | undefined {\n    // Is there an exact match?\n    let result: RushConfigurationProject | undefined = this.projectsByName.get(shorthandProjectName);\n    if (result) {\n      return result;\n    }\n\n    // Is there an approximate match?\n    for (const project of this.projects) {\n      if (this.packageNameParser.getUnscopedName(project.packageName) === shorthandProjectName) {\n        if (result) {\n          // Ambiguous -- there is more than one match\n          return undefined;\n        } else {\n          result = project;\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Looks up a project by its RushConfigurationProject.tempProjectName field.\n   * @returns The found project, or undefined if no match was found.\n   */\n  public findProjectByTempName(tempProjectName: string): RushConfigurationProject | undefined {\n    // Is there an approximate match?\n    for (const project of this.projects) {\n      if (project.tempProjectName === tempProjectName) {\n        return project;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @returns An optimized lookup engine to find a project by its path relative to the specified root.\n   * @beta\n   */\n  public getProjectLookupForRoot(rootPath: string): LookupByPath<RushConfigurationProject> {\n    let pathTree: LookupByPath<RushConfigurationProject> | undefined = this._pathTrees.get(rootPath);\n    if (!pathTree) {\n      this._pathTrees.set(rootPath, (pathTree = new LookupByPath()));\n      for (const project of this.projects) {\n        const relativePath: string = path.relative(rootPath, project.projectFolder);\n        pathTree.setItemFromSegments(LookupByPath.iteratePathSegments(relativePath, path.sep), project);\n      }\n    }\n    return pathTree;\n  }\n\n  /**\n   * Returns the project for which the specified path is underneath that project's folder.\n   * If the path is not under any project's folder, returns undefined.\n   */\n  public tryGetProjectForPath(currentFolderPath: string): RushConfigurationProject | undefined {\n    // TODO: Improve the method in which a package is found, perhaps without having to sort / loop though the entire package list\n    const resolvedPath: string = path.resolve(currentFolderPath);\n    const sortedProjects: RushConfigurationProject[] = this.projects.sort(\n      (a, b) => b.projectFolder.length - a.projectFolder.length\n    );\n    for (const project of sortedProjects) {\n      if (Path.isUnderOrEqual(resolvedPath, project.projectFolder)) {\n        return project;\n      }\n    }\n    return undefined;\n  }\n\n  private async _loadCurrentVariantJsonAsync(): Promise<ICurrentVariantJson | undefined> {\n    try {\n      return await JsonFile.loadAsync(this.currentVariantJsonFilePath);\n    } catch (e) {\n      if (!FileSystem.isNotExistError(e)) {\n        throw e;\n      }\n    }\n  }\n}\n"]}