"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildCacheConfiguration = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const FileSystemBuildCacheProvider_1 = require("../logic/buildCache/FileSystemBuildCacheProvider");
const RushConstants_1 = require("../logic/RushConstants");
const RushUserConfiguration_1 = require("./RushUserConfiguration");
const EnvironmentConfiguration_1 = require("./EnvironmentConfiguration");
const CacheEntryId_1 = require("../logic/buildCache/CacheEntryId");
const build_cache_schema_json_1 = __importDefault(require("../schemas/build-cache.schema.json"));
/**
 * Use this class to load and save the "common/config/rush/build-cache.json" config file.
 * This file provides configuration options for cached project build output.
 * @beta
 */
class BuildCacheConfiguration {
    constructor({ getCacheEntryId, buildCacheJson, rushUserConfiguration, rushConfiguration, cloudCacheProvider }) {
        var _a;
        this.buildCacheEnabled = (_a = EnvironmentConfiguration_1.EnvironmentConfiguration.buildCacheEnabled) !== null && _a !== void 0 ? _a : buildCacheJson.buildCacheEnabled;
        this.cacheWriteEnabled =
            !!this.buildCacheEnabled && EnvironmentConfiguration_1.EnvironmentConfiguration.buildCacheWriteAllowed !== false;
        this.getCacheEntryId = getCacheEntryId;
        this.localCacheProvider = new FileSystemBuildCacheProvider_1.FileSystemBuildCacheProvider({
            rushUserConfiguration: rushUserConfiguration,
            rushConfiguration: rushConfiguration
        });
        this.cloudCacheProvider = cloudCacheProvider;
        this.cacheHashSalt = buildCacheJson.cacheHashSalt;
    }
    /**
     * Attempts to load the build-cache.json data from the standard file path `common/config/rush/build-cache.json`.
     * If the file has not been created yet, then undefined is returned.
     */
    static async tryLoadAsync(terminal, rushConfiguration, rushSession) {
        const jsonFilePath = BuildCacheConfiguration.getBuildCacheConfigFilePath(rushConfiguration);
        if (!node_core_library_1.FileSystem.exists(jsonFilePath)) {
            return undefined;
        }
        return await BuildCacheConfiguration._loadAsync(jsonFilePath, terminal, rushConfiguration, rushSession);
    }
    /**
     * Loads the build-cache.json data from the standard file path `common/config/rush/build-cache.json`.
     * If the file has not been created yet, or if the feature is not enabled, then an error is reported.
     */
    static async loadAndRequireEnabledAsync(terminal, rushConfiguration, rushSession) {
        const jsonFilePath = BuildCacheConfiguration.getBuildCacheConfigFilePath(rushConfiguration);
        if (!node_core_library_1.FileSystem.exists(jsonFilePath)) {
            terminal.writeErrorLine(`The build cache feature is not enabled. This config file is missing:\n` + jsonFilePath);
            terminal.writeLine(`\nThe Rush website documentation has instructions for enabling the build cache.`);
            throw new node_core_library_1.AlreadyReportedError();
        }
        const buildCacheConfiguration = await BuildCacheConfiguration._loadAsync(jsonFilePath, terminal, rushConfiguration, rushSession);
        if (!buildCacheConfiguration.buildCacheEnabled) {
            terminal.writeErrorLine(`The build cache feature is not enabled. You can enable it by editing this config file:\n` +
                jsonFilePath);
            throw new node_core_library_1.AlreadyReportedError();
        }
        return buildCacheConfiguration;
    }
    /**
     * Gets the absolute path to the build-cache.json file in the specified rush workspace.
     */
    static getBuildCacheConfigFilePath(rushConfiguration) {
        return path.resolve(rushConfiguration.commonRushConfigFolder, RushConstants_1.RushConstants.buildCacheFilename);
    }
    static async _loadAsync(jsonFilePath, terminal, rushConfiguration, rushSession) {
        const buildCacheJson = await node_core_library_1.JsonFile.loadAndValidateAsync(jsonFilePath, BuildCacheConfiguration._jsonSchema);
        const rushUserConfiguration = await RushUserConfiguration_1.RushUserConfiguration.initializeAsync();
        let getCacheEntryId;
        try {
            getCacheEntryId = CacheEntryId_1.CacheEntryId.parsePattern(buildCacheJson.cacheEntryNamePattern);
        }
        catch (e) {
            terminal.writeErrorLine(`Error parsing cache entry name pattern "${buildCacheJson.cacheEntryNamePattern}": ${e}`);
            throw new node_core_library_1.AlreadyReportedError();
        }
        let cloudCacheProvider;
        // Don't configure a cloud cache provider if local-only
        if (buildCacheJson.cacheProvider !== 'local-only') {
            const cloudCacheProviderFactory = rushSession.getCloudBuildCacheProviderFactory(buildCacheJson.cacheProvider);
            if (!cloudCacheProviderFactory) {
                throw new Error(`Unexpected cache provider: ${buildCacheJson.cacheProvider}`);
            }
            cloudCacheProvider = await cloudCacheProviderFactory(buildCacheJson);
        }
        return new BuildCacheConfiguration({
            buildCacheJson,
            getCacheEntryId,
            rushConfiguration,
            rushUserConfiguration,
            rushSession,
            cloudCacheProvider
        });
    }
}
exports.BuildCacheConfiguration = BuildCacheConfiguration;
BuildCacheConfiguration._jsonSchema = node_core_library_1.JsonSchema.fromLoadedObject(build_cache_schema_json_1.default);
//# sourceMappingURL=BuildCacheConfiguration.js.map