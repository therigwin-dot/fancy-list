{"version":3,"file":"SubspacesConfiguration.js","sourceRoot":"","sources":["../../src/api/SubspacesConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, JsonFile, JsonSchema } from '@rushstack/node-core-library';\n\nimport type { RushConfiguration } from './RushConfiguration';\nimport schemaJson from '../schemas/subspaces.schema.json';\nimport { RushConstants } from '../logic/RushConstants';\n\n/**\n * The allowed naming convention for subspace names.\n * Allows for names to be formed of identifiers separated by hyphens (-)\n *\n * Example: \"my-subspace\"\n */\nexport const SUBSPACE_NAME_REGEXP: RegExp = /^[a-z][a-z0-9]*(-[a-z0-9]+)*$/;\nexport const SPLIT_WORKSPACE_SUBSPACE_NAME_REGEXP: RegExp = /^[a-z0-9][+_\\-a-z0-9]*$/;\n\n/**\n * This represents the JSON data structure for the \"subspaces.json\" configuration file.\n * See subspace.schema.json for documentation.\n */\nexport interface ISubspacesConfigurationJson {\n  subspacesEnabled: boolean;\n  splitWorkspaceCompatibility?: boolean;\n  preventSelectingAllSubspaces?: boolean;\n  subspaceNames: string[];\n}\n\n/**\n * This represents the subspace configurations for a repository, based on the \"subspaces.json\"\n * configuration file.\n * @beta\n */\nexport class SubspacesConfiguration {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  /**\n   * The absolute path to the \"subspaces.json\" configuration file that was loaded to construct this object.\n   */\n  public readonly subspaceJsonFilePath: string;\n\n  /*\n   * Determines whether the subspaces feature is enabled.\n   */\n  public readonly subspacesEnabled: boolean;\n\n  /**\n   * This determines if the subspaces feature supports adding configuration files under the project folder itself\n   */\n  public readonly splitWorkspaceCompatibility: boolean;\n\n  /**\n   * This determines if selectors are required when installing and building\n   */\n  public readonly preventSelectingAllSubspaces: boolean;\n\n  /**\n   * A set of the available subspaces\n   */\n  public readonly subspaceNames: ReadonlySet<string>;\n\n  private constructor(configuration: Readonly<ISubspacesConfigurationJson>, subspaceJsonFilePath: string) {\n    this.subspaceJsonFilePath = subspaceJsonFilePath;\n    this.subspacesEnabled = configuration.subspacesEnabled;\n    this.splitWorkspaceCompatibility = !!configuration.splitWorkspaceCompatibility;\n    this.preventSelectingAllSubspaces = !!configuration.preventSelectingAllSubspaces;\n    const subspaceNames: Set<string> = new Set();\n    for (const subspaceName of configuration.subspaceNames) {\n      SubspacesConfiguration.requireValidSubspaceName(subspaceName, this.splitWorkspaceCompatibility);\n\n      subspaceNames.add(subspaceName);\n    }\n    // Add the default subspace if it wasn't explicitly declared\n    subspaceNames.add(RushConstants.defaultSubspaceName);\n    this.subspaceNames = subspaceNames;\n  }\n\n  /**\n   * Checks whether the provided string could be used as a subspace name.\n   * Returns `undefined` if the name is valid; otherwise returns an error message.\n   * @remarks\n   * This is a syntax check only; it does not test whether the subspace is actually defined in the Rush configuration.\n   */\n  public static explainIfInvalidSubspaceName(\n    subspaceName: string,\n    splitWorkspaceCompatibility: boolean = false\n  ): string | undefined {\n    if (subspaceName.length === 0) {\n      return `The subspace name cannot be empty`;\n    }\n    let regexToUse: RegExp;\n    if (splitWorkspaceCompatibility) {\n      regexToUse = SPLIT_WORKSPACE_SUBSPACE_NAME_REGEXP;\n    } else {\n      regexToUse = SUBSPACE_NAME_REGEXP;\n    }\n    if (!regexToUse.test(subspaceName)) {\n      if (splitWorkspaceCompatibility) {\n        return (\n          `Invalid name \"${subspaceName}\". ` +\n          `Subspace names must consist of lowercase letters and numbers separated by hyphens, underscores, or plus signs.`\n        );\n      }\n      return (\n        `Invalid name \"${subspaceName}\". ` +\n        `Subspace names must consist of lowercase letters and numbers separated by hyphens.`\n      );\n    }\n\n    return undefined; // name is okay\n  }\n\n  /**\n   * Checks whether the provided string could be used as a subspace name.\n   * If not, an exception is thrown.\n   * @remarks\n   * This is a syntax check only; it does not test whether the subspace is actually defined in the Rush configuration.\n   */\n  public static requireValidSubspaceName(\n    subspaceName: string,\n    splitWorkspaceCompatibility: boolean = false\n  ): void {\n    const message: string | undefined = SubspacesConfiguration.explainIfInvalidSubspaceName(\n      subspaceName,\n      splitWorkspaceCompatibility\n    );\n    if (message) {\n      throw new Error(message);\n    }\n  }\n\n  public static tryLoadFromConfigurationFile(\n    subspaceJsonFilePath: string\n  ): SubspacesConfiguration | undefined {\n    let configuration: Readonly<ISubspacesConfigurationJson> | undefined;\n    try {\n      configuration = JsonFile.loadAndValidate(subspaceJsonFilePath, SubspacesConfiguration._jsonSchema);\n    } catch (e) {\n      if (!FileSystem.isNotExistError(e)) {\n        throw e;\n      }\n    }\n    if (configuration) {\n      return new SubspacesConfiguration(configuration, subspaceJsonFilePath);\n    }\n  }\n\n  public static tryLoadFromDefaultLocation(\n    rushConfiguration: RushConfiguration\n  ): SubspacesConfiguration | undefined {\n    const commonRushConfigFolder: string = rushConfiguration.commonRushConfigFolder;\n    const subspaceJsonLocation: string = `${commonRushConfigFolder}/${RushConstants.subspacesConfigFilename}`;\n    return SubspacesConfiguration.tryLoadFromConfigurationFile(subspaceJsonLocation);\n  }\n}\n"]}