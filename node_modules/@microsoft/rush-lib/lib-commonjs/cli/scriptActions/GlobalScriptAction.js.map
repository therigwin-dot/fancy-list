{"version":3,"file":"GlobalScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/GlobalScriptAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\n\nimport type { AsyncSeriesHook } from 'tapable';\n\nimport {\n  FileSystem,\n  type IPackageJson,\n  JsonFile,\n  AlreadyReportedError,\n  Text\n} from '@rushstack/node-core-library';\nimport { Colorize } from '@rushstack/terminal';\n\nimport type { IGlobalCommand } from '../../pluginFramework/RushLifeCycle';\nimport { BaseScriptAction, type IBaseScriptActionOptions } from './BaseScriptAction';\nimport { Utilities } from '../../utilities/Utilities';\nimport { Stopwatch } from '../../utilities/Stopwatch';\nimport { Autoinstaller } from '../../logic/Autoinstaller';\nimport type { IGlobalCommandConfig, IShellCommandTokenContext } from '../../api/CommandLineConfiguration';\n\n/**\n * Constructor parameters for GlobalScriptAction.\n */\nexport interface IGlobalScriptActionOptions extends IBaseScriptActionOptions<IGlobalCommandConfig> {\n  shellCommand: string;\n  autoinstallerName: string | undefined;\n}\n\n/**\n * This class implements custom commands that are run once globally for the entire repo\n * (versus bulk commands, which run separately for each project).  The action executes\n * a user-defined script file.\n *\n * @remarks\n * Bulk commands can be defined via common/config/command-line.json.  Rush's predefined \"build\"\n * and \"rebuild\" commands are also modeled as bulk commands, because they essentially just\n * invoke scripts from package.json in the same way as a custom command.\n */\nexport class GlobalScriptAction extends BaseScriptAction<IGlobalCommandConfig> {\n  private readonly _shellCommand: string;\n  private readonly _autoinstallerName: string;\n  private readonly _autoinstallerFullPath: string;\n\n  public constructor(options: IGlobalScriptActionOptions) {\n    super(options);\n    this._shellCommand = options.shellCommand;\n    this._autoinstallerName = options.autoinstallerName || '';\n\n    if (this._autoinstallerName) {\n      Autoinstaller.validateName(this._autoinstallerName);\n\n      // Example: .../common/autoinstallers/my-task\n      this._autoinstallerFullPath = path.join(\n        this.rushConfiguration.commonAutoinstallersFolder,\n        this._autoinstallerName\n      );\n\n      if (!FileSystem.exists(this._autoinstallerFullPath)) {\n        throw new Error(\n          `The custom command \"${this.actionName}\" specifies an \"autoinstallerName\" setting` +\n            ' but the path does not exist: ' +\n            this._autoinstallerFullPath\n        );\n      }\n\n      // Example: .../common/autoinstallers/my-task/package.json\n      const packageJsonPath: string = path.join(this._autoinstallerFullPath, 'package.json');\n      if (!FileSystem.exists(packageJsonPath)) {\n        throw new Error(\n          `The custom command \"${this.actionName}\" specifies an \"autoinstallerName\" setting` +\n            ` whose package.json file was not found: ` +\n            packageJsonPath\n        );\n      }\n\n      const packageJson: IPackageJson = JsonFile.load(packageJsonPath);\n\n      if (packageJson.name !== this._autoinstallerName) {\n        throw new Error(\n          `The custom command \"${this.actionName}\" specifies an \"autoinstallerName\" setting,` +\n            ` but the package.json file's \"name\" field is not \"${this._autoinstallerName}\": ` +\n            packageJsonPath\n        );\n      }\n    } else {\n      this._autoinstallerFullPath = '';\n    }\n\n    this.defineScriptParameters();\n  }\n\n  private async _prepareAutoinstallerNameAsync(): Promise<void> {\n    const autoInstaller: Autoinstaller = new Autoinstaller({\n      autoinstallerName: this._autoinstallerName,\n      rushConfiguration: this.rushConfiguration,\n      rushGlobalFolder: this.rushGlobalFolder\n    });\n\n    await autoInstaller.prepareAsync();\n  }\n\n  public async runAsync(): Promise<void> {\n    const { hooks: sessionHooks } = this.rushSession;\n    if (sessionHooks.runAnyGlobalCustomCommand.isUsed()) {\n      // Avoid the cost of compiling the hook if it wasn't tapped.\n      await sessionHooks.runAnyGlobalCustomCommand.promise(this);\n    }\n\n    const hookForAction: AsyncSeriesHook<IGlobalCommand> | undefined =\n      sessionHooks.runGlobalCustomCommand.get(this.actionName);\n    if (hookForAction) {\n      // Run the more specific hook for a command with this name after the general hook\n      await hookForAction.promise(this);\n    }\n\n    const additionalPathFolders: string[] =\n      this.commandLineConfiguration?.additionalPathFolders.slice() || [];\n\n    if (this._autoinstallerName) {\n      await this._prepareAutoinstallerNameAsync();\n\n      const autoinstallerNameBinPath: string = path.join(this._autoinstallerFullPath, 'node_modules', '.bin');\n      additionalPathFolders.push(autoinstallerNameBinPath);\n    }\n\n    // Collect all custom parameter values\n    const customParameterValues: string[] = [];\n    for (const tsCommandLineParameter of this.customParameters.values()) {\n      tsCommandLineParameter.appendToArgList(customParameterValues);\n    }\n\n    for (let i: number = 0; i < customParameterValues.length; i++) {\n      let customParameterValue: string = customParameterValues[i];\n      customParameterValue = customParameterValue.replace(/\"/g, '\\\\\"');\n\n      if (customParameterValue.indexOf(' ') >= 0) {\n        customParameterValue = `\"${customParameterValue}\"`;\n      }\n\n      customParameterValues[i] = customParameterValue;\n    }\n\n    let shellCommand: string = this._shellCommand;\n    if (customParameterValues.length > 0) {\n      shellCommand += ' ' + customParameterValues.join(' ');\n    }\n\n    const shellCommandTokenContext: IShellCommandTokenContext | undefined =\n      this.commandLineConfiguration?.shellCommandTokenContext;\n    if (shellCommandTokenContext) {\n      shellCommand = this._expandShellCommandWithTokens(shellCommand, shellCommandTokenContext);\n    }\n    this._rejectAnyTokensInShellCommand(shellCommand, shellCommandTokenContext);\n\n    const stopwatch: Stopwatch = Stopwatch.start();\n\n    const exitCode: number = Utilities.executeLifecycleCommand(shellCommand, {\n      rushConfiguration: this.rushConfiguration,\n      workingDirectory: this.rushConfiguration.rushJsonFolder,\n      initCwd: this.rushConfiguration.commonTempFolder,\n      handleOutput: false,\n      environmentPathOptions: {\n        includeRepoBin: true,\n        additionalPathFolders: additionalPathFolders\n      }\n    });\n\n    process.exitCode = exitCode;\n\n    stopwatch.stop();\n\n    if (this.parser.telemetry) {\n      this.parser.telemetry.log({\n        name: this.actionName,\n        durationInSeconds: stopwatch.duration,\n        result: exitCode > 0 ? 'Failed' : 'Succeeded',\n        extraData: {\n          customParameterValue: customParameterValues.join(' ')\n        }\n      });\n\n      this.parser.flushTelemetry();\n    }\n\n    if (exitCode > 0) {\n      // eslint-disable-next-line no-console\n      console.log('\\n' + Colorize.red(`The script failed with exit code ${exitCode}`));\n      throw new AlreadyReportedError();\n    }\n  }\n\n  private _expandShellCommandWithTokens(\n    shellCommand: string,\n    tokenContext: IShellCommandTokenContext\n  ): string {\n    let expandedShellCommand: string = shellCommand;\n    for (const [token, tokenReplacement] of Object.entries(tokenContext)) {\n      expandedShellCommand = Text.replaceAll(expandedShellCommand, `<${token}>`, tokenReplacement);\n    }\n    return expandedShellCommand;\n  }\n\n  private _rejectAnyTokensInShellCommand(\n    shellCommand: string,\n    tokenContext?: IShellCommandTokenContext\n  ): void {\n    if (shellCommand.indexOf('<') < 0 && shellCommand.indexOf('>') < 0) {\n      return;\n    }\n    const tokenRegExp: RegExp = /(\\<[^<]*?\\>)/;\n    const match: RegExpExecArray | null = tokenRegExp.exec(shellCommand);\n    if (match) {\n      throw new Error(\n        `The \"shellCommand\" value contains an unrecognized token \"${match[1]}\".${\n          tokenContext ? ` Available tokens are ${Object.keys(tokenContext).join(', ')}.` : ''\n        }`\n      );\n    }\n    throw new Error(`The \"shellCommand\" value contains extra token characters (\"<\" or \">\"): ${shellCommand}`);\n  }\n}\n"]}