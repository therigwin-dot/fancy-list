{"version":3,"file":"BaseScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/BaseScriptAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { CommandLineParameter } from '@rushstack/ts-command-line';\nimport { BaseRushAction, type IBaseRushActionOptions } from '../actions/BaseRushAction';\nimport type { Command, CommandLineConfiguration, IParameterJson } from '../../api/CommandLineConfiguration';\nimport { RushConstants } from '../../logic/RushConstants';\nimport type { ParameterJson } from '../../api/CommandLineJson';\n\n/**\n * Constructor parameters for BaseScriptAction\n */\nexport interface IBaseScriptActionOptions<TCommand extends Command> extends IBaseRushActionOptions {\n  commandLineConfiguration: CommandLineConfiguration;\n  command: TCommand;\n}\n\n/**\n * Base class for command-line actions that are implemented using user-defined scripts.\n *\n * @remarks\n * Compared to the normal built-in actions, these actions are special because (1) they\n * can be discovered dynamically via common/config/command-line.json, and (2)\n * user-defined command-line parameters can be passed through to the script.\n *\n * The two subclasses are BulkScriptAction and GlobalScriptAction.\n */\nexport abstract class BaseScriptAction<TCommand extends Command> extends BaseRushAction {\n  protected readonly commandLineConfiguration: CommandLineConfiguration;\n  protected readonly customParameters: Map<IParameterJson, CommandLineParameter> = new Map();\n  protected readonly command: TCommand;\n\n  public constructor(options: IBaseScriptActionOptions<TCommand>) {\n    super(options);\n    this.commandLineConfiguration = options.commandLineConfiguration;\n    this.command = options.command;\n  }\n\n  protected defineScriptParameters(): void {\n    if (!this.commandLineConfiguration) {\n      return;\n    }\n\n    // Find any parameters that are associated with this command\n    for (const parameter of this.command.associatedParameters) {\n      let tsCommandLineParameter: CommandLineParameter | undefined;\n\n      switch (parameter.parameterKind) {\n        case 'flag':\n          tsCommandLineParameter = this.defineFlagParameter({\n            parameterShortName: parameter.shortName,\n            parameterLongName: parameter.longName,\n            description: parameter.description,\n            required: parameter.required\n          });\n          break;\n        case 'choice':\n          tsCommandLineParameter = this.defineChoiceParameter({\n            parameterShortName: parameter.shortName,\n            parameterLongName: parameter.longName,\n            description: parameter.description,\n            required: parameter.required,\n            alternatives: parameter.alternatives.map((x) => x.name),\n            defaultValue: parameter.defaultValue\n          });\n          break;\n        case 'string':\n          tsCommandLineParameter = this.defineStringParameter({\n            parameterLongName: parameter.longName,\n            parameterShortName: parameter.shortName,\n            description: parameter.description,\n            required: parameter.required,\n            argumentName: parameter.argumentName\n          });\n          break;\n        case 'integer':\n          tsCommandLineParameter = this.defineIntegerParameter({\n            parameterLongName: parameter.longName,\n            parameterShortName: parameter.shortName,\n            description: parameter.description,\n            required: parameter.required,\n            argumentName: parameter.argumentName\n          });\n          break;\n        case 'stringList':\n          tsCommandLineParameter = this.defineStringListParameter({\n            parameterLongName: parameter.longName,\n            parameterShortName: parameter.shortName,\n            description: parameter.description,\n            required: parameter.required,\n            argumentName: parameter.argumentName\n          });\n          break;\n        case 'integerList':\n          tsCommandLineParameter = this.defineIntegerListParameter({\n            parameterLongName: parameter.longName,\n            parameterShortName: parameter.shortName,\n            description: parameter.description,\n            required: parameter.required,\n            argumentName: parameter.argumentName\n          });\n          break;\n        case 'choiceList':\n          tsCommandLineParameter = this.defineChoiceListParameter({\n            parameterShortName: parameter.shortName,\n            parameterLongName: parameter.longName,\n            description: parameter.description,\n            required: parameter.required,\n            alternatives: parameter.alternatives.map((x) => x.name)\n          });\n          break;\n        default:\n          throw new Error(\n            `${RushConstants.commandLineFilename} defines a parameter \"${\n              (parameter as ParameterJson).longName\n            }\" using an unsupported parameter kind \"${(parameter as ParameterJson).parameterKind}\"`\n          );\n      }\n\n      this.customParameters.set(parameter, tsCommandLineParameter);\n    }\n  }\n}\n"]}