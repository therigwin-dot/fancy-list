{"version":3,"file":"PhasedScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/PhasedScriptAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { AsyncSeriesHook } from 'tapable';\n\nimport { AlreadyReportedError, InternalError } from '@rushstack/node-core-library';\nimport { type ITerminal, Terminal, Colorize } from '@rushstack/terminal';\nimport type {\n  CommandLineFlagParameter,\n  CommandLineParameter,\n  CommandLineStringParameter\n} from '@rushstack/ts-command-line';\n\nimport type { Subspace } from '../../api/Subspace';\nimport type { IPhasedCommand } from '../../pluginFramework/RushLifeCycle';\nimport {\n  PhasedCommandHooks,\n  type ICreateOperationsContext,\n  type IExecuteOperationsContext\n} from '../../pluginFramework/PhasedCommandHooks';\nimport { SetupChecks } from '../../logic/SetupChecks';\nimport { Stopwatch, StopwatchState } from '../../utilities/Stopwatch';\nimport { BaseScriptAction, type IBaseScriptActionOptions } from './BaseScriptAction';\nimport {\n  type IOperationExecutionManagerOptions,\n  OperationExecutionManager\n} from '../../logic/operations/OperationExecutionManager';\nimport { RushConstants } from '../../logic/RushConstants';\nimport { EnvironmentVariableNames } from '../../api/EnvironmentConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\nimport { SelectionParameterSet } from '../parsing/SelectionParameterSet';\nimport type { IPhase, IPhasedCommandConfig } from '../../api/CommandLineConfiguration';\nimport type { Operation } from '../../logic/operations/Operation';\nimport type { OperationExecutionRecord } from '../../logic/operations/OperationExecutionRecord';\nimport { PhasedOperationPlugin } from '../../logic/operations/PhasedOperationPlugin';\nimport { ShellOperationRunnerPlugin } from '../../logic/operations/ShellOperationRunnerPlugin';\nimport { Event } from '../../api/EventHooks';\nimport { ProjectChangeAnalyzer } from '../../logic/ProjectChangeAnalyzer';\nimport { OperationStatus } from '../../logic/operations/OperationStatus';\nimport type {\n  IExecutionResult,\n  IOperationExecutionResult\n} from '../../logic/operations/IOperationExecutionResult';\nimport { OperationResultSummarizerPlugin } from '../../logic/operations/OperationResultSummarizerPlugin';\nimport type { ITelemetryData, ITelemetryOperationResult } from '../../logic/Telemetry';\nimport { parseParallelism } from '../parsing/ParseParallelism';\nimport { CobuildConfiguration } from '../../api/CobuildConfiguration';\nimport { CacheableOperationPlugin } from '../../logic/operations/CacheableOperationPlugin';\nimport type { IInputsSnapshot, GetInputsSnapshotAsyncFn } from '../../logic/incremental/InputsSnapshot';\nimport { RushProjectConfiguration } from '../../api/RushProjectConfiguration';\nimport { LegacySkipPlugin } from '../../logic/operations/LegacySkipPlugin';\nimport { ValidateOperationsPlugin } from '../../logic/operations/ValidateOperationsPlugin';\nimport { ShardedPhasedOperationPlugin } from '../../logic/operations/ShardedPhaseOperationPlugin';\nimport type { ProjectWatcher } from '../../logic/ProjectWatcher';\nimport { FlagFile } from '../../api/FlagFile';\nimport { WeightedOperationPlugin } from '../../logic/operations/WeightedOperationPlugin';\nimport { getVariantAsync, VARIANT_PARAMETER } from '../../api/Variants';\nimport { Selection } from '../../logic/Selection';\nimport { NodeDiagnosticDirPlugin } from '../../logic/operations/NodeDiagnosticDirPlugin';\n\n/**\n * Constructor parameters for PhasedScriptAction.\n */\nexport interface IPhasedScriptActionOptions extends IBaseScriptActionOptions<IPhasedCommandConfig> {\n  enableParallelism: boolean;\n  incremental: boolean;\n  disableBuildCache: boolean;\n\n  originalPhases: Set<IPhase>;\n  initialPhases: Set<IPhase>;\n  watchPhases: Set<IPhase>;\n  phases: Map<string, IPhase>;\n\n  alwaysWatch: boolean;\n  alwaysInstall: boolean | undefined;\n\n  watchDebounceMs: number | undefined;\n}\n\ninterface IInitialRunPhasesOptions {\n  executionManagerOptions: Omit<IOperationExecutionManagerOptions, 'beforeExecuteOperations'>;\n  initialCreateOperationsContext: ICreateOperationsContext;\n  stopwatch: Stopwatch;\n  terminal: ITerminal;\n}\n\ninterface IRunPhasesOptions extends IInitialRunPhasesOptions {\n  getInputsSnapshotAsync: GetInputsSnapshotAsyncFn | undefined;\n  initialSnapshot: IInputsSnapshot | undefined;\n  executionManagerOptions: IOperationExecutionManagerOptions;\n}\n\ninterface IExecutionOperationsOptions {\n  executeOperationsContext: IExecuteOperationsContext;\n  executionManagerOptions: IOperationExecutionManagerOptions;\n  ignoreHooks: boolean;\n  operations: Set<Operation>;\n  stopwatch: Stopwatch;\n  terminal: ITerminal;\n}\n\ninterface IPhasedCommandTelemetry {\n  [key: string]: string | number | boolean;\n  isInitial: boolean;\n  isWatch: boolean;\n\n  countAll: number;\n  countSuccess: number;\n  countSuccessWithWarnings: number;\n  countFailure: number;\n  countBlocked: number;\n  countFromCache: number;\n  countSkipped: number;\n  countNoOp: number;\n}\n\n/**\n * This class implements phased commands which are run individually for each project in the repo,\n * possibly in parallel, and which may define multiple phases.\n *\n * @remarks\n * Phased commands can be defined via common/config/command-line.json.  Rush's predefined \"build\"\n * and \"rebuild\" commands are also modeled as phased commands with a single phase that invokes the npm\n * \"build\" script for each project.\n */\nexport class PhasedScriptAction extends BaseScriptAction<IPhasedCommandConfig> {\n  /**\n   * @internal\n   */\n  public _runsBeforeInstall: boolean | undefined;\n  public readonly hooks: PhasedCommandHooks;\n\n  private readonly _enableParallelism: boolean;\n  private readonly _isIncrementalBuildAllowed: boolean;\n  private readonly _disableBuildCache: boolean;\n  private readonly _originalPhases: ReadonlySet<IPhase>;\n  private readonly _initialPhases: ReadonlySet<IPhase>;\n  private readonly _watchPhases: ReadonlySet<IPhase>;\n  private readonly _watchDebounceMs: number;\n  private readonly _alwaysWatch: boolean;\n  private readonly _alwaysInstall: boolean | undefined;\n  private readonly _knownPhases: ReadonlyMap<string, IPhase>;\n  private readonly _terminal: ITerminal;\n\n  private readonly _changedProjectsOnly: CommandLineFlagParameter | undefined;\n  private readonly _selectionParameters: SelectionParameterSet;\n  private readonly _verboseParameter: CommandLineFlagParameter;\n  private readonly _parallelismParameter: CommandLineStringParameter | undefined;\n  private readonly _ignoreHooksParameter: CommandLineFlagParameter;\n  private readonly _watchParameter: CommandLineFlagParameter | undefined;\n  private readonly _timelineParameter: CommandLineFlagParameter | undefined;\n  private readonly _cobuildPlanParameter: CommandLineFlagParameter | undefined;\n  private readonly _installParameter: CommandLineFlagParameter | undefined;\n  private readonly _variantParameter: CommandLineStringParameter | undefined;\n  private readonly _noIPCParameter: CommandLineFlagParameter | undefined;\n  private readonly _nodeDiagnosticDirParameter: CommandLineStringParameter;\n  private readonly _includePhaseDeps: CommandLineFlagParameter | undefined;\n\n  public constructor(options: IPhasedScriptActionOptions) {\n    super(options);\n    this._enableParallelism = options.enableParallelism;\n    this._isIncrementalBuildAllowed = options.incremental;\n    this._disableBuildCache = options.disableBuildCache;\n    this._originalPhases = options.originalPhases;\n    this._initialPhases = options.initialPhases;\n    this._watchPhases = options.watchPhases;\n    this._watchDebounceMs = options.watchDebounceMs ?? RushConstants.defaultWatchDebounceMs;\n    this._alwaysWatch = options.alwaysWatch;\n    this._alwaysInstall = options.alwaysInstall;\n    this._runsBeforeInstall = false;\n    this._knownPhases = options.phases;\n\n    this.hooks = new PhasedCommandHooks();\n\n    const terminal: Terminal = new Terminal(this.rushSession.terminalProvider);\n    this._terminal = terminal;\n\n    // Generates the default operation graph\n    new PhasedOperationPlugin().apply(this.hooks);\n    // Splices in sharded phases to the operation graph.\n    new ShardedPhasedOperationPlugin().apply(this.hooks);\n    // Applies the Shell Operation Runner to selected operations\n    new ShellOperationRunnerPlugin().apply(this.hooks);\n\n    new WeightedOperationPlugin().apply(this.hooks);\n    new ValidateOperationsPlugin(terminal).apply(this.hooks);\n\n    if (this._enableParallelism) {\n      this._parallelismParameter = this.defineStringParameter({\n        parameterLongName: '--parallelism',\n        parameterShortName: '-p',\n        argumentName: 'COUNT',\n        environmentVariable: EnvironmentVariableNames.RUSH_PARALLELISM,\n        description:\n          'Specifies the maximum number of concurrent processes to launch during a build.' +\n          ' The COUNT should be a positive integer, a percentage value (eg. \"50%%\") or the word \"max\"' +\n          ' to specify a count that is equal to the number of CPU cores. If this parameter is omitted,' +\n          ' then the default value depends on the operating system and number of CPU cores.'\n      });\n    }\n    this._timelineParameter = this.defineFlagParameter({\n      parameterLongName: '--timeline',\n      description:\n        'After the build is complete, print additional statistics and CPU usage information,' +\n        ' including an ASCII chart of the start and stop times for each operation.'\n    });\n    this._cobuildPlanParameter = this.defineFlagParameter({\n      parameterLongName: '--log-cobuild-plan',\n      description:\n        '(EXPERIMENTAL) Before the build starts, log information about the cobuild state. This will include information about ' +\n        'clusters and the projects that are part of each cluster.'\n    });\n\n    this._selectionParameters = new SelectionParameterSet(this.rushConfiguration, this, {\n      gitOptions: {\n        // Include lockfile processing since this expands the selection, and we need to select\n        // at least the same projects selected with the same query to \"rush build\"\n        includeExternalDependencies: true,\n        // Enable filtering to reduce evaluation cost\n        enableFiltering: true\n      },\n      includeSubspaceSelector: false\n    });\n\n    this._verboseParameter = this.defineFlagParameter({\n      parameterLongName: '--verbose',\n      parameterShortName: '-v',\n      description: 'Display the logs during the build, rather than just displaying the build status summary'\n    });\n\n    this._includePhaseDeps = this.defineFlagParameter({\n      parameterLongName: '--include-phase-deps',\n      description:\n        'If the selected projects are \"unsafe\" (missing some dependencies), add the minimal set of phase dependencies. For example, ' +\n        `\"--from A\" normally might include the \"_phase:test\" phase for A's dependencies, even though changes to A can't break those tests. ` +\n        `Using \"--impacted-by A --include-phase-deps\" avoids that work by performing \"_phase:test\" only for downstream projects.`\n    });\n\n    if (this._isIncrementalBuildAllowed) {\n      this._changedProjectsOnly = this.defineFlagParameter({\n        parameterLongName: '--changed-projects-only',\n        parameterShortName: '-c',\n        description:\n          'Normally the incremental build logic will rebuild changed projects as well as' +\n          ' any projects that directly or indirectly depend on a changed project. Specify \"--changed-projects-only\"' +\n          ' to ignore dependent projects, only rebuilding those projects whose files were changed.' +\n          ' Note that this parameter is \"unsafe\"; it is up to the developer to ensure that the ignored projects' +\n          ' are okay to ignore.'\n      });\n    }\n\n    this._ignoreHooksParameter = this.defineFlagParameter({\n      parameterLongName: '--ignore-hooks',\n      description:\n        `Skips execution of the \"eventHooks\" scripts defined in ${RushConstants.rushJsonFilename}. ` +\n        'Make sure you know what you are skipping.'\n    });\n\n    if (this._watchPhases.size > 0 && !this._alwaysWatch) {\n      // Only define the parameter if it has an effect.\n      this._watchParameter = this.defineFlagParameter({\n        parameterLongName: '--watch',\n        description: `Starts a file watcher after initial execution finishes. Will run the following phases on affected projects: ${Array.from(\n          this._watchPhases,\n          (phase: IPhase) => phase.name\n        ).join(', ')}`\n      });\n    }\n\n    // If `this._alwaysInstall === undefined`, Rush does not define the parameter\n    // but a repository may still define a custom parameter with the same name.\n    if (this._alwaysInstall === false) {\n      this._installParameter = this.defineFlagParameter({\n        parameterLongName: '--install',\n        description:\n          'Normally a phased command expects \"rush install\" to have been manually run first. If this flag is specified, ' +\n          'Rush will automatically perform an install before processing the current command.'\n      });\n    }\n\n    if (this._alwaysInstall !== undefined) {\n      this._variantParameter = this.defineStringParameter(VARIANT_PARAMETER);\n    }\n\n    if (\n      this._watchPhases.size > 0 &&\n      this.rushConfiguration.experimentsConfiguration.configuration.useIPCScriptsInWatchMode\n    ) {\n      this._noIPCParameter = this.defineFlagParameter({\n        parameterLongName: '--no-ipc',\n        description:\n          'Disables the IPC feature for the current command (if applicable to selected operations). Operations will not look for a \":ipc\" suffixed script.' +\n          'This feature only applies in watch mode and is enabled by default.'\n      });\n    }\n\n    this._nodeDiagnosticDirParameter = this.defineStringParameter({\n      parameterLongName: '--node-diagnostic-dir',\n      argumentName: 'DIRECTORY',\n      description:\n        'Specifies the directory where Node.js diagnostic reports will be written. ' +\n        'This directory will contain a subdirectory for each project and phase.'\n    });\n\n    this.defineScriptParameters();\n\n    for (const [{ associatedPhases }, tsCommandLineParameter] of this.customParameters) {\n      if (associatedPhases) {\n        for (const phaseName of associatedPhases) {\n          const phase: IPhase | undefined = this._knownPhases.get(phaseName);\n          if (!phase) {\n            throw new InternalError(`Could not find a phase matching ${phaseName}.`);\n          }\n          phase.associatedParameters.add(tsCommandLineParameter);\n        }\n      }\n    }\n  }\n\n  public async runAsync(): Promise<void> {\n    if (this._alwaysInstall || this._installParameter?.value) {\n      const { doBasicInstallAsync } = await import(\n        /* webpackChunkName: 'doBasicInstallAsync' */\n        '../../logic/installManager/doBasicInstallAsync'\n      );\n\n      const variant: string | undefined = await getVariantAsync(\n        this._variantParameter,\n        this.rushConfiguration,\n        true\n      );\n      await doBasicInstallAsync({\n        terminal: this._terminal,\n        rushConfiguration: this.rushConfiguration,\n        rushGlobalFolder: this.rushGlobalFolder,\n        isDebug: this.parser.isDebug,\n        variant,\n        beforeInstallAsync: (subspace: Subspace) =>\n          this.rushSession.hooks.beforeInstall.promise(this, subspace, variant),\n        afterInstallAsync: (subspace: Subspace) =>\n          this.rushSession.hooks.afterInstall.promise(this, subspace, variant),\n        // Eventually we may want to allow a subspace to be selected here\n        subspace: this.rushConfiguration.defaultSubspace\n      });\n    }\n\n    if (!this._runsBeforeInstall) {\n      // TODO: Replace with last-install.flag when \"rush link\" and \"rush unlink\" are removed\n      const lastLinkFlag: FlagFile = new FlagFile(\n        this.rushConfiguration.defaultSubspace.getSubspaceTempFolderPath(),\n        RushConstants.lastLinkFlagFilename,\n        {}\n      );\n      // Only check for a valid link flag when subspaces is not enabled\n      if (!(await lastLinkFlag.isValidAsync()) && !this.rushConfiguration.subspacesFeatureEnabled) {\n        const useWorkspaces: boolean =\n          this.rushConfiguration.pnpmOptions && this.rushConfiguration.pnpmOptions.useWorkspaces;\n        if (useWorkspaces) {\n          throw new Error('Link flag invalid.\\nDid you run \"rush install\" or \"rush update\"?');\n        } else {\n          throw new Error('Link flag invalid.\\nDid you run \"rush link\"?');\n        }\n      }\n    }\n\n    this._doBeforeTask();\n\n    // if this is parallelizable, then use the value from the flag (undefined or a number),\n    // if parallelism is not enabled, then restrict to 1 core\n    const parallelism: number = this._enableParallelism\n      ? parseParallelism(this._parallelismParameter?.value)\n      : 1;\n\n    const terminal: ITerminal = this._terminal;\n\n    const stopwatch: Stopwatch = Stopwatch.start();\n\n    const showTimeline: boolean = this._timelineParameter ? this._timelineParameter.value : false;\n    if (showTimeline) {\n      const { ConsoleTimelinePlugin } = await import(\n        /* webpackChunkName: 'ConsoleTimelinePlugin' */\n        '../../logic/operations/ConsoleTimelinePlugin'\n      );\n      new ConsoleTimelinePlugin(terminal).apply(this.hooks);\n    }\n\n    const includePhaseDeps: boolean = this._includePhaseDeps?.value ?? false;\n\n    const diagnosticDir: string | undefined = this._nodeDiagnosticDirParameter.value;\n    if (diagnosticDir) {\n      new NodeDiagnosticDirPlugin({\n        diagnosticDir\n      }).apply(this.hooks);\n    }\n\n    // Enable the standard summary\n    new OperationResultSummarizerPlugin(terminal).apply(this.hooks);\n\n    const { hooks: sessionHooks } = this.rushSession;\n    if (sessionHooks.runAnyPhasedCommand.isUsed()) {\n      // Avoid the cost of compiling the hook if it wasn't tapped.\n      await sessionHooks.runAnyPhasedCommand.promise(this);\n    }\n\n    const hookForAction: AsyncSeriesHook<IPhasedCommand> | undefined = sessionHooks.runPhasedCommand.get(\n      this.actionName\n    );\n\n    if (hookForAction) {\n      // Run the more specific hook for a command with this name after the general hook\n      await hookForAction.promise(this);\n    }\n\n    const isQuietMode: boolean = !this._verboseParameter.value;\n\n    const changedProjectsOnly: boolean = !!this._changedProjectsOnly?.value;\n\n    let buildCacheConfiguration: BuildCacheConfiguration | undefined;\n    let cobuildConfiguration: CobuildConfiguration | undefined;\n    if (!this._disableBuildCache) {\n      buildCacheConfiguration = await BuildCacheConfiguration.tryLoadAsync(\n        terminal,\n        this.rushConfiguration,\n        this.rushSession\n      );\n      cobuildConfiguration = await CobuildConfiguration.tryLoadAsync(\n        terminal,\n        this.rushConfiguration,\n        this.rushSession\n      );\n      await cobuildConfiguration?.createLockProviderAsync(terminal);\n    }\n\n    try {\n      const projectSelection: Set<RushConfigurationProject> =\n        await this._selectionParameters.getSelectedProjectsAsync(terminal);\n\n      if (!projectSelection.size) {\n        terminal.writeLine(\n          Colorize.yellow(`The command line selection parameters did not match any projects.`)\n        );\n        return;\n      }\n\n      const isWatch: boolean = this._watchParameter?.value || this._alwaysWatch;\n\n      if (isWatch && this._noIPCParameter?.value === false) {\n        new (\n          await import(\n            /* webpackChunkName: 'IPCOperationRunnerPlugin' */ '../../logic/operations/IPCOperationRunnerPlugin'\n          )\n        ).IPCOperationRunnerPlugin().apply(this.hooks);\n      }\n\n      const customParametersByName: Map<string, CommandLineParameter> = new Map();\n      for (const [configParameter, parserParameter] of this.customParameters) {\n        customParametersByName.set(configParameter.longName, parserParameter);\n      }\n\n      if (buildCacheConfiguration?.buildCacheEnabled) {\n        terminal.writeVerboseLine(`Incremental strategy: cache restoration`);\n        new CacheableOperationPlugin({\n          allowWarningsInSuccessfulBuild:\n            !!this.rushConfiguration.experimentsConfiguration.configuration\n              .buildCacheWithAllowWarningsInSuccessfulBuild,\n          buildCacheConfiguration,\n          cobuildConfiguration,\n          terminal\n        }).apply(this.hooks);\n      } else if (!this._disableBuildCache) {\n        terminal.writeVerboseLine(`Incremental strategy: output preservation`);\n        // Explicitly disabling the build cache also disables legacy skip detection.\n        new LegacySkipPlugin({\n          allowWarningsInSuccessfulBuild:\n            this.rushConfiguration.experimentsConfiguration.configuration\n              .buildSkipWithAllowWarningsInSuccessfulBuild,\n          terminal,\n          changedProjectsOnly,\n          isIncrementalBuildAllowed: this._isIncrementalBuildAllowed\n        }).apply(this.hooks);\n      } else {\n        terminal.writeVerboseLine(`Incremental strategy: none (full rebuild)`);\n      }\n\n      const showBuildPlan: boolean = this._cobuildPlanParameter?.value ?? false;\n\n      if (showBuildPlan) {\n        if (!buildCacheConfiguration?.buildCacheEnabled) {\n          throw new Error('You must have build cache enabled to use this option.');\n        }\n        const { BuildPlanPlugin } = await import('../../logic/operations/BuildPlanPlugin');\n        new BuildPlanPlugin(terminal).apply(this.hooks);\n      }\n\n      const { configuration: experiments } = this.rushConfiguration.experimentsConfiguration;\n      if (this.rushConfiguration?.isPnpm && experiments?.usePnpmSyncForInjectedDependencies) {\n        const { PnpmSyncCopyOperationPlugin } = await import(\n          '../../logic/operations/PnpmSyncCopyOperationPlugin'\n        );\n        new PnpmSyncCopyOperationPlugin(terminal).apply(this.hooks);\n      }\n\n      const relevantProjects: Set<RushConfigurationProject> =\n        Selection.expandAllDependencies(projectSelection);\n\n      const projectConfigurations: ReadonlyMap<RushConfigurationProject, RushProjectConfiguration> = this\n        ._runsBeforeInstall\n        ? new Map()\n        : await RushProjectConfiguration.tryLoadForProjectsAsync(relevantProjects, terminal);\n\n      const initialCreateOperationsContext: ICreateOperationsContext = {\n        buildCacheConfiguration,\n        cobuildConfiguration,\n        customParameters: customParametersByName,\n        isIncrementalBuildAllowed: this._isIncrementalBuildAllowed,\n        isInitial: true,\n        isWatch,\n        rushConfiguration: this.rushConfiguration,\n        phaseOriginal: new Set(this._originalPhases),\n        phaseSelection: new Set(this._initialPhases),\n        includePhaseDeps,\n        projectSelection,\n        projectConfigurations,\n        projectsInUnknownState: projectSelection\n      };\n\n      const executionManagerOptions: Omit<IOperationExecutionManagerOptions, 'beforeExecuteOperations'> = {\n        quietMode: isQuietMode,\n        debugMode: this.parser.isDebug,\n        parallelism,\n        changedProjectsOnly,\n        beforeExecuteOperationAsync: async (record: OperationExecutionRecord) => {\n          return await this.hooks.beforeExecuteOperation.promise(record);\n        },\n        afterExecuteOperationAsync: async (record: OperationExecutionRecord) => {\n          await this.hooks.afterExecuteOperation.promise(record);\n        },\n        createEnvironmentForOperation: this.hooks.createEnvironmentForOperation.isUsed()\n          ? (record: OperationExecutionRecord) => {\n              return this.hooks.createEnvironmentForOperation.call({ ...process.env }, record);\n            }\n          : undefined,\n        onOperationStatusChangedAsync: (record: OperationExecutionRecord) => {\n          this.hooks.onOperationStatusChanged.call(record);\n        }\n      };\n\n      const initialInternalOptions: IInitialRunPhasesOptions = {\n        initialCreateOperationsContext,\n        executionManagerOptions,\n        stopwatch,\n        terminal\n      };\n\n      const internalOptions: IRunPhasesOptions = await this._runInitialPhasesAsync(initialInternalOptions);\n\n      if (isWatch) {\n        if (buildCacheConfiguration) {\n          // Cache writes are not supported during watch mode, only reads.\n          buildCacheConfiguration.cacheWriteEnabled = false;\n        }\n\n        await this._runWatchPhasesAsync(internalOptions);\n      }\n    } finally {\n      await cobuildConfiguration?.destroyLockProviderAsync();\n    }\n  }\n\n  private async _runInitialPhasesAsync(options: IInitialRunPhasesOptions): Promise<IRunPhasesOptions> {\n    const {\n      initialCreateOperationsContext,\n      executionManagerOptions: partialExecutionManagerOptions,\n      stopwatch,\n      terminal\n    } = options;\n\n    const { projectConfigurations } = initialCreateOperationsContext;\n    const { projectSelection } = initialCreateOperationsContext;\n\n    const operations: Set<Operation> = await this.hooks.createOperations.promise(\n      new Set(),\n      initialCreateOperationsContext\n    );\n\n    terminal.write('Analyzing repo state... ');\n    const repoStateStopwatch: Stopwatch = new Stopwatch();\n    repoStateStopwatch.start();\n\n    const analyzer: ProjectChangeAnalyzer = new ProjectChangeAnalyzer(this.rushConfiguration);\n    const getInputsSnapshotAsync: GetInputsSnapshotAsyncFn | undefined =\n      await analyzer._tryGetSnapshotProviderAsync(\n        projectConfigurations,\n        terminal,\n        // We need to include all dependencies, otherwise build cache id calculation will be incorrect\n        Selection.expandAllDependencies(projectSelection)\n      );\n    const initialSnapshot: IInputsSnapshot | undefined = await getInputsSnapshotAsync?.();\n\n    repoStateStopwatch.stop();\n    terminal.writeLine(`DONE (${repoStateStopwatch.toString()})`);\n    terminal.writeLine();\n\n    const initialExecuteOperationsContext: IExecuteOperationsContext = {\n      ...initialCreateOperationsContext,\n      inputsSnapshot: initialSnapshot\n    };\n\n    const executionManagerOptions: IOperationExecutionManagerOptions = {\n      ...partialExecutionManagerOptions,\n      beforeExecuteOperationsAsync: async (records: Map<Operation, OperationExecutionRecord>) => {\n        await this.hooks.beforeExecuteOperations.promise(records, initialExecuteOperationsContext);\n      }\n    };\n\n    const initialOptions: IExecutionOperationsOptions = {\n      executeOperationsContext: initialExecuteOperationsContext,\n      ignoreHooks: false,\n      operations,\n      stopwatch,\n      executionManagerOptions,\n      terminal\n    };\n\n    await this._executeOperationsAsync(initialOptions);\n\n    return {\n      ...options,\n      executionManagerOptions,\n      getInputsSnapshotAsync,\n      initialSnapshot\n    };\n  }\n\n  private _registerWatchModeInterface(projectWatcher: ProjectWatcher): void {\n    const toggleWatcherKey: 'w' = 'w';\n    const buildOnceKey: 'b' = 'b';\n    const invalidateKey: 'i' = 'i';\n    const shutdownKey: 'x' = 'x';\n\n    const terminal: ITerminal = this._terminal;\n\n    projectWatcher.setPromptGenerator((isPaused: boolean) => {\n      const promptLines: string[] = [\n        `  Press <${toggleWatcherKey}> to ${isPaused ? 'resume' : 'pause'}.`,\n        `  Press <${invalidateKey}> to invalidate all projects.`\n      ];\n      if (isPaused) {\n        promptLines.push(`  Press <${buildOnceKey}> to build once.`);\n      }\n      if (this._noIPCParameter?.value === false) {\n        promptLines.push(`  Press <${shutdownKey}> to reset child processes.`);\n      }\n      return promptLines;\n    });\n\n    process.stdin.setRawMode(true);\n    process.stdin.resume();\n    process.stdin.setEncoding('utf8');\n    process.stdin.on('data', (key: string) => {\n      switch (key) {\n        case toggleWatcherKey:\n          if (projectWatcher.isPaused) {\n            projectWatcher.resume();\n          } else {\n            projectWatcher.pause();\n          }\n          break;\n        case buildOnceKey:\n          if (projectWatcher.isPaused) {\n            projectWatcher.clearStatus();\n            terminal.writeLine(`Building once...`);\n            projectWatcher.resume();\n            projectWatcher.pause();\n          }\n          break;\n        case invalidateKey:\n          projectWatcher.clearStatus();\n          terminal.writeLine(`Invalidating all operations...`);\n          projectWatcher.invalidateAll('manual trigger');\n          if (!projectWatcher.isPaused) {\n            projectWatcher.resume();\n          }\n          break;\n        case shutdownKey:\n          projectWatcher.clearStatus();\n          terminal.writeLine(`Shutting down long-lived child processes...`);\n          // TODO: Inject this promise into the execution queue somewhere so that it gets waited on between runs\n          void this.hooks.shutdownAsync.promise();\n          break;\n        case '\\u0003':\n          process.kill(process.pid, 'SIGINT');\n          break;\n      }\n    });\n  }\n\n  /**\n   * Runs the command in watch mode. Fundamentally is a simple loop:\n   * 1) Wait for a change to one or more projects in the selection\n   * 2) Invoke the command on the changed projects, and, if applicable, impacted projects\n   *    Uses the same algorithm as --impacted-by\n   * 3) Goto (1)\n   */\n  private async _runWatchPhasesAsync(options: IRunPhasesOptions): Promise<void> {\n    const {\n      getInputsSnapshotAsync,\n      initialSnapshot,\n      initialCreateOperationsContext,\n      executionManagerOptions,\n      stopwatch,\n      terminal\n    } = options;\n\n    const phaseOriginal: Set<IPhase> = new Set(this._watchPhases);\n    const phaseSelection: Set<IPhase> = new Set(this._watchPhases);\n\n    const { projectSelection: projectsToWatch } = initialCreateOperationsContext;\n\n    if (!getInputsSnapshotAsync || !initialSnapshot) {\n      terminal.writeErrorLine(\n        `Cannot watch for changes if the Rush repo is not in a Git repository, exiting.`\n      );\n      throw new AlreadyReportedError();\n    }\n\n    // Use async import so that we don't pay the cost for sync builds\n    const { ProjectWatcher } = await import(\n      /* webpackChunkName: 'ProjectWatcher' */\n      '../../logic/ProjectWatcher'\n    );\n\n    const projectWatcher: typeof ProjectWatcher.prototype = new ProjectWatcher({\n      getInputsSnapshotAsync,\n      initialSnapshot,\n      debounceMs: this._watchDebounceMs,\n      rushConfiguration: this.rushConfiguration,\n      projectsToWatch,\n      terminal\n    });\n\n    // Ensure process.stdin allows interactivity before using TTY-only APIs\n    if (process.stdin.isTTY) {\n      this._registerWatchModeInterface(projectWatcher);\n    }\n\n    const onWaitingForChanges = (): void => {\n      // Allow plugins to display their own messages when waiting for changes.\n      this.hooks.waitingForChanges.call();\n\n      // Report so that the developer can always see that it is in watch mode as the latest console line.\n      terminal.writeLine(\n        `Watching for changes to ${projectsToWatch.size} ${\n          projectsToWatch.size === 1 ? 'project' : 'projects'\n        }. Press Ctrl+C to exit.`\n      );\n    };\n\n    function invalidateOperation(operation: Operation, reason: string): void {\n      const { associatedProject } = operation;\n      if (associatedProject) {\n        // Since ProjectWatcher only tracks entire projects, widen the operation to its project\n        // Revisit when migrating to @rushstack/operation-graph and we have a long-lived operation graph\n        projectWatcher.invalidateProject(associatedProject, `${operation.name!} (${reason})`);\n      }\n    }\n\n    // Loop until Ctrl+C\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // On the initial invocation, this promise will return immediately with the full set of projects\n      const { changedProjects, inputsSnapshot: state } =\n        await projectWatcher.waitForChangeAsync(onWaitingForChanges);\n\n      if (stopwatch.state === StopwatchState.Stopped) {\n        // Clear and reset the stopwatch so that we only report time from a single execution at a time\n        stopwatch.reset();\n        stopwatch.start();\n      }\n\n      terminal.writeLine(\n        `Detected changes in ${changedProjects.size} project${changedProjects.size === 1 ? '' : 's'}:`\n      );\n      const names: string[] = [...changedProjects].map((x) => x.packageName).sort();\n      for (const name of names) {\n        terminal.writeLine(`    ${Colorize.cyan(name)}`);\n      }\n\n      // Account for consumer relationships\n      const executeOperationsContext: IExecuteOperationsContext = {\n        ...initialCreateOperationsContext,\n        isInitial: false,\n        inputsSnapshot: state,\n        projectsInUnknownState: changedProjects,\n        phaseOriginal,\n        phaseSelection,\n        invalidateOperation\n      };\n\n      const operations: Set<Operation> = await this.hooks.createOperations.promise(\n        new Set(),\n        executeOperationsContext\n      );\n\n      const executeOptions: IExecutionOperationsOptions = {\n        executeOperationsContext,\n        // For now, don't run pre-build or post-build in watch mode\n        ignoreHooks: true,\n        operations,\n        stopwatch,\n        executionManagerOptions: {\n          ...executionManagerOptions,\n          beforeExecuteOperationsAsync: async (records: Map<Operation, OperationExecutionRecord>) => {\n            await this.hooks.beforeExecuteOperations.promise(records, executeOperationsContext);\n          }\n        },\n        terminal\n      };\n\n      try {\n        // Delegate the the underlying command, for only the projects that need reprocessing\n        await this._executeOperationsAsync(executeOptions);\n      } catch (err) {\n        // In watch mode, we want to rebuild even if the original build failed.\n        if (!(err instanceof AlreadyReportedError)) {\n          throw err;\n        }\n      }\n    }\n  }\n\n  /**\n   * Runs a set of operations and reports the results.\n   */\n  private async _executeOperationsAsync(options: IExecutionOperationsOptions): Promise<void> {\n    const { executionManagerOptions, ignoreHooks, operations, stopwatch, terminal } = options;\n\n    const executionManager: OperationExecutionManager = new OperationExecutionManager(\n      operations,\n      executionManagerOptions\n    );\n\n    const { isInitial, isWatch, cobuildConfiguration } = options.executeOperationsContext;\n\n    let success: boolean = false;\n    let result: IExecutionResult | undefined;\n\n    try {\n      result = await executionManager.executeAsync();\n      success = result.status === OperationStatus.Success;\n\n      await this.hooks.afterExecuteOperations.promise(result, options.executeOperationsContext);\n\n      stopwatch.stop();\n\n      const message: string = `rush ${this.actionName} (${stopwatch.toString()})`;\n      if (result.status === OperationStatus.Success) {\n        terminal.writeLine(Colorize.green(message));\n      } else {\n        terminal.writeLine(message);\n      }\n    } catch (error) {\n      success = false;\n      stopwatch.stop();\n\n      if (error instanceof AlreadyReportedError) {\n        terminal.writeLine(`rush ${this.actionName} (${stopwatch.toString()})`);\n      } else {\n        if (error && (error as Error).message) {\n          if (this.parser.isDebug) {\n            terminal.writeErrorLine('Error: ' + (error as Error).stack);\n          } else {\n            terminal.writeErrorLine('Error: ' + (error as Error).message);\n          }\n        }\n\n        terminal.writeErrorLine(Colorize.red(`rush ${this.actionName} - Errors! (${stopwatch.toString()})`));\n      }\n    }\n\n    if (!ignoreHooks) {\n      this._doAfterTask();\n    }\n\n    if (this.parser.telemetry) {\n      const jsonOperationResults: Record<string, ITelemetryOperationResult> = {};\n\n      const extraData: IPhasedCommandTelemetry = {\n        // Fields preserved across the command invocation\n        ...this._selectionParameters.getTelemetry(),\n        ...this.getParameterStringMap(),\n        isWatch,\n        // Fields specific to the current operation set\n        isInitial,\n\n        countAll: 0,\n        countSuccess: 0,\n        countSuccessWithWarnings: 0,\n        countFailure: 0,\n        countBlocked: 0,\n        countFromCache: 0,\n        countSkipped: 0,\n        countNoOp: 0\n      };\n\n      if (result) {\n        const { operationResults } = result;\n\n        const nonSilentDependenciesByOperation: Map<Operation, Set<string>> = new Map();\n        function getNonSilentDependencies(operation: Operation): ReadonlySet<string> {\n          let realDependencies: Set<string> | undefined = nonSilentDependenciesByOperation.get(operation);\n          if (!realDependencies) {\n            realDependencies = new Set();\n            nonSilentDependenciesByOperation.set(operation, realDependencies);\n            for (const dependency of operation.dependencies) {\n              const dependencyRecord: IOperationExecutionResult | undefined =\n                operationResults.get(dependency);\n              if (dependencyRecord?.silent) {\n                for (const deepDependency of getNonSilentDependencies(dependency)) {\n                  realDependencies.add(deepDependency);\n                }\n              } else {\n                realDependencies.add(dependency.name!);\n              }\n            }\n          }\n          return realDependencies;\n        }\n\n        for (const [operation, operationResult] of operationResults) {\n          if (operationResult.silent) {\n            // Architectural operation. Ignore.\n            continue;\n          }\n\n          const { startTime, endTime } = operationResult.stopwatch;\n          jsonOperationResults[operation.name!] = {\n            startTimestampMs: startTime,\n            endTimestampMs: endTime,\n            nonCachedDurationMs: operationResult.nonCachedDurationMs,\n            wasExecutedOnThisMachine:\n              !operationResult.cobuildRunnerId ||\n              operationResult.cobuildRunnerId === cobuildConfiguration?.cobuildRunnerId,\n            result: operationResult.status,\n            dependencies: Array.from(getNonSilentDependencies(operation)).sort()\n          };\n\n          extraData.countAll++;\n          switch (operationResult.status) {\n            case OperationStatus.Success:\n              extraData.countSuccess++;\n              break;\n            case OperationStatus.SuccessWithWarning:\n              extraData.countSuccessWithWarnings++;\n              break;\n            case OperationStatus.Failure:\n              extraData.countFailure++;\n              break;\n            case OperationStatus.Blocked:\n              extraData.countBlocked++;\n              break;\n            case OperationStatus.FromCache:\n              extraData.countFromCache++;\n              break;\n            case OperationStatus.Skipped:\n              extraData.countSkipped++;\n              break;\n            case OperationStatus.NoOp:\n              extraData.countNoOp++;\n              break;\n            default:\n              // Do nothing.\n              break;\n          }\n        }\n      }\n\n      const logEntry: ITelemetryData = {\n        name: this.actionName,\n        durationInSeconds: stopwatch.duration,\n        result: success ? 'Succeeded' : 'Failed',\n        extraData,\n        operationResults: jsonOperationResults\n      };\n\n      this.hooks.beforeLog.call(logEntry);\n\n      this.parser.telemetry.log(logEntry);\n\n      this.parser.flushTelemetry();\n    }\n\n    if (!success && !isWatch) {\n      throw new AlreadyReportedError();\n    }\n  }\n\n  private _doBeforeTask(): void {\n    if (\n      this.actionName !== RushConstants.buildCommandName &&\n      this.actionName !== RushConstants.rebuildCommandName\n    ) {\n      // Only collects information for built-in commands like build or rebuild.\n      return;\n    }\n\n    SetupChecks.validate(this.rushConfiguration);\n\n    this.eventHooksManager.handle(Event.preRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\n  }\n\n  private _doAfterTask(): void {\n    if (\n      this.actionName !== RushConstants.buildCommandName &&\n      this.actionName !== RushConstants.rebuildCommandName\n    ) {\n      // Only collects information for built-in commands like build or rebuild.\n      return;\n    }\n    this.eventHooksManager.handle(Event.postRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\n  }\n}\n"]}