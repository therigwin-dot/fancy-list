{"version":3,"file":"InitDeployAction.js","sourceRoot":"","sources":["../../../src/cli/actions/InitDeployAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAuE;AAKvE,kDAA+C;AAE/C,qDAAkD;AAGlD,gGAA6F;AAC7F,iEAAiE;AACjE,6DAA0D;AAE1D,MAAM,oBAAoB,GAAW,GAAG,gCAAgB,0CAA0C,CAAC;AAEnG,MAAa,gBAAiB,SAAQ,+BAAc;IAIlD,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,aAAa;YACzB,OAAO,EAAE,uEAAuE;YAChF,aAAa,EACX,uFAAuF;gBACvF,kGAAkG;gBAClG,uGAAuG;YACzG,MAAM;SACP,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC;YACzC,iBAAiB,EAAE,WAAW;YAC9B,kBAAkB,EAAE,IAAI;YACxB,YAAY,EAAE,cAAc;YAC5B,QAAQ,EAAE,IAAI;YACd,WAAW,EACT,8EAA8E;gBAC9E,4DAA4D;SAC/D,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAC1C,iBAAiB,EAAE,YAAY;YAC/B,kBAAkB,EAAE,IAAI;YACxB,YAAY,EAAE,UAAU;YACxB,WAAW,EACT,+FAA+F;gBAC/F,6GAA6G;gBAC7G,yGAAyG;SAC5G,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,QAAQ;QACtB,MAAM,gBAAgB,GAAW,yDAA2B,CAAC,iBAAiB,CAC5E,IAAI,CAAC,SAAS,CAAC,KAAK,EACpB,IAAI,CAAC,iBAAiB,CACvB,CAAC;QAEF,IAAI,8BAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC;YACxC,MAAM,IAAI,KAAK,CACb,mCAAmC;gBACjC,gBAAgB;gBAChB,kEAAkE,CACrE,CAAC;QACJ,CAAC;QAED,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,mBAAQ,CAAC,KAAK,CAAC,0BAA0B,CAAC,GAAG,gBAAgB,CAAC,CAAC;QAE3E,MAAM,gBAAgB,GAAW,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACrD,MAAM,WAAW,GACf,IAAI,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,gBAAgB,CAAC,CAAC;QACtE,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CACb,0CAA0C,6BAAa,CAAC,gBAAgB,MAAM,gBAAgB,GAAG,CAClG,CAAC;QACJ,CAAC;QAED,MAAM,eAAe,GAAW,8BAAU,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;QAC1E,MAAM,eAAe,GAAW,eAAe,CAAC,OAAO,CACrD,4BAA4B,EAC5B,WAAW,CAAC,WAAW,CACxB,CAAC;QAEF,8BAAU,CAAC,SAAS,CAAC,gBAAgB,EAAE,eAAe,EAAE;YACtD,kBAAkB,EAAE,IAAI;YACxB,kBAAkB,EAAE,+BAAW,CAAC,SAAS;SAC1C,CAAC,CAAC;QAEH,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,iFAAiF,CAAC,CAAC;IACjG,CAAC;CACF;AA5ED,4CA4EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, NewlineKind } from '@rushstack/node-core-library';\nimport type {\n  CommandLineStringParameter,\n  IRequiredCommandLineStringParameter\n} from '@rushstack/ts-command-line';\nimport { Colorize } from '@rushstack/terminal';\n\nimport { BaseRushAction } from './BaseRushAction';\nimport type { RushCommandLineParser } from '../RushCommandLineParser';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { DeployScenarioConfiguration } from '../../logic/deploy/DeployScenarioConfiguration';\nimport { assetsFolderPath } from '../../utilities/PathConstants';\nimport { RushConstants } from '../../logic/RushConstants';\n\nconst CONFIG_TEMPLATE_PATH: string = `${assetsFolderPath}/rush-init-deploy/scenario-template.json`;\n\nexport class InitDeployAction extends BaseRushAction {\n  private readonly _project: IRequiredCommandLineStringParameter;\n  private readonly _scenario: CommandLineStringParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'init-deploy',\n      summary: 'Creates a deployment scenario config file for use with \"rush deploy\".',\n      documentation:\n        'Use this command to initialize a new scenario config file for use with \"rush deploy\".' +\n        ' The default filename is common/config/rush/deploy.json. However, if you need to manage multiple' +\n        ' deployments with different settings, you can use use \"--scenario\" to create additional config files.',\n      parser\n    });\n\n    this._project = this.defineStringParameter({\n      parameterLongName: '--project',\n      parameterShortName: '-p',\n      argumentName: 'PROJECT_NAME',\n      required: true,\n      description:\n        'Specifies the name of the main Rush project to be deployed in this scenario.' +\n        ' It will be added to the \"deploymentProjectNames\" setting.'\n    });\n\n    this._scenario = this.defineStringParameter({\n      parameterLongName: '--scenario',\n      parameterShortName: '-s',\n      argumentName: 'SCENARIO',\n      description:\n        'By default, the deployment configuration will be written to \"common/config/rush/deploy.json\".' +\n        ' You can use \"--scenario\" to specify an alternate name. The name must be lowercase and separated by dashes.' +\n        ' For example, if the name is \"web\", then the config file would be \"common/config/rush/deploy-web.json\".'\n    });\n  }\n\n  protected async runAsync(): Promise<void> {\n    const scenarioFilePath: string = DeployScenarioConfiguration.getConfigFilePath(\n      this._scenario.value,\n      this.rushConfiguration\n    );\n\n    if (FileSystem.exists(scenarioFilePath)) {\n      throw new Error(\n        'The target file already exists:\\n' +\n          scenarioFilePath +\n          '\\nIf you intend to replace it, please delete the old file first.'\n      );\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(Colorize.green('Creating scenario file: ') + scenarioFilePath);\n\n    const shortProjectName: string = this._project.value;\n    const rushProject: RushConfigurationProject | undefined =\n      this.rushConfiguration.findProjectByShorthandName(shortProjectName);\n    if (!rushProject) {\n      throw new Error(\n        `The specified project was not found in ${RushConstants.rushJsonFilename}: \"${shortProjectName}\"`\n      );\n    }\n\n    const templateContent: string = FileSystem.readFile(CONFIG_TEMPLATE_PATH);\n    const expandedContent: string = templateContent.replace(\n      '[%PROJECT_NAME_TO_DEPLOY%]',\n      rushProject.packageName\n    );\n\n    FileSystem.writeFile(scenarioFilePath, expandedContent, {\n      ensureFolderExists: true,\n      convertLineEndings: NewlineKind.OsDefault\n    });\n\n    // eslint-disable-next-line no-console\n    console.log('\\nFile successfully written. Please review the file contents before committing.');\n  }\n}\n"]}