{"version":3,"file":"ChangeAction.js","sourceRoot":"","sources":["../../../src/cli/actions/ChangeAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as child_process from 'child_process';\n\nimport type {\n  CommandLineFlagParameter,\n  CommandLineStringParameter,\n  CommandLineChoiceParameter\n} from '@rushstack/ts-command-line';\nimport { FileSystem, AlreadyReportedError } from '@rushstack/node-core-library';\nimport { Terminal, type ITerminal, ConsoleTerminalProvider, Colorize } from '@rushstack/terminal';\nimport { getRepoRoot } from '@rushstack/package-deps-hash';\nimport type * as InquirerType from 'inquirer';\n\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { type IChangeFile, type IChangeInfo, ChangeType } from '../../api/ChangeManagement';\nimport { ChangeFile } from '../../api/ChangeFile';\nimport { BaseRushAction } from './BaseRushAction';\nimport type { RushCommandLineParser } from '../RushCommandLineParser';\nimport { ChangeFiles } from '../../logic/ChangeFiles';\nimport {\n  type VersionPolicy,\n  type IndividualVersionPolicy,\n  type LockStepVersionPolicy,\n  VersionPolicyDefinitionName\n} from '../../api/VersionPolicy';\nimport { ProjectChangeAnalyzer } from '../../logic/ProjectChangeAnalyzer';\nimport { Git } from '../../logic/Git';\nimport { RushConstants } from '../../logic/RushConstants';\nimport { Utilities } from '../../utilities/Utilities';\n\nconst BULK_LONG_NAME: string = '--bulk';\nconst BULK_MESSAGE_LONG_NAME: string = '--message';\nconst BULK_BUMP_TYPE_LONG_NAME: string = '--bump-type';\n\nexport class ChangeAction extends BaseRushAction {\n  private readonly _git: Git;\n  private readonly _terminal: ITerminal;\n  private readonly _verifyParameter: CommandLineFlagParameter;\n  private readonly _noFetchParameter: CommandLineFlagParameter;\n  private readonly _targetBranchParameter: CommandLineStringParameter;\n  private readonly _changeEmailParameter: CommandLineStringParameter;\n  private readonly _bulkChangeParameter: CommandLineFlagParameter;\n  private readonly _bulkChangeMessageParameter: CommandLineStringParameter;\n  private readonly _bulkChangeBumpTypeParameter: CommandLineChoiceParameter;\n  private readonly _overwriteFlagParameter: CommandLineFlagParameter;\n  private readonly _commitChangesFlagParameter: CommandLineFlagParameter;\n  private readonly _commitChangesMessageStringParameter: CommandLineStringParameter;\n\n  private _targetBranchName: string | undefined;\n\n  public constructor(parser: RushCommandLineParser) {\n    const documentation: string = [\n      'Asks a series of questions and then generates a <branchname>-<timestamp>.json file ' +\n        'in the common folder. The `publish` command will consume these files and perform the proper ' +\n        'version bumps. Note these changes will eventually be published in a changelog.md file in each package.',\n      '',\n      'The possible types of changes are: ',\n      '',\n      'MAJOR - these are breaking changes that are not backwards compatible. ' +\n        'Examples are: renaming a public class, adding/removing a non-optional ' +\n        'parameter from a public API, or renaming an variable or function that ' +\n        'is exported.',\n      '',\n      'MINOR - these are changes that are backwards compatible (but not ' +\n        'forwards compatible). Examples are: adding a new public API or adding an ' +\n        'optional parameter to a public API',\n      '',\n      'PATCH - these are changes that are backwards and forwards compatible. ' +\n        'Examples are: Modifying a private API or fixing a bug in the logic ' +\n        'of how an existing API works.',\n      '',\n      \"NONE - these are changes that are backwards and forwards compatible and don't require an immediate release. \" +\n        'Examples are: Modifying dev tooling configuration like eslint.',\n      '',\n      'HOTFIX (EXPERIMENTAL) - these are changes that are hotfixes targeting a ' +\n        'specific older version of the package. When a hotfix change is added, ' +\n        'other changes will not be able to increment the version number. ' +\n        `Enable this feature by setting 'hotfixChangeEnabled' in your ${RushConstants.rushJsonFilename}.`,\n      ''\n    ].join('\\n');\n    super({\n      actionName: 'change',\n      summary:\n        'Records changes made to projects, indicating how the package version number should be bumped ' +\n        'for the next publish.',\n      documentation,\n      safeForSimultaneousRushProcesses: true,\n      parser\n    });\n\n    this._git = new Git(this.rushConfiguration);\n    this._terminal = new Terminal(new ConsoleTerminalProvider({ verboseEnabled: parser.isDebug }));\n\n    this._verifyParameter = this.defineFlagParameter({\n      parameterLongName: '--verify',\n      parameterShortName: '-v',\n      description: 'Verify the change file has been generated and that it is a valid JSON file'\n    });\n\n    this._noFetchParameter = this.defineFlagParameter({\n      parameterLongName: '--no-fetch',\n      description: 'Skips fetching the baseline branch before running \"git diff\" to detect changes.'\n    });\n\n    this._targetBranchParameter = this.defineStringParameter({\n      parameterLongName: '--target-branch',\n      parameterShortName: '-b',\n      argumentName: 'BRANCH',\n      description:\n        'If this parameter is specified, compare the checked out branch with the specified branch to ' +\n        'determine which projects were changed. If this parameter is not specified, the checked out branch ' +\n        'is compared against the \"main\" branch.'\n    });\n\n    this._overwriteFlagParameter = this.defineFlagParameter({\n      parameterLongName: '--overwrite',\n      description:\n        `If a changefile already exists, overwrite without prompting ` +\n        `(or erroring in ${BULK_LONG_NAME} mode).`\n    });\n\n    this._commitChangesFlagParameter = this.defineFlagParameter({\n      parameterLongName: '--commit',\n      parameterShortName: '-c',\n      description: `If this flag is specified generated changefiles will be commited automatically.`\n    });\n\n    this._commitChangesMessageStringParameter = this.defineStringParameter({\n      parameterLongName: '--commit-message',\n      argumentName: 'COMMIT_MESSAGE',\n      description: `If this parameter is specified generated changefiles will be commited automatically with the specified commit message.`\n    });\n\n    this._changeEmailParameter = this.defineStringParameter({\n      parameterLongName: '--email',\n      argumentName: 'EMAIL',\n      description:\n        'The email address to use in changefiles. If this parameter is not provided, the email address ' +\n        'will be detected or prompted for in interactive mode.'\n    });\n\n    this._bulkChangeParameter = this.defineFlagParameter({\n      parameterLongName: BULK_LONG_NAME,\n      description:\n        'If this flag is specified, apply the same change message and bump type to all changed projects. ' +\n        `The ${BULK_MESSAGE_LONG_NAME} and the ${BULK_BUMP_TYPE_LONG_NAME} parameters must be specified if the ` +\n        `${BULK_LONG_NAME} parameter is specified`\n    });\n\n    this._bulkChangeMessageParameter = this.defineStringParameter({\n      parameterLongName: BULK_MESSAGE_LONG_NAME,\n      argumentName: 'MESSAGE',\n      description: `The message to apply to all changed projects if the ${BULK_LONG_NAME} flag is provided.`\n    });\n\n    this._bulkChangeBumpTypeParameter = this.defineChoiceParameter({\n      parameterLongName: BULK_BUMP_TYPE_LONG_NAME,\n      alternatives: [...Object.keys(this._getBumpOptions())],\n      description: `The bump type to apply to all changed projects if the ${BULK_LONG_NAME} flag is provided.`\n    });\n  }\n\n  public async runAsync(): Promise<void> {\n    const targetBranch: string = await this._getTargetBranchAsync();\n    // eslint-disable-next-line no-console\n    console.log(`The target branch is ${targetBranch}`);\n\n    if (this._verifyParameter.value) {\n      const errors: string[] = [\n        this._bulkChangeParameter,\n        this._bulkChangeMessageParameter,\n        this._bulkChangeBumpTypeParameter,\n        this._overwriteFlagParameter,\n        this._commitChangesFlagParameter\n      ]\n        .map((parameter) => {\n          return parameter.value\n            ? `The {${this._bulkChangeParameter.longName} parameter cannot be provided with the ` +\n                `${this._verifyParameter.longName} parameter`\n            : '';\n        })\n        .filter((error) => error !== '');\n      if (errors.length > 0) {\n        errors.forEach((error) => {\n          // eslint-disable-next-line no-console\n          console.error(error);\n        });\n        throw new AlreadyReportedError();\n      }\n\n      await this._verifyAsync();\n      return;\n    }\n\n    const sortedProjectList: string[] = (await this._getChangedProjectNamesAsync()).sort();\n    if (sortedProjectList.length === 0) {\n      this._logNoChangeFileRequired();\n      await this._warnUnstagedChangesAsync();\n      return;\n    }\n\n    await this._warnUnstagedChangesAsync();\n\n    const inquirer: typeof InquirerType = await import('inquirer');\n    const promptModule: InquirerType.PromptModule = inquirer.createPromptModule();\n    let changeFileData: Map<string, IChangeFile> = new Map<string, IChangeFile>();\n    let interactiveMode: boolean = false;\n    if (this._bulkChangeParameter.value) {\n      if (\n        !this._bulkChangeBumpTypeParameter.value ||\n        (!this._bulkChangeMessageParameter.value &&\n          this._bulkChangeBumpTypeParameter.value !== ChangeType[ChangeType.none])\n      ) {\n        throw new Error(\n          `The ${this._bulkChangeBumpTypeParameter.longName} and ${this._bulkChangeMessageParameter.longName} ` +\n            `parameters must provided if the ${this._bulkChangeParameter.longName} flag is provided. If the value ` +\n            `\"${ChangeType[ChangeType.none]}\" is provided to the ${\n              this._bulkChangeBumpTypeParameter.longName\n            } ` +\n            `parameter, the ${this._bulkChangeMessageParameter.longName} parameter may be omitted.`\n        );\n      }\n\n      const email: string | undefined = this._changeEmailParameter.value || this._detectEmail();\n      if (!email) {\n        throw new Error(\n          \"Unable to detect Git email and an email address wasn't provided using the \" +\n            `${this._changeEmailParameter.longName} parameter.`\n        );\n      }\n\n      const errors: string[] = [];\n\n      const comment: string = this._bulkChangeMessageParameter.value || '';\n      const changeType: string = this._bulkChangeBumpTypeParameter.value;\n      for (const packageName of sortedProjectList) {\n        const allowedBumpTypes: string[] = Object.keys(this._getBumpOptions(packageName));\n        let projectChangeType: string = changeType;\n        if (allowedBumpTypes.length === 0) {\n          projectChangeType = ChangeType[ChangeType.none];\n        } else if (\n          projectChangeType !== ChangeType[ChangeType.none] &&\n          allowedBumpTypes.indexOf(projectChangeType) === -1\n        ) {\n          errors.push(`The \"${projectChangeType}\" change type is not allowed for package \"${packageName}\".`);\n        }\n\n        changeFileData.set(packageName, {\n          changes: [\n            {\n              comment,\n              type: projectChangeType,\n              packageName\n            } as IChangeInfo\n          ],\n          packageName,\n          email\n        });\n      }\n\n      if (errors.length > 0) {\n        for (const error of errors) {\n          // eslint-disable-next-line no-console\n          console.error(error);\n        }\n\n        throw new AlreadyReportedError();\n      }\n    } else if (this._bulkChangeBumpTypeParameter.value || this._bulkChangeMessageParameter.value) {\n      throw new Error(\n        `The ${this._bulkChangeParameter.longName} flag must be provided with the ` +\n          `${this._bulkChangeBumpTypeParameter.longName} and ${this._bulkChangeMessageParameter.longName} parameters.`\n      );\n    } else {\n      interactiveMode = true;\n\n      const existingChangeComments: Map<string, string[]> = ChangeFiles.getChangeComments(\n        await this._getChangeFilesAsync()\n      );\n      changeFileData = await this._promptForChangeFileDataAsync(\n        promptModule,\n        sortedProjectList,\n        existingChangeComments\n      );\n\n      if (this._isEmailRequired(changeFileData)) {\n        const email: string = this._changeEmailParameter.value\n          ? this._changeEmailParameter.value\n          : await this._detectOrAskForEmailAsync(promptModule);\n        changeFileData.forEach((changeFile: IChangeFile) => {\n          changeFile.email = this.rushConfiguration.getProjectByName(changeFile.packageName)?.versionPolicy\n            ?.includeEmailInChangeFile\n            ? email\n            : '';\n        });\n      }\n    }\n    let changefiles: string[];\n    try {\n      changefiles = await this._writeChangeFilesAsync(\n        promptModule,\n        changeFileData,\n        this._overwriteFlagParameter.value,\n        interactiveMode\n      );\n    } catch (error) {\n      throw new Error(`There was an error creating a change file: ${(error as Error).toString()}`);\n    }\n    if (this._commitChangesFlagParameter.value || this._commitChangesMessageStringParameter.value) {\n      if (changefiles && changefiles.length !== 0) {\n        await this._stageAndCommitGitChangesAsync(\n          changefiles,\n          this._commitChangesMessageStringParameter.value ||\n            this.rushConfiguration.gitChangefilesCommitMessage ||\n            'Rush change'\n        );\n      } else {\n        this._terminal.writeWarningLine('Warning: No change files generated, nothing to commit.');\n      }\n    }\n  }\n\n  private _generateHostMap(): Map<RushConfigurationProject, string> {\n    const hostMap: Map<RushConfigurationProject, string> = new Map();\n    for (const project of this.rushConfiguration.projects) {\n      let hostProjectName: string = project.packageName;\n      if (project.versionPolicy?.isLockstepped) {\n        const lockstepPolicy: LockStepVersionPolicy = project.versionPolicy as LockStepVersionPolicy;\n        hostProjectName = lockstepPolicy.mainProject || project.packageName;\n      }\n\n      hostMap.set(project, hostProjectName);\n    }\n\n    return hostMap;\n  }\n\n  private async _verifyAsync(): Promise<void> {\n    const changedPackages: string[] = await this._getChangedProjectNamesAsync();\n    if (changedPackages.length > 0) {\n      await this._validateChangeFileAsync(changedPackages);\n    } else {\n      this._logNoChangeFileRequired();\n    }\n  }\n\n  private async _getTargetBranchAsync(): Promise<string> {\n    if (!this._targetBranchName) {\n      this._targetBranchName =\n        this._targetBranchParameter.value || (await this._git.getRemoteDefaultBranchAsync());\n    }\n\n    return this._targetBranchName;\n  }\n\n  private async _getChangedProjectNamesAsync(): Promise<string[]> {\n    const projectChangeAnalyzer: ProjectChangeAnalyzer = new ProjectChangeAnalyzer(this.rushConfiguration);\n    const changedProjects: Set<RushConfigurationProject> =\n      await projectChangeAnalyzer.getChangedProjectsAsync({\n        targetBranchName: await this._getTargetBranchAsync(),\n        terminal: this._terminal,\n        shouldFetch: !this._noFetchParameter.value,\n        // Lockfile evaluation will expand the set of projects that request change files\n        // Not enabling, since this would be a breaking change\n        includeExternalDependencies: false,\n        // Since install may not have happened, cannot read rush-project.json\n        enableFiltering: false\n      });\n    const projectHostMap: Map<RushConfigurationProject, string> = this._generateHostMap();\n\n    const changedProjectNames: Set<string> = new Set<string>();\n    for (const changedProject of changedProjects) {\n      if (changedProject.shouldPublish && !changedProject.versionPolicy?.exemptFromRushChange) {\n        const hostName: string | undefined = projectHostMap.get(changedProject);\n        if (hostName) {\n          changedProjectNames.add(hostName);\n        }\n      }\n    }\n\n    return Array.from(changedProjectNames);\n  }\n\n  private async _validateChangeFileAsync(changedPackages: string[]): Promise<void> {\n    const files: string[] = await this._getChangeFilesAsync();\n    ChangeFiles.validate(files, changedPackages, this.rushConfiguration);\n  }\n\n  private async _getChangeFilesAsync(): Promise<string[]> {\n    const repoRoot: string = getRepoRoot(this.rushConfiguration.rushJsonFolder);\n    const relativeChangesFolder: string = path.relative(repoRoot, this.rushConfiguration.changesFolder);\n    const targetBranch: string = await this._getTargetBranchAsync();\n    const changedFiles: string[] = await this._git.getChangedFilesAsync(\n      targetBranch,\n      this._terminal,\n      true,\n      relativeChangesFolder\n    );\n\n    const result: string[] = [];\n    for (const changedFile of changedFiles) {\n      result.push(path.join(repoRoot, changedFile));\n    }\n\n    return result;\n  }\n\n  /**\n   * The main loop which prompts the user for information on changed projects.\n   */\n  private async _promptForChangeFileDataAsync(\n    promptModule: InquirerType.PromptModule,\n    sortedProjectList: string[],\n    existingChangeComments: Map<string, string[]>\n  ): Promise<Map<string, IChangeFile>> {\n    const changedFileData: Map<string, IChangeFile> = new Map<string, IChangeFile>();\n\n    for (const projectName of sortedProjectList) {\n      const changeInfo: IChangeInfo | undefined = await this._askQuestionsAsync(\n        promptModule,\n        projectName,\n        existingChangeComments\n      );\n      if (changeInfo) {\n        // Save the info into the change file\n        let changeFile: IChangeFile | undefined = changedFileData.get(changeInfo.packageName);\n        if (!changeFile) {\n          changeFile = {\n            changes: [],\n            packageName: changeInfo.packageName,\n            email: undefined\n          };\n          changedFileData.set(changeInfo.packageName, changeFile!);\n        }\n\n        changeFile!.changes.push(changeInfo);\n      }\n    }\n\n    return changedFileData;\n  }\n\n  /**\n   * Asks all questions which are needed to generate changelist for a project.\n   */\n  private async _askQuestionsAsync(\n    promptModule: InquirerType.PromptModule,\n    packageName: string,\n    existingChangeComments: Map<string, string[]>\n  ): Promise<IChangeInfo | undefined> {\n    // eslint-disable-next-line no-console\n    console.log(`\\n${packageName}`);\n    const comments: string[] | undefined = existingChangeComments.get(packageName);\n    if (comments) {\n      // eslint-disable-next-line no-console\n      console.log(`Found existing comments:`);\n      comments.forEach((comment) => {\n        // eslint-disable-next-line no-console\n        console.log(`    > ${comment}`);\n      });\n      const { appendComment }: { appendComment: 'skip' | 'append' } = await promptModule({\n        name: 'appendComment',\n        type: 'list',\n        default: 'skip',\n        message: 'Append to existing comments or skip?',\n        choices: [\n          {\n            name: 'Skip',\n            value: 'skip'\n          },\n          {\n            name: 'Append',\n            value: 'append'\n          }\n        ]\n      });\n\n      if (appendComment === 'skip') {\n        return undefined;\n      } else {\n        return await this._promptForCommentsAsync(promptModule, packageName);\n      }\n    } else {\n      return await this._promptForCommentsAsync(promptModule, packageName);\n    }\n  }\n\n  private async _promptForCommentsAsync(\n    promptModule: InquirerType.PromptModule,\n    packageName: string\n  ): Promise<IChangeInfo | undefined> {\n    const bumpOptions: { [type: string]: string } = this._getBumpOptions(packageName);\n    const { comment }: { comment: string } = await promptModule({\n      name: 'comment',\n      type: 'input',\n      message: `Describe changes, or ENTER if no changes:`\n    });\n\n    if (Object.keys(bumpOptions).length === 0 || !comment) {\n      return {\n        packageName: packageName,\n        comment: comment || '',\n        type: ChangeType[ChangeType.none]\n      } as IChangeInfo;\n    } else {\n      const { bumpType }: { bumpType: string } = await promptModule({\n        choices: Object.keys(bumpOptions).map((option) => {\n          return {\n            value: option,\n            name: bumpOptions[option]\n          };\n        }),\n        default: 'patch',\n        message: 'Select the type of change:',\n        name: 'bumpType',\n        type: 'list'\n      });\n\n      return {\n        packageName: packageName,\n        comment: comment,\n        type: bumpType\n      } as IChangeInfo;\n    }\n  }\n\n  private _getBumpOptions(packageName?: string): { [type: string]: string } {\n    let bumpOptions: { [type: string]: string } =\n      this.rushConfiguration && this.rushConfiguration.hotfixChangeEnabled\n        ? {\n            [ChangeType[ChangeType.hotfix]]:\n              'hotfix - for changes that need to be published in a separate hotfix package'\n          }\n        : {\n            [ChangeType[ChangeType.major]]:\n              'major - for changes that break compatibility, e.g. removing an API',\n            [ChangeType[ChangeType.minor]]: 'minor - for backwards compatible changes, e.g. adding a new API',\n            [ChangeType[ChangeType.patch]]:\n              'patch - for changes that do not affect compatibility, e.g. fixing a bug',\n            [ChangeType[ChangeType.none]]:\n              'none - for changes that do not need an immediate release, e.g. eslint config change'\n          };\n\n    if (packageName) {\n      const project: RushConfigurationProject | undefined =\n        this.rushConfiguration.getProjectByName(packageName);\n      const versionPolicy: VersionPolicy | undefined = project!.versionPolicy;\n\n      if (versionPolicy) {\n        if (versionPolicy.definitionName === VersionPolicyDefinitionName.lockStepVersion) {\n          const lockStepPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\n          // No need to ask for bump types if project is lockstep versioned with an explicit nextBump\n          if (lockStepPolicy.nextBump !== undefined) {\n            bumpOptions = {};\n          }\n        } else if (versionPolicy.definitionName === VersionPolicyDefinitionName.individualVersion) {\n          const individualPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\n          if (individualPolicy.lockedMajor !== undefined) {\n            delete bumpOptions[ChangeType[ChangeType.major]];\n          }\n        }\n      }\n    }\n\n    return bumpOptions;\n  }\n\n  private _isEmailRequired(changeFileData: Map<string, IChangeFile>): boolean {\n    return [...changeFileData.values()].some(\n      (changeFile) =>\n        !!this.rushConfiguration.getProjectByName(changeFile.packageName)?.versionPolicy\n          ?.includeEmailInChangeFile\n    );\n  }\n\n  /**\n   * Will determine a user's email by first detecting it from their Git config,\n   * or will ask for it if it is not found or the Git config is wrong.\n   */\n  private async _detectOrAskForEmailAsync(promptModule: InquirerType.PromptModule): Promise<string> {\n    return (\n      (await this._detectAndConfirmEmailAsync(promptModule)) ||\n      (await this._promptForEmailAsync(promptModule))\n    );\n  }\n\n  private _detectEmail(): string | undefined {\n    try {\n      return child_process\n        .execSync('git config user.email')\n        .toString()\n        .replace(/(\\r\\n|\\n|\\r)/gm, '');\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log('There was an issue detecting your Git email...');\n      return undefined;\n    }\n  }\n\n  /**\n   * Detects the user's email address from their Git configuration, prompts the user to approve the\n   * detected email. It returns undefined if it cannot be detected.\n   */\n  private async _detectAndConfirmEmailAsync(\n    promptModule: InquirerType.PromptModule\n  ): Promise<string | undefined> {\n    const email: string | undefined = this._detectEmail();\n\n    if (email) {\n      const { isCorrectEmail }: { isCorrectEmail: boolean } = await promptModule([\n        {\n          type: 'confirm',\n          name: 'isCorrectEmail',\n          default: 'Y',\n          message: `Is your email address ${email}?`\n        }\n      ]);\n      return isCorrectEmail ? email : undefined;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Asks the user for their email address\n   */\n  private async _promptForEmailAsync(promptModule: InquirerType.PromptModule): Promise<string> {\n    const { email }: { email: string } = await promptModule([\n      {\n        type: 'input',\n        name: 'email',\n        message: 'What is your email address?',\n        validate: (input: string) => {\n          return true; // @todo should be an email\n        }\n      }\n    ]);\n    return email;\n  }\n\n  private async _warnUnstagedChangesAsync(): Promise<void> {\n    try {\n      const hasUnstagedChanges: boolean = await this._git.hasUnstagedChangesAsync();\n      if (hasUnstagedChanges) {\n        // eslint-disable-next-line no-console\n        console.log(\n          '\\n' +\n            Colorize.yellow(\n              'Warning: You have unstaged changes, which do not trigger prompting for change ' +\n                'descriptions.'\n            )\n        );\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(`An error occurred when detecting unstaged changes: ${error}`);\n    }\n  }\n\n  /**\n   * Writes change files to the common/changes folder. Will prompt for overwrite if file already exists.\n   */\n  private async _writeChangeFilesAsync(\n    promptModule: InquirerType.PromptModule,\n    changeFileData: Map<string, IChangeFile>,\n    overwrite: boolean,\n    interactiveMode: boolean\n  ): Promise<string[]> {\n    const writtenFiles: string[] = [];\n    await changeFileData.forEach(async (changeFile: IChangeFile) => {\n      const writtenFile: string | undefined = await this._writeChangeFileAsync(\n        promptModule,\n        changeFile,\n        overwrite,\n        interactiveMode\n      );\n      if (writtenFile) {\n        writtenFiles.push(writtenFile);\n      }\n    });\n    return writtenFiles;\n  }\n\n  private async _writeChangeFileAsync(\n    promptModule: InquirerType.PromptModule,\n    changeFileData: IChangeFile,\n    overwrite: boolean,\n    interactiveMode: boolean\n  ): Promise<string | undefined> {\n    const output: string = JSON.stringify(changeFileData, undefined, 2);\n    const changeFile: ChangeFile = new ChangeFile(changeFileData, this.rushConfiguration);\n    const filePath: string = changeFile.generatePath();\n\n    const fileExists: boolean = FileSystem.exists(filePath);\n    const shouldWrite: boolean =\n      !fileExists ||\n      overwrite ||\n      (interactiveMode ? await this._promptForOverwriteAsync(promptModule, filePath) : false);\n\n    if (!interactiveMode && fileExists && !overwrite) {\n      throw new Error(`Changefile ${filePath} already exists`);\n    }\n\n    if (shouldWrite) {\n      this._writeFile(filePath, output, shouldWrite && fileExists);\n      return filePath;\n    }\n  }\n\n  private async _promptForOverwriteAsync(\n    promptModule: InquirerType.PromptModule,\n    filePath: string\n  ): Promise<boolean> {\n    const overwrite: boolean = await promptModule([\n      {\n        name: 'overwrite',\n        type: 'confirm',\n        message: `Overwrite ${filePath}?`\n      }\n    ]);\n\n    if (overwrite) {\n      return true;\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(`Not overwriting ${filePath}`);\n      return false;\n    }\n  }\n\n  /**\n   * Writes a file to disk, ensuring the directory structure up to that point exists\n   */\n  private _writeFile(fileName: string, output: string, isOverwrite: boolean): void {\n    FileSystem.writeFile(fileName, output, { ensureFolderExists: true });\n    if (isOverwrite) {\n      // eslint-disable-next-line no-console\n      console.log(`Overwrote file: ${fileName}`);\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(`Created file: ${fileName}`);\n    }\n  }\n\n  private _logNoChangeFileRequired(): void {\n    // eslint-disable-next-line no-console\n    console.log('No changes were detected to relevant packages on this branch. Nothing to do.');\n  }\n\n  private async _stageAndCommitGitChangesAsync(pattern: string[], message: string): Promise<void> {\n    try {\n      await Utilities.executeCommandAsync({\n        command: 'git',\n        args: ['add', ...pattern],\n        workingDirectory: this.rushConfiguration.changesFolder\n      });\n      await Utilities.executeCommandAsync({\n        command: 'git',\n        args: ['commit', ...pattern, '-m', message],\n        workingDirectory: this.rushConfiguration.changesFolder\n      });\n    } catch (error) {\n      this._terminal.writeErrorLine(`ERROR: Cannot stage and commit git changes ${(error as Error).message}`);\n    }\n  }\n}\n"]}