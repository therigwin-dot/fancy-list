"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAddAndRemoveAction = void 0;
const BaseRushAction_1 = require("./BaseRushAction");
const RushConstants_1 = require("../../logic/RushConstants");
/**
 * This is the common base class for AddAction and RemoveAction.
 */
class BaseAddAndRemoveAction extends BaseRushAction_1.BaseRushAction {
    get specifiedPackageNameList() {
        return this._packageNameList.values;
    }
    constructor(options) {
        super(options);
        this._skipUpdateFlag = this.defineFlagParameter({
            parameterLongName: '--skip-update',
            parameterShortName: '-s',
            description: 'If specified, the "rush update" command will not be run after updating the package.json files.'
        });
    }
    getProjects() {
        if (this._allFlag.value) {
            return this.rushConfiguration.projects;
        }
        else {
            const currentProject = this.rushConfiguration.tryGetProjectForPath(process.cwd());
            if (!currentProject) {
                throw new Error(`The rush "${this.actionName}" command must be invoked under a project` +
                    ` folder that is registered in ${RushConstants_1.RushConstants.rushJsonFilename} unless the ${this._allFlag.longName} is used.`);
            }
            return [currentProject];
        }
    }
    async runAsync() {
        const packageJsonUpdater = await Promise.resolve().then(() => __importStar(require(
        /* webpackChunkName: 'PackageJsonUpdater' */ '../../logic/PackageJsonUpdater')));
        const updater = new packageJsonUpdater.PackageJsonUpdater(this.rushConfiguration, this.rushGlobalFolder);
        const updateOptions = await this.getUpdateOptionsAsync();
        await updater.doRushUpdateAsync(updateOptions);
    }
}
exports.BaseAddAndRemoveAction = BaseAddAndRemoveAction;
//# sourceMappingURL=BaseAddAndRemoveAction.js.map