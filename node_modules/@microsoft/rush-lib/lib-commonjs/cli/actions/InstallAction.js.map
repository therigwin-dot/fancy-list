{"version":3,"file":"InstallAction.js","sourceRoot":"","sources":["../../../src/cli/actions/InstallAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { CommandLineFlagParameter } from '@rushstack/ts-command-line';\n\nimport { BaseInstallAction } from './BaseInstallAction';\nimport type { IInstallManagerOptions } from '../../logic/base/BaseInstallManagerTypes';\nimport type { RushCommandLineParser } from '../RushCommandLineParser';\nimport { SelectionParameterSet } from '../parsing/SelectionParameterSet';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type { Subspace } from '../../api/Subspace';\nimport { getVariantAsync } from '../../api/Variants';\n\nexport class InstallAction extends BaseInstallAction {\n  private readonly _checkOnlyParameter: CommandLineFlagParameter;\n  private readonly _resolutionOnlyParameter: CommandLineFlagParameter | undefined;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'install',\n      summary: 'Install package dependencies for all projects in the repo according to the shrinkwrap file',\n      documentation:\n        'The \"rush install\" command installs package dependencies for all your projects,' +\n        ' based on the shrinkwrap file that is created/updated using \"rush update\".' +\n        ' (This \"shrinkwrap\" file stores a central inventory of all dependencies and versions' +\n        ' for projects in your repo. It is found in the \"common/config/rush\" folder.)' +\n        ' If the shrinkwrap file is missing or outdated (e.g. because project package.json files have' +\n        ' changed), \"rush install\" will fail and tell you to run \"rush update\" instead.' +\n        ' This read-only nature is the main feature:  Continuous integration builds should use' +\n        ' \"rush install\" instead of \"rush update\" to catch developers who forgot to commit their' +\n        ' shrinkwrap changes.  Cautious people can also use \"rush install\" if they want to avoid' +\n        ' accidentally updating their shrinkwrap file.',\n      parser\n    });\n\n    this._selectionParameters = new SelectionParameterSet(this.rushConfiguration, this, {\n      gitOptions: {\n        // Include lockfile processing since this expands the selection, and we need to select\n        // at least the same projects selected with the same query to \"rush build\"\n        includeExternalDependencies: true,\n        // Disable filtering because rush-project.json is riggable and therefore may not be available\n        enableFiltering: false\n      },\n      includeSubspaceSelector: true\n    });\n\n    this._checkOnlyParameter = this.defineFlagParameter({\n      parameterLongName: '--check-only',\n      description: `Only check the validity of the shrinkwrap file without performing an install.`\n    });\n\n    if (this.rushConfiguration?.isPnpm) {\n      this._resolutionOnlyParameter = this.defineFlagParameter({\n        parameterLongName: '--resolution-only',\n        description: `Only perform dependency resolution, useful for ensuring peer dependendencies are up to date. Note that this flag is only supported when using the pnpm package manager.`\n      });\n    }\n  }\n\n  protected async buildInstallOptionsAsync(): Promise<Omit<IInstallManagerOptions, 'subspace'>> {\n    const selectedProjects: Set<RushConfigurationProject> =\n      (await this._selectionParameters?.getSelectedProjectsAsync(this._terminal)) ??\n      new Set(this.rushConfiguration.projects);\n\n    const variant: string | undefined = await getVariantAsync(\n      this._variantParameter,\n      this.rushConfiguration,\n      false\n    );\n\n    return {\n      debug: this.parser.isDebug,\n      allowShrinkwrapUpdates: false,\n      bypassPolicyAllowed: true,\n      bypassPolicy: this._bypassPolicyParameter.value!,\n      noLink: this._noLinkParameter.value!,\n      fullUpgrade: false,\n      recheckShrinkwrap: false,\n      offline: this._offlineParameter.value!,\n      networkConcurrency: this._networkConcurrencyParameter.value,\n      collectLogFile: this._debugPackageManagerParameter.value!,\n      variant,\n      // Because the 'defaultValue' option on the _maxInstallAttempts parameter is set,\n      // it is safe to assume that the value is not null\n      maxInstallAttempts: this._maxInstallAttempts.value!,\n      // These are derived independently of the selection for command line brevity\n      selectedProjects,\n      pnpmFilterArgumentValues:\n        (await this._selectionParameters?.getPnpmFilterArgumentValuesAsync(this._terminal)) ?? [],\n      checkOnly: this._checkOnlyParameter.value,\n      resolutionOnly: this._resolutionOnlyParameter?.value,\n      beforeInstallAsync: (subspace: Subspace) =>\n        this.rushSession.hooks.beforeInstall.promise(this, subspace, variant),\n      afterInstallAsync: (subspace: Subspace) =>\n        this.rushSession.hooks.afterInstall.promise(this, subspace, variant),\n      terminal: this._terminal\n    };\n  }\n}\n"]}