"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddAction = void 0;
const semver = __importStar(require("semver"));
const BaseAddAndRemoveAction_1 = require("./BaseAddAndRemoveAction");
const DependencySpecifier_1 = require("../../logic/DependencySpecifier");
const PackageJsonUpdaterTypes_1 = require("../../logic/PackageJsonUpdaterTypes");
const Variants_1 = require("../../api/Variants");
class AddAction extends BaseAddAndRemoveAction_1.BaseAddAndRemoveAction {
    constructor(parser) {
        const documentation = [
            'Adds specified package(s) to the dependencies of the current project (as determined by the current working directory)' +
                ' and then runs "rush update". If no version is specified, a version will be automatically detected (typically' +
                ' either the latest version or a version that won\'t break the "ensureConsistentVersions" policy). If a version' +
                ' range (or a workspace range) is specified, the latest version in the range will be used. The version will be' +
                ' automatically prepended with a tilde, unless the "--exact" or "--caret" flags are used. The "--make-consistent"' +
                ' flag can be used to update all packages with the dependency.'
        ].join('\n');
        super({
            actionName: 'add',
            summary: 'Adds one or more dependencies to the package.json and runs rush update.',
            documentation,
            safeForSimultaneousRushProcesses: false,
            parser
        });
        this._packageNameList = this.defineStringListParameter({
            parameterLongName: '--package',
            parameterShortName: '-p',
            required: true,
            argumentName: 'PACKAGE',
            description: 'The name of the package which should be added as a dependency.' +
                ' A SemVer version specifier can be appended after an "@" sign.  WARNING: Symbol characters' +
                " are usually interpreted by your shell, so it's recommended to use quotes." +
                ' For example, write "rush add --package "example@^1.2.3"" instead of "rush add --package example@^1.2.3".' +
                ' To add multiple packages, write "rush add --package foo --package bar".'
        });
        this._exactFlag = this.defineFlagParameter({
            parameterLongName: '--exact',
            description: 'If specified, the SemVer specifier added to the' +
                ' package.json will be an exact version (e.g. without tilde or caret).'
        });
        this._caretFlag = this.defineFlagParameter({
            parameterLongName: '--caret',
            description: 'If specified, the SemVer specifier added to the' +
                ' package.json will be a prepended with a "caret" specifier ("^").'
        });
        this._devDependencyFlag = this.defineFlagParameter({
            parameterLongName: '--dev',
            description: 'If specified, the package will be added to the "devDependencies" section of the package.json'
        });
        this._peerDependencyFlag = this.defineFlagParameter({
            parameterLongName: '--peer',
            description: 'If specified, the package will be added to the "peerDependencies" section of the package.json'
        });
        this._makeConsistentFlag = this.defineFlagParameter({
            parameterLongName: '--make-consistent',
            parameterShortName: '-m',
            description: 'If specified, other packages with this dependency will have their package.json' +
                ' files updated to use the same version of the dependency.'
        });
        this._allFlag = this.defineFlagParameter({
            parameterLongName: '--all',
            description: 'If specified, the dependency will be added to all projects.'
        });
        this._variantParameter = this.defineStringParameter(Variants_1.VARIANT_PARAMETER);
    }
    async getUpdateOptionsAsync() {
        const projects = super.getProjects();
        if (this._caretFlag.value && this._exactFlag.value) {
            throw new Error(`Only one of "${this._caretFlag.longName}" and "${this._exactFlag.longName}" should be specified`);
        }
        const packagesToAdd = [];
        for (const specifiedPackageName of this.specifiedPackageNameList) {
            /**
             * Name & Version
             */
            let packageName = specifiedPackageName;
            let version = undefined;
            const parts = packageName.split('@');
            if (parts[0] === '') {
                // this is a scoped package
                packageName = '@' + parts[1];
                version = parts[2];
            }
            else {
                packageName = parts[0];
                version = parts[1];
            }
            if (!this.rushConfiguration.packageNameParser.isValidName(packageName)) {
                throw new Error(`The package name "${packageName}" is not valid.`);
            }
            if (version && version !== 'latest') {
                const specifier = new DependencySpecifier_1.DependencySpecifier(packageName, version);
                if (!semver.validRange(specifier.versionSpecifier) && !semver.valid(specifier.versionSpecifier)) {
                    throw new Error(`The SemVer specifier "${version}" is not valid.`);
                }
            }
            /**
             * RangeStyle
             */
            let rangeStyle;
            if (version && version !== 'latest') {
                if (this._exactFlag.value || this._caretFlag.value) {
                    throw new Error(`The "${this._caretFlag.longName}" and "${this._exactFlag.longName}" flags may not be specified if a ` +
                        `version is provided in the ${this._packageNameList.longName} specifier. In this case "${version}" was provided.`);
                }
                rangeStyle = PackageJsonUpdaterTypes_1.SemVerStyle.Passthrough;
            }
            else {
                rangeStyle = this._caretFlag.value
                    ? PackageJsonUpdaterTypes_1.SemVerStyle.Caret
                    : this._exactFlag.value
                        ? PackageJsonUpdaterTypes_1.SemVerStyle.Exact
                        : PackageJsonUpdaterTypes_1.SemVerStyle.Tilde;
            }
            packagesToAdd.push({ packageName, version, rangeStyle });
        }
        const variant = await (0, Variants_1.getVariantAsync)(this._variantParameter, this.rushConfiguration, true);
        return {
            projects: projects,
            packagesToUpdate: packagesToAdd,
            devDependency: this._devDependencyFlag.value,
            peerDependency: this._peerDependencyFlag.value,
            updateOtherPackages: this._makeConsistentFlag.value,
            skipUpdate: this._skipUpdateFlag.value,
            debugInstall: this.parser.isDebug,
            actionName: this.actionName,
            variant
        };
    }
}
exports.AddAction = AddAction;
//# sourceMappingURL=AddAction.js.map