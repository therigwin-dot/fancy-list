{"version":3,"file":"DeployAction.js","sourceRoot":"","sources":["../../../src/cli/actions/DeployAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport type { CommandLineFlagParameter, CommandLineStringParameter } from '@rushstack/ts-command-line';\nimport type {\n  PackageExtractor,\n  IExtractorProjectConfiguration,\n  IExtractorSubspace\n} from '@rushstack/package-extractor';\n\nimport { BaseRushAction } from './BaseRushAction';\nimport type { RushCommandLineParser } from '../RushCommandLineParser';\nimport { PnpmfileConfiguration } from '../../logic/pnpm/PnpmfileConfiguration';\nimport type { ILogger } from '../../pluginFramework/logging/Logger';\nimport type {\n  DeployScenarioConfiguration,\n  IDeployScenarioProjectJson\n} from '../../logic/deploy/DeployScenarioConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\n\nexport class DeployAction extends BaseRushAction {\n  private readonly _logger: ILogger;\n  private readonly _scenario: CommandLineStringParameter;\n  private readonly _project: CommandLineStringParameter;\n  private readonly _overwrite: CommandLineFlagParameter;\n  private readonly _targetFolder: CommandLineStringParameter;\n  private readonly _createArchivePath: CommandLineStringParameter;\n  private readonly _createArchiveOnly: CommandLineFlagParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'deploy',\n      summary:\n        'Prepares a deployment by copying a subset of Rush projects and their dependencies' +\n        ' to a target folder',\n      documentation:\n        'After building the repo, \"rush deploy\" can be used to prepare a deployment by copying' +\n        ' a subset of Rush projects and their dependencies to a target folder, which can then be uploaded to' +\n        ' a production server.  The \"rush deploy\" behavior is specified by a scenario config file that must' +\n        ' be created first, using the \"rush init-deploy\" command.',\n      parser,\n\n      // It is okay to invoke multiple instances of \"rush deploy\" simultaneously, if they are writing\n      // to different target folders.\n      safeForSimultaneousRushProcesses: true\n    });\n\n    this._logger = this.rushSession.getLogger('deploy');\n\n    this._project = this.defineStringParameter({\n      parameterLongName: '--project',\n      parameterShortName: '-p',\n      argumentName: 'PROJECT_NAME',\n      description:\n        'Specifies the name of the main Rush project to be deployed. It must appear in the' +\n        ' \"deploymentProjectNames\" setting in the deployment config file.'\n    });\n\n    this._scenario = this.defineStringParameter({\n      parameterLongName: '--scenario',\n      parameterShortName: '-s',\n      argumentName: 'SCENARIO_NAME',\n      description:\n        'By default, the deployment configuration is specified in \"common/config/rush/deploy.json\".' +\n        ' You can use \"--scenario\" to specify an alternate name. The name must be lowercase and separated by dashes.' +\n        ' For example, if SCENARIO_NAME is \"web\", then the config file would be \"common/config/rush/deploy-web.json\".'\n    });\n\n    this._overwrite = this.defineFlagParameter({\n      parameterLongName: '--overwrite',\n      description:\n        'By default, deployment will fail if the target folder is not empty.  SPECIFYING THIS FLAG' +\n        ' WILL RECURSIVELY DELETE EXISTING CONTENTS OF THE TARGET FOLDER.'\n    });\n\n    this._targetFolder = this.defineStringParameter({\n      parameterLongName: '--target-folder',\n      parameterShortName: '-t',\n      argumentName: 'PATH',\n      environmentVariable: 'RUSH_DEPLOY_TARGET_FOLDER',\n      description:\n        'By default, files are deployed to the \"common/deploy\" folder inside the Rush repo.' +\n        ' Use this parameter to specify a different location. ' +\n        ' WARNING: USE CAUTION WHEN COMBINING WITH \"--overwrite\"'\n    });\n\n    this._createArchivePath = this.defineStringParameter({\n      parameterLongName: '--create-archive',\n      argumentName: 'ARCHIVE_PATH',\n      description:\n        'If specified, after the deployment has been prepared, \"rush deploy\"' +\n        ' will create an archive containing the contents of the target folder.' +\n        ' The newly created archive file will be placed according to the designated path, relative' +\n        ' to the target folder. Supported file extensions: .zip'\n    });\n\n    this._createArchiveOnly = this.defineFlagParameter({\n      parameterLongName: '--create-archive-only',\n      description:\n        'If specified, \"rush deploy\" will only create an archive containing the contents of the target folder.' +\n        ' The target folder will not be modified other than to create the archive file.'\n    });\n  }\n\n  protected async runAsync(): Promise<void> {\n    const scenarioName: string | undefined = this._scenario.value;\n    const { DeployScenarioConfiguration } = await import('../../logic/deploy/DeployScenarioConfiguration');\n    const scenarioFilePath: string = DeployScenarioConfiguration.getConfigFilePath(\n      scenarioName,\n      this.rushConfiguration\n    );\n    const scenarioConfiguration: DeployScenarioConfiguration = DeployScenarioConfiguration.loadFromFile(\n      this._logger.terminal,\n      scenarioFilePath,\n      this.rushConfiguration\n    );\n\n    let mainProjectName: string | undefined = this._project.value;\n    if (!mainProjectName) {\n      if (scenarioConfiguration.json.deploymentProjectNames.length === 1) {\n        // If there is only one project, then \"--project\" is optional\n        mainProjectName = scenarioConfiguration.json.deploymentProjectNames[0];\n      } else {\n        throw new Error(\n          `The ${path.basename(scenarioFilePath)} configuration specifies multiple items for` +\n            ` \"deploymentProjectNames\". Use the \"--project\" parameter to indicate the project to be deployed.`\n        );\n      }\n    } else {\n      if (scenarioConfiguration.json.deploymentProjectNames.indexOf(mainProjectName) < 0) {\n        throw new Error(\n          `The project \"${mainProjectName}\" does not appear in the list of \"deploymentProjectNames\"` +\n            ` from ${path.basename(scenarioFilePath)}.`\n        );\n      }\n    }\n\n    const targetRootFolder: string = this._targetFolder.value\n      ? path.resolve(this._targetFolder.value)\n      : path.join(this.rushConfiguration.commonFolder, 'deploy');\n\n    const createArchiveFilePath: string | undefined = this._createArchivePath.value\n      ? path.resolve(targetRootFolder, this._createArchivePath.value)\n      : undefined;\n\n    const createArchiveOnly: boolean = this._createArchiveOnly.value;\n\n    /**\n     * Subspaces that will be involved in deploy process.\n     * Each subspace may have its own configurations\n     */\n    const subspaces: Map<string, IExtractorSubspace> = new Map();\n\n    const rushConfigurationProject: RushConfigurationProject | undefined =\n      this.rushConfiguration.getProjectByName(mainProjectName);\n    if (!rushConfigurationProject) {\n      throw new Error(`The specified deployment project \"${mainProjectName}\" was not found in rush.json`);\n    }\n\n    const projects: RushConfigurationProject[] = this.rushConfiguration.projects;\n    if (this.rushConfiguration.isPnpm) {\n      const currentlyInstalledVariant: string | undefined =\n        await this.rushConfiguration.getCurrentlyInstalledVariantAsync();\n      for (const project of projects) {\n        const pnpmfileConfiguration: PnpmfileConfiguration = await PnpmfileConfiguration.initializeAsync(\n          this.rushConfiguration,\n          project.subspace,\n          currentlyInstalledVariant\n        );\n        const subspace: IExtractorSubspace = {\n          subspaceName: project.subspace.subspaceName,\n          transformPackageJson: pnpmfileConfiguration.transform.bind(pnpmfileConfiguration)\n        };\n\n        if (subspaces.has(subspace.subspaceName)) {\n          continue;\n        }\n\n        if (!scenarioConfiguration.json.omitPnpmWorkaroundLinks) {\n          subspace.pnpmInstallFolder = project.subspace.getSubspaceTempFolderPath();\n        }\n        subspaces.set(subspace.subspaceName, subspace);\n      }\n    }\n\n    // Construct the project list for the deployer\n    const projectConfigurations: IExtractorProjectConfiguration[] = [];\n    for (const project of projects) {\n      const scenarioProjectJson: IDeployScenarioProjectJson | undefined =\n        scenarioConfiguration.projectJsonsByName.get(project.packageName);\n      projectConfigurations.push({\n        projectName: project.packageName,\n        projectFolder: project.projectFolder,\n        additionalProjectsToInclude: scenarioProjectJson?.additionalProjectsToInclude,\n        additionalDependenciesToInclude: scenarioProjectJson?.additionalDependenciesToInclude,\n        dependenciesToExclude: scenarioProjectJson?.dependenciesToExclude,\n        patternsToInclude: scenarioProjectJson?.patternsToInclude,\n        patternsToExclude: scenarioProjectJson?.patternsToExclude\n      });\n    }\n\n    // Call the deploy manager\n    const { PackageExtractor } = await import(\n      /* webpackChunkName: 'PackageExtractor' */\n      '@rushstack/package-extractor'\n    );\n    const deployManager: PackageExtractor = new PackageExtractor();\n    await deployManager.extractAsync({\n      terminal: this._logger.terminal,\n      overwriteExisting: !!this._overwrite.value,\n      includeDevDependencies: scenarioConfiguration.json.includeDevDependencies,\n      includeNpmIgnoreFiles: scenarioConfiguration.json.includeNpmIgnoreFiles,\n      folderToCopy: scenarioConfiguration.json.folderToCopy,\n      linkCreation: scenarioConfiguration.json.linkCreation,\n      sourceRootFolder: this.rushConfiguration.rushJsonFolder,\n      targetRootFolder,\n      mainProjectName,\n      projectConfigurations,\n      dependencyConfigurations: scenarioConfiguration.json.dependencySettings,\n      createArchiveFilePath,\n      createArchiveOnly,\n      subspaces: Array.from(subspaces.values())\n    });\n  }\n}\n"]}