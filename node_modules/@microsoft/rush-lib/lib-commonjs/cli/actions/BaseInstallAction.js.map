{"version":3,"file":"BaseInstallAction.js","sourceRoot":"","sources":["../../../src/cli/actions/BaseInstallAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type {\n  CommandLineFlagParameter,\n  CommandLineIntegerParameter,\n  CommandLineStringParameter,\n  IRequiredCommandLineIntegerParameter\n} from '@rushstack/ts-command-line';\nimport { AlreadyReportedError } from '@rushstack/node-core-library';\nimport { type ITerminal, Colorize } from '@rushstack/terminal';\n\nimport { BaseRushAction, type IBaseRushActionOptions } from './BaseRushAction';\nimport { Event } from '../../api/EventHooks';\nimport type { BaseInstallManager } from '../../logic/base/BaseInstallManager';\nimport type { IInstallManagerOptions } from '../../logic/base/BaseInstallManagerTypes';\nimport { PurgeManager } from '../../logic/PurgeManager';\nimport { SetupChecks } from '../../logic/SetupChecks';\nimport { StandardScriptUpdater } from '../../logic/StandardScriptUpdater';\nimport { Stopwatch } from '../../utilities/Stopwatch';\nimport { VersionMismatchFinder } from '../../logic/versionMismatch/VersionMismatchFinder';\nimport { RushConstants } from '../../logic/RushConstants';\nimport { SUBSPACE_LONG_ARG_NAME, type SelectionParameterSet } from '../parsing/SelectionParameterSet';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type { Subspace } from '../../api/Subspace';\nimport { getVariantAsync, VARIANT_PARAMETER } from '../../api/Variants';\n\n/**\n * Temporary data structure used by `BaseInstallAction.runAsync()`\n */\ninterface ISubspaceInstallationData {\n  selectedProjects: Set<RushConfigurationProject>;\n  pnpmFilterArgumentValues: string[];\n}\n\n/**\n * This is the common base class for InstallAction and UpdateAction.\n */\nexport abstract class BaseInstallAction extends BaseRushAction {\n  protected readonly _terminal: ITerminal;\n  protected readonly _variantParameter: CommandLineStringParameter;\n  protected readonly _purgeParameter: CommandLineFlagParameter;\n  protected readonly _bypassPolicyParameter: CommandLineFlagParameter;\n  protected readonly _noLinkParameter: CommandLineFlagParameter;\n  protected readonly _networkConcurrencyParameter: CommandLineIntegerParameter;\n  protected readonly _debugPackageManagerParameter: CommandLineFlagParameter;\n  protected readonly _maxInstallAttempts: IRequiredCommandLineIntegerParameter;\n  protected readonly _ignoreHooksParameter: CommandLineFlagParameter;\n  protected readonly _offlineParameter: CommandLineFlagParameter;\n  /*\n   * Subclasses can initialize the _selectionParameters property in order for\n   * the parameters to be written to the telemetry file\n   */\n  protected _selectionParameters?: SelectionParameterSet;\n\n  public constructor(options: IBaseRushActionOptions) {\n    super(options);\n\n    this._terminal = options.parser.terminal;\n\n    this._purgeParameter = this.defineFlagParameter({\n      parameterLongName: '--purge',\n      parameterShortName: '-p',\n      description: 'Perform \"rush purge\" before starting the installation'\n    });\n    this._bypassPolicyParameter = this.defineFlagParameter({\n      parameterLongName: RushConstants.bypassPolicyFlagLongName,\n      description: `Overrides enforcement of the \"gitPolicy\" rules from ${RushConstants.rushJsonFilename} (use honorably!)`\n    });\n    this._noLinkParameter = this.defineFlagParameter({\n      parameterLongName: '--no-link',\n      description:\n        'If \"--no-link\" is specified, then project symlinks will NOT be created' +\n        ' after the installation completes.  You will need to run \"rush link\" manually.' +\n        ' This flag is useful for automated builds that want to report stages individually' +\n        ' or perform extra operations in between the two stages. This flag is not supported' +\n        ' when using workspaces.'\n    });\n    this._networkConcurrencyParameter = this.defineIntegerParameter({\n      parameterLongName: '--network-concurrency',\n      argumentName: 'COUNT',\n      description:\n        'If specified, limits the maximum number of concurrent network requests.' +\n        '  This is useful when troubleshooting network failures.'\n    });\n    this._debugPackageManagerParameter = this.defineFlagParameter({\n      parameterLongName: '--debug-package-manager',\n      description:\n        'Activates verbose logging for the package manager. You will probably want to pipe' +\n        ' the output of Rush to a file when using this command.'\n    });\n    this._maxInstallAttempts = this.defineIntegerParameter({\n      parameterLongName: '--max-install-attempts',\n      argumentName: 'NUMBER',\n      description: `Overrides the default maximum number of install attempts.`,\n      defaultValue: RushConstants.defaultMaxInstallAttempts\n    });\n    this._ignoreHooksParameter = this.defineFlagParameter({\n      parameterLongName: '--ignore-hooks',\n      description:\n        `Skips execution of the \"eventHooks\" scripts defined in ${RushConstants.rushJsonFilename}. ` +\n        'Make sure you know what you are skipping.'\n    });\n    this._offlineParameter = this.defineFlagParameter({\n      parameterLongName: '--offline',\n      description:\n        `Enables installation to be performed without internet access. PNPM will instead report an error` +\n        ` if the necessary NPM packages cannot be obtained from the local cache.` +\n        ` For details, see the documentation for PNPM's \"--offline\" parameter.`\n    });\n    this._variantParameter = this.defineStringParameter(VARIANT_PARAMETER);\n  }\n\n  protected abstract buildInstallOptionsAsync(): Promise<Omit<IInstallManagerOptions, 'subspace'>>;\n\n  protected async runAsync(): Promise<void> {\n    const installManagerOptions: Omit<IInstallManagerOptions, 'subspace'> =\n      await this.buildInstallOptionsAsync();\n\n    // If we are doing a filtered install and subspaces is enabled, we need to find the affected subspaces and install for all of them.\n    let selectedSubspaces: ReadonlySet<Subspace> | undefined;\n    const subspaceInstallationDataBySubspace: Map<Subspace, ISubspaceInstallationData> = new Map();\n    if (this.rushConfiguration.subspacesFeatureEnabled) {\n      // Selecting all subspaces if preventSelectingAllSubspaces is not enabled in subspaces.json\n      if (\n        this.rushConfiguration.subspacesConfiguration?.preventSelectingAllSubspaces &&\n        !this._selectionParameters?.didUserSelectAnything()\n      ) {\n        this._terminal.writeLine();\n        this._terminal.writeLine(\n          Colorize.red(\n            `The subspaces preventSelectingAllSubspaces configuration is enabled, which enforces installation for a specified set of subspace,` +\n              ` passed by the \"${SUBSPACE_LONG_ARG_NAME}\" parameter or selected from targeted projects using any project selector.`\n          )\n        );\n        throw new AlreadyReportedError();\n      }\n\n      const { selectedProjects } = installManagerOptions;\n\n      if (selectedProjects.size === this.rushConfiguration.projects.length) {\n        // Optimization for the common case, equivalent to the logic below\n        selectedSubspaces = new Set<Subspace>(this.rushConfiguration.subspaces);\n      } else {\n        selectedSubspaces = this.rushConfiguration.getSubspacesForProjects(selectedProjects);\n        for (const selectedSubspace of selectedSubspaces) {\n          let subspaceSelectedProjects: Set<RushConfigurationProject>;\n          let pnpmFilterArgumentValues: string[];\n          if (selectedSubspace.getPnpmOptions()?.alwaysFullInstall) {\n            subspaceSelectedProjects = new Set(selectedSubspace.getProjects());\n            pnpmFilterArgumentValues = [];\n          } else {\n            // This may involve filtered installs. Go through each project, add its subspace's pnpm filter arguments\n            subspaceSelectedProjects = new Set();\n            pnpmFilterArgumentValues = [];\n            for (const project of selectedSubspace.getProjects()) {\n              if (selectedProjects.has(project)) {\n                subspaceSelectedProjects.add(project);\n                pnpmFilterArgumentValues.push(project.packageName);\n              }\n            }\n          }\n\n          subspaceInstallationDataBySubspace.set(selectedSubspace, {\n            selectedProjects: subspaceSelectedProjects,\n            pnpmFilterArgumentValues\n          });\n        }\n      }\n    }\n\n    const variant: string | undefined = await getVariantAsync(\n      this._variantParameter,\n      this.rushConfiguration,\n      false\n    );\n    if (selectedSubspaces) {\n      // Check each subspace for version inconsistencies\n      for (const subspace of selectedSubspaces) {\n        VersionMismatchFinder.ensureConsistentVersions(this.rushConfiguration, this._terminal, {\n          subspace,\n          variant\n        });\n      }\n    } else {\n      VersionMismatchFinder.ensureConsistentVersions(this.rushConfiguration, this._terminal, {\n        subspace: undefined,\n        variant\n      });\n    }\n\n    const stopwatch: Stopwatch = Stopwatch.start();\n\n    SetupChecks.validate(this.rushConfiguration);\n    let warnAboutScriptUpdate: boolean = false;\n    if (this.actionName === 'update') {\n      warnAboutScriptUpdate = await StandardScriptUpdater.updateAsync(this.rushConfiguration);\n    } else {\n      await StandardScriptUpdater.validateAsync(this.rushConfiguration);\n    }\n\n    this.eventHooksManager.handle(\n      Event.preRushInstall,\n      this.parser.isDebug,\n      this._ignoreHooksParameter.value\n    );\n\n    const purgeManager: PurgeManager = new PurgeManager(this.rushConfiguration, this.rushGlobalFolder);\n\n    if (this._purgeParameter.value!) {\n      // eslint-disable-next-line no-console\n      console.log('The --purge flag was specified, so performing \"rush purge\"');\n      purgeManager.purgeNormal();\n      // eslint-disable-next-line no-console\n      console.log('');\n    }\n\n    if (this._networkConcurrencyParameter.value) {\n      if (this.rushConfiguration.packageManager !== 'pnpm') {\n        throw new Error(\n          `The \"${this._networkConcurrencyParameter.longName}\" parameter is` +\n            ` only supported when using the PNPM package manager.`\n        );\n      }\n    }\n\n    if (this._maxInstallAttempts.value < 1) {\n      throw new Error(`The value of \"${this._maxInstallAttempts.longName}\" must be positive and nonzero.`);\n    }\n\n    const installManagerFactoryModule: typeof import('../../logic/InstallManagerFactory') = await import(\n      /* webpackChunkName: 'InstallManagerFactory' */\n      '../../logic/InstallManagerFactory'\n    );\n    let installSuccessful: boolean = true;\n\n    try {\n      if (selectedSubspaces) {\n        // Run the install for each affected subspace\n        for (const subspace of selectedSubspaces) {\n          const subspaceInstallationData: ISubspaceInstallationData | undefined =\n            subspaceInstallationDataBySubspace.get(subspace);\n          // eslint-disable-next-line no-console\n          console.log(Colorize.green(`Installing for subspace: ${subspace.subspaceName}`));\n          let installManagerOptionsForInstall: IInstallManagerOptions;\n          if (subspaceInstallationData) {\n            // This will install the selected of projects in the subspace\n            const { selectedProjects, pnpmFilterArgumentValues } = subspaceInstallationData;\n            installManagerOptionsForInstall = {\n              ...installManagerOptions,\n              selectedProjects,\n              // IMPORTANT: SelectionParameterSet.getPnpmFilterArgumentValuesAsync() already calculated\n              // installManagerOptions.pnpmFilterArgumentValues using PNPM CLI operators such as \"...my-app\".\n              // But with subspaces, \"pnpm install\" can only see the subset of projects in subspace's temp workspace,\n              // therefore an operator like \"--filter ...my-app\" will malfunction.  As a workaround, here we are\n              // overwriting installManagerOptions.pnpmFilterArgumentValues with a flat last of project names that\n              // were calculated by Rush.\n              //\n              // TODO: If the flat list produces too many \"--filter\" arguments, invoking \"pnpm install\" will exceed\n              // the maximum command length and fail on Windows OS.  Once this is solved, we can eliminate the\n              // redundant logic from SelectionParameterSet.getPnpmFilterArgumentValuesAsync().\n              pnpmFilterArgumentValues,\n              subspace\n            };\n          } else {\n            // This will install all projects in the subspace\n            installManagerOptionsForInstall = {\n              ...installManagerOptions,\n              pnpmFilterArgumentValues: [],\n              subspace\n            };\n          }\n\n          await this._doInstallAsync(\n            installManagerFactoryModule,\n            purgeManager,\n            installManagerOptionsForInstall\n          );\n        }\n      } else {\n        // Simple case when subspacesFeatureEnabled=false\n        await this._doInstallAsync(installManagerFactoryModule, purgeManager, {\n          ...installManagerOptions,\n          subspace: this.rushConfiguration.defaultSubspace\n        });\n      }\n    } catch (error) {\n      installSuccessful = false;\n      throw error;\n    } finally {\n      await purgeManager.startDeleteAllAsync();\n      stopwatch.stop();\n\n      this._collectTelemetry(stopwatch, installManagerOptions, installSuccessful);\n      this.parser.flushTelemetry();\n      this.eventHooksManager.handle(\n        Event.postRushInstall,\n        this.parser.isDebug,\n        this._ignoreHooksParameter.value\n      );\n    }\n\n    if (warnAboutScriptUpdate) {\n      // eslint-disable-next-line no-console\n      console.log(\n        '\\n' +\n          Colorize.yellow(\n            'Rush refreshed some files in the \"common/scripts\" folder.' +\n              '  Please commit this change to Git.'\n          )\n      );\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(\n      '\\n' + Colorize.green(`Rush ${this.actionName} finished successfully. (${stopwatch.toString()})`)\n    );\n  }\n\n  private async _doInstallAsync(\n    installManagerFactoryModule: typeof import('../../logic/InstallManagerFactory'),\n    purgeManager: PurgeManager,\n    installManagerOptions: IInstallManagerOptions\n  ): Promise<void> {\n    const installManager: BaseInstallManager =\n      await installManagerFactoryModule.InstallManagerFactory.getInstallManagerAsync(\n        this.rushConfiguration,\n        this.rushGlobalFolder,\n        purgeManager,\n        installManagerOptions\n      );\n\n    await installManager.doInstallAsync();\n  }\n\n  private _collectTelemetry(\n    stopwatch: Stopwatch,\n    installManagerOptions: Omit<IInstallManagerOptions, 'subspace'>,\n    success: boolean\n  ): void {\n    if (this.parser.telemetry) {\n      const extraData: Record<string, string> = {\n        mode: this.actionName,\n        clean: (!!this._purgeParameter.value).toString(),\n        debug: installManagerOptions.debug.toString(),\n        full: installManagerOptions.fullUpgrade.toString(),\n        ...this.getParameterStringMap(),\n        ...this._selectionParameters?.getTelemetry()\n      };\n      this.parser.telemetry.log({\n        name: 'install',\n        durationInSeconds: stopwatch.duration,\n        result: success ? 'Succeeded' : 'Failed',\n        extraData\n      });\n    }\n  }\n}\n"]}