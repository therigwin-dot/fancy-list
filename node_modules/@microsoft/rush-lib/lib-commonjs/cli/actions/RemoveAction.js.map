{"version":3,"file":"RemoveAction.js","sourceRoot":"","sources":["../../../src/cli/actions/RemoveAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAS3D,qEAAkE;AAOlE,iDAAwE;AAExE,MAAa,YAAa,SAAQ,+CAAsB;IAMtD,YAAmB,MAA6B;QAC9C,MAAM,aAAa,GAAW;YAC5B,4HAA4H;gBAC1H,+BAA+B;SAClC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACb,KAAK,CAAC;YACJ,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,8EAA8E;YACvF,aAAa;YACb,gCAAgC,EAAE,KAAK;YACvC,MAAM;SACP,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;QAEjC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC;YACrD,iBAAiB,EAAE,WAAW;YAC9B,kBAAkB,EAAE,IAAI;YACxB,QAAQ,EAAE,IAAI;YACd,YAAY,EAAE,SAAS;YACvB,WAAW,EACT,kDAAkD;gBAClD,8EAA8E;SACjF,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACvC,iBAAiB,EAAE,OAAO;YAC1B,WAAW,EAAE,iFAAiF;SAC/F,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,4BAAiB,CAAC,CAAC;IACzE,CAAC;IAEM,KAAK,CAAC,qBAAqB;QAChC,MAAM,QAAQ,GAA+B,KAAK,CAAC,WAAW,EAAE,CAAC;QAEjE,MAAM,gBAAgB,GAA4B,EAAE,CAAC;QAErD,KAAK,MAAM,oBAAoB,IAAI,IAAI,CAAC,wBAAwB,EAAE,CAAC;YACjE;;eAEG;YACH,MAAM,WAAW,GAAW,oBAAoB,CAAC;YAEjD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC;gBACvE,MAAM,IAAI,KAAK,CAAC,qBAAqB,WAAW,iBAAiB,CAAC,CAAC;YACrE,CAAC;YAED,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;gBAC/B,IACE,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,WAAW,CAAC;oBACxD,CAAC,OAAO,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,WAAW,CAAC,EAC3D,CAAC;oBACD,IAAI,CAAC,SAAS,CAAC,SAAS,CACtB,gBAAgB,OAAO,CAAC,WAAW,oBAAoB,WAAW,oBAAoB,CACvF,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,gBAAgB,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,OAAO,GAAuB,MAAM,IAAA,0BAAe,EACvD,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,iBAAiB,EACtB,IAAI,CACL,CAAC;QAEF,OAAO;YACL,QAAQ,EAAE,QAAQ;YAClB,gBAAgB,EAAE,gBAAgB;YAClC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK;YACtC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;YACjC,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,OAAO;SACR,CAAC;IACJ,CAAC;CACF;AAjFD,oCAiFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ITerminal } from '@rushstack/terminal';\nimport type {\n  CommandLineFlagParameter,\n  CommandLineStringListParameter,\n  CommandLineStringParameter\n} from '@rushstack/ts-command-line';\n\nimport { BaseAddAndRemoveAction } from './BaseAddAndRemoveAction';\nimport type { RushCommandLineParser } from '../RushCommandLineParser';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type {\n  IPackageForRushRemove,\n  IPackageJsonUpdaterRushRemoveOptions\n} from '../../logic/PackageJsonUpdaterTypes';\nimport { getVariantAsync, VARIANT_PARAMETER } from '../../api/Variants';\n\nexport class RemoveAction extends BaseAddAndRemoveAction {\n  protected readonly _allFlag: CommandLineFlagParameter;\n  protected readonly _packageNameList: CommandLineStringListParameter;\n  private readonly _variantParameter: CommandLineStringParameter;\n  private readonly _terminal: ITerminal;\n\n  public constructor(parser: RushCommandLineParser) {\n    const documentation: string = [\n      'Removes specified package(s) from the dependencies of the current project (as determined by the current working directory)' +\n        ' and then runs \"rush update\".'\n    ].join('\\n');\n    super({\n      actionName: 'remove',\n      summary: 'Removes one or more dependencies from the package.json and runs rush update.',\n      documentation,\n      safeForSimultaneousRushProcesses: false,\n      parser\n    });\n\n    this._terminal = parser.terminal;\n\n    this._packageNameList = this.defineStringListParameter({\n      parameterLongName: '--package',\n      parameterShortName: '-p',\n      required: true,\n      argumentName: 'PACKAGE',\n      description:\n        'The name of the package which should be removed.' +\n        ' To remove multiple packages, run \"rush remove --package foo --package bar\".'\n    });\n    this._allFlag = this.defineFlagParameter({\n      parameterLongName: '--all',\n      description: 'If specified, the dependency will be removed from all projects that declare it.'\n    });\n    this._variantParameter = this.defineStringParameter(VARIANT_PARAMETER);\n  }\n\n  public async getUpdateOptionsAsync(): Promise<IPackageJsonUpdaterRushRemoveOptions> {\n    const projects: RushConfigurationProject[] = super.getProjects();\n\n    const packagesToRemove: IPackageForRushRemove[] = [];\n\n    for (const specifiedPackageName of this.specifiedPackageNameList) {\n      /**\n       * Name\n       */\n      const packageName: string = specifiedPackageName;\n\n      if (!this.rushConfiguration.packageNameParser.isValidName(packageName)) {\n        throw new Error(`The package name \"${packageName}\" is not valid.`);\n      }\n\n      for (const project of projects) {\n        if (\n          !project.packageJsonEditor.tryGetDependency(packageName) &&\n          !project.packageJsonEditor.tryGetDevDependency(packageName)\n        ) {\n          this._terminal.writeLine(\n            `The project \"${project.packageName}\" does not have \"${packageName}\" in package.json.`\n          );\n        }\n      }\n\n      packagesToRemove.push({ packageName });\n    }\n\n    const variant: string | undefined = await getVariantAsync(\n      this._variantParameter,\n      this.rushConfiguration,\n      true\n    );\n\n    return {\n      projects: projects,\n      packagesToUpdate: packagesToRemove,\n      skipUpdate: this._skipUpdateFlag.value,\n      debugInstall: this.parser.isDebug,\n      actionName: this.actionName,\n      variant\n    };\n  }\n}\n"]}