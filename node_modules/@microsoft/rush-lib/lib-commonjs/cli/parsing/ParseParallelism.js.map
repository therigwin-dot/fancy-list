{"version":3,"file":"ParseParallelism.js","sourceRoot":"","sources":["../../../src/cli/parsing/ParseParallelism.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,uCAAyB;AAEzB;;;GAGG;AACH,SAAgB,gBAAgB,CAC9B,cAAkC,EAClC,aAAuE;;kCAAvE,EAAA,sBAAwB,MAAA,EAAE,CAAC,oBAAoB,kDAAI,mCAAI,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM;IAEvE,IAAI,cAAc,EAAE,CAAC;QACnB,IAAI,cAAc,KAAK,KAAK,EAAE,CAAC;YAC7B,OAAO,aAAa,CAAC;QACvB,CAAC;aAAM,CAAC;YACN,MAAM,mBAAmB,GAAW,MAAM,CAAC,cAAc,CAAC,CAAC;YAE3D,IAAI,OAAO,cAAc,KAAK,QAAQ,IAAI,cAAc,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC9E,MAAM,gBAAgB,GAAW,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;gBAElF,IAAI,gBAAgB,IAAI,CAAC,IAAI,gBAAgB,GAAG,GAAG,EAAE,CAAC;oBACpD,MAAM,IAAI,KAAK,CACb,gCAAgC,cAAc,uDAAuD,CACtG,CAAC;gBACJ,CAAC;gBAED,MAAM,OAAO,GAAW,IAAI,CAAC,KAAK,CAAC,CAAC,gBAAgB,GAAG,GAAG,CAAC,GAAG,aAAa,CAAC,CAAC;gBAC7E,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC9B,CAAC;iBAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAE,CAAC;gBACvC,OAAO,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CACb,iCAAiC,cAAc,8CAA8C,CAC9F,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;SAAM,CAAC;QACN,4EAA4E;QAC5E,WAAW;QACX,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,EAAE,CAAC;YAC9B,4EAA4E;YAC5E,qEAAqE;YACrE,oGAAoG;YACpG,OAAO,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC;aAAM,CAAC;YACN,wEAAwE;YACxE,6BAA6B;YAC7B,OAAO,aAAa,CAAC;QACvB,CAAC;IACH,CAAC;AACH,CAAC;AA3CD,4CA2CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\n\n/**\n * Parses a command line specification for desired parallelism.\n * Factored out to enable unit tests\n */\nexport function parseParallelism(\n  rawParallelism: string | undefined,\n  numberOfCores: number = os.availableParallelism?.() ?? os.cpus().length\n): number {\n  if (rawParallelism) {\n    if (rawParallelism === 'max') {\n      return numberOfCores;\n    } else {\n      const parallelismAsNumber: number = Number(rawParallelism);\n\n      if (typeof rawParallelism === 'string' && rawParallelism.trim().endsWith('%')) {\n        const parsedPercentage: number = Number(rawParallelism.trim().replace(/\\%$/, ''));\n\n        if (parsedPercentage <= 0 || parsedPercentage > 100) {\n          throw new Error(\n            `Invalid percentage value of '${rawParallelism}', value cannot be less than '0%' or more than '100%'`\n          );\n        }\n\n        const workers: number = Math.floor((parsedPercentage / 100) * numberOfCores);\n        return Math.max(workers, 1);\n      } else if (!isNaN(parallelismAsNumber)) {\n        return Math.max(parallelismAsNumber, 1);\n      } else {\n        throw new Error(\n          `Invalid parallelism value of '${rawParallelism}', expected a number, a percentage, or 'max'`\n        );\n      }\n    }\n  } else {\n    // If an explicit parallelism number wasn't provided, then choose a sensible\n    // default.\n    if (os.platform() === 'win32') {\n      // On desktop Windows, some people have complained that their system becomes\n      // sluggish if Rush is using all the CPU cores.  Leave one thread for\n      // other operations. For CI environments, you can use the \"max\" argument to use all available cores.\n      return Math.max(numberOfCores - 1, 1);\n    } else {\n      // Unix-like operating systems have more balanced scheduling, so default\n      // to the number of CPU cores\n      return numberOfCores;\n    }\n  }\n}\n"]}