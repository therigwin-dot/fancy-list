{"version":3,"file":"SelectionParameterSet.js","sourceRoot":"","sources":["../../../src/cli/parsing/SelectionParameterSet.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AlreadyReportedError, PackageJsonLookup, type IPackageJson } from '@rushstack/node-core-library';\nimport { Colorize, type ITerminal } from '@rushstack/terminal';\nimport type {\n  CommandLineParameterProvider,\n  CommandLineStringListParameter,\n  CommandLineStringParameter\n} from '@rushstack/ts-command-line';\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { Selection } from '../../logic/Selection';\nimport type { ISelectorParser as ISelectorParser } from '../../logic/selectors/ISelectorParser';\nimport {\n  GitChangedProjectSelectorParser,\n  type IGitSelectorParserOptions\n} from '../../logic/selectors/GitChangedProjectSelectorParser';\nimport { NamedProjectSelectorParser } from '../../logic/selectors/NamedProjectSelectorParser';\nimport { TagProjectSelectorParser } from '../../logic/selectors/TagProjectSelectorParser';\nimport { VersionPolicyProjectSelectorParser } from '../../logic/selectors/VersionPolicyProjectSelectorParser';\nimport { SubspaceSelectorParser } from '../../logic/selectors/SubspaceSelectorParser';\nimport { RushConstants } from '../../logic/RushConstants';\nimport type { Subspace } from '../../api/Subspace';\n\nexport const SUBSPACE_LONG_ARG_NAME: '--subspace' = '--subspace';\n\ninterface ISelectionParameterSetOptions {\n  gitOptions: IGitSelectorParserOptions;\n  includeSubspaceSelector: boolean;\n}\n\n/**\n * This class is provides the set of command line parameters used to select projects\n * based on dependencies.\n *\n * It is a separate component such that unrelated actions can share the same parameters.\n */\nexport class SelectionParameterSet {\n  private readonly _rushConfiguration: RushConfiguration;\n\n  private readonly _fromProject: CommandLineStringListParameter;\n  private readonly _impactedByProject: CommandLineStringListParameter;\n  private readonly _impactedByExceptProject: CommandLineStringListParameter;\n  private readonly _onlyProject: CommandLineStringListParameter;\n  private readonly _toProject: CommandLineStringListParameter;\n  private readonly _toExceptProject: CommandLineStringListParameter;\n  private readonly _subspaceParameter: CommandLineStringParameter | undefined;\n\n  private readonly _fromVersionPolicy: CommandLineStringListParameter;\n  private readonly _toVersionPolicy: CommandLineStringListParameter;\n\n  private readonly _selectorParserByScope: Map<string, ISelectorParser<RushConfigurationProject>>;\n\n  public constructor(\n    rushConfiguration: RushConfiguration,\n    action: CommandLineParameterProvider,\n    options: ISelectionParameterSetOptions\n  ) {\n    const { gitOptions, includeSubspaceSelector } = options;\n    this._rushConfiguration = rushConfiguration;\n\n    const selectorParsers: Map<string, ISelectorParser<RushConfigurationProject>> = new Map<\n      string,\n      ISelectorParser<RushConfigurationProject>\n    >();\n\n    const nameSelectorParser: NamedProjectSelectorParser = new NamedProjectSelectorParser(rushConfiguration);\n    selectorParsers.set('name', nameSelectorParser);\n    selectorParsers.set('git', new GitChangedProjectSelectorParser(rushConfiguration, gitOptions));\n    selectorParsers.set('tag', new TagProjectSelectorParser(rushConfiguration));\n    selectorParsers.set('version-policy', new VersionPolicyProjectSelectorParser(rushConfiguration));\n    selectorParsers.set('subspace', new SubspaceSelectorParser(rushConfiguration));\n\n    this._selectorParserByScope = selectorParsers;\n\n    const getSpecifierCompletions: () => Promise<string[]> = async (): Promise<string[]> => {\n      const completions: string[] = ['.'];\n      for (const [prefix, selector] of selectorParsers) {\n        for (const completion of selector.getCompletions()) {\n          completions.push(`${prefix}:${completion}`);\n        }\n      }\n\n      // Include completions from the name parser without a scope\n      for (const completion of nameSelectorParser.getCompletions()) {\n        completions.push(completion);\n      }\n\n      return completions;\n    };\n\n    this._toProject = action.defineStringListParameter({\n      parameterLongName: '--to',\n      parameterShortName: '-t',\n      argumentName: 'PROJECT',\n      description:\n        'Normally all projects in the monorepo will be processed;' +\n        ' adding this parameter will instead select a subset of projects.' +\n        ' Each \"--to\" parameter expands this selection to include PROJECT and all its dependencies.' +\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\n      completions: getSpecifierCompletions\n    });\n    this._toExceptProject = action.defineStringListParameter({\n      parameterLongName: '--to-except',\n      parameterShortName: '-T',\n      argumentName: 'PROJECT',\n      description:\n        'Normally all projects in the monorepo will be processed;' +\n        ' adding this parameter will instead select a subset of projects.' +\n        ' Each \"--to-except\" parameter expands this selection to include all dependencies of PROJECT,' +\n        ' but not PROJECT itself.' +\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\n      completions: getSpecifierCompletions\n    });\n\n    this._fromProject = action.defineStringListParameter({\n      parameterLongName: '--from',\n      parameterShortName: '-f',\n      argumentName: 'PROJECT',\n      description:\n        'Normally all projects in the monorepo will be processed;' +\n        ' adding this parameter will instead select a subset of projects.' +\n        ' Each \"--from\" parameter expands this selection to include PROJECT and all projects that depend on it,' +\n        ' plus all dependencies of this set.' +\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\n      completions: getSpecifierCompletions\n    });\n    this._onlyProject = action.defineStringListParameter({\n      parameterLongName: '--only',\n      parameterShortName: '-o',\n      argumentName: 'PROJECT',\n      description:\n        'Normally all projects in the monorepo will be processed;' +\n        ' adding this parameter will instead select a subset of projects.' +\n        ' Each \"--only\" parameter expands this selection to include PROJECT; its dependencies are not added.' +\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\n        ' Note that this parameter is \"unsafe\" as it may produce a selection that excludes some dependencies.' +\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\n      completions: getSpecifierCompletions\n    });\n\n    this._impactedByProject = action.defineStringListParameter({\n      parameterLongName: '--impacted-by',\n      parameterShortName: '-i',\n      argumentName: 'PROJECT',\n      description:\n        'Normally all projects in the monorepo will be processed;' +\n        ' adding this parameter will instead select a subset of projects.' +\n        ' Each \"--impacted-by\" parameter expands this selection to include PROJECT and any projects that' +\n        ' depend on PROJECT (and thus might be broken by changes to PROJECT).' +\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\n        ' Note that this parameter is \"unsafe\" as it may produce a selection that excludes some dependencies.' +\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\n      completions: getSpecifierCompletions\n    });\n\n    this._impactedByExceptProject = action.defineStringListParameter({\n      parameterLongName: '--impacted-by-except',\n      parameterShortName: '-I',\n      argumentName: 'PROJECT',\n      description:\n        'Normally all projects in the monorepo will be processed;' +\n        ' adding this parameter will instead select a subset of projects.' +\n        ' Each \"--impacted-by-except\" parameter works the same as \"--impacted-by\" except that PROJECT itself' +\n        ' is not added to the selection.' +\n        ' \".\" can be used as shorthand for the project in the current working directory.' +\n        ' Note that this parameter is \"unsafe\" as it may produce a selection that excludes some dependencies.' +\n        ' For details, refer to the website article \"Selecting subsets of projects\".',\n      completions: getSpecifierCompletions\n    });\n\n    this._toVersionPolicy = action.defineStringListParameter({\n      parameterLongName: '--to-version-policy',\n      argumentName: 'VERSION_POLICY_NAME',\n      description:\n        'Normally all projects in the monorepo will be processed;' +\n        ' adding this parameter will instead select a subset of projects.' +\n        ' The \"--to-version-policy\" parameter is equivalent to specifying \"--to\" for each of the projects' +\n        ' belonging to VERSION_POLICY_NAME.' +\n        ' For details, refer to the website article \"Selecting subsets of projects\".'\n    });\n    this._fromVersionPolicy = action.defineStringListParameter({\n      parameterLongName: '--from-version-policy',\n      argumentName: 'VERSION_POLICY_NAME',\n      description:\n        'Normally all projects in the monorepo will be processed;' +\n        ' adding this parameter will instead select a subset of projects.' +\n        ' The \"--from-version-policy\" parameter is equivalent to specifying \"--from\" for each of the projects' +\n        ' belonging to VERSION_POLICY_NAME.' +\n        ' For details, refer to the website article \"Selecting subsets of projects\".'\n    });\n\n    if (includeSubspaceSelector) {\n      this._subspaceParameter = action.defineStringParameter({\n        parameterLongName: SUBSPACE_LONG_ARG_NAME,\n        argumentName: 'SUBSPACE_NAME',\n        description:\n          '(EXPERIMENTAL) Specifies a Rush subspace to be installed. Requires the \"subspacesEnabled\" feature to be enabled in subspaces.json.'\n      });\n    }\n  }\n\n  /**\n   * Used to implement the `preventSelectingAllSubspaces` policy which checks for commands that accidentally\n   * select everything.   Return `true` if the CLI was invoked with selection parameters.\n   *\n   * @remarks\n   * It is still possible for a user to select everything, but they must do so using an explicit selection\n   * such as `rush install --from thing-that-everything-depends-on`.\n   */\n  public didUserSelectAnything(): boolean {\n    if (this._subspaceParameter?.value) {\n      return true;\n    }\n\n    return [\n      this._impactedByProject,\n      this._impactedByExceptProject,\n      this._onlyProject,\n      this._toProject,\n      this._fromProject,\n      this._toExceptProject,\n      this._fromVersionPolicy,\n      this._toVersionPolicy\n    ].some((x) => x.values.length > 0);\n  }\n\n  /**\n   * Computes the set of selected projects based on all parameter values.\n   *\n   * If no parameters are specified, returns all projects in the Rush config file.\n   */\n  public async getSelectedProjectsAsync(terminal: ITerminal): Promise<Set<RushConfigurationProject>> {\n    // Hack out the old version-policy parameters\n    for (const value of this._fromVersionPolicy.values) {\n      (this._fromProject.values as string[]).push(`version-policy:${value}`);\n    }\n    for (const value of this._toVersionPolicy.values) {\n      (this._toProject.values as string[]).push(`version-policy:${value}`);\n    }\n\n    const selectors: CommandLineStringListParameter[] = [\n      this._onlyProject,\n      this._fromProject,\n      this._toProject,\n      this._toExceptProject,\n      this._impactedByProject,\n      this._impactedByExceptProject\n    ];\n\n    // Check if any of the selection parameters have a value specified on the command line\n    const isSelectionSpecified: boolean =\n      selectors.some((param: CommandLineStringListParameter) => param.values.length > 0) ||\n      !!this._subspaceParameter?.value;\n\n    // If no selection parameters are specified, return everything\n    if (!isSelectionSpecified) {\n      return new Set(this._rushConfiguration.projects);\n    }\n\n    const [\n      // Include exactly these projects (--only)\n      onlyProjects,\n      // Include all projects that depend on these projects, and all dependencies thereof\n      fromProjects,\n      // --to\n      toRaw,\n      // --to-except\n      toExceptProjects,\n      // --impacted-by\n      impactedByProjects,\n      // --impacted-by-except\n      impactedByExceptProjects\n    ] = await Promise.all(\n      selectors.map((param: CommandLineStringListParameter) => {\n        return this._evaluateProjectParameterAsync(param, terminal);\n      })\n    );\n\n    let subspaceProjects: Iterable<RushConfigurationProject> = [];\n\n    if (this._subspaceParameter?.value) {\n      if (!this._rushConfiguration.subspacesFeatureEnabled) {\n        // eslint-disable-next-line no-console\n        console.log();\n        // eslint-disable-next-line no-console\n        console.log(\n          Colorize.red(\n            `The \"${SUBSPACE_LONG_ARG_NAME}\" parameter can only be passed if \"subspacesEnabled\" ` +\n              'is set to true in subspaces.json.'\n          )\n        );\n        throw new AlreadyReportedError();\n      }\n\n      const subspace: Subspace = this._rushConfiguration.getSubspace(this._subspaceParameter.value);\n      subspaceProjects = subspace.getProjects();\n    }\n\n    const selection: Set<RushConfigurationProject> = Selection.union(\n      // Safe command line options\n      Selection.expandAllDependencies(\n        Selection.union(\n          toRaw,\n          Selection.directDependenciesOf(toExceptProjects),\n          // --from / --from-version-policy\n          Selection.expandAllConsumers(fromProjects)\n        )\n      ),\n      subspaceProjects,\n\n      // Unsafe command line option: --only\n      onlyProjects,\n\n      // Unsafe command line options: --impacted-by, --impacted-by-except\n      Selection.expandAllConsumers(\n        Selection.union(impactedByProjects, Selection.directConsumersOf(impactedByExceptProjects))\n      )\n    );\n\n    return selection;\n  }\n\n  /**\n   * Represents the selection as `--filter` parameters to pnpm.\n   *\n   * @remarks\n   *\n   * IMPORTANT: This function produces PNPM CLI operators that select projects from PNPM's temp workspace.\n   * If Rush subspaces are enabled, PNPM cannot see the complete Rush workspace, and therefore these operators\n   * would malfunction. In the current implementation, we calculate them anyway, then `BaseInstallAction.runAsync()`\n   * will overwrite `pnpmFilterArgumentValues` with a flat list of project names.  In the future, these\n   * two code paths will be combined into a single general solution.\n   *\n   * @see https://pnpm.io/filtering\n   */\n  public async getPnpmFilterArgumentValuesAsync(terminal: ITerminal): Promise<string[]> {\n    const args: string[] = [];\n\n    // Include exactly these projects (--only)\n    for (const project of await this._evaluateProjectParameterAsync(this._onlyProject, terminal)) {\n      args.push(project.packageName);\n    }\n\n    // Include all projects that depend on these projects, and all dependencies thereof\n    const fromProjects: Set<RushConfigurationProject> = Selection.union(\n      // --from\n      await this._evaluateProjectParameterAsync(this._fromProject, terminal)\n    );\n\n    // All specified projects and all projects that they depend on\n    for (const project of Selection.union(\n      // --to\n      await this._evaluateProjectParameterAsync(this._toProject, terminal),\n      // --from / --from-version-policy\n      Selection.expandAllConsumers(fromProjects)\n    )) {\n      args.push(`${project.packageName}...`);\n    }\n\n    // --to-except\n    // All projects that the project directly or indirectly declares as a dependency\n    for (const project of await this._evaluateProjectParameterAsync(this._toExceptProject, terminal)) {\n      args.push(`${project.packageName}^...`);\n    }\n\n    // --impacted-by\n    // The project and all projects directly or indirectly declare it as a dependency\n    for (const project of await this._evaluateProjectParameterAsync(this._impactedByProject, terminal)) {\n      args.push(`...${project.packageName}`);\n    }\n\n    // --impacted-by-except\n    // All projects that directly or indirectly declare the specified project as a dependency\n    for (const project of await this._evaluateProjectParameterAsync(\n      this._impactedByExceptProject,\n      terminal\n    )) {\n      args.push(`...^${project.packageName}`);\n    }\n\n    return args;\n  }\n\n  /**\n   * Usage telemetry for selection parameters. Only saved locally, and if requested in the config.\n   */\n  public getTelemetry(): { [key: string]: string } {\n    return {\n      command_from: `${this._fromProject.values.length > 0}`,\n      command_impactedBy: `${this._impactedByProject.values.length > 0}`,\n      command_impactedByExcept: `${this._impactedByExceptProject.values.length > 0}`,\n      command_only: `${this._onlyProject.values.length > 0}`,\n      command_to: `${this._toProject.values.length > 0}`,\n      command_toExcept: `${this._toExceptProject.values.length > 0}`,\n\n      command_fromVersionPolicy: `${this._fromVersionPolicy.values.length > 0}`,\n      command_toVersionPolicy: `${this._toVersionPolicy.values.length > 0}`\n    };\n  }\n\n  /**\n   * Computes the referents of parameters that accept a project identifier.\n   * Handles '.', unscoped names, and scoped names.\n   */\n  private async _evaluateProjectParameterAsync(\n    listParameter: CommandLineStringListParameter,\n    terminal: ITerminal\n  ): Promise<Set<RushConfigurationProject>> {\n    const parameterName: string = listParameter.longName;\n    const selection: Set<RushConfigurationProject> = new Set();\n\n    for (const rawSelector of listParameter.values) {\n      // Handle the special case of \"current project\" without a scope\n      if (rawSelector === '.') {\n        const packageJsonLookup: PackageJsonLookup = PackageJsonLookup.instance;\n        const packageJson: IPackageJson | undefined = packageJsonLookup.tryLoadPackageJsonFor(process.cwd());\n        if (packageJson) {\n          const project: RushConfigurationProject | undefined = this._rushConfiguration.getProjectByName(\n            packageJson.name\n          );\n\n          if (project) {\n            selection.add(project);\n          } else {\n            terminal.writeErrorLine(\n              `Rush is not currently running in a project directory specified in ${RushConstants.rushJsonFilename}. ` +\n                `The \".\" value for the ${parameterName} parameter is not allowed.`\n            );\n            throw new AlreadyReportedError();\n          }\n        } else {\n          terminal.writeErrorLine(\n            'Rush is not currently running in a project directory. ' +\n              `The \".\" value for the ${parameterName} parameter is not allowed.`\n          );\n          throw new AlreadyReportedError();\n        }\n\n        continue;\n      }\n\n      const scopeIndex: number = rawSelector.indexOf(':');\n\n      const scope: string = scopeIndex < 0 ? 'name' : rawSelector.slice(0, scopeIndex);\n      const unscopedSelector: string = scopeIndex < 0 ? rawSelector : rawSelector.slice(scopeIndex + 1);\n\n      const handler: ISelectorParser<RushConfigurationProject> | undefined =\n        this._selectorParserByScope.get(scope);\n      if (!handler) {\n        terminal.writeErrorLine(\n          `Unsupported selector prefix \"${scope}\" passed to \"${parameterName}\": \"${rawSelector}\".` +\n            ` Supported prefixes: ${Array.from(\n              this._selectorParserByScope.keys(),\n              (selectorParserScope: string) => `\"${selectorParserScope}:\"`\n            ).join(', ')}`\n        );\n        throw new AlreadyReportedError();\n      }\n\n      for (const project of await handler.evaluateSelectorAsync({\n        unscopedSelector,\n        terminal,\n        parameterName\n      })) {\n        selection.add(project);\n      }\n    }\n\n    return selection;\n  }\n}\n"]}