"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.RushStartupBanner = void 0;
const terminal_1 = require("@rushstack/terminal");
const RushConstants_1 = require("../logic/RushConstants");
const NodeJsCompatibility_1 = require("../logic/NodeJsCompatibility");
class RushStartupBanner {
    static logBanner(rushVersion, isManaged) {
        const nodeVersion = this._formatNodeVersion();
        const versionSuffix = rushVersion ? ' ' + this._formatRushVersion(rushVersion, isManaged) : '';
        // eslint-disable-next-line no-console
        console.log('\n' +
            terminal_1.Colorize.bold(`Rush Multi-Project Build Tool${versionSuffix}`) +
            terminal_1.Colorize.cyan(` - ${RushConstants_1.RushConstants.rushWebSiteUrl}`) +
            `\nNode.js version is ${nodeVersion}\n`);
    }
    static logStreamlinedBanner(rushVersion, isManaged) {
        const nodeVersion = this._formatNodeVersion();
        const versionSuffix = rushVersion ? ' ' + this._formatRushVersion(rushVersion, isManaged) : '';
        // eslint-disable-next-line no-console
        console.log(terminal_1.Colorize.bold(`Rush Multi-Project Build Tool${versionSuffix}`) + ` - Node.js ${nodeVersion}`);
    }
    static _formatNodeVersion() {
        const nodeVersion = process.versions.node;
        const nodeReleaseLabel = NodeJsCompatibility_1.NodeJsCompatibility.isOddNumberedVersion
            ? 'unstable'
            : NodeJsCompatibility_1.NodeJsCompatibility.isLtsVersion
                ? 'LTS'
                : 'pre-LTS';
        return `${nodeVersion} (${nodeReleaseLabel})`;
    }
    static _formatRushVersion(rushVersion, isManaged) {
        return rushVersion + terminal_1.Colorize.yellow(isManaged ? '' : ' (unmanaged)');
    }
}
exports.RushStartupBanner = RushStartupBanner;
//# sourceMappingURL=RushStartupBanner.js.map