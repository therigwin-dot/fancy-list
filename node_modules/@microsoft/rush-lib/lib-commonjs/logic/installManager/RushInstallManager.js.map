{"version":3,"file":"RushInstallManager.js","sourceRoot":"","sources":["../../../src/logic/installManager/RushInstallManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport * as ssri from 'ssri';\nimport {\n  JsonFile,\n  Text,\n  FileSystem,\n  FileConstants,\n  Sort,\n  InternalError,\n  AlreadyReportedError\n} from '@rushstack/node-core-library';\nimport { Colorize, PrintUtilities } from '@rushstack/terminal';\n\nimport { BaseInstallManager } from '../base/BaseInstallManager';\nimport type { IInstallManagerOptions } from '../base/BaseInstallManagerTypes';\nimport type { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\nimport type { IRushTempPackageJson } from '../base/BasePackage';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { RushConstants } from '../RushConstants';\nimport { Stopwatch } from '../../utilities/Stopwatch';\nimport { Utilities } from '../../utilities/Utilities';\nimport {\n  type PackageJsonEditor,\n  DependencyType,\n  type PackageJsonDependency\n} from '../../api/PackageJsonEditor';\nimport { DependencySpecifier, DependencySpecifierType } from '../DependencySpecifier';\nimport { InstallHelpers } from './InstallHelpers';\nimport { TempProjectHelper } from '../TempProjectHelper';\nimport type { RushGlobalFolder } from '../../api/RushGlobalFolder';\nimport type { RushConfiguration } from '../..';\nimport type { PurgeManager } from '../PurgeManager';\nimport { LinkManagerFactory } from '../LinkManagerFactory';\nimport type { BaseLinkManager } from '../base/BaseLinkManager';\nimport type { PnpmShrinkwrapFile, IPnpmShrinkwrapDependencyYaml } from '../pnpm/PnpmShrinkwrapFile';\nimport type { Subspace } from '../../api/Subspace';\n\nconst globEscape: (unescaped: string) => string = require('glob-escape'); // No @types/glob-escape package exists\n\n/**\n * The \"noMtime\" flag is new in tar@4.4.1 and not available yet for \\@types/tar.\n * As a temporary workaround, augment the type.\n */\ndeclare module 'tar' {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  export interface CreateOptions {\n    /**\n     * \"Set to true to omit writing mtime values for entries. Note that this prevents using other\n     * mtime-based features like tar.update or the keepNewer option with the resulting tar archive.\"\n     */\n    noMtime?: boolean;\n  }\n}\n\n/**\n * This class implements common logic between \"rush install\" and \"rush update\".\n */\nexport class RushInstallManager extends BaseInstallManager {\n  private _tempProjectHelper: TempProjectHelper;\n\n  public constructor(\n    rushConfiguration: RushConfiguration,\n    rushGlobalFolder: RushGlobalFolder,\n    purgeManager: PurgeManager,\n    options: IInstallManagerOptions\n  ) {\n    super(rushConfiguration, rushGlobalFolder, purgeManager, options);\n    this._tempProjectHelper = new TempProjectHelper(\n      this.rushConfiguration,\n      rushConfiguration.defaultSubspace\n    );\n  }\n\n  /**\n   * Regenerates the common/package.json and all temp_modules projects.\n   * If shrinkwrapFile is provided, this function also validates whether it contains\n   * everything we need to install and returns true if so; in all other cases,\n   * the return value is false.\n   *\n   * @override\n   */\n  public async prepareCommonTempAsync(\n    subspace: Subspace,\n    shrinkwrapFile: BaseShrinkwrapFile | undefined\n  ): Promise<{ shrinkwrapIsUpToDate: boolean; shrinkwrapWarnings: string[] }> {\n    const stopwatch: Stopwatch = Stopwatch.start();\n\n    const { fullUpgrade, variant } = this.options;\n\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\"\n    const tempProjectsFolder: string = path.join(\n      this.rushConfiguration.commonTempFolder,\n      RushConstants.rushTempProjectsFolderName\n    );\n\n    // eslint-disable-next-line no-console\n    console.log('\\n' + Colorize.bold('Updating temp projects in ' + tempProjectsFolder));\n\n    Utilities.createFolderWithRetry(tempProjectsFolder);\n\n    const shrinkwrapWarnings: string[] = [];\n\n    // We will start with the assumption that it's valid, and then set it to false if\n    // any of the checks fail\n    let shrinkwrapIsUpToDate: boolean = true;\n\n    if (!shrinkwrapFile) {\n      shrinkwrapIsUpToDate = false;\n    } else if (shrinkwrapFile.isWorkspaceCompatible && !fullUpgrade) {\n      // eslint-disable-next-line no-console\n      console.log();\n      // eslint-disable-next-line no-console\n      console.log(\n        Colorize.red(\n          'The shrinkwrap file had previously been updated to support workspaces. Run \"rush update --full\" ' +\n            'to update the shrinkwrap file.'\n        )\n      );\n      throw new AlreadyReportedError();\n    }\n\n    // dependency name --> version specifier\n    const allExplicitPreferredVersions: Map<string, string> = this.rushConfiguration.defaultSubspace\n      .getCommonVersions(variant)\n      .getAllPreferredVersions();\n\n    if (shrinkwrapFile) {\n      // Check any (explicitly) preferred dependencies first\n      allExplicitPreferredVersions.forEach((version: string, dependency: string) => {\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(dependency, version);\n\n        if (!shrinkwrapFile.hasCompatibleTopLevelDependency(dependencySpecifier)) {\n          shrinkwrapWarnings.push(\n            `Missing dependency \"${dependency}\" (${version}) required by the preferred versions from ` +\n              RushConstants.commonVersionsFilename\n          );\n          shrinkwrapIsUpToDate = false;\n        }\n      });\n\n      if (this._findMissingTempProjects(shrinkwrapFile)) {\n        // If any Rush project's tarball is missing from the shrinkwrap file, then we need to update\n        // the shrinkwrap file.\n        shrinkwrapIsUpToDate = false;\n      }\n\n      // If there are orphaned projects, we need to update\n      const orphanedProjects: ReadonlyArray<string> = shrinkwrapFile.findOrphanedProjects(\n        this.rushConfiguration,\n        this.rushConfiguration.defaultSubspace\n      );\n\n      if (orphanedProjects.length > 0) {\n        for (const orphanedProject of orphanedProjects) {\n          shrinkwrapWarnings.push(\n            `Your ${this.rushConfiguration.shrinkwrapFilePhrase} references \"${orphanedProject}\" ` +\n              `which was not found in ${RushConstants.rushJsonFilename}`\n          );\n        }\n        shrinkwrapIsUpToDate = false;\n      }\n    }\n\n    // dependency name --> version specifier\n    const commonDependencies: Map<string, string> = new Map([\n      ...allExplicitPreferredVersions,\n      ...this.rushConfiguration.getImplicitlyPreferredVersions(subspace, variant)\n    ]);\n\n    // To make the common/package.json file more readable, sort alphabetically\n    // according to rushProject.tempProjectName instead of packageName.\n    const sortedRushProjects: RushConfigurationProject[] = this.rushConfiguration.projects.slice(0);\n    Sort.sortBy(sortedRushProjects, (x) => x.tempProjectName);\n\n    for (const rushProject of sortedRushProjects) {\n      const packageJson: PackageJsonEditor = rushProject.packageJsonEditor;\n\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\n      const tarballFile: string = this._tempProjectHelper.getTarballFilePath(rushProject);\n\n      // Example: dependencies[\"@rush-temp/my-project-2\"] = \"file:./projects/my-project-2.tgz\"\n      commonDependencies.set(\n        rushProject.tempProjectName,\n        `file:./${RushConstants.rushTempProjectsFolderName}/${rushProject.unscopedTempProjectName}.tgz`\n      );\n\n      const tempPackageJson: IRushTempPackageJson = {\n        name: rushProject.tempProjectName,\n        version: '0.0.0',\n        private: true,\n        dependencies: {}\n      };\n\n      // Collect pairs of (packageName, packageVersion) to be added as dependencies of the @rush-temp package.json\n      const tempDependencies: Map<string, string> = new Map<string, string>();\n\n      // These can be regular, optional, or peer dependencies (but NOT dev dependencies).\n      // (A given packageName will never appear more than once in this list.)\n      for (const dependency of packageJson.dependencyList) {\n        if (this.options.fullUpgrade && this._revertWorkspaceNotation(dependency)) {\n          shrinkwrapIsUpToDate = false;\n        }\n\n        // If there are any optional dependencies, copy directly into the optionalDependencies field.\n        if (dependency.dependencyType === DependencyType.Optional) {\n          if (!tempPackageJson.optionalDependencies) {\n            tempPackageJson.optionalDependencies = {};\n          }\n          tempPackageJson.optionalDependencies[dependency.name] = dependency.version;\n        } else {\n          tempDependencies.set(dependency.name, dependency.version);\n        }\n      }\n\n      for (const dependency of packageJson.devDependencyList) {\n        if (this.options.fullUpgrade && this._revertWorkspaceNotation(dependency)) {\n          shrinkwrapIsUpToDate = false;\n        }\n\n        // If there are devDependencies, we need to merge them with the regular dependencies.  If the same\n        // library appears in both places, then the dev dependency wins (because presumably it's saying what you\n        // want right now for development, not the range that you support for consumers).\n        tempDependencies.set(dependency.name, dependency.version);\n      }\n      Sort.sortMapKeys(tempDependencies);\n\n      for (const [packageName, packageVersion] of tempDependencies.entries()) {\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(packageName, packageVersion);\n\n        // Is there a locally built Rush project that could satisfy this dependency?\n        // If so, then we will symlink to the project folder rather than to common/temp/node_modules.\n        // In this case, we don't want \"npm install\" to process this package, but we do need\n        // to record this decision for linking later, so we add it to a special 'rushDependencies' field.\n        const localProject: RushConfigurationProject | undefined =\n          this.rushConfiguration.getProjectByName(packageName);\n\n        if (localProject) {\n          // Don't locally link if it's listed in the decoupledLocalDependencies\n          if (!rushProject.decoupledLocalDependencies.has(packageName)) {\n            // Also, don't locally link if the SemVer doesn't match\n            const localProjectVersion: string = localProject.packageJsonEditor.version;\n            if (semver.satisfies(localProjectVersion, packageVersion)) {\n              // We will locally link this package, so instead add it to our special \"rushDependencies\"\n              // field in the package.json file.\n              if (!tempPackageJson.rushDependencies) {\n                tempPackageJson.rushDependencies = {};\n              }\n              tempPackageJson.rushDependencies[packageName] = packageVersion;\n              continue;\n            }\n          }\n        }\n\n        // We will NOT locally link this package; add it as a regular dependency.\n        tempPackageJson.dependencies![packageName] = packageVersion;\n\n        if (\n          shrinkwrapFile &&\n          !shrinkwrapFile.tryEnsureCompatibleDependency(dependencySpecifier, rushProject.tempProjectName)\n        ) {\n          shrinkwrapWarnings.push(\n            `Missing dependency \"${packageName}\" (${packageVersion}) required by \"${rushProject.packageName}\"`\n          );\n          shrinkwrapIsUpToDate = false;\n        }\n      }\n\n      if (this.rushConfiguration.packageManager === 'yarn') {\n        // This feature is only implemented by the Yarn package manager\n        if (packageJson.resolutionsList.length > 0) {\n          tempPackageJson.resolutions = packageJson.saveToObject().resolutions;\n        }\n      }\n\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2\"\n      const tempProjectFolder: string = this._tempProjectHelper.getTempProjectFolder(rushProject);\n\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2\\package.json\"\n      const tempPackageJsonFilename: string = path.join(tempProjectFolder, FileConstants.PackageJson);\n\n      // we only want to overwrite the package if the existing tarball's package.json is different from tempPackageJson\n      let shouldOverwrite: boolean = true;\n      try {\n        // if the tarball and the temp file still exist, then compare the contents\n        if (FileSystem.exists(tarballFile) && FileSystem.exists(tempPackageJsonFilename)) {\n          // compare the extracted package.json with the one we are about to write\n          const oldBuffer: Buffer = FileSystem.readFileToBuffer(tempPackageJsonFilename);\n          const newBuffer: Buffer = Buffer.from(JsonFile.stringify(tempPackageJson));\n\n          if (Buffer.compare(oldBuffer, newBuffer) === 0) {\n            shouldOverwrite = false;\n          }\n        }\n      } catch (error) {\n        // ignore the error, we will go ahead and create a new tarball\n      }\n\n      if (shouldOverwrite) {\n        try {\n          // ensure the folder we are about to zip exists\n          Utilities.createFolderWithRetry(tempProjectFolder);\n\n          // remove the old tarball & old temp package json, this is for any cases where new tarball creation\n          // fails, and the shouldOverwrite logic is messed up because the my-project-2\\package.json\n          // exists and is updated, but the tarball is not accurate\n          FileSystem.deleteFile(tarballFile);\n          FileSystem.deleteFile(tempPackageJsonFilename);\n\n          // write the expected package.json file into the zip staging folder\n          JsonFile.save(tempPackageJson, tempPackageJsonFilename);\n\n          // Delete the existing tarball and create a new one\n          this._tempProjectHelper.createTempProjectTarball(rushProject);\n\n          // eslint-disable-next-line no-console\n          console.log(`Updating ${tarballFile}`);\n        } catch (error) {\n          // eslint-disable-next-line no-console\n          console.log(Colorize.yellow(error as string));\n          // delete everything in case of any error\n          FileSystem.deleteFile(tarballFile);\n          FileSystem.deleteFile(tempPackageJsonFilename);\n        }\n      }\n\n      // When using frozen shrinkwrap, we need to validate that the tarball integrities are up-to-date\n      // with the shrinkwrap file, since these will cause install to fail.\n      if (\n        shrinkwrapFile &&\n        this.rushConfiguration.isPnpm &&\n        this.rushConfiguration.experimentsConfiguration.configuration.usePnpmFrozenLockfileForRushInstall\n      ) {\n        const pnpmShrinkwrapFile: PnpmShrinkwrapFile = shrinkwrapFile as PnpmShrinkwrapFile;\n        const tarballIntegrityValid: boolean = await this._validateRushProjectTarballIntegrityAsync(\n          pnpmShrinkwrapFile,\n          rushProject\n        );\n        if (!tarballIntegrityValid) {\n          shrinkwrapIsUpToDate = false;\n          shrinkwrapWarnings.push(\n            `Invalid or missing tarball integrity hash in shrinkwrap for \"${rushProject.packageName}\"`\n          );\n        }\n      }\n\n      // Save the package.json if we modified the version references and warn that the package.json was modified\n      if (packageJson.saveIfModified()) {\n        // eslint-disable-next-line no-console\n        console.log(\n          Colorize.yellow(\n            `\"${rushProject.packageName}\" depends on one or more local packages which used \"workspace:\" ` +\n              'notation. The package.json has been modified and must be committed to source control.'\n          )\n        );\n      }\n    }\n\n    // Remove the workspace file if it exists\n    if (this.rushConfiguration.isPnpm) {\n      const workspaceFilePath: string = path.join(\n        this.rushConfiguration.commonTempFolder,\n        'pnpm-workspace.yaml'\n      );\n      try {\n        await FileSystem.deleteFileAsync(workspaceFilePath);\n      } catch (e) {\n        if (!FileSystem.isNotExistError(e as Error)) {\n          throw e;\n        }\n      }\n    }\n\n    // Write the common package.json\n    InstallHelpers.generateCommonPackageJson(\n      this.rushConfiguration,\n      this.rushConfiguration.defaultSubspace,\n      commonDependencies,\n      this._terminal\n    );\n\n    stopwatch.stop();\n    // eslint-disable-next-line no-console\n    console.log(`Finished creating temporary modules (${stopwatch.toString()})`);\n\n    return { shrinkwrapIsUpToDate, shrinkwrapWarnings };\n  }\n\n  private _revertWorkspaceNotation(dependency: PackageJsonDependency): boolean {\n    const specifier: DependencySpecifier = new DependencySpecifier(dependency.name, dependency.version);\n    if (specifier.specifierType !== DependencySpecifierType.Workspace) {\n      return false;\n    }\n    // Replace workspace notation with the supplied version range\n    if (specifier.versionSpecifier === '*') {\n      // When converting to workspaces, exact package versions are replaced with a '*', so undo this\n      const localProject: RushConfigurationProject | undefined = this.rushConfiguration.getProjectByName(\n        specifier.packageName\n      );\n      if (!localProject) {\n        throw new InternalError(`Could not find local project with package name ${specifier.packageName}`);\n      }\n      dependency.setVersion(localProject.packageJson.version);\n    } else {\n      dependency.setVersion(specifier.versionSpecifier);\n    }\n    return true;\n  }\n\n  private async _validateRushProjectTarballIntegrityAsync(\n    shrinkwrapFile: PnpmShrinkwrapFile | undefined,\n    rushProject: RushConfigurationProject\n  ): Promise<boolean> {\n    if (shrinkwrapFile) {\n      const tempProjectDependencyKey: string | undefined = shrinkwrapFile.getTempProjectDependencyKey(\n        rushProject.tempProjectName\n      );\n      if (!tempProjectDependencyKey) {\n        return false;\n      }\n\n      const parentShrinkwrapEntry: IPnpmShrinkwrapDependencyYaml =\n        shrinkwrapFile.getShrinkwrapEntryFromTempProjectDependencyKey(tempProjectDependencyKey)!;\n      const newIntegrity: string = (\n        await ssri.fromStream(fs.createReadStream(this._tempProjectHelper.getTarballFilePath(rushProject)))\n      ).toString();\n\n      if (!parentShrinkwrapEntry.resolution || parentShrinkwrapEntry.resolution.integrity !== newIntegrity) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check whether or not the install is already valid, and therefore can be skipped.\n   *\n   * @override\n   */\n  protected async canSkipInstallAsync(\n    lastModifiedDate: Date,\n    subspace: Subspace,\n    variant: string | undefined\n  ): Promise<boolean> {\n    if (!(await super.canSkipInstallAsync(lastModifiedDate, subspace, variant))) {\n      return false;\n    }\n\n    const potentiallyChangedFiles: string[] = [];\n\n    // Also consider timestamps for all the temp tarballs. (createTempModulesAndCheckShrinkwrap() will\n    // carefully preserve these timestamps unless something has changed.)\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\n    potentiallyChangedFiles.push(\n      ...this.rushConfiguration.projects.map((x) => {\n        return this._tempProjectHelper.getTarballFilePath(x);\n      })\n    );\n\n    return Utilities.isFileTimestampCurrentAsync(lastModifiedDate, potentiallyChangedFiles);\n  }\n\n  /**\n   * Runs \"npm/pnpm/yarn install\" in the \"common/temp\" folder.\n   *\n   * @override\n   */\n  protected async installAsync(cleanInstall: boolean, subspace: Subspace): Promise<void> {\n    // Since we are actually running npm/pnpm/yarn install, recreate all the temp project tarballs.\n    // This ensures that any existing tarballs with older header bits will be regenerated.\n    // It is safe to assume that temp project pacakge.jsons already exist.\n    for (const rushProject of this.rushConfiguration.projects) {\n      this._tempProjectHelper.createTempProjectTarball(rushProject);\n    }\n\n    // NOTE: The PNPM store is supposed to be transactionally safe, so we don't delete it automatically.\n    // The user must request that via the command line.\n    if (cleanInstall) {\n      if (this.rushConfiguration.packageManager === 'npm') {\n        // eslint-disable-next-line no-console\n        console.log(`Deleting the \"npm-cache\" folder`);\n        // This is faster and more thorough than \"npm cache clean\"\n        this.installRecycler.moveFolder(this.rushConfiguration.npmCacheFolder);\n\n        // eslint-disable-next-line no-console\n        console.log(`Deleting the \"npm-tmp\" folder`);\n        this.installRecycler.moveFolder(this.rushConfiguration.npmTmpFolder);\n      }\n    }\n\n    // Example: \"C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm\"\n    const packageManagerFilename: string = this.rushConfiguration.packageManagerToolFilename;\n\n    const packageManagerEnv: NodeJS.ProcessEnv = InstallHelpers.getPackageManagerEnvironment(\n      this.rushConfiguration,\n      this.options\n    );\n\n    const commonNodeModulesFolder: string = path.join(\n      this.rushConfiguration.commonTempFolder,\n      RushConstants.nodeModulesFolderName\n    );\n\n    // Is there an existing \"node_modules\" folder to consider?\n    if (FileSystem.exists(commonNodeModulesFolder)) {\n      // Should we delete the entire \"node_modules\" folder?\n      if (cleanInstall) {\n        // YES: Delete \"node_modules\"\n\n        // Explain to the user why we are hosing their node_modules folder\n        // eslint-disable-next-line no-console\n        console.log('Deleting files from ' + commonNodeModulesFolder);\n\n        this.installRecycler.moveFolder(commonNodeModulesFolder);\n\n        Utilities.createFolderWithRetry(commonNodeModulesFolder);\n      } else {\n        // NO: Prepare to do an incremental install in the \"node_modules\" folder\n\n        // note: it is not necessary to run \"prune\" with pnpm\n        if (this.rushConfiguration.packageManager === 'npm') {\n          // eslint-disable-next-line no-console\n          console.log(\n            `Running \"${this.rushConfiguration.packageManager} prune\"` +\n              ` in ${this.rushConfiguration.commonTempFolder}`\n          );\n          const args: string[] = ['prune'];\n          this.pushConfigurationArgs(args, this.options, subspace);\n\n          await Utilities.executeCommandWithRetryAsync(\n            {\n              command: packageManagerFilename,\n              args: args,\n              workingDirectory: this.rushConfiguration.commonTempFolder,\n              environment: packageManagerEnv\n            },\n            this.options.maxInstallAttempts\n          );\n\n          // Delete the (installed image of) the temp projects, since \"npm install\" does not\n          // detect changes for \"file:./\" references.\n          // We recognize the temp projects by their names, which always start with \"rush-\".\n\n          // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\"\n          const pathToDeleteWithoutStar: string = path.join(\n            commonNodeModulesFolder,\n            RushConstants.rushTempNpmScope\n          );\n          // eslint-disable-next-line no-console\n          console.log(`Deleting ${pathToDeleteWithoutStar}\\\\*`);\n          // Glob can't handle Windows paths\n          const normalizedPathToDeleteWithoutStar: string = Text.replaceAll(\n            pathToDeleteWithoutStar,\n            '\\\\',\n            '/'\n          );\n\n          const { default: glob } = await import('fast-glob');\n          const tempModulePaths: string[] = await glob(globEscape(normalizedPathToDeleteWithoutStar) + '/*');\n          // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/*\"\n          for (const tempModulePath of tempModulePaths) {\n            // We could potentially use AsyncRecycler here, but in practice these folders tend\n            // to be very small\n            Utilities.dangerouslyDeletePath(tempModulePath);\n          }\n        }\n      }\n    }\n\n    if (this.rushConfiguration.packageManager === 'yarn') {\n      // Yarn does not correctly detect changes to a tarball, so we need to forcibly clear its cache\n      const yarnRushTempCacheFolder: string = path.join(\n        this.rushConfiguration.yarnCacheFolder,\n        'v2',\n        'npm-@rush-temp'\n      );\n      if (FileSystem.exists(yarnRushTempCacheFolder)) {\n        // eslint-disable-next-line no-console\n        console.log('Deleting ' + yarnRushTempCacheFolder);\n        Utilities.dangerouslyDeletePath(yarnRushTempCacheFolder);\n      }\n    }\n\n    // Run \"npm install\" in the common folder\n    const installArgs: string[] = ['install'];\n    this.pushConfigurationArgs(installArgs, this.options, subspace);\n\n    // eslint-disable-next-line no-console\n    console.log(\n      '\\n' +\n        Colorize.bold(\n          `Running \"${this.rushConfiguration.packageManager} install\" in` +\n            ` ${this.rushConfiguration.commonTempFolder}`\n        ) +\n        '\\n'\n    );\n\n    // If any diagnostic options were specified, then show the full command-line\n    if (this.options.debug || this.options.collectLogFile || this.options.networkConcurrency) {\n      // eslint-disable-next-line no-console\n      console.log(\n        '\\n' +\n          Colorize.green('Invoking package manager: ') +\n          FileSystem.getRealPath(packageManagerFilename) +\n          ' ' +\n          installArgs.join(' ') +\n          '\\n'\n      );\n    }\n\n    await Utilities.executeCommandWithRetryAsync(\n      {\n        command: packageManagerFilename,\n        args: installArgs,\n        workingDirectory: this.rushConfiguration.commonTempFolder,\n        environment: packageManagerEnv,\n        suppressOutput: false\n      },\n      this.options.maxInstallAttempts,\n      () => {\n        if (this.rushConfiguration.isPnpm) {\n          // eslint-disable-next-line no-console\n          console.log(Colorize.yellow(`Deleting the \"node_modules\" folder`));\n          this.installRecycler.moveFolder(commonNodeModulesFolder);\n\n          // Leave the pnpm-store as is for the retry. This ensures that packages that have already\n          // been downloaded need not be downloaded again, thereby potentially increasing the chances\n          // of a subsequent successful install.\n\n          Utilities.createFolderWithRetry(commonNodeModulesFolder);\n        }\n      }\n    );\n\n    if (this.rushConfiguration.packageManager === 'npm') {\n      // eslint-disable-next-line no-console\n      console.log('\\n' + Colorize.bold('Running \"npm shrinkwrap\"...'));\n      const npmArgs: string[] = ['shrinkwrap'];\n      this.pushConfigurationArgs(npmArgs, this.options, subspace);\n      await Utilities.executeCommandAsync({\n        command: this.rushConfiguration.packageManagerToolFilename,\n        args: npmArgs,\n        workingDirectory: this.rushConfiguration.commonTempFolder\n      });\n      // eslint-disable-next-line no-console\n      console.log('\"npm shrinkwrap\" completed\\n');\n\n      await this._fixupNpm5RegressionAsync();\n    }\n  }\n\n  protected async postInstallAsync(subspace: Subspace): Promise<void> {\n    if (!this.options.noLink) {\n      const linkManager: BaseLinkManager = LinkManagerFactory.getLinkManager(this.rushConfiguration);\n      await linkManager.createSymlinksForProjectsAsync(false);\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\n        '\\n' + Colorize.yellow('Since \"--no-link\" was specified, you will need to run \"rush link\" manually.')\n      );\n    }\n  }\n\n  /**\n   * This is a workaround for a bug introduced in NPM 5 (and still unfixed as of NPM 5.5.1):\n   * https://github.com/npm/npm/issues/19006\n   *\n   * The regression is that \"npm install\" sets the package.json \"version\" field for the\n   * @rush-temp projects to a value like \"file:projects/example.tgz\", when it should be \"0.0.0\".\n   * This causes linking to fail later, when read-package-tree tries to parse the bad version.\n   * The error looks like this:\n   *\n   * ERROR: Failed to parse package.json for foo: Invalid version: \"file:projects/example.tgz\"\n   *\n   * Our workaround is to rewrite the package.json files for each of the @rush-temp projects\n   * in the node_modules folder, after \"npm install\" completes.\n   */\n  private async _fixupNpm5RegressionAsync(): Promise<void> {\n    const pathToDeleteWithoutStar: string = path.join(\n      this.rushConfiguration.commonTempFolder,\n      'node_modules',\n      RushConstants.rushTempNpmScope\n    );\n    // Glob can't handle Windows paths\n    const normalizedPathToDeleteWithoutStar: string = Text.replaceAll(pathToDeleteWithoutStar, '\\\\', '/');\n\n    let anyChanges: boolean = false;\n\n    const { default: glob } = await import('fast-glob');\n    const packageJsonPaths: string[] = await glob(\n      globEscape(normalizedPathToDeleteWithoutStar) + '/*/package.json'\n    );\n    // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/*/package.json\"\n    for (const packageJsonPath of packageJsonPaths) {\n      // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/example/package.json\"\n      const packageJsonObject: IRushTempPackageJson = JsonFile.load(packageJsonPath);\n\n      // The temp projects always use \"0.0.0\" as their version\n      packageJsonObject.version = '0.0.0';\n\n      if (JsonFile.save(packageJsonObject, packageJsonPath, { onlyIfChanged: true })) {\n        anyChanges = true;\n      }\n    }\n\n    if (anyChanges) {\n      // eslint-disable-next-line no-console\n      console.log(\n        '\\n' + Colorize.yellow(PrintUtilities.wrapWords(`Applied workaround for NPM 5 bug`)) + '\\n'\n      );\n    }\n  }\n\n  /**\n   * Checks for temp projects that exist in the shrinkwrap file, but don't exist\n   * in rush.json.  This might occur, e.g. if a project was recently deleted or renamed.\n   *\n   * @returns true if orphans were found, or false if everything is okay\n   */\n  private _findMissingTempProjects(shrinkwrapFile: BaseShrinkwrapFile): boolean {\n    const tempProjectNames: Set<string> = new Set(shrinkwrapFile.getTempProjectNames());\n\n    for (const rushProject of this.rushConfiguration.projects) {\n      if (!tempProjectNames.has(rushProject.tempProjectName)) {\n        // eslint-disable-next-line no-console\n        console.log(\n          '\\n' +\n            Colorize.yellow(\n              PrintUtilities.wrapWords(\n                `Your ${this.rushConfiguration.shrinkwrapFilePhrase} is missing the project \"${rushProject.packageName}\".`\n              )\n            ) +\n            '\\n'\n        );\n        return true; // found one\n      }\n    }\n\n    return false; // none found\n  }\n}\n"]}