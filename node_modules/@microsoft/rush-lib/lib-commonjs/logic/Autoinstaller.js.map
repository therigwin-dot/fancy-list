{"version":3,"file":"Autoinstaller.js","sourceRoot":"","sources":["../../src/logic/Autoinstaller.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAE7B,oEAQsC;AACtC,kDAA+C;AAE/C,sDAAmD;AAEnD,gEAA6D;AAC7D,oEAAiE;AAEjE,mDAAgD;AAChD,4DAAyD;AACzD,wEAAqE;AAUrE,MAAa,aAAa;IAOxB,YAAmB,OAA8B;;QAC/C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACtC,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACpD,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,gBAAgB,CAAC;QAClD,IAAI,CAAC,sBAAsB;YACzB,MAAA,OAAO,CAAC,qBAAqB,mCAAI,6CAAqB,CAAC,2BAA2B,EAAE,CAAC;QAEvF,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,6CAA6C;IAC7C,IAAW,cAAc;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAClF,CAAC;IAED,+DAA+D;IAC/D,IAAW,kBAAkB;QAC3B,OAAO,IAAI,CAAC,IAAI,CACd,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAClD,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAC3C,CAAC;IACJ,CAAC;IAED,0DAA0D;IAC1D,IAAW,eAAe;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAClG,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,iBAAyB;QAClD,MAAM,WAAW,GAA8B,+BAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QACvF,IAAI,WAAW,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,uBAAuB,iBAAiB,gBAAgB,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;QAChG,CAAC;QACD,IAAI,WAAW,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,uBAAuB,iBAAiB,iCAAiC,CAAC,CAAC;QAC7F,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,YAAY;QACvB,MAAM,qBAAqB,GAAW,IAAI,CAAC,cAAc,CAAC;QAE1D,IAAI,CAAC,8BAAU,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,CAAC;YAC9C,MAAM,IAAI,KAAK,CACb,qBAAqB,IAAI,CAAC,IAAI,+DAA+D,IAAI,CAAC,IAAI,IAAI,CAC3G,CAAC;QACJ,CAAC;QAED,MAAM,+BAAc,CAAC,8BAA8B,CACjD,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,iBAAiB,EACtB,6BAAa,CAAC,yBAAyB,EACvC,IAAI,CAAC,sBAAsB,CAC5B,CAAC;QAEF,sDAAsD;QACtD,MAAM,mBAAmB,GAAW,IAAI,CAAC,QAAQ,CAC/C,IAAI,CAAC,kBAAkB,CAAC,cAAc,EACtC,qBAAqB,CACtB,CAAC;QAEF,IAAI,CAAC,kCAAkC,CAAC,uBAAuB,mBAAmB,aAAa,CAAC,CAAC;QAEjG,MAAM,IAAI,GAAa,MAAM,4BAAQ,CAAC,YAAY,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAAC;QAE3F,IAAI,CAAC;YACH,wDAAwD;YACxD,MAAM,mBAAmB,GAAW,IAAI,CAAC,IAAI,CAC3C,qBAAqB,EACrB,6BAAa,CAAC,qBAAqB,EACnC,MAAM,CACP,CAAC;YAEF,MAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,cAAc,CAAC,CAAC;YACjF,MAAM,WAAW,GAAiB,4BAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAEjE,MAAM,eAAe,GAAoB,IAAI,iCAAe,CAAC,mBAAmB,EAAE;gBAChF,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI;gBAC3B,cAAc,EAAE,IAAI,CAAC,kBAAkB,CAAC,cAAc;gBACtD,qBAAqB,EAAE,IAAI,CAAC,kBAAkB,CAAC,yBAAyB;gBACxE,WAAW,EAAE,WAAW;gBACxB,cAAc,EAAE,IAAI,CAAC,kBAAkB,CAAC,cAAc;aACvD,CAAC,CAAC;YAEH,yDAAyD;YACzD,MAAM,iBAAiB,GAAW,GAAG,qBAAqB,IAAI,6BAAa,CAAC,qBAAqB,EAAE,CAAC;YACpG,MAAM,QAAQ,GAAW,GAAG,iBAAiB,0BAA0B,CAAC;YACxE,MAAM,sBAAsB,GAC1B,CAAC,CAAC,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,8BAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAE1E,IAAI,sBAAsB,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACrD,IAAI,8BAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAAC;oBACzC,IAAI,CAAC,kCAAkC,CAAC,0BAA0B,GAAG,iBAAiB,CAAC,CAAC;oBACxF,8BAAU,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;gBAClD,CAAC;gBAED,iDAAiD;gBACjD,qBAAS,CAAC,SAAS,CAAC;oBAClB,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC,sBAAsB;oBACjE,iBAAiB,EAAE,qBAAqB;oBACxC,2BAA2B,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM;iBAC5D,CAAC,CAAC;gBAEH,IAAI,CAAC,kCAAkC,CACrC,iCAAiC,qBAAqB,OAAO,CAC9D,CAAC;gBAEF,MAAM,qBAAS,CAAC,mBAAmB,CAAC;oBAClC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,0BAA0B;oBAC3D,IAAI,EAAE,CAAC,SAAS,EAAE,mBAAmB,CAAC;oBACtC,gBAAgB,EAAE,qBAAqB;oBACvC,eAAe,EAAE,IAAI;iBACtB,CAAC,CAAC;gBAEH,6EAA6E;gBAC7E,MAAM,eAAe,CAAC,WAAW,EAAE,CAAC;gBAEpC,8BAAU,CAAC,SAAS,CAClB,QAAQ,EACR,gHAAgH,CACjH,CAAC;gBAEF,IAAI,CAAC,kCAAkC,CAAC,uCAAuC,CAAC,CAAC;YACnF,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,kCAAkC,CAAC,8CAA8C,CAAC,CAAC;YAC1F,CAAC;QACH,CAAC;gBAAS,CAAC;YACT,wDAAwD;YACxD,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,MAAM,+BAAc,CAAC,8BAA8B,CACjD,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,iBAAiB,EACtB,6BAAa,CAAC,yBAAyB,EACvC,IAAI,CAAC,sBAAsB,CAC5B,CAAC;QAEF,MAAM,4BAA4B,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QAE5F,IAAI,CAAC,CAAC,MAAM,8BAAU,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC,EAAE,CAAC;YAClE,MAAM,IAAI,KAAK,CAAC,mDAAmD,GAAG,4BAA4B,CAAC,CAAC;QACtG,CAAC;QAED,IAAI,CAAC,kCAAkC,CACrC,mCAAmC,4BAA4B,EAAE,CAClE,CAAC;QAEF,IAAI,eAAe,GAAW,EAAE,CAAC;QAEjC,IAAI,MAAM,8BAAU,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC;YAC1D,eAAe,GAAG,8BAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,kBAAkB,EAAE,+BAAW,CAAC,EAAE,EAAE,CAAC,CAAC;YACvG,IAAI,CAAC,kCAAkC,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC/E,MAAM,8BAAU,CAAC,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC1D,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;gBACnC,0DAA0D;gBAC1D,EAAE;gBACF,uGAAuG;gBACvG,iGAAiG;gBACjG,kGAAkG;gBAClG,4EAA4E;gBAC5E,MAAM,kBAAkB,GAAuB,IAAI,CAAC,kBAAkB;qBACnE,qBAA2C,CAAC;gBAC/C,MAAM,8BAAU,CAAC,eAAe,CAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,kBAAkB,CAAC,8BAA8B,CAAC,CAClF,CAAC;YACJ,CAAC;QACH,CAAC;QAED,oGAAoG;QACpG,MAAM,iBAAiB,GAAsB,qCAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC1F,IAAI,iBAAiB,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAClD,MAAM,IAAI,KAAK,CACb,mEAAmE;gBACjE,kCAAkC;gBAClC,IAAI,CAAC,eAAe,CACvB,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,kCAAkC,EAAE,CAAC;QAE1C,qBAAS,CAAC,SAAS,CAAC;YAClB,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC,sBAAsB;YACjE,iBAAiB,EAAE,IAAI,CAAC,cAAc;YACtC,2BAA2B,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM;SAC5D,CAAC,CAAC;QAEH,MAAM,qBAAS,CAAC,mBAAmB,CAAC;YAClC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,0BAA0B;YAC3D,IAAI,EAAE,CAAC,SAAS,CAAC;YACjB,gBAAgB,EAAE,IAAI,CAAC,cAAc;YACrC,eAAe,EAAE,IAAI;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,CAAC;QAE1C,IAAI,IAAI,CAAC,kBAAkB,CAAC,cAAc,KAAK,KAAK,EAAE,CAAC;YACrD,IAAI,CAAC,kCAAkC,CAAC,mBAAQ,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC;YACtF,MAAM,qBAAS,CAAC,mBAAmB,CAAC;gBAClC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,0BAA0B;gBAC3D,IAAI,EAAE,CAAC,YAAY,CAAC;gBACpB,gBAAgB,EAAE,IAAI,CAAC,cAAc;gBACrC,eAAe,EAAE,IAAI;aACtB,CAAC,CAAC;YACH,IAAI,CAAC,kCAAkC,CAAC,4BAA4B,CAAC,CAAC;YACtE,IAAI,CAAC,kCAAkC,EAAE,CAAC;QAC5C,CAAC;QAED,IAAI,CAAC,CAAC,MAAM,8BAAU,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC;YAC7D,MAAM,IAAI,KAAK,CACb,mEAAmE,GAAG,IAAI,CAAC,kBAAkB,CAC9F,CAAC;QACJ,CAAC;QAED,MAAM,eAAe,GAAW,MAAM,8BAAU,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,EAAE;YACtF,kBAAkB,EAAE,+BAAW,CAAC,EAAE;SACnC,CAAC,CAAC;QACH,IAAI,eAAe,KAAK,eAAe,EAAE,CAAC;YACxC,IAAI,CAAC,kCAAkC,CACrC,mBAAQ,CAAC,KAAK,CAAC,uCAAuC,CAAC,GAAG,mCAAmC,CAC9F,CAAC;YACF,IAAI,CAAC,kCAAkC,CAAC,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;QAC5E,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,kCAAkC,CAAC,mBAAQ,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;IAEO,kCAAkC,CAAC,OAAgB;QACzD,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACjC,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;CACF;AAlPD,sCAkPC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\n\nimport {\n  FileSystem,\n  type IPackageJson,\n  JsonFile,\n  LockFile,\n  NewlineKind,\n  PackageName,\n  type IParsedPackageNameOrError\n} from '@rushstack/node-core-library';\nimport { Colorize } from '@rushstack/terminal';\n\nimport { Utilities } from '../utilities/Utilities';\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport { PackageJsonEditor } from '../api/PackageJsonEditor';\nimport { InstallHelpers } from './installManager/InstallHelpers';\nimport type { RushGlobalFolder } from '../api/RushGlobalFolder';\nimport { RushConstants } from './RushConstants';\nimport { LastInstallFlag } from '../api/LastInstallFlag';\nimport { RushCommandLineParser } from '../cli/RushCommandLineParser';\nimport type { PnpmPackageManager } from '../api/packageManager/PnpmPackageManager';\n\nexport interface IAutoinstallerOptions {\n  autoinstallerName: string;\n  rushConfiguration: RushConfiguration;\n  rushGlobalFolder: RushGlobalFolder;\n  restrictConsoleOutput?: boolean;\n}\n\nexport class Autoinstaller {\n  public readonly name: string;\n\n  private readonly _rushConfiguration: RushConfiguration;\n  private readonly _rushGlobalFolder: RushGlobalFolder;\n  private readonly _restrictConsoleOutput: boolean;\n\n  public constructor(options: IAutoinstallerOptions) {\n    this.name = options.autoinstallerName;\n    this._rushConfiguration = options.rushConfiguration;\n    this._rushGlobalFolder = options.rushGlobalFolder;\n    this._restrictConsoleOutput =\n      options.restrictConsoleOutput ?? RushCommandLineParser.shouldRestrictConsoleOutput();\n\n    Autoinstaller.validateName(this.name);\n  }\n\n  // Example: .../common/autoinstallers/my-task\n  public get folderFullPath(): string {\n    return path.join(this._rushConfiguration.commonAutoinstallersFolder, this.name);\n  }\n\n  // Example: .../common/autoinstallers/my-task/package-lock.yaml\n  public get shrinkwrapFilePath(): string {\n    return path.join(\n      this._rushConfiguration.commonAutoinstallersFolder,\n      this.name,\n      this._rushConfiguration.shrinkwrapFilename\n    );\n  }\n\n  // Example: .../common/autoinstallers/my-task/package.json\n  public get packageJsonPath(): string {\n    return path.join(this._rushConfiguration.commonAutoinstallersFolder, this.name, 'package.json');\n  }\n\n  public static validateName(autoinstallerName: string): void {\n    const nameOrError: IParsedPackageNameOrError = PackageName.tryParse(autoinstallerName);\n    if (nameOrError.error) {\n      throw new Error(`The specified name \"${autoinstallerName}\" is invalid: ` + nameOrError.error);\n    }\n    if (nameOrError.scope) {\n      throw new Error(`The specified name \"${autoinstallerName}\" must not contain an NPM scope`);\n    }\n  }\n\n  public async prepareAsync(): Promise<void> {\n    const autoinstallerFullPath: string = this.folderFullPath;\n\n    if (!FileSystem.exists(autoinstallerFullPath)) {\n      throw new Error(\n        `The autoinstaller ${this.name} does not exist, Please run\\nrush init-autoinstaller --name ${this.name}\\n`\n      );\n    }\n\n    await InstallHelpers.ensureLocalPackageManagerAsync(\n      this._rushConfiguration,\n      this._rushGlobalFolder,\n      RushConstants.defaultMaxInstallAttempts,\n      this._restrictConsoleOutput\n    );\n\n    // Example: common/autoinstallers/my-task/package.json\n    const relativePathForLogs: string = path.relative(\n      this._rushConfiguration.rushJsonFolder,\n      autoinstallerFullPath\n    );\n\n    this._logIfConsoleOutputIsNotRestricted(`Acquiring lock for \"${relativePathForLogs}\" folder...`);\n\n    const lock: LockFile = await LockFile.acquireAsync(autoinstallerFullPath, 'autoinstaller');\n\n    try {\n      // Example: .../common/autoinstallers/my-task/.rush/temp\n      const lastInstallFlagPath: string = path.join(\n        autoinstallerFullPath,\n        RushConstants.projectRushFolderName,\n        'temp'\n      );\n\n      const packageJsonPath: string = path.join(autoinstallerFullPath, 'package.json');\n      const packageJson: IPackageJson = JsonFile.load(packageJsonPath);\n\n      const lastInstallFlag: LastInstallFlag = new LastInstallFlag(lastInstallFlagPath, {\n        node: process.versions.node,\n        packageManager: this._rushConfiguration.packageManager,\n        packageManagerVersion: this._rushConfiguration.packageManagerToolVersion,\n        packageJson: packageJson,\n        rushJsonFolder: this._rushConfiguration.rushJsonFolder\n      });\n\n      // Example: ../common/autoinstallers/my-task/node_modules\n      const nodeModulesFolder: string = `${autoinstallerFullPath}/${RushConstants.nodeModulesFolderName}`;\n      const flagPath: string = `${nodeModulesFolder}/rush-autoinstaller.flag`;\n      const isLastInstallFlagDirty: boolean =\n        !(await lastInstallFlag.isValidAsync()) || !FileSystem.exists(flagPath);\n\n      if (isLastInstallFlagDirty || lock.dirtyWhenAcquired) {\n        if (FileSystem.exists(nodeModulesFolder)) {\n          this._logIfConsoleOutputIsNotRestricted('Deleting old files from ' + nodeModulesFolder);\n          FileSystem.ensureEmptyFolder(nodeModulesFolder);\n        }\n\n        // Copy: .../common/autoinstallers/my-task/.npmrc\n        Utilities.syncNpmrc({\n          sourceNpmrcFolder: this._rushConfiguration.commonRushConfigFolder,\n          targetNpmrcFolder: autoinstallerFullPath,\n          supportEnvVarFallbackSyntax: this._rushConfiguration.isPnpm\n        });\n\n        this._logIfConsoleOutputIsNotRestricted(\n          `Installing dependencies under ${autoinstallerFullPath}...\\n`\n        );\n\n        await Utilities.executeCommandAsync({\n          command: this._rushConfiguration.packageManagerToolFilename,\n          args: ['install', '--frozen-lockfile'],\n          workingDirectory: autoinstallerFullPath,\n          keepEnvironment: true\n        });\n\n        // Create file: ../common/autoinstallers/my-task/.rush/temp/last-install.flag\n        await lastInstallFlag.createAsync();\n\n        FileSystem.writeFile(\n          flagPath,\n          'If this file is deleted, Rush will assume that the node_modules folder has been cleaned and will reinstall it.'\n        );\n\n        this._logIfConsoleOutputIsNotRestricted('Auto install completed successfully\\n');\n      } else {\n        this._logIfConsoleOutputIsNotRestricted('Autoinstaller folder is already up to date\\n');\n      }\n    } finally {\n      // Ensure the lockfile is released when we are finished.\n      lock.release();\n    }\n  }\n\n  public async updateAsync(): Promise<void> {\n    await InstallHelpers.ensureLocalPackageManagerAsync(\n      this._rushConfiguration,\n      this._rushGlobalFolder,\n      RushConstants.defaultMaxInstallAttempts,\n      this._restrictConsoleOutput\n    );\n\n    const autoinstallerPackageJsonPath: string = path.join(this.folderFullPath, 'package.json');\n\n    if (!(await FileSystem.existsAsync(autoinstallerPackageJsonPath))) {\n      throw new Error(`The specified autoinstaller path does not exist: ` + autoinstallerPackageJsonPath);\n    }\n\n    this._logIfConsoleOutputIsNotRestricted(\n      `Updating autoinstaller package: ${autoinstallerPackageJsonPath}`\n    );\n\n    let oldFileContents: string = '';\n\n    if (await FileSystem.existsAsync(this.shrinkwrapFilePath)) {\n      oldFileContents = FileSystem.readFile(this.shrinkwrapFilePath, { convertLineEndings: NewlineKind.Lf });\n      this._logIfConsoleOutputIsNotRestricted('Deleting ' + this.shrinkwrapFilePath);\n      await FileSystem.deleteFileAsync(this.shrinkwrapFilePath);\n      if (this._rushConfiguration.isPnpm) {\n        // Workaround for https://github.com/pnpm/pnpm/issues/1890\n        //\n        // When \"rush update-autoinstaller\" is run, Rush deletes \"common/autoinstallers/my-task/pnpm-lock.yaml\"\n        // so that a new lockfile will be generated. However \"pnpm install\" by design will try to recover\n        // \"pnpm-lock.yaml\" from \"my-task/node_modules/.pnpm/lock.yaml\", which may prevent a full upgrade.\n        // Deleting both files ensures that a new lockfile will always be generated.\n        const pnpmPackageManager: PnpmPackageManager = this._rushConfiguration\n          .packageManagerWrapper as PnpmPackageManager;\n        await FileSystem.deleteFileAsync(\n          path.join(this.folderFullPath, pnpmPackageManager.internalShrinkwrapRelativePath)\n        );\n      }\n    }\n\n    // Detect a common mistake where PNPM prints \"Already up-to-date\" without creating a shrinkwrap file\n    const packageJsonEditor: PackageJsonEditor = PackageJsonEditor.load(this.packageJsonPath);\n    if (packageJsonEditor.dependencyList.length === 0) {\n      throw new Error(\n        'You must add at least one dependency to the autoinstaller package' +\n          ' before invoking this command:\\n' +\n          this.packageJsonPath\n      );\n    }\n\n    this._logIfConsoleOutputIsNotRestricted();\n\n    Utilities.syncNpmrc({\n      sourceNpmrcFolder: this._rushConfiguration.commonRushConfigFolder,\n      targetNpmrcFolder: this.folderFullPath,\n      supportEnvVarFallbackSyntax: this._rushConfiguration.isPnpm\n    });\n\n    await Utilities.executeCommandAsync({\n      command: this._rushConfiguration.packageManagerToolFilename,\n      args: ['install'],\n      workingDirectory: this.folderFullPath,\n      keepEnvironment: true\n    });\n\n    this._logIfConsoleOutputIsNotRestricted();\n\n    if (this._rushConfiguration.packageManager === 'npm') {\n      this._logIfConsoleOutputIsNotRestricted(Colorize.bold('Running \"npm shrinkwrap\"...'));\n      await Utilities.executeCommandAsync({\n        command: this._rushConfiguration.packageManagerToolFilename,\n        args: ['shrinkwrap'],\n        workingDirectory: this.folderFullPath,\n        keepEnvironment: true\n      });\n      this._logIfConsoleOutputIsNotRestricted('\"npm shrinkwrap\" completed');\n      this._logIfConsoleOutputIsNotRestricted();\n    }\n\n    if (!(await FileSystem.existsAsync(this.shrinkwrapFilePath))) {\n      throw new Error(\n        'The package manager did not create the expected shrinkwrap file: ' + this.shrinkwrapFilePath\n      );\n    }\n\n    const newFileContents: string = await FileSystem.readFileAsync(this.shrinkwrapFilePath, {\n      convertLineEndings: NewlineKind.Lf\n    });\n    if (oldFileContents !== newFileContents) {\n      this._logIfConsoleOutputIsNotRestricted(\n        Colorize.green('The shrinkwrap file has been updated.') + '  Please commit the updated file:'\n      );\n      this._logIfConsoleOutputIsNotRestricted(`\\n  ${this.shrinkwrapFilePath}`);\n    } else {\n      this._logIfConsoleOutputIsNotRestricted(Colorize.green('Already up to date.'));\n    }\n  }\n\n  private _logIfConsoleOutputIsNotRestricted(message?: string): void {\n    if (!this._restrictConsoleOutput) {\n      // eslint-disable-next-line no-console\n      console.log(message ?? '');\n    }\n  }\n}\n"]}