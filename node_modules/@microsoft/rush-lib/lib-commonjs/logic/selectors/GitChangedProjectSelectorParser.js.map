{"version":3,"file":"GitChangedProjectSelectorParser.js","sourceRoot":"","sources":["../../../src/logic/selectors/GitChangedProjectSelectorParser.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAK3D,oEAAkG;AAgBlG,MAAa,+BAA+B;IAI1C,YAAmB,iBAAoC,EAAE,OAAkC;QACzF,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAEM,KAAK,CAAC,qBAAqB,CAAC,EACjC,gBAAgB,EAChB,QAAQ,EACiB;QACzB,MAAM,qBAAqB,GAA0B,IAAI,6CAAqB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAExG,MAAM,OAAO,mBACX,QAAQ,EACR,gBAAgB,EAAE,gBAAgB,IAC/B,IAAI,CAAC,QAAQ,CACjB,CAAC;QAEF,OAAO,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;IACtE,CAAC;IAEM,cAAc;QACnB,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC7E,CAAC;CACF;AA3BD,0EA2BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type { IEvaluateSelectorOptions, ISelectorParser } from './ISelectorParser';\nimport { type IGetChangedProjectsOptions, ProjectChangeAnalyzer } from '../ProjectChangeAnalyzer';\n\nexport interface IGitSelectorParserOptions {\n  /**\n   * If set to `true`, consider a project's external dependency installation layout as defined in the\n   * package manager lockfile when determining if it has changed.\n   */\n  includeExternalDependencies: boolean;\n\n  /**\n   * If set to `true` apply the `incrementalBuildIgnoredGlobs` property in a project's `rush-project.json`\n   * and exclude matched files from change detection.\n   */\n  enableFiltering: boolean;\n}\n\nexport class GitChangedProjectSelectorParser implements ISelectorParser<RushConfigurationProject> {\n  private readonly _rushConfiguration: RushConfiguration;\n  private readonly _options: IGitSelectorParserOptions;\n\n  public constructor(rushConfiguration: RushConfiguration, options: IGitSelectorParserOptions) {\n    this._rushConfiguration = rushConfiguration;\n    this._options = options;\n  }\n\n  public async evaluateSelectorAsync({\n    unscopedSelector,\n    terminal\n  }: IEvaluateSelectorOptions): Promise<Iterable<RushConfigurationProject>> {\n    const projectChangeAnalyzer: ProjectChangeAnalyzer = new ProjectChangeAnalyzer(this._rushConfiguration);\n\n    const options: IGetChangedProjectsOptions = {\n      terminal,\n      targetBranchName: unscopedSelector,\n      ...this._options\n    };\n\n    return await projectChangeAnalyzer.getChangedProjectsAsync(options);\n  }\n\n  public getCompletions(): Iterable<string> {\n    return [this._rushConfiguration.repositoryDefaultBranch, 'HEAD~1', 'HEAD'];\n  }\n}\n"]}