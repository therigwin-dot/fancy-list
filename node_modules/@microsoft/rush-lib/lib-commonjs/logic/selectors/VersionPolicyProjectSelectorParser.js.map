{"version":3,"file":"VersionPolicyProjectSelectorParser.js","sourceRoot":"","sources":["../../../src/logic/selectors/VersionPolicyProjectSelectorParser.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAoE;AAMpE,MAAa,kCAAkC;IAG7C,YAAmB,iBAAoC;QACrD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAEM,KAAK,CAAC,qBAAqB,CAAC,EACjC,gBAAgB,EAChB,QAAQ,EACR,aAAa,EACY;QACzB,MAAM,SAAS,GAAkC,IAAI,GAAG,EAAE,CAAC;QAE3D,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,eAAe,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC9F,QAAQ,CAAC,cAAc,CACrB,uBAAuB,gBAAgB,gBAAgB,aAAa,4CAA4C,CACjH,CAAC;YACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;QACnC,CAAC;QAED,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;YACvD,IAAI,OAAO,CAAC,iBAAiB,KAAK,gBAAgB,EAAE,CAAC;gBACnD,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACzB,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;IACnF,CAAC;CACF;AAjCD,gFAiCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AlreadyReportedError } from '@rushstack/node-core-library';\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type { IEvaluateSelectorOptions, ISelectorParser } from './ISelectorParser';\n\nexport class VersionPolicyProjectSelectorParser implements ISelectorParser<RushConfigurationProject> {\n  private readonly _rushConfiguration: RushConfiguration;\n\n  public constructor(rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n  }\n\n  public async evaluateSelectorAsync({\n    unscopedSelector,\n    terminal,\n    parameterName\n  }: IEvaluateSelectorOptions): Promise<Iterable<RushConfigurationProject>> {\n    const selection: Set<RushConfigurationProject> = new Set();\n\n    if (!this._rushConfiguration.versionPolicyConfiguration.versionPolicies.has(unscopedSelector)) {\n      terminal.writeErrorLine(\n        `The version policy \"${unscopedSelector}\" passed to \"${parameterName}\" does not exist in version-policies.json.`\n      );\n      throw new AlreadyReportedError();\n    }\n\n    for (const project of this._rushConfiguration.projects) {\n      if (project.versionPolicyName === unscopedSelector) {\n        selection.add(project);\n      }\n    }\n\n    return selection;\n  }\n\n  public getCompletions(): Iterable<string> {\n    return this._rushConfiguration.versionPolicyConfiguration.versionPolicies.keys();\n  }\n}\n"]}