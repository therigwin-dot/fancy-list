{"version":3,"file":"BasePackage.js","sourceRoot":"","sources":["../../../src/logic/base/BasePackage.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { JsonFile, type IPackageJson } from '@rushstack/node-core-library';\n\n/**\n * The type of dependency; used by IPackageDependency.\n */\nexport enum PackageDependencyKind {\n  Normal,\n  /**\n   * The dependency was listed in the optionalDependencies section of package.json.\n   */\n  Optional,\n\n  /**\n   * The dependency should be a symlink to a project that is locally built by Rush..\n   */\n  LocalLink\n}\n\nexport interface IPackageDependency {\n  /**\n   * The name of the dependency\n   */\n  name: string;\n  /**\n   * The requested version, which may be a pattern such as \"^1.2.3\"\n   */\n  versionRange: string;\n\n  /**\n   * The kind of dependency\n   */\n  kind: PackageDependencyKind;\n}\n\n/**\n * Represents a \"@rush-temp\" scoped package, which has our additional custom field\n * for tracking the dependency graph.\n */\nexport interface IRushTempPackageJson extends IPackageJson {\n  /**\n   * An extra setting written into package.json for temp packages, to track\n   * references to locally built projects.\n   */\n  rushDependencies?: { [key: string]: string };\n}\n\n/**\n * Represents an NPM package being processed by the linking algorithm.\n */\nexport class BasePackage {\n  /**\n   * The \"name\" field from package.json\n   */\n  public name: string;\n\n  /**\n   * The package.json name can differ from the installation folder name, in the case of an NPM package alias\n   * such as this:\n   *\n   * ```\n   * \"dependencies\": {\n   *   \"@alias-scope/alias-name\": \"npm:target-name@^1.2.3\"\n   * }\n   * ```\n   *\n   * In this case the folder will be `node_modules/@alias-scope/alias-name`\n   * instead of `node_modules/target-name`.\n   */\n  public installedName: string;\n\n  /**\n   * The \"version\" field from package.json. This is expensive to read\n   * because we have to open the package.json file.  Only when DEBUG=true\n   */\n  public version: string | undefined;\n\n  /**\n   * The absolute path to the folder that contains package.json.\n   */\n  public folderPath: string;\n\n  /**\n   * The parent package, or undefined if this is the root of the tree.\n   */\n  public parent: BasePackage | undefined;\n\n  /**\n   * The raw package.json information for this Package\n   */\n  public packageJson: IRushTempPackageJson | undefined;\n\n  /**\n   * If this is a local path that we are planning to symlink to a target folder,\n   * then symlinkTargetFolderPath keeps track of the intended target.\n   */\n  public symlinkTargetFolderPath: string | undefined = undefined;\n\n  /**\n   * Packages that were placed in node_modules subfolders of this package.\n   * The child packages are not necessarily dependencies of this package.\n   */\n  public children: BasePackage[];\n  private _childrenByName: Map<string, BasePackage>;\n\n  protected constructor(\n    name: string,\n    version: string | undefined,\n    folderPath: string,\n    packageJson: IRushTempPackageJson | undefined\n  ) {\n    this.name = name;\n    this.packageJson = packageJson;\n    this.version = version;\n    this.folderPath = folderPath;\n\n    // Extract `@alias-scope/alias-name` from  `C:\\node_modules\\@alias-scope\\alias-name`\n    const pathParts: string[] = folderPath.split(/[\\\\\\/]/);\n    this.installedName = pathParts[pathParts.length - 1];\n    if (pathParts.length >= 2) {\n      // Is there an NPM scope?\n      const parentFolder: string = pathParts[pathParts.length - 2];\n      if (parentFolder[0] === '@') {\n        this.installedName = parentFolder + '/' + this.installedName;\n      }\n    }\n\n    this.children = [];\n    this._childrenByName = new Map<string, BasePackage>();\n  }\n\n  /**\n   * Used by link managers, creates a virtual Package object that represents symbolic links\n   * which will be created later\n   */\n  public static createLinkedPackage(\n    name: string,\n    version: string | undefined,\n    folderPath: string,\n    packageJson?: IRushTempPackageJson\n  ): BasePackage {\n    return new BasePackage(name, version, folderPath, packageJson);\n  }\n\n  /**\n   * Used by \"npm link\" to simulate a temp project that is missing from the common/node_modules\n   * folder (e.g. because it was added after the shrinkwrap file was regenerated).\n   * @param packageJsonFilename - Filename of the source package.json\n   *        Example: `C:\\MyRepo\\common\\temp\\projects\\project1\\package.json`\n   * @param targetFolderName - Filename where it should have been installed\n   *        Example: `C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\\project1`\n   */\n  public static createVirtualTempPackage(\n    packageJsonFilename: string,\n    installFolderName: string\n  ): BasePackage {\n    const packageJson: IRushTempPackageJson = JsonFile.load(packageJsonFilename);\n    return BasePackage.createLinkedPackage(\n      packageJson.name,\n      packageJson.version,\n      installFolderName,\n      packageJson\n    );\n  }\n\n  public get nameAndVersion(): string {\n    let result: string = '';\n\n    if (this.name) {\n      result += this.name;\n    } else {\n      result += '(missing name)';\n    }\n    result += '@';\n    if (this.version) {\n      result += this.version;\n    } else {\n      result += '(missing version)';\n    }\n    return result;\n  }\n\n  public addChild<T extends BasePackage>(child: T): void {\n    if (child.parent) {\n      throw new Error('Child already has a parent');\n    }\n    if (this._childrenByName.has(child.installedName)) {\n      throw new Error(`Child already exists: ${child.installedName}`);\n    }\n    child.parent = this;\n    this.children.push(child);\n    this._childrenByName.set(child.installedName, child);\n  }\n\n  public getChildByName(childPackageName: string): BasePackage | undefined {\n    return this._childrenByName.get(childPackageName);\n  }\n\n  public printTree(indent?: string): void {\n    if (!indent) {\n      indent = '';\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(indent + this.nameAndVersion);\n    for (const child of this.children) {\n      child.printTree(indent + '  ');\n    }\n  }\n}\n"]}