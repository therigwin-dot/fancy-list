{"version":3,"file":"Git.js","sourceRoot":"","sources":["../../src/logic/Git.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type child_process from 'child_process';\nimport gitInfo from 'git-repo-info';\nimport * as path from 'path';\nimport * as url from 'url';\n\nimport { trueCasePathSync } from 'true-case-path';\nimport { Executable, AlreadyReportedError, Path, Async } from '@rushstack/node-core-library';\nimport { Colorize, type ITerminal } from '@rushstack/terminal';\nimport { ensureGitMinimumVersion } from '@rushstack/package-deps-hash';\n\nimport { Utilities } from '../utilities/Utilities';\nimport * as GitEmailPolicy from './policy/GitEmailPolicy';\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport { EnvironmentConfiguration } from '../api/EnvironmentConfiguration';\nimport { type IChangedGitStatusEntry, type IGitStatusEntry, parseGitStatus } from './GitStatusParser';\nimport { RushConstants } from './RushConstants';\n\nexport const DEFAULT_GIT_TAG_SEPARATOR: string = '_';\n\ninterface IResultOrError<TResult> {\n  error?: Error;\n  result?: TResult;\n}\n\nexport interface IGetBlobOptions {\n  blobSpec: string;\n  repositoryRoot: string;\n}\n\nexport class Git {\n  private readonly _rushConfiguration: RushConfiguration;\n  private _checkedGitPath: boolean = false;\n  private _gitPath: string | undefined;\n  private _checkedGitInfo: boolean = false;\n  private _gitInfo: gitInfo.GitRepoInfo | undefined;\n\n  private _gitEmailResult: IResultOrError<string> | undefined = undefined;\n  private _gitHooksPath: IResultOrError<string> | undefined = undefined;\n\n  public constructor(rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n  }\n\n  /**\n   * Returns the path to the Git binary if found. Otherwise, return undefined.\n   */\n  public get gitPath(): string | undefined {\n    if (!this._checkedGitPath) {\n      this._gitPath = EnvironmentConfiguration.gitBinaryPath || Executable.tryResolve('git');\n      this._checkedGitPath = true;\n    }\n\n    return this._gitPath;\n  }\n\n  public getGitPathOrThrow(): string {\n    const gitPath: string | undefined = this.gitPath;\n    if (!gitPath) {\n      throw new Error('Git is not present');\n    } else {\n      return gitPath;\n    }\n  }\n\n  /**\n   * Returns true if the Git binary can be found.\n   */\n  public isGitPresent(): boolean {\n    return !!this.gitPath;\n  }\n\n  /**\n   * Returns true if the Git binary was found and the current path is under a Git working tree.\n   * @param repoInfo - If provided, do the check based on this Git repo info. If not provided,\n   * the result of `this.getGitInfo()` is used.\n   */\n  public isPathUnderGitWorkingTree(repoInfo?: gitInfo.GitRepoInfo): boolean {\n    if (this.isGitPresent()) {\n      // Do we even have a Git binary?\n      if (!repoInfo) {\n        repoInfo = this.getGitInfo();\n      }\n      return !!(repoInfo && repoInfo.sha);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * If a Git email address is configured and is nonempty, this returns it.\n   * Otherwise, configuration instructions are printed to the console,\n   * and AlreadyReportedError is thrown.\n   */\n  public async getGitEmailAsync(): Promise<string> {\n    // Determine the user's account\n    // Ex: \"bob@example.com\"\n    const { error, result } = await this._tryGetGitEmailAsync();\n    if (error) {\n      // eslint-disable-next-line no-console\n      console.log(\n        [\n          `Error: ${error.message}`,\n          'Unable to determine your Git configuration using this command:',\n          '',\n          '    git config user.email',\n          ''\n        ].join('\\n')\n      );\n      throw new AlreadyReportedError();\n    }\n    return this.validateGitEmail(result);\n  }\n\n  /**\n   * If the Git email address is configured and non-empty, this returns it. Otherwise\n   * it prints an error message and throws.\n   */\n  public validateGitEmail(userEmail: string | undefined): string {\n    if (userEmail === undefined || userEmail.length === 0) {\n      // eslint-disable-next-line no-console\n      console.log(\n        [\n          'This operation requires that a Git email be specified.',\n          '',\n          `If you didn't configure your email yet, try something like this:`,\n          '',\n          ...GitEmailPolicy.getEmailExampleLines(this._rushConfiguration),\n          ''\n        ].join('\\n')\n      );\n      throw new AlreadyReportedError();\n    }\n\n    return userEmail;\n  }\n\n  /**\n   * Get the folder where Git hooks should go for the current working tree.\n   * Returns undefined if the current path is not under a Git working tree.\n   */\n  public getHooksFolder(): string | undefined {\n    const repoInfo: gitInfo.GitRepoInfo | undefined = this.getGitInfo();\n    if (repoInfo && repoInfo.worktreeGitDir) {\n      return path.join(repoInfo.worktreeGitDir, 'hooks');\n    }\n    return undefined;\n  }\n\n  public async getIsHooksPathDefaultAsync(): Promise<boolean> {\n    const repoInfo: gitInfo.GitRepoInfo | undefined = this.getGitInfo();\n    if (!repoInfo?.commonGitDir) {\n      // This should have never been called in a non-Git environment\n      return true;\n    }\n    let commonGitDir: string = repoInfo.commonGitDir;\n    try {\n      commonGitDir = trueCasePathSync(commonGitDir);\n    } catch (error) {\n      /* ignore errors from true-case-path */\n    }\n    const defaultHooksPath: string = path.resolve(commonGitDir, 'hooks');\n    const hooksResult: IResultOrError<string> = await this._tryGetGitHooksPathAsync();\n    if (hooksResult.error) {\n      // eslint-disable-next-line no-console\n      console.log(\n        [\n          `Error: ${hooksResult.error.message}`,\n          'Unable to determine your Git configuration using this command:',\n          '',\n          '    git rev-parse --git-path hooks',\n          '',\n          'Assuming hooks can still be installed in the default location'\n        ].join('\\n')\n      );\n      return true;\n    }\n\n    if (hooksResult.result) {\n      const absoluteHooksPath: string = path.resolve(\n        this._rushConfiguration.rushJsonFolder,\n        hooksResult.result\n      );\n      return absoluteHooksPath === defaultHooksPath;\n    }\n\n    // No error, but also empty result? Not sure it's possible.\n    return true;\n  }\n\n  public async getConfigHooksPathAsync(): Promise<string> {\n    let configHooksPath: string = '';\n    const gitPath: string = this.getGitPathOrThrow();\n    try {\n      configHooksPath = (\n        await this._executeGitCommandAndCaptureOutputAsync(gitPath, ['config', 'core.hooksPath'])\n      ).trim();\n    } catch (e) {\n      // git config returns error code 1 if core.hooksPath is not set.\n    }\n    return configHooksPath;\n  }\n\n  /**\n   * Get information about the current Git working tree.\n   * Returns undefined if rush.json is not under a Git working tree.\n   */\n  public getGitInfo(): Readonly<gitInfo.GitRepoInfo> | undefined {\n    if (!this._checkedGitInfo) {\n      let repoInfo: gitInfo.GitRepoInfo | undefined;\n      try {\n        // gitInfo() shouldn't usually throw, but wrapping in a try/catch just in case\n        repoInfo = gitInfo(this._rushConfiguration.rushJsonFolder);\n      } catch (ex) {\n        // if there's an error, assume we're not in a Git working tree\n      }\n\n      if (repoInfo && this.isPathUnderGitWorkingTree(repoInfo)) {\n        this._gitInfo = repoInfo;\n      }\n      this._checkedGitInfo = true;\n    }\n    return this._gitInfo;\n  }\n\n  public async getMergeBaseAsync(\n    targetBranch: string,\n    terminal: ITerminal,\n    shouldFetch: boolean = false\n  ): Promise<string> {\n    if (shouldFetch) {\n      this._fetchRemoteBranch(targetBranch, terminal);\n    }\n\n    const gitPath: string = this.getGitPathOrThrow();\n    try {\n      const output: string = await this._executeGitCommandAndCaptureOutputAsync(gitPath, [\n        '--no-optional-locks',\n        'merge-base',\n        '--',\n        'HEAD',\n        targetBranch\n      ]);\n      const result: string = output.trim();\n\n      return result;\n    } catch (e) {\n      terminal.writeErrorLine(\n        `Unable to determine merge base for branch \"${targetBranch}\". ` +\n          'This can occur if the current clone is a shallow clone. If this clone is running in a CI ' +\n          'pipeline, check your pipeline settings to ensure that the clone depth includes ' +\n          'the expected merge base. If this clone is running locally, consider running \"git fetch --deepen=<depth>\".'\n      );\n      throw new AlreadyReportedError();\n    }\n  }\n\n  public async getBlobContentAsync({ blobSpec, repositoryRoot }: IGetBlobOptions): Promise<string> {\n    const gitPath: string = this.getGitPathOrThrow();\n    const output: string = await this._executeGitCommandAndCaptureOutputAsync(\n      gitPath,\n      ['cat-file', 'blob', blobSpec, '--'],\n      repositoryRoot\n    );\n\n    return output;\n  }\n\n  /**\n   * @param pathPrefix - An optional path prefix \"git diff\"s should be filtered by.\n   * @returns\n   * An array of paths of repo-root-relative paths of files that are different from\n   * those in the provided {@param targetBranch}. If a {@param pathPrefix} is provided,\n   * this function only returns results under the that path.\n   */\n  public async getChangedFilesAsync(\n    targetBranch: string,\n    terminal: ITerminal,\n    skipFetch: boolean = false,\n    pathPrefix?: string\n  ): Promise<string[]> {\n    if (!skipFetch) {\n      this._fetchRemoteBranch(targetBranch, terminal);\n    }\n\n    const gitPath: string = this.getGitPathOrThrow();\n    const output: string = await this._executeGitCommandAndCaptureOutputAsync(gitPath, [\n      'diff',\n      `${targetBranch}...`,\n      '--name-only',\n      '--no-renames',\n      '--diff-filter=A'\n    ]);\n    return output\n      .split('\\n')\n      .map((line) => {\n        if (line) {\n          const trimmedLine: string = line.trim();\n          if (!pathPrefix || Path.isUnderOrEqual(trimmedLine, pathPrefix)) {\n            return trimmedLine;\n          }\n        } else {\n          return undefined;\n        }\n      })\n      .filter((line) => {\n        return line && line.length > 0;\n      }) as string[];\n  }\n\n  /**\n   * Gets the remote default branch that maps to the provided repository url.\n   * This method is used by 'Rush change' to find the default remote branch to compare against.\n   * If repository url is not provided or if there is no match, returns the default remote's\n   * default branch 'origin/main'.\n   * If there are more than one matches, returns the first remote's default branch.\n   *\n   * @param rushConfiguration - rush configuration\n   */\n  public async getRemoteDefaultBranchAsync(): Promise<string> {\n    const repositoryUrls: string[] = this._rushConfiguration.repositoryUrls;\n    if (repositoryUrls.length > 0) {\n      const gitPath: string = this.getGitPathOrThrow();\n      const output: string = (await this._executeGitCommandAndCaptureOutputAsync(gitPath, ['remote'])).trim();\n\n      const normalizedRepositoryUrls: Set<string> = new Set<string>();\n      for (const repositoryUrl of repositoryUrls) {\n        // Apply toUpperCase() for a case-insensitive comparison\n        normalizedRepositoryUrls.add(Git.normalizeGitUrlForComparison(repositoryUrl).toUpperCase());\n      }\n\n      const matchingRemotes: string[] = [];\n      await Async.forEachAsync(\n        output.split('\\n'),\n        async (remoteName) => {\n          if (remoteName) {\n            const remoteUrl: string = (\n              await this._executeGitCommandAndCaptureOutputAsync(gitPath, [\n                'remote',\n                'get-url',\n                '--',\n                remoteName\n              ])\n            ).trim();\n\n            if (remoteUrl) {\n              // Also apply toUpperCase() for a case-insensitive comparison\n              const normalizedRemoteUrl: string = Git.normalizeGitUrlForComparison(remoteUrl).toUpperCase();\n              if (normalizedRepositoryUrls.has(normalizedRemoteUrl)) {\n                matchingRemotes.push(remoteName);\n              }\n            }\n          }\n        },\n        { concurrency: 10 }\n      );\n\n      if (matchingRemotes.length > 0) {\n        if (matchingRemotes.length > 1) {\n          // eslint-disable-next-line no-console\n          console.log(\n            `More than one git remote matches the repository URL. Using the first remote (${matchingRemotes[0]}).`\n          );\n        }\n\n        return `${matchingRemotes[0]}/${this._rushConfiguration.repositoryDefaultBranch}`;\n      } else {\n        const errorMessage: string =\n          repositoryUrls.length > 1\n            ? `Unable to find a git remote matching one of the repository URLs (${repositoryUrls.join(\n                ', '\n              )}). `\n            : `Unable to find a git remote matching the repository URL (${repositoryUrls[0]}). `;\n        // eslint-disable-next-line no-console\n        console.log(Colorize.yellow(errorMessage + 'Detected changes are likely to be incorrect.'));\n\n        return this._rushConfiguration.repositoryDefaultFullyQualifiedRemoteBranch;\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\n        Colorize.yellow(\n          `A git remote URL has not been specified in ${RushConstants.rushJsonFilename}. Setting the baseline remote URL is recommended.`\n        )\n      );\n      return this._rushConfiguration.repositoryDefaultFullyQualifiedRemoteBranch;\n    }\n  }\n\n  public async hasUncommittedChangesAsync(): Promise<boolean> {\n    const gitStatusEntries: Iterable<IGitStatusEntry> = await this.getGitStatusAsync();\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const gitStatusEntry of gitStatusEntries) {\n      // If there are any changes, return true. We only need to evaluate the first iterator entry\n      return true;\n    }\n\n    return false;\n  }\n\n  public async hasUnstagedChangesAsync(): Promise<boolean> {\n    const gitStatusEntries: Iterable<IGitStatusEntry> = await this.getGitStatusAsync();\n    for (const gitStatusEntry of gitStatusEntries) {\n      if (\n        gitStatusEntry.kind === 'untracked' ||\n        (gitStatusEntry as IChangedGitStatusEntry).unstagedChangeType !== undefined\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The list of files changed but not committed\n   */\n  public async getUncommittedChangesAsync(): Promise<ReadonlyArray<string>> {\n    const result: string[] = [];\n    const gitStatusEntries: Iterable<IGitStatusEntry> = await this.getGitStatusAsync();\n    for (const gitStatusEntry of gitStatusEntries) {\n      result.push(gitStatusEntry.path);\n    }\n\n    return result;\n  }\n\n  public getTagSeparator(): string {\n    return this._rushConfiguration.gitTagSeparator || DEFAULT_GIT_TAG_SEPARATOR;\n  }\n\n  public async getGitStatusAsync(): Promise<Iterable<IGitStatusEntry>> {\n    const gitPath: string = this.getGitPathOrThrow();\n    // See Git.test.ts for example output\n    const output: string = await this._executeGitCommandAndCaptureOutputAsync(gitPath, [\n      'status',\n      '--porcelain=2',\n      '--null',\n      '--ignored=no'\n    ]);\n\n    return parseGitStatus(output);\n  }\n\n  /**\n   * Git remotes can use different URL syntaxes; this converts them all to a normalized HTTPS\n   * representation for matching purposes.  IF THE INPUT IS NOT ALREADY HTTPS, THE OUTPUT IS\n   * NOT NECESSARILY A VALID GIT URL.\n   *\n   * @example\n   * `git@github.com:ExampleOrg/ExampleProject.git` --> `https://github.com/ExampleOrg/ExampleProject`\n   */\n  public static normalizeGitUrlForComparison(gitUrl: string): string {\n    // Git URL formats are documented here: https://www.git-scm.com/docs/git-clone#_git_urls\n\n    let result: string = gitUrl.trim();\n\n    // [user@]host.xz:path/to/repo.git/\n    // \"This syntax is only recognized if there are no slashes before the first colon. This helps\n    // differentiate a local path that contains a colon.\"\n    //\n    // Match patterns like this:\n    //   user@host.ext:path/to/repo\n    //   host.ext:path/to/repo\n    //   localhost:/~user/path/to/repo\n    //\n    // But not:\n    //   http://blah\n    //   c:/windows/path.txt\n    //\n    const scpLikeSyntaxRegExp: RegExp = /^(?:[^@:\\/]+\\@)?([^:\\/]{2,})\\:((?!\\/\\/).+)$/;\n\n    // Example: \"user@host.ext:path/to/repo\"\n    const scpLikeSyntaxMatch: RegExpExecArray | null = scpLikeSyntaxRegExp.exec(gitUrl);\n    if (scpLikeSyntaxMatch) {\n      // Example: \"host.ext\"\n      const host: string = scpLikeSyntaxMatch[1];\n      // Example: \"path/to/repo\"\n      const urlPath: string = scpLikeSyntaxMatch[2];\n\n      if (urlPath.startsWith('/')) {\n        result = `https://${host}${urlPath}`;\n      } else {\n        result = `https://${host}/${urlPath}`;\n      }\n    }\n\n    const parsedUrl: url.UrlWithStringQuery = url.parse(result);\n\n    // Only convert recognized schemes\n\n    switch (parsedUrl.protocol) {\n      case 'http:':\n      case 'https:':\n      case 'ssh:':\n      case 'ftp:':\n      case 'ftps:':\n      case 'git:':\n      case 'git+http:':\n      case 'git+https:':\n      case 'git+ssh:':\n      case 'git+ftp:':\n      case 'git+ftps:':\n        // Assemble the parts we want:\n        result = `https://${parsedUrl.host}${parsedUrl.pathname}`;\n        break;\n    }\n\n    // Trim \".git\" or \".git/\" from the end\n    result = result.replace(/.git\\/?$/, '');\n    return result;\n  }\n\n  /**\n   * This will throw errors only if we cannot find Git commandline.\n   * If git email didn't configure, this will return undefined; otherwise,\n   * returns user.email config\n   */\n  public async tryGetGitEmailAsync(): Promise<string | undefined> {\n    const { result } = await this._tryGetGitEmailAsync();\n    return result;\n  }\n\n  /**\n   * Returns an object containing either the result of the `git config user.email`\n   * command or an error.\n   */\n  private async _tryGetGitEmailAsync(): Promise<IResultOrError<string>> {\n    if (this._gitEmailResult === undefined) {\n      const gitPath: string = this.getGitPathOrThrow();\n      try {\n        this._gitEmailResult = {\n          result: (\n            await this._executeGitCommandAndCaptureOutputAsync(gitPath, ['config', 'user.email'])\n          ).trim()\n        };\n      } catch (e) {\n        this._gitEmailResult = {\n          error: e as Error\n        };\n      }\n    }\n\n    return this._gitEmailResult;\n  }\n\n  private async _tryGetGitHooksPathAsync(): Promise<IResultOrError<string>> {\n    if (this._gitHooksPath === undefined) {\n      const gitPath: string = this.getGitPathOrThrow();\n      try {\n        this._gitHooksPath = {\n          result: (\n            await this._executeGitCommandAndCaptureOutputAsync(gitPath, ['rev-parse', '--git-path', 'hooks'])\n          ).trim()\n        };\n      } catch (e) {\n        this._gitHooksPath = {\n          error: e as Error\n        };\n      }\n    }\n\n    return this._gitHooksPath;\n  }\n\n  private _tryFetchRemoteBranch(remoteBranchName: string): boolean {\n    const firstSlashIndex: number = remoteBranchName.indexOf('/');\n    if (firstSlashIndex === -1) {\n      throw new Error(\n        `Unexpected git remote branch format: ${remoteBranchName}. ` +\n          'Expected branch to be in the <remote>/<branch name> format.'\n      );\n    }\n\n    const remoteName: string = remoteBranchName.substr(0, firstSlashIndex);\n    const branchName: string = remoteBranchName.substr(firstSlashIndex + 1);\n    const gitPath: string = this.getGitPathOrThrow();\n    const spawnResult: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\n      gitPath,\n      ['fetch', '--', remoteName, branchName],\n      {\n        stdio: 'ignore'\n      }\n    );\n    return spawnResult.status === 0;\n  }\n\n  private _fetchRemoteBranch(remoteBranchName: string, terminal: ITerminal): void {\n    // eslint-disable-next-line no-console\n    console.log(`Checking for updates to ${remoteBranchName}...`);\n    const fetchResult: boolean = this._tryFetchRemoteBranch(remoteBranchName);\n    if (!fetchResult) {\n      terminal.writeWarningLine(\n        `Error fetching git remote branch ${remoteBranchName}. Detected changed files may be incorrect.`\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public async _executeGitCommandAndCaptureOutputAsync(\n    gitPath: string,\n    args: string[],\n    repositoryRoot: string = this._rushConfiguration.rushJsonFolder\n  ): Promise<string> {\n    try {\n      return await Utilities.executeCommandAndCaptureOutputAsync(gitPath, args, repositoryRoot);\n    } catch (e) {\n      ensureGitMinimumVersion(gitPath);\n      throw e;\n    }\n  }\n  /**\n   *\n   * @param ref Given a ref which can be branch name, commit hash, tag name, etc, check if it is a commit hash\n   */\n  public async determineIfRefIsACommitAsync(ref: string): Promise<boolean> {\n    const gitPath: string = this.getGitPathOrThrow();\n    try {\n      const output: string = await this._executeGitCommandAndCaptureOutputAsync(gitPath, [\n        'rev-parse',\n        '--verify',\n        ref\n      ]);\n      const result: string = output.trim();\n\n      return result === ref;\n    } catch (e) {\n      // assume not a commit\n      return false;\n    }\n  }\n}\n"]}