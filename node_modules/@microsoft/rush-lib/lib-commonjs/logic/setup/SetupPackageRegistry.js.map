{"version":3,"file":"SetupPackageRegistry.js","sourceRoot":"","sources":["../../../src/logic/setup/SetupPackageRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport type * as child_process from 'child_process';\nimport {\n  AlreadyReportedError,\n  Executable,\n  FileSystem,\n  InternalError,\n  type JsonObject,\n  NewlineKind,\n  Text\n} from '@rushstack/node-core-library';\nimport { PrintUtilities, Colorize, ConsoleTerminalProvider, Terminal } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport { Utilities } from '../../utilities/Utilities';\nimport { type IArtifactoryPackageRegistryJson, ArtifactoryConfiguration } from './ArtifactoryConfiguration';\nimport type { WebClient as WebClientType, IWebClientResponse } from '../../utilities/WebClient';\nimport { TerminalInput } from './TerminalInput';\n\ninterface IArtifactoryCustomizableMessages {\n  introduction: string;\n  obtainAnAccount: string;\n  visitWebsite: string;\n  locateUserName: string;\n  locateApiKey: string;\n  userNamePrompt: string;\n  apiKeyPrompt: string;\n}\n\nconst defaultMessages: IArtifactoryCustomizableMessages = {\n  introduction: 'This monorepo consumes packages from an Artifactory private NPM registry.',\n  obtainAnAccount:\n    'Please contact the repository maintainers for help with setting up an Artifactory user account.',\n  visitWebsite: 'Please open this URL in your web browser:',\n  locateUserName: 'Your user name appears in the upper-right corner of the JFrog website.',\n  locateApiKey:\n    'Click \"Edit Profile\" on the JFrog website.  Click the \"Generate API Key\"' +\n    \" button if you haven't already done so previously.\",\n  userNamePrompt: 'What is your Artifactory user name?',\n  apiKeyPrompt: 'What is your Artifactory API key?'\n};\n\nexport interface ISetupPackageRegistryOptions {\n  rushConfiguration: RushConfiguration;\n  isDebug: boolean;\n\n  /**\n   * Whether Utilities.syncNpmrc() has already been called.\n   */\n  syncNpmrcAlreadyCalled: boolean;\n}\n\nexport class SetupPackageRegistry {\n  private readonly _options: ISetupPackageRegistryOptions;\n  public readonly rushConfiguration: RushConfiguration;\n  private readonly _terminal: Terminal;\n  private readonly _artifactoryConfiguration: ArtifactoryConfiguration;\n  private readonly _messages: IArtifactoryCustomizableMessages;\n\n  public constructor(options: ISetupPackageRegistryOptions) {\n    this._options = options;\n    this.rushConfiguration = options.rushConfiguration;\n\n    this._terminal = new Terminal(\n      new ConsoleTerminalProvider({\n        verboseEnabled: options.isDebug\n      })\n    );\n\n    this._artifactoryConfiguration = new ArtifactoryConfiguration(\n      path.join(this.rushConfiguration.commonRushConfigFolder, 'artifactory.json')\n    );\n\n    this._messages = {\n      ...defaultMessages,\n      ...this._artifactoryConfiguration.configuration.packageRegistry.messageOverrides\n    };\n  }\n\n  private _writeInstructionBlock(message: string): void {\n    if (message === '') {\n      return;\n    }\n\n    this._terminal.writeLine(PrintUtilities.wrapWords(message));\n    this._terminal.writeLine();\n  }\n\n  /**\n   * Test whether the NPM token is valid.\n   *\n   * @returns - `true` if valid, `false` if not valid\n   */\n  public async checkOnlyAsync(): Promise<boolean> {\n    const packageRegistry: IArtifactoryPackageRegistryJson =\n      this._artifactoryConfiguration.configuration.packageRegistry;\n    if (!packageRegistry.enabled) {\n      this._terminal.writeVerbose('Skipping package registry setup because packageRegistry.enabled=false');\n      return true;\n    }\n\n    const registryUrl: string = (packageRegistry?.registryUrl || '').trim();\n    if (registryUrl.length === 0) {\n      throw new Error('The \"registryUrl\" setting in artifactory.json is missing or empty');\n    }\n\n    if (!this._options.syncNpmrcAlreadyCalled) {\n      Utilities.syncNpmrc({\n        sourceNpmrcFolder: this.rushConfiguration.commonRushConfigFolder,\n        targetNpmrcFolder: this.rushConfiguration.commonTempFolder,\n        supportEnvVarFallbackSyntax: this.rushConfiguration.isPnpm\n      });\n    }\n\n    // Artifactory does not implement the \"npm ping\" protocol or any equivalent REST API.\n    // But if we query a package that is known not to exist, Artifactory will only return\n    // a 404 error if it is successfully authenticated.  We can use this negative query\n    // to validate the credentials.\n    const npmArgs: string[] = [\n      'view',\n      '@rushstack/nonexistent-package',\n      '--json',\n      '--registry=' + packageRegistry.registryUrl\n    ];\n\n    this._terminal.writeLine('Testing access to private NPM registry: ' + packageRegistry.registryUrl);\n\n    const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync('npm', npmArgs, {\n      currentWorkingDirectory: this.rushConfiguration.commonTempFolder,\n      stdio: ['ignore', 'pipe', 'pipe'],\n      // Wait at most 10 seconds for \"npm view\" to succeed\n      timeoutMs: 10 * 1000\n    });\n    this._terminal.writeLine();\n\n    // (This is not exactly correct, for example Node.js puts a string in error.errno instead of a string.)\n    const error: (Error & Partial<NodeJS.ErrnoException>) | undefined = result.error;\n\n    if (error) {\n      if (error.code === 'ETIMEDOUT') {\n        // For example, an incorrect \"https-proxy\" setting can hang for a long time\n        throw new Error('The \"npm view\" command timed out; check your .npmrc file for an incorrect setting');\n      }\n\n      throw new Error('Error invoking \"npm view\": ' + result.error);\n    }\n\n    if (result.status === 0) {\n      throw new InternalError('\"npm view\" unexpectedly succeeded');\n    }\n\n    // NPM 6.x writes to stdout\n    let jsonContent: string | undefined = SetupPackageRegistry._tryFindJson(result.stdout);\n    if (jsonContent === undefined) {\n      // NPM 7.x writes dirty output to stderr; see https://github.com/npm/cli/issues/2740\n      jsonContent = SetupPackageRegistry._tryFindJson(result.stderr);\n    }\n    if (jsonContent === undefined) {\n      throw new InternalError('The \"npm view\" command did not return a JSON structure');\n    }\n\n    let jsonOutput: JsonObject;\n    try {\n      jsonOutput = JSON.parse(jsonContent);\n    } catch (e) {\n      this._terminal.writeVerboseLine('NPM response:\\n\\n--------\\n' + jsonContent + '\\n--------\\n\\n');\n      throw new InternalError('The \"npm view\" command returned an invalid JSON structure');\n    }\n\n    const errorCode: JsonObject = jsonOutput?.error?.code;\n    if (typeof errorCode !== 'string') {\n      this._terminal.writeVerboseLine('NPM response:\\n' + JSON.stringify(jsonOutput, undefined, 2) + '\\n\\n');\n      throw new InternalError('The \"npm view\" command returned unexpected output');\n    }\n\n    switch (errorCode) {\n      case 'E404':\n        this._terminal.writeLine('NPM credentials are working');\n        this._terminal.writeLine();\n        return true;\n      case 'E401':\n      case 'E403':\n        this._terminal.writeVerboseLine(\n          'NPM response:\\n' + JSON.stringify(jsonOutput, undefined, 2) + '\\n\\n'\n        );\n        // Credentials are missing or expired\n        return false;\n      default:\n        this._terminal.writeVerboseLine(\n          'NPM response:\\n' + JSON.stringify(jsonOutput, undefined, 2) + '\\n\\n'\n        );\n        throw new Error(`The \"npm view\" command returned an unexpected error code \"${errorCode}\"`);\n    }\n  }\n\n  /**\n   * Test whether the NPM token is valid.  If not, prompt to update it.\n   */\n  public async checkAndSetupAsync(): Promise<void> {\n    if (await this.checkOnlyAsync()) {\n      return;\n    }\n\n    this._terminal.writeWarningLine('NPM credentials are missing or expired');\n    this._terminal.writeLine();\n\n    const packageRegistry: IArtifactoryPackageRegistryJson =\n      this._artifactoryConfiguration.configuration.packageRegistry;\n\n    const fixThisProblem: boolean = await TerminalInput.promptYesNoAsync({\n      message: 'Fix this problem now?',\n      defaultValue: false\n    });\n    this._terminal.writeLine();\n    if (!fixThisProblem) {\n      return;\n    }\n\n    this._writeInstructionBlock(this._messages.introduction);\n\n    const hasArtifactoryAccount: boolean = await TerminalInput.promptYesNoAsync({\n      message: 'Do you already have an Artifactory user account?'\n    });\n    this._terminal.writeLine();\n\n    if (!hasArtifactoryAccount) {\n      this._writeInstructionBlock(this._messages.obtainAnAccount);\n      throw new AlreadyReportedError();\n    }\n\n    if (this._messages.visitWebsite) {\n      this._writeInstructionBlock(this._messages.visitWebsite);\n\n      const artifactoryWebsiteUrl: string =\n        this._artifactoryConfiguration.configuration.packageRegistry.artifactoryWebsiteUrl;\n\n      if (artifactoryWebsiteUrl) {\n        this._terminal.writeLine('  ', Colorize.cyan(artifactoryWebsiteUrl));\n        this._terminal.writeLine();\n      }\n    }\n\n    this._writeInstructionBlock(this._messages.locateUserName);\n\n    let artifactoryUser: string = await TerminalInput.promptLineAsync({\n      message: this._messages.userNamePrompt\n    });\n    this._terminal.writeLine();\n\n    artifactoryUser = artifactoryUser.trim();\n    if (artifactoryUser.length === 0) {\n      this._terminal.writeLine(Colorize.red('Operation aborted because the input was empty'));\n      this._terminal.writeLine();\n      throw new AlreadyReportedError();\n    }\n\n    this._writeInstructionBlock(this._messages.locateApiKey);\n\n    let artifactoryKey: string = await TerminalInput.promptPasswordLineAsync({\n      message: this._messages.apiKeyPrompt\n    });\n    this._terminal.writeLine();\n\n    artifactoryKey = artifactoryKey.trim();\n    if (artifactoryKey.length === 0) {\n      this._terminal.writeLine(Colorize.red('Operation aborted because the input was empty'));\n      this._terminal.writeLine();\n      throw new AlreadyReportedError();\n    }\n\n    await this._fetchTokenAndUpdateNpmrcAsync(artifactoryUser, artifactoryKey, packageRegistry);\n  }\n\n  /**\n   * Fetch a valid NPM token from the Artifactory service and add it to the `~/.npmrc` file,\n   * preserving other settings in that file.\n   */\n  private async _fetchTokenAndUpdateNpmrcAsync(\n    artifactoryUser: string,\n    artifactoryKey: string,\n    packageRegistry: IArtifactoryPackageRegistryJson\n  ): Promise<void> {\n    this._terminal.writeLine('\\nFetching an NPM token from the Artifactory service...');\n\n    // Defer this import since it is conditionally needed.\n    const { WebClient } = await import('../../utilities/WebClient');\n    const webClient: WebClientType = new WebClient();\n\n    webClient.addBasicAuthHeader(artifactoryUser, artifactoryKey);\n\n    let queryUrl: string = packageRegistry.registryUrl;\n    if (!queryUrl.endsWith('/')) {\n      queryUrl += '/';\n    }\n\n    // There doesn't seem to be a way to invoke the \"/auth\" REST endpoint without a resource name.\n    // Artifactory's NPM folders always seem to contain a \".npm\" folder, so we can use that to obtain\n    // our token.\n    queryUrl += `auth/.npm`;\n\n    let response: IWebClientResponse;\n    try {\n      response = await webClient.fetchAsync(queryUrl);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log((e as Error).toString());\n      return;\n    }\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        throw new Error('Authorization failed; the Artifactory user name or API key may be incorrect.');\n      }\n\n      throw new Error(`The Artifactory request failed:\\n  (${response.status}) ${response.statusText}`);\n    }\n\n    // We expect a response like this:\n    //\n    //   @.npm:registry=https://your-company.jfrog.io/your-artifacts/api/npm/npm-private/\n    //   //your-company.jfrog.io/your-artifacts/api/npm/npm-private/:_password=dGhlIHRva2VuIGdvZXMgaGVyZQ==\n    //   //your-company.jfrog.io/your-artifacts/api/npm/npm-private/:username=your.name@your-company.com\n    //   //your-company.jfrog.io/your-artifacts/api/npm/npm-private/:email=your.name@your-company.com\n    //   //your-company.jfrog.io/your-artifacts/api/npm/npm-private/:always-auth=true\n    const responseText: string = await response.getTextAsync();\n    const responseLines: string[] = Text.convertToLf(responseText).trim().split('\\n');\n    if (responseLines.length < 2 || !responseLines[0].startsWith('@.npm:')) {\n      throw new Error('Unexpected response from Artifactory');\n    }\n    responseLines.shift(); // Remove the @.npm line\n\n    // If we are configured to use authToken for authentication, we still go through the above process\n    // (both to ensure the user's credentials are valid, and to let Artifactory format the standard\n    // npmrc boilerplate for us), but we'll discard the generated password and use the authToken instead.\n    if (packageRegistry.credentialType === 'authToken') {\n      for (let i: number = 0; i < responseLines.length; i++) {\n        responseLines[i] = responseLines[i].replace(/_password=.+/, '_authToken=' + artifactoryKey);\n      }\n    }\n\n    // These are the lines to be injected in ~/.npmrc\n    const linesToAdd: string[] = [];\n\n    // Start with userNpmrcLinesToAdd...\n    if (packageRegistry.userNpmrcLinesToAdd) {\n      linesToAdd.push(...packageRegistry.userNpmrcLinesToAdd);\n    }\n\n    // ...then append the stuff we got from the REST API, but discard any junk that isn't a proper key/value\n    linesToAdd.push(...responseLines.filter((x) => SetupPackageRegistry._getNpmrcKey(x) !== undefined));\n\n    const npmrcPath: string = path.join(Utilities.getHomeFolder(), '.npmrc');\n\n    this._mergeLinesIntoNpmrc(npmrcPath, linesToAdd);\n  }\n\n  /**\n   * Update the `~/.npmrc` file by adding `linesToAdd` to it.\n   * @remarks\n   *\n   * If the `.npmrc` file has existing content, it gets merged as follows:\n   * - If `linesToAdd` contains key/value pairs and the key already appears in .npmrc,\n   *   that line will be overwritten in place\n   * - If `linesToAdd` contains non-key lines (e.g. a comment) and it exactly matches a\n   *   line in .npmrc, then that line will be kept where it is\n   * - The remaining `linesToAdd` that weren't handled by one of the two rules above\n   *   are simply appended to the end of the file\n   * - Under no circumstances is a duplicate key/value added to the file; in the case of\n   *   duplicates, the earliest line in `linesToAdd` takes precedence\n   */\n  private _mergeLinesIntoNpmrc(npmrcPath: string, linesToAdd: readonly string[]): void {\n    // We'll replace entries with \"undefined\" if they get discarded\n    const workingLinesToAdd: (string | undefined)[] = [...linesToAdd];\n\n    // Now build a table of .npmrc keys that can be replaced if they already exist in the file.\n    // For example, if we are adding \"always-auth=false\" then we should delete an existing line\n    // that says \"always-auth=true\".\n    const keysToReplace: Map<string, number> = new Map(); // key --> linesToAdd index\n\n    for (let index: number = 0; index < workingLinesToAdd.length; ++index) {\n      const lineToAdd: string = workingLinesToAdd[index]!;\n\n      const key: string | undefined = SetupPackageRegistry._getNpmrcKey(lineToAdd);\n      if (key !== undefined) {\n        // If there are duplicate keys, the first one takes precedence.\n        // In particular this means \"userNpmrcLinesToAdd\" takes precedence over the REST API response\n        if (keysToReplace.has(key)) {\n          // Discard the duplicate key\n          workingLinesToAdd[index] = undefined;\n        } else {\n          keysToReplace.set(key, index);\n        }\n      }\n    }\n\n    this._terminal.writeLine();\n    this._terminal.writeLine(Colorize.green('Adding Artifactory token to: '), npmrcPath);\n\n    const npmrcLines: string[] = [];\n\n    if (FileSystem.exists(npmrcPath)) {\n      const npmrcContent: string = FileSystem.readFile(npmrcPath, { convertLineEndings: NewlineKind.Lf });\n      npmrcLines.push(...npmrcContent.trimRight().split('\\n'));\n    }\n\n    if (npmrcLines.length === 1 && npmrcLines[0] === '') {\n      // Edge case where split() adds a blank line to the start of the file\n      npmrcLines.length = 0;\n    }\n\n    // Make a set of existing .npmrc lines that are not key/value pairs.\n    const npmrcNonKeyLinesSet: Set<string> = new Set();\n    for (const npmrcLine of npmrcLines) {\n      const trimmed: string = npmrcLine.trim();\n      if (trimmed.length > 0) {\n        if (SetupPackageRegistry._getNpmrcKey(trimmed) === undefined) {\n          npmrcNonKeyLinesSet.add(trimmed);\n        }\n      }\n    }\n\n    // Overwrite any existing lines that match a key from \"linesToAdd\"\n    for (let index: number = 0; index < npmrcLines.length; ++index) {\n      const line: string = npmrcLines[index];\n\n      const key: string | undefined = SetupPackageRegistry._getNpmrcKey(line);\n      if (key) {\n        const linesToAddIndex: number | undefined = keysToReplace.get(key);\n        if (linesToAddIndex !== undefined) {\n          npmrcLines[index] = workingLinesToAdd[linesToAddIndex] || '';\n\n          // Delete it since it's been replaced\n          keysToReplace.delete(key);\n\n          // Also remove it from \"linesToAdd\"\n          workingLinesToAdd[linesToAddIndex] = undefined;\n        }\n      }\n    }\n\n    if (npmrcLines.length > 0 && npmrcLines[npmrcLines.length - 1] !== '') {\n      // Append a blank line\n      npmrcLines.push('');\n    }\n\n    // Add any remaining values that weren't matched above\n    for (const lineToAdd of workingLinesToAdd) {\n      // If a line is undefined, that means we already used it to replace an existing line above\n      if (lineToAdd !== undefined) {\n        // If a line belongs to npmrcNonKeyLinesSet, then we should not add it because it's\n        // already in the .npmrc file\n        if (!npmrcNonKeyLinesSet.has(lineToAdd.trim())) {\n          npmrcLines.push(lineToAdd);\n        }\n      }\n    }\n\n    // Save the result\n    FileSystem.writeFile(npmrcPath, npmrcLines.join('\\n').trimRight() + '\\n');\n  }\n\n  private static _getNpmrcKey(npmrcLine: string): string | undefined {\n    if (SetupPackageRegistry._isCommentLine(npmrcLine)) {\n      return undefined;\n    }\n    const delimiterIndex: number = npmrcLine.indexOf('=');\n    if (delimiterIndex < 1) {\n      return undefined;\n    }\n    const key: string = npmrcLine.substring(0, delimiterIndex + 1);\n    return key.trim();\n  }\n\n  private static _isCommentLine(npmrcLine: string): boolean {\n    return /^\\s*#/.test(npmrcLine);\n  }\n\n  /**\n   * This is a workaround for https://github.com/npm/cli/issues/2740 where the NPM tool sometimes\n   * mixes together JSON and terminal messages in a single STDERR stream.\n   *\n   * @remarks\n   * Given an input like this:\n   * ```\n   * npm ERR! 404 Note that you can also install from a\n   * npm ERR! 404 tarball, folder, http url, or git url.\n   * {\n   *   \"error\": {\n   *     \"code\": \"E404\",\n   *     \"summary\": \"Not Found - GET https://registry.npmjs.org/@rushstack%2fnonexistent-package - Not found\"\n   *   }\n   * }\n   * npm ERR! A complete log of this run can be found in:\n   * ```\n   *\n   * @returns the JSON section, or `undefined` if a JSON object could not be detected\n   */\n  private static _tryFindJson(dirtyOutput: string): string | undefined {\n    const lines: string[] = Text.splitByNewLines(dirtyOutput);\n    let startIndex: number | undefined;\n    let endIndex: number | undefined;\n\n    // Find the first line that starts with \"{\"\n    for (let i: number = 0; i < lines.length; ++i) {\n      const line: string = lines[i];\n      if (/^\\s*\\{/.test(line)) {\n        startIndex = i;\n        break;\n      }\n    }\n    if (startIndex === undefined) {\n      return undefined;\n    }\n\n    // Find the last line that ends with \"}\"\n    for (let i: number = lines.length - 1; i >= startIndex; --i) {\n      const line: string = lines[i];\n      if (/\\}\\s*$/.test(line)) {\n        endIndex = i;\n        break;\n      }\n    }\n\n    if (endIndex === undefined) {\n      return undefined;\n    }\n\n    return lines.slice(startIndex, endIndex + 1).join('\\n');\n  }\n}\n"]}