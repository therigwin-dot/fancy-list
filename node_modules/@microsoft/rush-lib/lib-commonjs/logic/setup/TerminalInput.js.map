{"version":3,"file":"TerminalInput.js","sourceRoot":"","sources":["../../../src/logic/setup/TerminalInput.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as readline from 'readline';\nimport * as process from 'process';\n\nimport { AnsiEscape, Colorize } from '@rushstack/terminal';\n\nimport { KeyboardLoop } from './KeyboardLoop';\n\nexport interface IBasePromptOptions {\n  message: string;\n}\n\nexport interface IPromptYesNoOptions extends IBasePromptOptions {\n  defaultValue?: boolean | undefined;\n}\n\nexport interface IPromptPasswordOptions extends IBasePromptOptions {\n  /**\n   * The string length must not be longer than 1.  An empty string means to show the input text.\n   * @defaultValue `*`\n   */\n  passwordCharacter?: string;\n}\n\nexport interface IPromptLineOptions extends IBasePromptOptions {}\n\nclass YesNoKeyboardLoop extends KeyboardLoop {\n  public readonly options: IPromptYesNoOptions;\n  public result: boolean | undefined = undefined;\n\n  public constructor(options: IPromptYesNoOptions) {\n    super();\n    this.options = options;\n  }\n\n  protected onStart(): void {\n    this.stderr.write(Colorize.green('==>') + ' ');\n    this.stderr.write(Colorize.bold(this.options.message));\n    let optionSuffix: string = '';\n    switch (this.options.defaultValue) {\n      case true:\n        optionSuffix = '(Y/n)';\n        break;\n      case false:\n        optionSuffix = '(y/N)';\n        break;\n      default:\n        optionSuffix = '(y/n)';\n        break;\n    }\n    this.stderr.write(' ' + Colorize.bold(optionSuffix) + ' ');\n  }\n\n  protected onKeypress(character: string, key: readline.Key): void {\n    if (this.result !== undefined) {\n      return;\n    }\n\n    switch (key.name) {\n      case 'y':\n        this.result = true;\n        break;\n      case 'n':\n        this.result = false;\n        break;\n      case 'enter':\n      case 'return':\n        if (this.options.defaultValue !== undefined) {\n          this.result = this.options.defaultValue;\n        }\n        break;\n    }\n\n    if (this.result !== undefined) {\n      this.stderr.write(this.result ? 'Yes\\n' : 'No\\n');\n      this.resolveAsync();\n      return;\n    }\n  }\n}\n\nclass PasswordKeyboardLoop extends KeyboardLoop {\n  private readonly _options: IPromptPasswordOptions;\n  private _passwordCharacter: string;\n  private _startX: number = 0;\n  private _printedY: number = 0;\n  private _lastPrintedLength: number = 0;\n\n  public result: string = '';\n\n  public constructor(options: IPromptPasswordOptions) {\n    super();\n    this._options = options;\n\n    this._passwordCharacter =\n      this._options.passwordCharacter === undefined ? '*' : this._options.passwordCharacter.substr(0, 1);\n  }\n\n  private _getLineWrapWidth(): number {\n    return this.stderr.columns ? this.stderr.columns : 80;\n  }\n\n  protected onStart(): void {\n    this.result = '';\n\n    readline.cursorTo(this.stderr, 0);\n    readline.clearLine(this.stderr, 1);\n    const prefix: string = Colorize.green('==>') + ' ' + Colorize.bold(this._options.message) + ' ';\n\n    this.stderr.write(prefix);\n    let lineStartIndex: number = prefix.lastIndexOf('\\n');\n    if (lineStartIndex < 0) {\n      lineStartIndex = 0;\n    }\n    const line: string = prefix.substring(lineStartIndex);\n    this._startX = AnsiEscape.removeCodes(line).length % this._getLineWrapWidth();\n  }\n\n  protected onKeypress(character: string, key: readline.Key): void {\n    switch (key.name) {\n      case 'enter':\n      case 'return':\n        if (this._passwordCharacter !== '') {\n          // To avoid disclosing the length of the password, after the user presses ENTER,\n          // replace the \"*********\" sequence with exactly three stars (\"***\").\n          this._render(this._passwordCharacter.repeat(3));\n        }\n        this.stderr.write('\\n');\n        this.resolveAsync();\n        return;\n      case 'backspace':\n        this.result = this.result.substring(0, this.result.length - 1);\n        this._render(this.result);\n        break;\n      default:\n        let printable: boolean = true;\n        if (character === '') {\n          printable = false;\n        } else if (key.name && key.name.length !== 1 && key.name !== 'space') {\n          printable = false;\n        } else if (!key.name && !key.sequence) {\n          printable = false;\n        }\n\n        if (printable) {\n          this.result += character;\n          this._render(this.result);\n        }\n    }\n  }\n\n  private _render(text: string): void {\n    // Optimize rendering when we don't need to erase anything\n    const needsClear: boolean = text.length < this._lastPrintedLength;\n    this._lastPrintedLength = text.length;\n\n    this.hideCursor();\n\n    // Restore Y\n    while (this._printedY > 0) {\n      readline.cursorTo(this.stderr, 0);\n      if (needsClear) {\n        readline.clearLine(this.stderr, 1);\n      }\n      readline.moveCursor(this.stderr, 0, -1);\n      --this._printedY;\n    }\n\n    // Restore X\n    readline.cursorTo(this.stderr, this._startX);\n\n    let i: number = 0;\n    let column: number = this._startX;\n    this._printedY = 0;\n    let buffer: string = '';\n\n    while (i < text.length) {\n      if (this._passwordCharacter === '') {\n        buffer += text.substr(i, 1);\n      } else {\n        buffer += this._passwordCharacter;\n      }\n\n      ++i;\n      ++column;\n\n      // -1 to avoid weird TTY behavior in final column\n      if (column >= this._getLineWrapWidth() - 1) {\n        column = 0;\n        ++this._printedY;\n        buffer += '\\n';\n      }\n    }\n    this.stderr.write(buffer);\n\n    if (needsClear) {\n      readline.clearLine(this.stderr, 1);\n    }\n\n    this.unhideCursor();\n  }\n}\n\nexport class TerminalInput {\n  private static async _readLineAsync(): Promise<string> {\n    const readlineInterface: readline.Interface = readline.createInterface({ input: process.stdin });\n    try {\n      return await new Promise((resolve, reject) => {\n        readlineInterface.question('', (answer: string) => {\n          resolve(answer);\n        });\n      });\n    } finally {\n      readlineInterface.close();\n    }\n  }\n\n  public static async promptYesNoAsync(options: IPromptYesNoOptions): Promise<boolean> {\n    const keyboardLoop: YesNoKeyboardLoop = new YesNoKeyboardLoop(options);\n    await keyboardLoop.startAsync();\n    return keyboardLoop.result!;\n  }\n\n  public static async promptLineAsync(options: IPromptLineOptions): Promise<string> {\n    const stderr: NodeJS.WriteStream = process.stderr;\n    stderr.write(Colorize.green('==>') + ' ');\n    stderr.write(Colorize.bold(options.message));\n    stderr.write(' ');\n    return await TerminalInput._readLineAsync();\n  }\n\n  public static async promptPasswordLineAsync(options: IPromptLineOptions): Promise<string> {\n    const keyboardLoop: PasswordKeyboardLoop = new PasswordKeyboardLoop(options);\n    await keyboardLoop.startAsync();\n    return keyboardLoop.result;\n  }\n}\n"]}