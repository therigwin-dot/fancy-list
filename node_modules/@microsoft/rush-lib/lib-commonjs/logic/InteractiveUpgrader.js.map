{"version":3,"file":"InteractiveUpgrader.js","sourceRoot":"","sources":["../../src/logic/InteractiveUpgrader.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,0DAAiC;AAEjC,kDAA+C;AAG/C,4EAAmG;AAEnG,oEAA4C;AAE5C,4EAAyE;AAOzE,MAAa,mBAAmB;IAG9B,YAAmB,iBAAoC;QACrD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAEM,KAAK,CAAC,YAAY;QACvB,MAAM,WAAW,GAA6B,MAAM,IAAI,CAAC,sCAAsC,EAAE,CAAC;QAElG,MAAM,iBAAiB,GACrB,MAAM,IAAI,CAAC,kCAAkC,CAAC,WAAW,CAAC,CAAC;QAE7D,MAAM,aAAa,GACjB,MAAM,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,CAAC,CAAC;QAC3E,OAAO,EAAE,QAAQ,EAAE,CAAC,WAAW,CAAC,EAAE,aAAa,EAAE,CAAC;IACpD,CAAC;IAEO,KAAK,CAAC,0CAA0C,CACtD,QAAqC;QAErC,OAAO,IAAA,yCAAkB,EAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEO,KAAK,CAAC,sCAAsC;QAClD,MAAM,QAAQ,GAA2C,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;QAC1F,MAAM,EAAE,GAAW,IAAI,gBAAM,CAAC;YAC5B,IAAI,EAAE,mCAAgB;SACvB,CAAC,CAAC;QAEH,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC;YACrC;gBACE,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,4CAA4C;gBACrD,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;oBAChC,OAAO;wBACL,IAAI,EAAE,mBAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;wBACzC,KAAK,EAAE,OAAO;qBACf,CAAC;gBACJ,CAAC,CAAC;gBACF,QAAQ,EAAE,EAAE;aACb;SACF,CAAC,CAAC;QAEH,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,KAAK,CAAC,kCAAkC,CAC9C,WAAqC;QAErC,MAAM,EAAE,aAAa,EAAE,GAAG,WAAW,CAAC;QAEtC,MAAM,YAAY,GAAmC,MAAM,IAAA,mBAAQ,EAAC;YAClE,GAAG,EAAE,aAAa;YAClB,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;CACF;AA5DD,kDA4DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport npmCheck from 'npm-check';\nimport type * as NpmCheck from 'npm-check';\nimport { Colorize } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport { upgradeInteractive, type IDepsToUpgradeAnswers } from '../utilities/InteractiveUpgradeUI';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport Prompt from 'inquirer/lib/ui/prompt';\n\nimport { SearchListPrompt } from '../utilities/prompts/SearchListPrompt';\n\ninterface IUpgradeInteractiveDeps {\n  projects: RushConfigurationProject[];\n  depsToUpgrade: IDepsToUpgradeAnswers;\n}\n\nexport class InteractiveUpgrader {\n  private readonly _rushConfiguration: RushConfiguration;\n\n  public constructor(rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n  }\n\n  public async upgradeAsync(): Promise<IUpgradeInteractiveDeps> {\n    const rushProject: RushConfigurationProject = await this._getUserSelectedProjectForUpgradeAsync();\n\n    const dependenciesState: NpmCheck.INpmCheckPackage[] =\n      await this._getPackageDependenciesStatusAsync(rushProject);\n\n    const depsToUpgrade: IDepsToUpgradeAnswers =\n      await this._getUserSelectedDependenciesToUpgradeAsync(dependenciesState);\n    return { projects: [rushProject], depsToUpgrade };\n  }\n\n  private async _getUserSelectedDependenciesToUpgradeAsync(\n    packages: NpmCheck.INpmCheckPackage[]\n  ): Promise<IDepsToUpgradeAnswers> {\n    return upgradeInteractive(packages);\n  }\n\n  private async _getUserSelectedProjectForUpgradeAsync(): Promise<RushConfigurationProject> {\n    const projects: RushConfigurationProject[] | undefined = this._rushConfiguration.projects;\n    const ui: Prompt = new Prompt({\n      list: SearchListPrompt\n    });\n\n    const { selectProject } = await ui.run([\n      {\n        name: 'selectProject',\n        message: 'Select a project you would like to upgrade',\n        type: 'list',\n        choices: projects.map((project) => {\n          return {\n            name: Colorize.green(project.packageName),\n            value: project\n          };\n        }),\n        pageSize: 12\n      }\n    ]);\n\n    return selectProject;\n  }\n\n  private async _getPackageDependenciesStatusAsync(\n    rushProject: RushConfigurationProject\n  ): Promise<NpmCheck.INpmCheckPackage[]> {\n    const { projectFolder } = rushProject;\n\n    const currentState: NpmCheck.INpmCheckCurrentState = await npmCheck({\n      cwd: projectFolder,\n      skipUnused: true\n    });\n\n    return currentState.get('packages');\n  }\n}\n"]}