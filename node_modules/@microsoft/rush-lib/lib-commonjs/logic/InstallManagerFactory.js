"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstallManagerFactory = void 0;
const WorkspaceInstallManager_1 = require("./installManager/WorkspaceInstallManager");
class InstallManagerFactory {
    static async getInstallManagerAsync(rushConfiguration, rushGlobalFolder, purgeManager, options) {
        if (rushConfiguration.isPnpm &&
            rushConfiguration.pnpmOptions &&
            rushConfiguration.pnpmOptions.useWorkspaces) {
            return new WorkspaceInstallManager_1.WorkspaceInstallManager(rushConfiguration, rushGlobalFolder, purgeManager, options);
        }
        const rushInstallManagerModule = await Promise.resolve().then(() => __importStar(require(
        /* webpackChunkName: 'RushInstallManager' */
        './installManager/RushInstallManager')));
        return new rushInstallManagerModule.RushInstallManager(rushConfiguration, rushGlobalFolder, purgeManager, options);
    }
}
exports.InstallManagerFactory = InstallManagerFactory;
//# sourceMappingURL=InstallManagerFactory.js.map