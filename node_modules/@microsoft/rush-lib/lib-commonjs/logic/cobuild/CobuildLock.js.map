{"version":3,"file":"CobuildLock.js","sourceRoot":"","sources":["../../../src/logic/cobuild/CobuildLock.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAA6D;AAO7D,MAAM,aAAa,GAAQ,GAAG,CAAC;AA+B/B,MAAa,WAAW;IAMtB,YAAmB,OAA4B;QAC7C,MAAM,EACJ,oBAAoB,EACpB,iBAAiB,EACjB,gBAAgB,EAAE,SAAS,EAC3B,uBAAuB,EACvB,WAAW,EACX,SAAS,EACV,GAAG,OAAO,CAAC;QACZ,MAAM,EAAE,gBAAgB,EAAE,SAAS,EAAE,eAAe,EAAE,QAAQ,EAAE,GAAG,oBAAoB,CAAC;QACxF,MAAM,EAAE,OAAO,EAAE,GAAG,iBAAiB,CAAC;QACtC,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAE3C,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,2BAA2B;YAC3B,MAAM,IAAI,iCAAa,CAAC,sCAAsC,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,2BAA2B;YAC3B,MAAM,IAAI,iCAAa,CAAC,gDAAgD,CAAC,CAAC;QAC5E,CAAC;QAED,gDAAgD;QAChD,MAAM,OAAO,GAAW,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEtF,mDAAmD;QACnD,MAAM,iBAAiB,GAAW,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEnG,IAAI,CAAC,eAAe,GAAG;YACrB,SAAS;YACT,SAAS;YACT,QAAQ;YACR,OAAO;YACP,iBAAiB;YACjB,WAAW;YACX,SAAS;YACT,uBAAuB,EAAE,uBAAuB;YAChD,OAAO;SACR,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,sBAAsB,CAAC,KAA6B;QAC/D,MAAM,IAAI,CAAC,oBAAoB;aAC5B,sBAAsB,EAAE;aACxB,sBAAsB,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;IAEM,KAAK,CAAC,sBAAsB;QACjC,MAAM,KAAK,GAAuC,MAAM,IAAI,CAAC,oBAAoB;aAC9E,sBAAsB,EAAE;aACxB,sBAAsB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,mBAAmB;QAC9B,MAAM,iBAAiB,GAAY,MAAM,IAAI,CAAC,oBAAoB;aAC/D,sBAAsB,EAAE;aACxB,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC1C,IAAI,iBAAiB,EAAE,CAAC;YACtB,+DAA+D;YAC/D,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC9B,CAAC;QACD,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,cAAc;QACzB,MAAM,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAChG,CAAC;IAED,IAAW,cAAc;QACvB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;CACF;AAhFD,kCAgFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { InternalError } from '@rushstack/node-core-library';\n\nimport type { CobuildConfiguration } from '../../api/CobuildConfiguration';\nimport type { OperationStatus } from '../operations/OperationStatus';\nimport type { ICobuildContext } from './ICobuildLockProvider';\nimport type { ProjectBuildCache } from '../buildCache/ProjectBuildCache';\n\nconst KEY_SEPARATOR: ':' = ':';\n\nexport interface ICobuildLockOptions {\n  /**\n   * {@inheritdoc CobuildConfiguration}\n   */\n  cobuildConfiguration: CobuildConfiguration;\n  /**\n   * {@inheritdoc ICobuildContext.clusterId}\n   */\n  cobuildClusterId: string;\n  /**\n   * {@inheritdoc ICobuildContext.packageName}\n   */\n  packageName: string;\n  /**\n   * {@inheritdoc ICobuildContext.phaseName}\n   */\n  phaseName: string;\n  projectBuildCache: ProjectBuildCache;\n  /**\n   * The expire time of the lock in seconds.\n   */\n  lockExpireTimeInSeconds: number;\n}\n\nexport interface ICobuildCompletedState {\n  status: OperationStatus.Success | OperationStatus.SuccessWithWarning | OperationStatus.Failure;\n  cacheId: string;\n}\n\nexport class CobuildLock {\n  public readonly cobuildConfiguration: CobuildConfiguration;\n  public readonly projectBuildCache: ProjectBuildCache;\n\n  private _cobuildContext: ICobuildContext;\n\n  public constructor(options: ICobuildLockOptions) {\n    const {\n      cobuildConfiguration,\n      projectBuildCache,\n      cobuildClusterId: clusterId,\n      lockExpireTimeInSeconds,\n      packageName,\n      phaseName\n    } = options;\n    const { cobuildContextId: contextId, cobuildRunnerId: runnerId } = cobuildConfiguration;\n    const { cacheId } = projectBuildCache;\n    this.cobuildConfiguration = cobuildConfiguration;\n    this.projectBuildCache = projectBuildCache;\n\n    if (!cacheId) {\n      // This should never happen\n      throw new InternalError(`Cache id is require for cobuild lock`);\n    }\n\n    if (!contextId) {\n      // This should never happen\n      throw new InternalError(`Cobuild context id is require for cobuild lock`);\n    }\n\n    // Example: cobuild:lock:<contextId>:<clusterId>\n    const lockKey: string = ['cobuild', 'lock', contextId, clusterId].join(KEY_SEPARATOR);\n\n    // Example: cobuild:completed:<contextId>:<cacheId>\n    const completedStateKey: string = ['cobuild', 'completed', contextId, cacheId].join(KEY_SEPARATOR);\n\n    this._cobuildContext = {\n      contextId,\n      clusterId,\n      runnerId,\n      lockKey,\n      completedStateKey,\n      packageName,\n      phaseName,\n      lockExpireTimeInSeconds: lockExpireTimeInSeconds,\n      cacheId\n    };\n  }\n\n  public async setCompletedStateAsync(state: ICobuildCompletedState): Promise<void> {\n    await this.cobuildConfiguration\n      .getCobuildLockProvider()\n      .setCompletedStateAsync(this._cobuildContext, state);\n  }\n\n  public async getCompletedStateAsync(): Promise<ICobuildCompletedState | undefined> {\n    const state: ICobuildCompletedState | undefined = await this.cobuildConfiguration\n      .getCobuildLockProvider()\n      .getCompletedStateAsync(this._cobuildContext);\n    return state;\n  }\n\n  public async tryAcquireLockAsync(): Promise<boolean> {\n    const acquireLockResult: boolean = await this.cobuildConfiguration\n      .getCobuildLockProvider()\n      .acquireLockAsync(this._cobuildContext);\n    if (acquireLockResult) {\n      // renew the lock in a redundant way in case of losing the lock\n      await this.renewLockAsync();\n    }\n    return acquireLockResult;\n  }\n\n  public async renewLockAsync(): Promise<void> {\n    await this.cobuildConfiguration.getCobuildLockProvider().renewLockAsync(this._cobuildContext);\n  }\n\n  public get cobuildContext(): ICobuildContext {\n    return this._cobuildContext;\n  }\n}\n"]}