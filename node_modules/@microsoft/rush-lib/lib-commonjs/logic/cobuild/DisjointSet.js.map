{"version":3,"file":"DisjointSet.js","sourceRoot":"","sources":["../../../src/logic/cobuild/DisjointSet.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { InternalError } from '@rushstack/node-core-library';\n\n/**\n * A disjoint set data structure\n */\nexport class DisjointSet<T extends object> {\n  private _forest: Set<T>;\n  private _parentMap: Map<T, T>;\n  private _sizeMap: Map<T, number>;\n  private _setByElement: Map<T, Set<T>> | undefined;\n\n  public constructor() {\n    this._forest = new Set<T>();\n    this._parentMap = new Map<T, T>();\n    this._sizeMap = new Map<T, number>();\n    this._setByElement = new Map<T, Set<T>>();\n  }\n\n  public destroy(): void {\n    this._forest.clear();\n    this._parentMap.clear();\n    this._sizeMap.clear();\n    this._setByElement?.clear();\n  }\n\n  /**\n   * Adds a new set containing specific object\n   */\n  public add(x: T): void {\n    if (this._forest.has(x)) {\n      return;\n    }\n\n    this._forest.add(x);\n    this._parentMap.set(x, x);\n    this._sizeMap.set(x, 1);\n    this._setByElement = undefined;\n  }\n\n  /**\n   * Unions the sets that contain two objects\n   */\n  public union(a: T, b: T): void {\n    let x: T = this._find(a);\n    let y: T = this._find(b);\n\n    if (x === y) {\n      // x and y are already in the same set\n      return;\n    }\n\n    const xSize: number = this._getSize(x);\n    const ySize: number = this._getSize(y);\n    if (xSize < ySize) {\n      const t: T = x;\n      x = y;\n      y = t;\n    }\n    this._parentMap.set(y, x);\n    this._sizeMap.set(x, xSize + ySize);\n    this._setByElement = undefined;\n  }\n\n  public getAllSets(): Iterable<Set<T>> {\n    if (this._setByElement === undefined) {\n      this._setByElement = new Map<T, Set<T>>();\n\n      for (const element of this._forest) {\n        const root: T = this._find(element);\n        let set: Set<T> | undefined = this._setByElement.get(root);\n        if (set === undefined) {\n          set = new Set<T>();\n          this._setByElement.set(root, set);\n        }\n        set.add(element);\n      }\n    }\n    return this._setByElement.values();\n  }\n\n  /**\n   * Returns true if x and y are in the same set\n   */\n  public isConnected(x: T, y: T): boolean {\n    return this._find(x) === this._find(y);\n  }\n\n  private _find(a: T): T {\n    let x: T = a;\n    let parent: T = this._getParent(x);\n    while (parent !== x) {\n      parent = this._getParent(parent);\n      this._parentMap.set(x, parent);\n      x = parent;\n      parent = this._getParent(x);\n    }\n    return x;\n  }\n\n  private _getParent(x: T): T {\n    const parent: T | undefined = this._parentMap.get(x);\n    if (parent === undefined) {\n      // This should not happen\n      throw new InternalError(`Can not find parent`);\n    }\n    return parent;\n  }\n\n  private _getSize(x: T): number {\n    const size: number | undefined = this._sizeMap.get(x);\n    if (size === undefined) {\n      // This should not happen\n      throw new InternalError(`Can not get size`);\n    }\n    return size;\n  }\n}\n"]}