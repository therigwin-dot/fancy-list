{"version":3,"file":"SubspaceGlobalPnpmfileShim.js","sourceRoot":"","sources":["../../../src/logic/pnpm/SubspaceGlobalPnpmfileShim.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// The \"rush install\" or \"rush update\" commands will copy this template to\n// \"common/temp-split/global-pnpmfile.js\" so that it can implement Rush-specific features.\n// It reads its input data from \"common/temp/pnpmfileSettings.json\". The pnpmfile is\n// required directly by this shim and is called after Rush's transformations are applied.\n\nimport path from 'path';\n\n// This file can use \"import type\" but otherwise should not reference any other modules, since it will\n// be run from the \"common/temp\" directory\nimport type * as TSemver from 'semver';\nimport type { IPackageJson } from '@rushstack/node-core-library';\n\nimport type {\n  IPnpmfile,\n  IPnpmfileContext,\n  IPnpmfileHooks,\n  ISubspacePnpmfileShimSettings,\n  IWorkspaceProjectInfo\n} from './IPnpmfile';\nimport type { IPnpmShrinkwrapYaml } from './PnpmShrinkwrapFile';\n\nlet settings: ISubspacePnpmfileShimSettings;\nlet userPnpmfile: IPnpmfile | undefined;\nlet semver: typeof TSemver | undefined;\n\n// Initialize all external aspects of the pnpmfile shim. When using the shim, settings\n// are always expected to be available. Init must be called before running any hook that\n// depends on a resource obtained from or related to the settings, and will require modules\n// once so they aren't repeatedly required in the hook functions.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction init(context: IPnpmfileContext | any): IPnpmfileContext {\n  // Sometimes PNPM may provide us a context arg that doesn't fit spec, ex.:\n  // https://github.com/pnpm/pnpm/blob/97c64bae4d14a8c8f05803f1d94075ee29c2df2f/packages/get-context/src/index.ts#L134\n  // So we need to normalize the context format before we move on\n  if (typeof context !== 'object' || Array.isArray(context)) {\n    context = {\n      log: (message: string) => {},\n      originalContext: context\n    } as IPnpmfileContext;\n  }\n  if (!settings) {\n    // Initialize the settings from file\n    if (!context.splitWorkspacePnpmfileShimSettings) {\n      context.splitWorkspacePnpmfileShimSettings = __non_webpack_require__('./pnpmfileSettings.json');\n    }\n    settings = context.splitWorkspacePnpmfileShimSettings!;\n  } else if (!context.splitWorkspacePnpmfileShimSettings) {\n    // Reuse the already initialized settings\n    context.splitWorkspacePnpmfileShimSettings = settings;\n  }\n  // If a userPnpmfilePath is provided, we expect it to exist\n  if (!userPnpmfile && settings.userPnpmfilePath) {\n    userPnpmfile = require(settings.userPnpmfilePath);\n  }\n  // If a semverPath is provided, we expect it to exist\n  if (!semver && settings.semverPath) {\n    semver = require(settings.semverPath);\n  }\n  // Return the normalized context\n  return context as IPnpmfileContext;\n}\n\n// Rewrite rush project referenced in split workspace.\n// For example: \"project-a\": \"workspace:*\" --> \"project-a\": \"link:../../project-a\"\nfunction rewriteRushProjectVersions(\n  packageName: string,\n  dependencies: { [dependencyName: string]: string } | undefined\n): void {\n  if (!dependencies) {\n    return;\n  }\n\n  if (!settings) {\n    throw new Error(`splitWorkspaceGlobalPnpmfileShimSettings not initialized`);\n  }\n\n  const workspaceProject: IWorkspaceProjectInfo | undefined =\n    settings.subspaceProjects[packageName] || settings.workspaceProjects[packageName];\n  if (!workspaceProject) {\n    return;\n  }\n\n  for (const dependencyName of Object.keys(dependencies)) {\n    const currentVersion: string = dependencies[dependencyName];\n\n    if (currentVersion.startsWith('workspace:')) {\n      const workspaceProjectInfo: IWorkspaceProjectInfo | undefined =\n        settings.workspaceProjects[dependencyName];\n      if (workspaceProjectInfo) {\n        // Case 1. \"<package_name>\": \"workspace:*\"\n        let workspaceVersionProtocol: string = 'link:';\n\n        const injectedDependenciesSet: ReadonlySet<string> = new Set(workspaceProject.injectedDependencies);\n        if (injectedDependenciesSet.has(dependencyName)) {\n          workspaceVersionProtocol = 'file:';\n        }\n        let relativePath: string = path.normalize(\n          path.relative(workspaceProject.projectRelativeFolder, workspaceProjectInfo.projectRelativeFolder)\n        );\n        // convert path in posix style, otherwise pnpm install will fail in subspace case\n        relativePath = relativePath.split(path.sep).join(path.posix.sep);\n        const newVersion: string = workspaceVersionProtocol + relativePath;\n        dependencies[dependencyName] = newVersion;\n      } else {\n        // Case 2. \"<alias>\": \"workspace:<aliased_package_name>@<version>\"\n        const packageSpec: string = currentVersion.slice('workspace:'.length);\n        const nameEndsAt: number =\n          packageSpec[0] === '@' ? packageSpec.slice(1).indexOf('@') + 1 : packageSpec.indexOf('@');\n        const aliasedPackageName: string = nameEndsAt > 0 ? packageSpec.slice(0, nameEndsAt) : packageSpec;\n        // const depVersion: string = nameEndsAt > 0 ? packageSpec.slice(nameEndsAt + 1) : '';\n        const aliasedWorkspaceProjectInfo: IWorkspaceProjectInfo | undefined =\n          settings.workspaceProjects[aliasedPackageName];\n        if (aliasedWorkspaceProjectInfo) {\n          const relativePath: string = path.normalize(\n            path.relative(\n              workspaceProject.projectRelativeFolder,\n              aliasedWorkspaceProjectInfo.projectRelativeFolder\n            )\n          );\n          const newVersion: string = 'link:' + relativePath;\n          dependencies[dependencyName] = newVersion;\n        }\n      }\n    } else if (currentVersion.startsWith('npm:')) {\n      // Case 3. \"<alias>\": \"npm:<package_name>@<dep_version>\"\n      const packageSpec: string = currentVersion.slice('npm:'.length);\n      const nameEndsAt: number =\n        packageSpec[0] === '@' ? packageSpec.slice(1).indexOf('@') + 1 : packageSpec.indexOf('@');\n      const aliasedPackageName: string = nameEndsAt > 0 ? packageSpec.slice(0, nameEndsAt) : packageSpec;\n      // const depVersion: string = nameEndsAt > 0 ? packageSpec.slice(nameEndsAt + 1) : '';\n      const aliasedWorkspaceProjectInfo: IWorkspaceProjectInfo | undefined =\n        settings.workspaceProjects[aliasedPackageName];\n      if (aliasedWorkspaceProjectInfo) {\n        const relativePath: string = path.normalize(\n          path.relative(\n            workspaceProject.projectRelativeFolder,\n            aliasedWorkspaceProjectInfo.projectRelativeFolder\n          )\n        );\n        const newVersion: string = 'link:' + relativePath;\n        dependencies[dependencyName] = newVersion;\n      }\n    }\n  }\n}\n\nexport const hooks: IPnpmfileHooks = {\n  // Call the original pnpmfile (if it exists)\n  afterAllResolved: (lockfile: IPnpmShrinkwrapYaml, context: IPnpmfileContext) => {\n    context = init(context);\n    return userPnpmfile?.hooks?.afterAllResolved\n      ? userPnpmfile.hooks.afterAllResolved(lockfile, context)\n      : lockfile;\n  },\n\n  // Rewrite workspace protocol to link protocol for non split workspace projects\n  readPackage: (pkg: IPackageJson, context: IPnpmfileContext) => {\n    context = init(context);\n    rewriteRushProjectVersions(pkg.name, pkg.dependencies);\n    rewriteRushProjectVersions(pkg.name, pkg.devDependencies);\n    return userPnpmfile?.hooks?.readPackage ? userPnpmfile.hooks.readPackage(pkg, context) : pkg;\n  },\n\n  // Call the original pnpmfile (if it exists)\n  filterLog: userPnpmfile?.hooks?.filterLog\n};\n"]}