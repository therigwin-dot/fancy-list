{"version":3,"file":"PnpmfileConfiguration.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmfileConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,+CAAiC;AACjC,oEAA8G;AAM9G,yDAA2C;AAC3C,iEAAwF;AAKxF;;;GAGG;AACH,MAAa,qBAAqB;IAGhC,YAAoB,OAAyB;QAC3C,QAAQ,CAAC,KAAK,EAAE,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,eAAe,CACjC,iBAAoC,EACpC,QAAkB,EAClB,OAA2B;QAE3B,IAAI,iBAAiB,CAAC,cAAc,KAAK,MAAM,EAAE,CAAC;YAChD,MAAM,IAAI,KAAK,CACb,8DAA8D,iBAAiB,CAAC,cAAc,GAAG,CAClG,CAAC;QACJ,CAAC;QAED,+DAA+D;QAC/D,MAAM,OAAO,GAAqB;YAChC,GAAG,EAAE,CAAC,OAAe,EAAE,EAAE,GAAE,CAAC;YAC5B,oBAAoB,EAAE,MAAM,qBAAqB,CAAC,6BAA6B,CAC7E,iBAAiB,EACjB,QAAQ,EACR,OAAO,CACR;SACF,CAAC;QAEF,OAAO,IAAI,qBAAqB,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAClD,iBAAoC,EACpC,SAAiB,EACjB,QAAkB,EAClB,OAA2B;QAE3B,IAAI,iBAAiB,CAAC,cAAc,KAAK,MAAM,EAAE,CAAC;YAChD,MAAM,IAAI,KAAK,CACb,8DAA8D,iBAAiB,CAAC,cAAc,GAAG,CAClG,CAAC;QACJ,CAAC;QAED,MAAM,YAAY,GAAW,IAAI,CAAC,IAAI,CACpC,SAAS,EACR,iBAAiB,CAAC,qBAA4C,CAAC,gBAAgB,CACjF,CAAC;QAEF,wBAAwB;QACxB,MAAM,8BAAU,CAAC,aAAa,CAAC;YAC7B,UAAU,EAAE,GAAG,iCAAiB,IAAI,oCAAoB,EAAE;YAC1D,eAAe,EAAE,YAAY;SAC9B,CAAC,CAAC;QAEH,MAAM,oBAAoB,GACxB,MAAM,qBAAqB,CAAC,6BAA6B,CAAC,iBAAiB,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAElG,2CAA2C;QAC3C,MAAM,4BAAQ,CAAC,SAAS,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC,EAAE;YAC5F,kBAAkB,EAAE,IAAI;SACzB,CAAC,CAAC;IACL,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAChD,iBAAoC,EACpC,QAAkB,EAClB,OAA2B;QAE3B,IAAI,oBAAoB,GAAyC,EAAE,CAAC;QACpE,IAAI,0BAA0B,GAAoD,EAAE,CAAC;QACrF,MAAM,iBAAiB,GAA2B,EAAE,CAAC;QAErD,8DAA8D;QAC9D,IAAK,iBAAiB,CAAC,qBAAkD,CAAC,aAAa,EAAE,CAAC;YACxF,MAAM,2BAA2B,GAAgC,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YACrG,MAAM,iBAAiB,GAAwB,IAAI,GAAG,EAAE,CAAC;YACzD,iCAAa,CAAC,YAAY,CACxB,iBAAiB,EACjB,iBAAiB,CAAC,8BAA8B,CAAC,QAAQ,EAAE,OAAO,CAAC,CACpE,CAAC;YACF,KAAK,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,2BAA2B,CAAC,uBAAuB,EAAE,EAAE,CAAC;gBACpF,mDAAmD;gBACnD,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC,EAAE,CAAC;oBACzF,iBAAiB,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACvC,CAAC;YACH,CAAC;YACD,oBAAoB,GAAG,iCAAa,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;YACjE,0BAA0B,GAAG,iCAAa,CAAC,QAAQ,CACjD,2BAA2B,CAAC,0BAA0B,CACvD,CAAC;YAEF,KAAK,MAAM,OAAO,IAAI,iBAAiB,CAAC,QAAQ,EAAE,CAAC;gBACjD,iBAAiB,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC;YACvE,CAAC;QACH,CAAC;QAED,MAAM,QAAQ,GAA0B;YACtC,oBAAoB;YACpB,0BAA0B;YAC1B,iBAAiB;YACjB,UAAU,EAAE,0BAAM,CAAC,aAAa,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,CAAC;SACtF,CAAC;QAEF,uEAAuE;QACvE,MAAM,gBAAgB,GAAuB,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC/E,IAAI,gBAAgB,IAAI,8BAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC5D,QAAQ,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAC/C,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,WAAyB;;QACxC,IAAI,CAAC,CAAA,MAAA,QAAQ,CAAC,KAAK,0CAAE,WAAW,CAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnD,OAAO,WAAW,CAAC;QACrB,CAAC;aAAM,CAAC;YACN,OAAO,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;CACF;AA5HD,sDA4HC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport { FileSystem, Import, type IPackageJson, JsonFile, MapExtensions } from '@rushstack/node-core-library';\n\nimport type { PnpmPackageManager } from '../../api/packageManager/PnpmPackageManager';\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\nimport type { PnpmOptionsConfiguration } from './PnpmOptionsConfiguration';\nimport * as pnpmfile from './PnpmfileShim';\nimport { pnpmfileShimFilename, scriptsFolderPath } from '../../utilities/PathConstants';\n\nimport type { IPnpmfileContext, IPnpmfileShimSettings } from './IPnpmfile';\nimport type { Subspace } from '../../api/Subspace';\n\n/**\n * Loads PNPM's pnpmfile.js configuration, and invokes it to preprocess package.json files,\n * optionally utilizing a pnpmfile shim to inject preferred versions.\n */\nexport class PnpmfileConfiguration {\n  private _context: IPnpmfileContext | undefined;\n\n  private constructor(context: IPnpmfileContext) {\n    pnpmfile.reset();\n    this._context = context;\n  }\n\n  public static async initializeAsync(\n    rushConfiguration: RushConfiguration,\n    subspace: Subspace,\n    variant: string | undefined\n  ): Promise<PnpmfileConfiguration> {\n    if (rushConfiguration.packageManager !== 'pnpm') {\n      throw new Error(\n        `PnpmfileConfiguration cannot be used with package manager \"${rushConfiguration.packageManager}\"`\n      );\n    }\n\n    // Set the context to swallow log output and store our settings\n    const context: IPnpmfileContext = {\n      log: (message: string) => {},\n      pnpmfileShimSettings: await PnpmfileConfiguration._getPnpmfileShimSettingsAsync(\n        rushConfiguration,\n        subspace,\n        variant\n      )\n    };\n\n    return new PnpmfileConfiguration(context);\n  }\n\n  public static async writeCommonTempPnpmfileShimAsync(\n    rushConfiguration: RushConfiguration,\n    targetDir: string,\n    subspace: Subspace,\n    variant: string | undefined\n  ): Promise<void> {\n    if (rushConfiguration.packageManager !== 'pnpm') {\n      throw new Error(\n        `PnpmfileConfiguration cannot be used with package manager \"${rushConfiguration.packageManager}\"`\n      );\n    }\n\n    const pnpmfilePath: string = path.join(\n      targetDir,\n      (rushConfiguration.packageManagerWrapper as PnpmPackageManager).pnpmfileFilename\n    );\n\n    // Write the shim itself\n    await FileSystem.copyFileAsync({\n      sourcePath: `${scriptsFolderPath}/${pnpmfileShimFilename}`,\n      destinationPath: pnpmfilePath\n    });\n\n    const pnpmfileShimSettings: IPnpmfileShimSettings =\n      await PnpmfileConfiguration._getPnpmfileShimSettingsAsync(rushConfiguration, subspace, variant);\n\n    // Write the settings file used by the shim\n    await JsonFile.saveAsync(pnpmfileShimSettings, path.join(targetDir, 'pnpmfileSettings.json'), {\n      ensureFolderExists: true\n    });\n  }\n\n  private static async _getPnpmfileShimSettingsAsync(\n    rushConfiguration: RushConfiguration,\n    subspace: Subspace,\n    variant: string | undefined\n  ): Promise<IPnpmfileShimSettings> {\n    let allPreferredVersions: { [dependencyName: string]: string } = {};\n    let allowedAlternativeVersions: { [dependencyName: string]: readonly string[] } = {};\n    const workspaceVersions: Record<string, string> = {};\n\n    // Only workspaces shims in the common versions using pnpmfile\n    if ((rushConfiguration.packageManagerOptions as PnpmOptionsConfiguration).useWorkspaces) {\n      const commonVersionsConfiguration: CommonVersionsConfiguration = subspace.getCommonVersions(variant);\n      const preferredVersions: Map<string, string> = new Map();\n      MapExtensions.mergeFromMap(\n        preferredVersions,\n        rushConfiguration.getImplicitlyPreferredVersions(subspace, variant)\n      );\n      for (const [name, version] of commonVersionsConfiguration.getAllPreferredVersions()) {\n        // Use the most restrictive version range available\n        if (!preferredVersions.has(name) || semver.subset(version, preferredVersions.get(name)!)) {\n          preferredVersions.set(name, version);\n        }\n      }\n      allPreferredVersions = MapExtensions.toObject(preferredVersions);\n      allowedAlternativeVersions = MapExtensions.toObject(\n        commonVersionsConfiguration.allowedAlternativeVersions\n      );\n\n      for (const project of rushConfiguration.projects) {\n        workspaceVersions[project.packageName] = project.packageJson.version;\n      }\n    }\n\n    const settings: IPnpmfileShimSettings = {\n      allPreferredVersions,\n      allowedAlternativeVersions,\n      workspaceVersions,\n      semverPath: Import.resolveModule({ modulePath: 'semver', baseFolderPath: __dirname })\n    };\n\n    // Use the provided path if available. Otherwise, use the default path.\n    const userPnpmfilePath: string | undefined = subspace.getPnpmfilePath(variant);\n    if (userPnpmfilePath && FileSystem.exists(userPnpmfilePath)) {\n      settings.userPnpmfilePath = userPnpmfilePath;\n    }\n\n    return settings;\n  }\n\n  /**\n   * Transform a package.json file using the pnpmfile.js hook.\n   * @returns the transformed object, or the original input if pnpmfile.js was not found.\n   */\n  public transform(packageJson: IPackageJson): IPackageJson {\n    if (!pnpmfile.hooks?.readPackage || !this._context) {\n      return packageJson;\n    } else {\n      return pnpmfile.hooks.readPackage(packageJson, this._context);\n    }\n  }\n}\n"]}