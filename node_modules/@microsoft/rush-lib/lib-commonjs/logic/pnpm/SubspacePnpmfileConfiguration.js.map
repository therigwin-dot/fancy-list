{"version":3,"file":"SubspacePnpmfileConfiguration.js","sourceRoot":"","sources":["../../../src/logic/pnpm/SubspacePnpmfileConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { FileSystem, Import, JsonFile, type IDependenciesMetaTable } from '@rushstack/node-core-library';\nimport { subspacePnpmfileShimFilename, scriptsFolderPath } from '../../utilities/PathConstants';\n\nimport type { ISubspacePnpmfileShimSettings, IWorkspaceProjectInfo } from './IPnpmfile';\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type { PnpmPackageManager } from '../../api/packageManager/PnpmPackageManager';\nimport { RushConstants } from '../RushConstants';\nimport type { Subspace } from '../../api/Subspace';\nimport type { PnpmOptionsConfiguration } from './PnpmOptionsConfiguration';\n\n/**\n * Loads PNPM's pnpmfile.js configuration, and invokes it to preprocess package.json files,\n * optionally utilizing a pnpmfile shim to inject preferred versions.\n */\nexport class SubspacePnpmfileConfiguration {\n  /**\n   * Split workspace use global pnpmfile, because in split workspace, user may set `shared-workspace-lockfile=false`.\n   * That means each project owns their individual pnpmfile under project folder. While the global pnpmfile could be\n   * under the common/temp-split/ folder and be used by all split workspace projects.\n   */\n  public static async writeCommonTempSubspaceGlobalPnpmfileAsync(\n    rushConfiguration: RushConfiguration,\n    subspace: Subspace,\n    variant: string | undefined\n  ): Promise<void> {\n    if (rushConfiguration.packageManager !== 'pnpm') {\n      throw new Error(\n        `PnpmfileConfiguration cannot be used with package manager \"${rushConfiguration.packageManager}\"`\n      );\n    }\n\n    const targetDir: string = subspace.getSubspaceTempFolderPath();\n    const subspaceGlobalPnpmfilePath: string = path.join(targetDir, RushConstants.pnpmfileGlobalFilename);\n\n    // Write the shim itself\n    await FileSystem.copyFileAsync({\n      sourcePath: `${scriptsFolderPath}/${subspacePnpmfileShimFilename}`,\n      destinationPath: subspaceGlobalPnpmfilePath\n    });\n\n    const subspaceGlobalPnpmfileShimSettings: ISubspacePnpmfileShimSettings =\n      SubspacePnpmfileConfiguration.getSubspacePnpmfileShimSettings(rushConfiguration, subspace, variant);\n\n    // Write the settings file used by the shim\n    await JsonFile.saveAsync(\n      subspaceGlobalPnpmfileShimSettings,\n      path.join(targetDir, 'pnpmfileSettings.json'),\n      {\n        ensureFolderExists: true\n      }\n    );\n  }\n\n  public static getSubspacePnpmfileShimSettings(\n    rushConfiguration: RushConfiguration,\n    subspace: Subspace,\n    variant: string | undefined\n  ): ISubspacePnpmfileShimSettings {\n    const workspaceProjects: Record<string, IWorkspaceProjectInfo> = {};\n    const subspaceProjects: Record<string, IWorkspaceProjectInfo> = {};\n\n    const projectNameToInjectedDependenciesMap: Map<\n      string,\n      Set<string>\n    > = SubspacePnpmfileConfiguration._getProjectNameToInjectedDependenciesMap(rushConfiguration, subspace);\n    for (const project of rushConfiguration.projects) {\n      const { packageName, projectRelativeFolder, packageJson } = project;\n      const workspaceProjectInfo: IWorkspaceProjectInfo = {\n        packageName,\n        projectRelativeFolder,\n        packageVersion: packageJson.version,\n        injectedDependencies: Array.from(projectNameToInjectedDependenciesMap.get(packageName) || [])\n      };\n      (subspace.contains(project) ? subspaceProjects : workspaceProjects)[packageName] = workspaceProjectInfo;\n    }\n\n    const settings: ISubspacePnpmfileShimSettings = {\n      workspaceProjects,\n      subspaceProjects,\n      semverPath: Import.resolveModule({ modulePath: 'semver', baseFolderPath: __dirname })\n    };\n\n    // common/config/subspaces/<subspace_name>/.pnpmfile.cjs\n    const userPnpmfilePath: string = path.join(\n      subspace.getVariantDependentSubspaceConfigFolderPath(variant),\n      (rushConfiguration.packageManagerWrapper as PnpmPackageManager).pnpmfileFilename\n    );\n    if (FileSystem.exists(userPnpmfilePath)) {\n      settings.userPnpmfilePath = userPnpmfilePath;\n    }\n\n    return settings;\n  }\n\n  private static _getProjectNameToInjectedDependenciesMap(\n    rushConfiguration: RushConfiguration,\n    subspace: Subspace\n  ): Map<string, Set<string>> {\n    const projectNameToInjectedDependenciesMap: Map<string, Set<string>> = new Map();\n\n    const workspaceProjectsMap: Map<string, RushConfigurationProject> = new Map();\n    const subspaceProjectsMap: Map<string, RushConfigurationProject> = new Map();\n    for (const project of rushConfiguration.projects) {\n      if (subspace.contains(project)) {\n        subspaceProjectsMap.set(project.packageName, project);\n      } else {\n        workspaceProjectsMap.set(project.packageName, project);\n      }\n\n      projectNameToInjectedDependenciesMap.set(project.packageName, new Set());\n    }\n\n    const processTransitiveInjectedInstallQueue: Array<RushConfigurationProject> = [];\n\n    for (const subspaceProject of subspaceProjectsMap.values()) {\n      const injectedDependencySet: Set<string> = new Set();\n      const dependenciesMeta: IDependenciesMetaTable | undefined =\n        subspaceProject.packageJson.dependenciesMeta;\n      if (dependenciesMeta) {\n        for (const [dependencyName, { injected }] of Object.entries(dependenciesMeta)) {\n          if (injected) {\n            injectedDependencySet.add(dependencyName);\n            projectNameToInjectedDependenciesMap.get(subspaceProject.packageName)?.add(dependencyName);\n\n            //if this dependency is in the same subspace, leave as it is, PNPM will handle it\n            //if this dependency is in another subspace, then it is transitive injected installation\n            //so, we need to let all the workspace dependencies along the dependency chain to use injected installation\n            if (!subspaceProjectsMap.has(dependencyName)) {\n              processTransitiveInjectedInstallQueue.push(workspaceProjectsMap.get(dependencyName)!);\n            }\n          }\n        }\n      }\n\n      // if alwaysInjectDependenciesFromOtherSubspaces policy is true in pnpm-config.json\n      // and the dependency is not injected yet\n      // and the dependency is in another subspace\n      // then, make this dependency as injected dependency\n      const pnpmOptions: PnpmOptionsConfiguration | undefined =\n        subspace.getPnpmOptions() || rushConfiguration.pnpmOptions;\n      if (pnpmOptions && pnpmOptions.alwaysInjectDependenciesFromOtherSubspaces) {\n        const dependencyProjects: ReadonlySet<RushConfigurationProject> = subspaceProject.dependencyProjects;\n        for (const dependencyProject of dependencyProjects) {\n          const dependencyName: string = dependencyProject.packageName;\n          if (!injectedDependencySet.has(dependencyName) && !subspaceProjectsMap.has(dependencyName)) {\n            projectNameToInjectedDependenciesMap.get(subspaceProject.packageName)?.add(dependencyName);\n            // process transitive injected installation\n            processTransitiveInjectedInstallQueue.push(workspaceProjectsMap.get(dependencyName)!);\n          }\n        }\n      }\n    }\n\n    // rewrite all workspace dependencies to injected install all for transitive injected installation case\n    while (processTransitiveInjectedInstallQueue.length > 0) {\n      const currentProject: RushConfigurationProject | undefined =\n        processTransitiveInjectedInstallQueue.shift();\n      const dependencies: Record<string, string> | undefined = currentProject?.packageJson?.dependencies;\n      const optionalDependencies: Record<string, string> | undefined =\n        currentProject?.packageJson?.optionalDependencies;\n      if (currentProject) {\n        if (dependencies) {\n          SubspacePnpmfileConfiguration._processDependenciesForTransitiveInjectedInstall(\n            projectNameToInjectedDependenciesMap,\n            processTransitiveInjectedInstallQueue,\n            dependencies,\n            currentProject,\n            rushConfiguration\n          );\n        }\n        if (optionalDependencies) {\n          SubspacePnpmfileConfiguration._processDependenciesForTransitiveInjectedInstall(\n            projectNameToInjectedDependenciesMap,\n            processTransitiveInjectedInstallQueue,\n            optionalDependencies,\n            currentProject,\n            rushConfiguration\n          );\n        }\n      }\n    }\n\n    return projectNameToInjectedDependenciesMap;\n  }\n\n  private static _processDependenciesForTransitiveInjectedInstall(\n    projectNameToInjectedDependencies: Map<string, Set<string>>,\n    processTransitiveInjectedInstallQueue: Array<RushConfigurationProject>,\n    dependencies: Record<string, string>,\n    currentProject: RushConfigurationProject,\n    rushConfiguration: RushConfiguration\n  ): void {\n    for (const dependencyName in dependencies) {\n      if (dependencies[dependencyName].startsWith('workspace:')) {\n        projectNameToInjectedDependencies.get(currentProject.packageName)?.add(dependencyName);\n        const nextProject: RushConfigurationProject | undefined =\n          rushConfiguration.getProjectByName(dependencyName);\n        if (nextProject) {\n          processTransitiveInjectedInstallQueue.push(nextProject);\n        }\n      }\n    }\n  }\n}\n"]}