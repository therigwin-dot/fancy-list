{"version":3,"file":"PnpmWorkspaceFile.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmWorkspaceFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oEAAkE;AAElE,iEAA8D;AAC9D,qDAA+D;AAE/D,MAAM,UAAU,GAA6B,0BAAM,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAE7E,MAAM,UAAU,GAAkC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,uCAAuC;AAgBjH,MAAa,iBAAkB,SAAQ,qCAAiB;IAQtD;;;OAGG;IACH,YAAmB,qBAA6B;QAC9C,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,iBAAiB,GAAG,qBAAqB,CAAC;QAC/C,gGAAgG;QAChG,qGAAqG;QACrG,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAU,CAAC;IAC9C,CAAC;IAED,gBAAgB;IACT,UAAU,CAAC,WAAmB;QACnC,8DAA8D;QAC9D,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;YACjC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,WAAW,CAAC,CAAC;QACjF,CAAC;QAED,kCAAkC;QAClC,MAAM,QAAQ,GAAW,wBAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC5D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,gBAAgB;IACN,SAAS;QACjB,4CAA4C;QAC5C,wBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAEtC,MAAM,aAAa,GAAuB;YACxC,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;SAC9C,CAAC;QACF,OAAO,UAAU,CAAC,QAAQ,CAAC,aAAa,EAAE,4CAA2B,CAAC,CAAC;IACzE,CAAC;CACF;AA3CD,8CA2CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { Sort, Import, Path } from '@rushstack/node-core-library';\n\nimport { BaseWorkspaceFile } from '../base/BaseWorkspaceFile';\nimport { PNPM_SHRINKWRAP_YAML_FORMAT } from './PnpmYamlCommon';\n\nconst yamlModule: typeof import('js-yaml') = Import.lazy('js-yaml', require);\n\nconst globEscape: (unescaped: string) => string = require('glob-escape'); // No @types/glob-escape package exists\n\n/**\n * This interface represents the raw pnpm-workspace.YAML file\n * Example:\n *  {\n *    \"packages\": [\n *      \"../../apps/project1\"\n *    ]\n *  }\n */\ninterface IPnpmWorkspaceYaml {\n  /** The list of local package directories */\n  packages: string[];\n}\n\nexport class PnpmWorkspaceFile extends BaseWorkspaceFile {\n  /**\n   * The filename of the workspace file.\n   */\n  public readonly workspaceFilename: string;\n\n  private _workspacePackages: Set<string>;\n\n  /**\n   * The PNPM workspace file is used to specify the location of workspaces relative to the root\n   * of your PNPM install.\n   */\n  public constructor(workspaceYamlFilename: string) {\n    super();\n\n    this.workspaceFilename = workspaceYamlFilename;\n    // Ignore any existing file since this file is generated and we need to handle deleting packages\n    // If we need to support manual customization, that should be an additional parameter for \"base file\"\n    this._workspacePackages = new Set<string>();\n  }\n\n  /** @override */\n  public addPackage(packagePath: string): void {\n    // Ensure the path is relative to the pnpm-workspace.yaml file\n    if (path.isAbsolute(packagePath)) {\n      packagePath = path.relative(path.dirname(this.workspaceFilename), packagePath);\n    }\n\n    // Glob can't handle Windows paths\n    const globPath: string = Path.convertToSlashes(packagePath);\n    this._workspacePackages.add(globEscape(globPath));\n  }\n\n  /** @override */\n  protected serialize(): string {\n    // Ensure stable sort order when serializing\n    Sort.sortSet(this._workspacePackages);\n\n    const workspaceYaml: IPnpmWorkspaceYaml = {\n      packages: Array.from(this._workspacePackages)\n    };\n    return yamlModule.safeDump(workspaceYaml, PNPM_SHRINKWRAP_YAML_FORMAT);\n  }\n}\n"]}