{"version":3,"file":"ApprovedPackagesChecker.js","sourceRoot":"","sources":["../../src/logic/ApprovedPackagesChecker.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ApprovedPackagesPolicy } from '../api/ApprovedPackagesPolicy';\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport { DependencySpecifier } from './DependencySpecifier';\nimport type { IPackageJson } from '@rushstack/node-core-library';\n\nexport class ApprovedPackagesChecker {\n  private readonly _rushConfiguration: RushConfiguration;\n  private _approvedPackagesPolicy: ApprovedPackagesPolicy;\n  private _filesAreOutOfDate: boolean;\n\n  public constructor(rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n    this._approvedPackagesPolicy = this._rushConfiguration.approvedPackagesPolicy;\n    this._filesAreOutOfDate = false;\n\n    if (this._approvedPackagesPolicy.enabled) {\n      this._updateApprovedPackagesPolicy();\n    }\n  }\n\n  /**\n   * If true, the files on disk are out of date.\n   */\n  public get approvedPackagesFilesAreOutOfDate(): boolean {\n    return this._filesAreOutOfDate;\n  }\n\n  /**\n   * Examines the current dependencies for the projects specified in RushConfiguration,\n   * and then adds them to the 'browser-approved-packages.json' and\n   * 'nonbrowser-approved-packages.json' config files.  If these files don't exist,\n   * they will be created.\n   *\n   * If the \"approvedPackagesPolicy\" feature is not enabled, then no action is taken.\n   */\n  public rewriteConfigFiles(): void {\n    const approvedPackagesPolicy: ApprovedPackagesPolicy = this._rushConfiguration.approvedPackagesPolicy;\n    if (approvedPackagesPolicy.enabled) {\n      approvedPackagesPolicy.browserApprovedPackages.saveToFile();\n      approvedPackagesPolicy.nonbrowserApprovedPackages.saveToFile();\n    }\n  }\n\n  private _updateApprovedPackagesPolicy(): void {\n    for (const rushProject of this._rushConfiguration.projects) {\n      const packageJson: IPackageJson = rushProject.packageJson;\n\n      this._collectDependencies(packageJson.dependencies, this._approvedPackagesPolicy, rushProject);\n      this._collectDependencies(packageJson.devDependencies, this._approvedPackagesPolicy, rushProject);\n      this._collectDependencies(packageJson.peerDependencies, this._approvedPackagesPolicy, rushProject);\n      this._collectDependencies(packageJson.optionalDependencies, this._approvedPackagesPolicy, rushProject);\n    }\n  }\n\n  private _collectDependencies(\n    dependencies: { [key: string]: string } | undefined,\n    approvedPackagesPolicy: ApprovedPackagesPolicy,\n    rushProject: RushConfigurationProject\n  ): void {\n    if (dependencies) {\n      for (const packageName of Object.keys(dependencies)) {\n        let referencedPackageName: string = packageName;\n\n        // Special handling for NPM package aliases such as this:\n        //\n        // \"dependencies\": {\n        //   \"alias-name\": \"npm:target-name@^1.2.3\"\n        // }\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(\n          packageName,\n          dependencies[packageName]\n        );\n        if (dependencySpecifier.aliasTarget) {\n          // Use \"target-name\" instead of \"alias-name\"\n          referencedPackageName = dependencySpecifier.aliasTarget.packageName;\n        }\n\n        const scope: string = this._rushConfiguration.packageNameParser.getScope(referencedPackageName);\n\n        // Make sure the scope isn't something like \"@types\" which should be ignored\n        if (!approvedPackagesPolicy.ignoredNpmScopes.has(scope) && rushProject.reviewCategory) {\n          // Yes, add it to the list if it's not already there\n\n          let updated: boolean = false;\n\n          // By default we put everything in the browser file.  But if it already appears in the\n          // non-browser file, then use that instead.\n          if (approvedPackagesPolicy.nonbrowserApprovedPackages.getItemByName(referencedPackageName)) {\n            updated = approvedPackagesPolicy.nonbrowserApprovedPackages.addOrUpdatePackage(\n              referencedPackageName,\n              rushProject.reviewCategory\n            );\n          } else {\n            updated = approvedPackagesPolicy.browserApprovedPackages.addOrUpdatePackage(\n              referencedPackageName,\n              rushProject.reviewCategory\n            );\n          }\n\n          this._filesAreOutOfDate = this._filesAreOutOfDate || updated;\n        }\n      }\n    }\n  }\n}\n"]}