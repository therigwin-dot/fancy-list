{"version":3,"file":"VersionMismatchFinderCommonVersions.js","sourceRoot":"","sources":["../../../src/logic/versionMismatch/VersionMismatchFinderCommonVersions.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oDAAiD;AACjD,mEAAoF;AAEpF,+EAA4E;AAE5E,MAAa,mCAAoC,SAAQ,yDAA2B;IAGlF,YAAmB,2BAAwD;QACzE,KAAK,CAAC;YACJ,YAAY,EAAE,2BAA2B,6BAAa,CAAC,sBAAsB,EAAE;YAC/E,0BAA0B,EAAE,IAAI,GAAG,EAAU;SAC9C,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,GAAG,2BAA2B,CAAC;IAClD,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;IACpC,CAAC;IAED,IAAW,eAAe;QACxB,MAAM,YAAY,GAA4B,EAAE,CAAC;QAEjD,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,cAAc,EAAE,EAAE;YAC9E,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;IAEM,gBAAgB,CAAC,WAAmB;QACzC,MAAM,OAAO,GAAuB,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjG,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,SAAS,CAAC;QACnB,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAEM,mBAAmB,CAAC,WAAmB;QAC5C,OAAO,SAAS,CAAC,CAAC,uFAAuF;IAC3G,CAAC;IAEM,qBAAqB,CAC1B,WAAmB,EACnB,UAAkB,EAClB,cAA8B;QAE9B,IAAI,cAAc,KAAK,kCAAc,CAAC,OAAO,EAAE,CAAC;YAC9C,MAAM,IAAI,KAAK,CACb,GAAG,6BAAa,CAAC,sBAAsB,kBAAkB,kCAAc,CAAC,OAAO,gBAAgB,CAChG,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IACnE,CAAC;IAEM,gBAAgB,CAAC,WAAmB;QACzC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACpC,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAClC,CAAC;IAEO,yBAAyB,CAAC,cAAsB,EAAE,OAAe;QACvE,OAAO,IAAI,yCAAqB,CAAC,cAAc,EAAE,OAAO,EAAE,kCAAc,CAAC,OAAO,EAAE,GAAG,EAAE,CACrF,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,OAAO,EAAE,kCAAc,CAAC,OAAO,CAAC,CAC5E,CAAC;IACJ,CAAC;CACF;AAlED,kFAkEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { RushConstants } from '../RushConstants';\nimport { PackageJsonDependency, DependencyType } from '../../api/PackageJsonEditor';\nimport type { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\nimport { VersionMismatchFinderEntity } from './VersionMismatchFinderEntity';\n\nexport class VersionMismatchFinderCommonVersions extends VersionMismatchFinderEntity {\n  private _fileManager: CommonVersionsConfiguration;\n\n  public constructor(commonVersionsConfiguration: CommonVersionsConfiguration) {\n    super({\n      friendlyName: `preferred versions from ${RushConstants.commonVersionsFilename}`,\n      decoupledLocalDependencies: new Set<string>()\n    });\n\n    this._fileManager = commonVersionsConfiguration;\n  }\n\n  public get filePath(): string {\n    return this._fileManager.filePath;\n  }\n\n  public get allDependencies(): ReadonlyArray<PackageJsonDependency> {\n    const dependencies: PackageJsonDependency[] = [];\n\n    this._fileManager.getAllPreferredVersions().forEach((version, dependencyName) => {\n      dependencies.push(this._getPackageJsonDependency(dependencyName, version));\n    });\n\n    return dependencies;\n  }\n\n  public tryGetDependency(packageName: string): PackageJsonDependency | undefined {\n    const version: string | undefined = this._fileManager.getAllPreferredVersions().get(packageName);\n    if (!version) {\n      return undefined;\n    } else {\n      return this._getPackageJsonDependency(packageName, version);\n    }\n  }\n\n  public tryGetDevDependency(packageName: string): PackageJsonDependency | undefined {\n    return undefined; // common-versions.json doesn't have a distinction between dev and non-dev dependencies\n  }\n\n  public addOrUpdateDependency(\n    packageName: string,\n    newVersion: string,\n    dependencyType: DependencyType\n  ): void {\n    if (dependencyType !== DependencyType.Regular) {\n      throw new Error(\n        `${RushConstants.commonVersionsFilename} only accepts \"${DependencyType.Regular}\" dependencies`\n      );\n    }\n\n    this._fileManager.preferredVersions.set(packageName, newVersion);\n  }\n\n  public removeDependency(packageName: string): void {\n    throw new Error('Not supported.');\n  }\n\n  public saveIfModified(): boolean {\n    return this._fileManager.save();\n  }\n\n  private _getPackageJsonDependency(dependencyName: string, version: string): PackageJsonDependency {\n    return new PackageJsonDependency(dependencyName, version, DependencyType.Regular, () =>\n      this.addOrUpdateDependency(dependencyName, version, DependencyType.Regular)\n    );\n  }\n}\n"]}