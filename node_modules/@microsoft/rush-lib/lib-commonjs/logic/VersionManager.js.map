{"version":3,"file":"VersionManager.js","sourceRoot":"","sources":["../../src/logic/VersionManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport { type IPackageJson, JsonFile, FileConstants } from '@rushstack/node-core-library';\n\nimport { type VersionPolicy, type BumpType, LockStepVersionPolicy } from '../api/VersionPolicy';\nimport { ChangeFile } from '../api/ChangeFile';\nimport { ChangeType, type IChangeInfo } from '../api/ChangeManagement';\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport type { VersionPolicyConfiguration } from '../api/VersionPolicyConfiguration';\nimport { PublishUtilities } from './PublishUtilities';\nimport { ChangeManager } from './ChangeManager';\nimport { DependencySpecifier } from './DependencySpecifier';\nimport { cloneDeep } from '../utilities/objectUtilities';\n\nexport class VersionManager {\n  private _rushConfiguration: RushConfiguration;\n  private _userEmail: string;\n  private _versionPolicyConfiguration: VersionPolicyConfiguration;\n\n  public readonly updatedProjects: Map<string, IPackageJson>;\n  public readonly changeFiles: Map<string, ChangeFile>;\n\n  public constructor(\n    rushConfiguration: RushConfiguration,\n    userEmail: string,\n    versionPolicyConfiguration: VersionPolicyConfiguration\n  ) {\n    this._rushConfiguration = rushConfiguration;\n    this._userEmail = userEmail;\n    this._versionPolicyConfiguration = versionPolicyConfiguration\n      ? versionPolicyConfiguration\n      : this._rushConfiguration.versionPolicyConfiguration;\n\n    this.updatedProjects = new Map<string, IPackageJson>();\n    this.changeFiles = new Map<string, ChangeFile>();\n  }\n\n  /**\n   * Ensures project versions follow the provided version policy. If version policy is not\n   * provided, all projects will have their version checked according to the associated version policy.\n   * package.json files will be updated if needed.\n   * This method does not commit changes.\n   * @param versionPolicyName -- version policy name\n   * @param shouldCommit -- should update files to disk\n   * @param force -- update even when project version is higher than policy version.\n   */\n  public ensure(versionPolicyName?: string, shouldCommit?: boolean, force?: boolean): void {\n    this._ensure(versionPolicyName, shouldCommit, force);\n  }\n\n  /**\n   * Bumps versions following version policies.\n   *\n   * @param lockStepVersionPolicyName - a specified lock step version policy name. Without this value,\n   * versions for all lock step policies and all individual policies will be bumped.\n   * With this value, only the specified lock step policy will be bumped along with all individual policies.\n   * @param bumpType - overrides the default bump type and only works for lock step policy\n   * @param identifier - overrides the prerelease identifier and only works for lock step policy\n   * @param shouldCommit - whether the changes will be written to disk\n   */\n  public async bumpAsync(\n    lockStepVersionPolicyName?: string,\n    bumpType?: BumpType,\n    identifier?: string,\n    shouldCommit?: boolean\n  ): Promise<void> {\n    // Bump all the lock step version policies.\n    this._versionPolicyConfiguration.bump(lockStepVersionPolicyName, bumpType, identifier, shouldCommit);\n\n    // Update packages and generate change files due to lock step bump.\n    this._ensure(lockStepVersionPolicyName, shouldCommit);\n\n    // Refresh rush configuration since we may have modified the package.json versions\n    // when calling this._ensure(...)\n    this._rushConfiguration = RushConfiguration.loadFromConfigurationFile(\n      this._rushConfiguration.rushJsonFile\n    );\n\n    // Update projects based on individual policies\n    const changeManager: ChangeManager = new ChangeManager(\n      this._rushConfiguration,\n      this._getManuallyVersionedProjects()\n    );\n\n    await changeManager.loadAsync(this._rushConfiguration.changesFolder);\n    if (changeManager.hasChanges()) {\n      changeManager.validateChanges(this._versionPolicyConfiguration);\n      changeManager.apply(!!shouldCommit)!.forEach((packageJson) => {\n        this.updatedProjects.set(packageJson.name, packageJson);\n      });\n      await changeManager.updateChangelogAsync(!!shouldCommit);\n    }\n\n    // Refresh rush configuration again, since we've further modified the package.json files\n    // by calling changeManager.apply(...)\n    this._rushConfiguration = RushConfiguration.loadFromConfigurationFile(\n      this._rushConfiguration.rushJsonFile\n    );\n  }\n\n  private _ensure(versionPolicyName?: string, shouldCommit?: boolean, force?: boolean): void {\n    this._updateVersionsByPolicy(versionPolicyName, force);\n\n    let changed: boolean = false;\n    do {\n      changed = false;\n      // Update all dependencies if needed.\n      const dependenciesUpdated: boolean = this._updateDependencies();\n      changed = changed || dependenciesUpdated;\n    } while (changed);\n\n    if (shouldCommit) {\n      this._updatePackageJsonFiles();\n      this.changeFiles.forEach((changeFile) => {\n        changeFile.writeSync();\n      });\n    }\n  }\n\n  private _getManuallyVersionedProjects(): Set<string> | undefined {\n    const lockStepVersionPolicyNames: Set<string> = new Set<string>();\n\n    this._versionPolicyConfiguration.versionPolicies.forEach((versionPolicy) => {\n      if (versionPolicy instanceof LockStepVersionPolicy && versionPolicy.nextBump !== undefined) {\n        lockStepVersionPolicyNames.add(versionPolicy.policyName);\n      }\n    });\n    const lockStepProjectNames: Set<string> = new Set<string>();\n    this._rushConfiguration.projects.forEach((rushProject) => {\n      if (lockStepVersionPolicyNames.has(rushProject.versionPolicyName!)) {\n        lockStepProjectNames.add(rushProject.packageName);\n      }\n    });\n    return lockStepProjectNames;\n  }\n\n  private _updateVersionsByPolicy(versionPolicyName?: string, force?: boolean): boolean {\n    let changed: boolean = false;\n\n    // Update versions based on version policy\n    this._rushConfiguration.projects.forEach((rushProject) => {\n      const projectVersionPolicyName: string | undefined = rushProject.versionPolicyName;\n      if (\n        projectVersionPolicyName &&\n        (!versionPolicyName || projectVersionPolicyName === versionPolicyName)\n      ) {\n        const versionPolicy: VersionPolicy =\n          this._versionPolicyConfiguration.getVersionPolicy(projectVersionPolicyName);\n\n        const oldVersion: string =\n          this.updatedProjects.get(rushProject.packageName)?.version || rushProject.packageJson.version;\n        const updatedProject: IPackageJson | undefined = versionPolicy.ensure(rushProject.packageJson, force);\n        changed = changed || updatedProject?.version !== oldVersion;\n\n        if (updatedProject) {\n          this.updatedProjects.set(updatedProject.name, updatedProject);\n          // No need to create an entry for prerelease version bump.\n          if (!this._isPrerelease(updatedProject.version) && rushProject.isMainProject) {\n            this._addChangeInfo(updatedProject.name, [this._createChangeInfo(updatedProject, rushProject)]);\n          }\n        }\n      }\n    });\n\n    return changed;\n  }\n\n  private _isPrerelease(version: string): boolean {\n    return !!semver.prerelease(version);\n  }\n\n  private _addChangeInfo(packageName: string, changeInfos: IChangeInfo[]): void {\n    if (!changeInfos.length) {\n      return;\n    }\n    let changeFile: ChangeFile | undefined = this.changeFiles.get(packageName);\n    if (!changeFile) {\n      changeFile = new ChangeFile(\n        {\n          changes: [],\n          packageName: packageName,\n          email: this._userEmail\n        },\n        this._rushConfiguration\n      );\n      this.changeFiles.set(packageName, changeFile);\n    }\n    changeInfos.forEach((changeInfo) => {\n      changeFile!.addChange(changeInfo);\n    });\n  }\n\n  private _updateDependencies(): boolean {\n    let updated: boolean = false;\n\n    this._rushConfiguration.projects.forEach((rushProject) => {\n      let clonedProject: IPackageJson | undefined = this.updatedProjects.get(rushProject.packageName);\n      let projectVersionChanged: boolean = true;\n\n      if (!clonedProject) {\n        clonedProject = cloneDeep(rushProject.packageJson);\n        projectVersionChanged = false;\n      }\n\n      const dependenciesUpdated: boolean = this._updateProjectAllDependencies(\n        rushProject,\n        clonedProject!,\n        projectVersionChanged\n      );\n\n      updated = updated || dependenciesUpdated;\n    });\n\n    return updated;\n  }\n\n  private _updateProjectAllDependencies(\n    rushProject: RushConfigurationProject,\n    clonedProject: IPackageJson,\n    projectVersionChanged: boolean\n  ): boolean {\n    if (!clonedProject.dependencies && !clonedProject.devDependencies) {\n      return false;\n    }\n    const changes: IChangeInfo[] = [];\n    let updated: boolean = false;\n    if (\n      this._updateProjectDependencies(\n        clonedProject.dependencies,\n        changes,\n        clonedProject,\n        rushProject,\n        projectVersionChanged\n      )\n    ) {\n      updated = true;\n    }\n    if (\n      this._updateProjectDependencies(\n        clonedProject.devDependencies,\n        changes,\n        clonedProject,\n        rushProject,\n        projectVersionChanged\n      )\n    ) {\n      updated = true;\n    }\n    if (\n      this._updateProjectDependencies(\n        clonedProject.peerDependencies,\n        changes,\n        clonedProject,\n        rushProject,\n        projectVersionChanged\n      )\n    ) {\n      updated = true;\n    }\n\n    if (updated) {\n      this.updatedProjects.set(clonedProject.name, clonedProject);\n      this._addChangeInfo(clonedProject.name, changes);\n    }\n\n    return updated;\n  }\n\n  private _updateProjectDependencies(\n    dependencies: { [key: string]: string } | undefined,\n    changes: IChangeInfo[],\n    clonedProject: IPackageJson,\n    rushProject: RushConfigurationProject,\n    projectVersionChanged: boolean\n  ): boolean {\n    if (!dependencies) {\n      return false;\n    }\n    let updated: boolean = false;\n    this.updatedProjects.forEach((updatedDependentProject, updatedDependentProjectName) => {\n      if (dependencies[updatedDependentProjectName]) {\n        if (rushProject.decoupledLocalDependencies.has(updatedDependentProjectName)) {\n          // Skip if cyclic\n          // eslint-disable-next-line no-console\n          console.log(`Found cyclic ${rushProject.packageName} ${updatedDependentProjectName}`);\n          return;\n        }\n\n        const oldDependencyVersion: string = dependencies[updatedDependentProjectName];\n        const newDependencyVersion: string = PublishUtilities.getNewDependencyVersion(\n          dependencies,\n          updatedDependentProjectName,\n          updatedDependentProject.version\n        );\n\n        if (newDependencyVersion !== oldDependencyVersion) {\n          updated = true;\n          if (this._shouldTrackDependencyChange(rushProject, updatedDependentProjectName)) {\n            this._trackDependencyChange(\n              changes,\n              clonedProject,\n              projectVersionChanged,\n              updatedDependentProject,\n              oldDependencyVersion,\n              newDependencyVersion\n            );\n          }\n          dependencies[updatedDependentProjectName] = newDependencyVersion;\n        }\n      }\n    });\n    return updated;\n  }\n\n  private _shouldTrackDependencyChange(\n    rushProject: RushConfigurationProject,\n    dependencyName: string\n  ): boolean {\n    const dependencyRushProject: RushConfigurationProject | undefined =\n      this._rushConfiguration.projectsByName.get(dependencyName);\n\n    return (\n      !!dependencyRushProject &&\n      rushProject.shouldPublish &&\n      (!rushProject.versionPolicy ||\n        !rushProject.versionPolicy.isLockstepped ||\n        (rushProject.isMainProject &&\n          dependencyRushProject.versionPolicyName !== rushProject.versionPolicyName))\n    );\n  }\n\n  private _trackDependencyChange(\n    changes: IChangeInfo[],\n    clonedProject: IPackageJson,\n    projectVersionChanged: boolean,\n    updatedDependentProject: IPackageJson,\n    oldDependencyVersion: string,\n    newDependencyVersion: string\n  ): void {\n    const oldSpecifier: DependencySpecifier = new DependencySpecifier(\n      updatedDependentProject.name,\n      oldDependencyVersion\n    );\n    if (\n      !semver.satisfies(updatedDependentProject.version, oldSpecifier.versionSpecifier) &&\n      !projectVersionChanged\n    ) {\n      this._addChange(changes, {\n        changeType: ChangeType.patch,\n        packageName: clonedProject.name\n      });\n    }\n\n    // If current version is not a prerelease version and new dependency is also not a prerelease version,\n    // add change entry. Otherwise, too many changes will be created for frequent releases.\n    if (!this._isPrerelease(updatedDependentProject.version) && !this._isPrerelease(clonedProject.version)) {\n      this._addChange(changes, {\n        changeType: ChangeType.dependency,\n        comment:\n          `Dependency ${updatedDependentProject.name} version bump from ${oldDependencyVersion}` +\n          ` to ${newDependencyVersion}.`,\n        packageName: clonedProject.name\n      });\n    }\n  }\n\n  private _addChange(changes: IChangeInfo[], newChange: IChangeInfo): void {\n    const exists: boolean = changes.some((changeInfo) => {\n      return (\n        changeInfo.author === newChange.author &&\n        changeInfo.changeType === newChange.changeType &&\n        changeInfo.comment === newChange.comment &&\n        changeInfo.commit === newChange.commit &&\n        changeInfo.packageName === newChange.packageName &&\n        changeInfo.type === newChange.type\n      );\n    });\n    if (!exists) {\n      changes.push(newChange);\n    }\n  }\n\n  private _updatePackageJsonFiles(): void {\n    this.updatedProjects.forEach((newPackageJson, packageName) => {\n      const rushProject: RushConfigurationProject | undefined =\n        this._rushConfiguration.getProjectByName(packageName);\n      // Update package.json\n      if (rushProject) {\n        const packagePath: string = path.join(rushProject.projectFolder, FileConstants.PackageJson);\n        JsonFile.save(newPackageJson, packagePath, { updateExistingFile: true });\n      }\n    });\n  }\n\n  private _createChangeInfo(\n    newPackageJson: IPackageJson,\n    rushProject: RushConfigurationProject\n  ): IChangeInfo {\n    return {\n      changeType: ChangeType.none,\n      newVersion: newPackageJson.version,\n      packageName: newPackageJson.name,\n      comment: ''\n    };\n  }\n}\n"]}