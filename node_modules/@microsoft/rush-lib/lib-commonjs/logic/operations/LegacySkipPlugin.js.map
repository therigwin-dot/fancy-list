{"version":3,"file":"LegacySkipPlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/LegacySkipPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport path from 'node:path';\n\nimport { FileSystem, JsonFile, type JsonObject } from '@rushstack/node-core-library';\nimport { PrintUtilities, Colorize, type ITerminal } from '@rushstack/terminal';\n\nimport type { Operation } from './Operation';\nimport { OperationStatus } from './OperationStatus';\nimport type {\n  IExecuteOperationsContext,\n  IPhasedCommandPlugin,\n  PhasedCommandHooks\n} from '../../pluginFramework/PhasedCommandHooks';\nimport type { IOperationRunnerContext } from './IOperationRunner';\nimport type { IOperationExecutionResult } from './IOperationExecutionResult';\n\nconst PLUGIN_NAME: 'LegacySkipPlugin' = 'LegacySkipPlugin';\n\nfunction _areShallowEqual(object1: JsonObject, object2: JsonObject): boolean {\n  for (const n in object1) {\n    if (!(n in object2) || object1[n] !== object2[n]) {\n      return false;\n    }\n  }\n  for (const n in object2) {\n    if (!(n in object1)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport interface IProjectDeps {\n  files: { [filePath: string]: string };\n  arguments: string;\n}\n\ninterface ILegacySkipRecord {\n  allowSkip: boolean;\n  packageDeps: IProjectDeps | undefined;\n  packageDepsPath: string;\n}\n\nexport interface ILegacySkipPluginOptions {\n  terminal: ITerminal;\n  changedProjectsOnly: boolean;\n  isIncrementalBuildAllowed: boolean;\n  allowWarningsInSuccessfulBuild?: boolean;\n}\n\n/**\n * Core phased command plugin that implements the legacy skip detection logic, used when build cache is disabled.\n */\nexport class LegacySkipPlugin implements IPhasedCommandPlugin {\n  private readonly _options: ILegacySkipPluginOptions;\n\n  public constructor(options: ILegacySkipPluginOptions) {\n    this._options = options;\n  }\n\n  public apply(hooks: PhasedCommandHooks): void {\n    const stateMap: WeakMap<Operation, ILegacySkipRecord> = new WeakMap();\n\n    const { terminal, changedProjectsOnly, isIncrementalBuildAllowed, allowWarningsInSuccessfulBuild } =\n      this._options;\n\n    hooks.beforeExecuteOperations.tap(\n      PLUGIN_NAME,\n      (\n        operations: ReadonlyMap<Operation, IOperationExecutionResult>,\n        context: IExecuteOperationsContext\n      ): void => {\n        let logGitWarning: boolean = false;\n        const { inputsSnapshot } = context;\n\n        for (const record of operations.values()) {\n          const { operation } = record;\n          const { associatedProject, runner, logFilenameIdentifier } = operation;\n          if (!associatedProject || !runner) {\n            continue;\n          }\n\n          if (!runner.cacheable) {\n            stateMap.set(operation, {\n              allowSkip: true,\n              packageDeps: undefined,\n              packageDepsPath: ''\n            });\n            continue;\n          }\n\n          const packageDepsFilename: string = `package-deps_${logFilenameIdentifier}.json`;\n\n          const packageDepsPath: string = path.join(\n            associatedProject.projectRushTempFolder,\n            packageDepsFilename\n          );\n\n          let packageDeps: IProjectDeps | undefined;\n\n          try {\n            const fileHashes: ReadonlyMap<string, string> | undefined =\n              inputsSnapshot?.getTrackedFileHashesForOperation(\n                associatedProject,\n                operation.associatedPhase?.name\n              );\n\n            if (!fileHashes) {\n              logGitWarning = true;\n              continue;\n            }\n\n            const files: Record<string, string> = {};\n            for (const [filePath, fileHash] of fileHashes) {\n              files[filePath] = fileHash;\n            }\n\n            packageDeps = {\n              files,\n              arguments: runner.getConfigHash()\n            };\n          } catch (error) {\n            // To test this code path:\n            // Delete a project's \".rush/temp/shrinkwrap-deps.json\" then run \"rush build --verbose\"\n            terminal.writeLine(\n              `Unable to calculate incremental state for ${record.operation.name}: ` +\n                (error as Error).toString()\n            );\n            terminal.writeLine(\n              Colorize.cyan('Rush will proceed without incremental execution and change detection.')\n            );\n          }\n\n          stateMap.set(operation, {\n            packageDepsPath,\n            packageDeps,\n            allowSkip: isIncrementalBuildAllowed\n          });\n        }\n\n        if (logGitWarning) {\n          // To test this code path:\n          // Remove the `.git` folder then run \"rush build --verbose\"\n          terminal.writeLine(\n            Colorize.cyan(\n              PrintUtilities.wrapWords(\n                'This workspace does not appear to be tracked by Git. ' +\n                  'Rush will proceed without incremental execution, caching, and change detection.'\n              )\n            )\n          );\n        }\n      }\n    );\n\n    hooks.beforeExecuteOperation.tapPromise(\n      PLUGIN_NAME,\n      async (\n        record: IOperationRunnerContext & IOperationExecutionResult\n      ): Promise<OperationStatus | undefined> => {\n        const { operation } = record;\n        const skipRecord: ILegacySkipRecord | undefined = stateMap.get(operation);\n        if (!skipRecord) {\n          // This operation doesn't support skip detection.\n          return;\n        }\n\n        if (!operation.runner!.cacheable) {\n          // This operation doesn't support skip detection.\n          return;\n        }\n\n        const { associatedProject } = operation;\n\n        const { packageDepsPath, packageDeps, allowSkip } = skipRecord;\n\n        let lastProjectDeps: IProjectDeps | undefined = undefined;\n\n        try {\n          const lastDepsContents: string = await FileSystem.readFileAsync(packageDepsPath);\n          lastProjectDeps = JSON.parse(lastDepsContents);\n        } catch (e) {\n          if (!FileSystem.isNotExistError(e)) {\n            // Warn and ignore - treat failing to load the file as the operation being not built.\n            // TODO: Update this to be the terminal specific to the operation.\n            terminal.writeWarningLine(\n              `Warning: error parsing ${packageDepsPath}: ${e}. Ignoring and treating this operation as not run.`\n            );\n          }\n        }\n\n        if (allowSkip) {\n          const isPackageUnchanged: boolean = !!(\n            lastProjectDeps &&\n            packageDeps &&\n            packageDeps.arguments === lastProjectDeps.arguments &&\n            _areShallowEqual(packageDeps.files, lastProjectDeps.files)\n          );\n\n          if (isPackageUnchanged) {\n            return OperationStatus.Skipped;\n          }\n        }\n\n        // TODO: Remove legacyDepsPath with the next major release of Rush\n        const legacyDepsPath: string = path.join(associatedProject!.projectFolder, 'package-deps.json');\n\n        await Promise.all([\n          // Delete the legacy package-deps.json\n          FileSystem.deleteFileAsync(legacyDepsPath),\n\n          // If the deps file exists, remove it before starting execution.\n          FileSystem.deleteFileAsync(packageDepsPath)\n        ]);\n      }\n    );\n\n    hooks.afterExecuteOperation.tapPromise(\n      PLUGIN_NAME,\n      async (record: IOperationRunnerContext & IOperationExecutionResult): Promise<void> => {\n        const { status, operation } = record;\n\n        const skipRecord: ILegacySkipRecord | undefined = stateMap.get(operation);\n        if (!skipRecord) {\n          return;\n        }\n\n        const blockSkip: boolean =\n          !skipRecord.allowSkip ||\n          (!changedProjectsOnly &&\n            (status === OperationStatus.Success || status === OperationStatus.SuccessWithWarning));\n        if (blockSkip) {\n          for (const consumer of operation.consumers) {\n            const consumerSkipRecord: ILegacySkipRecord | undefined = stateMap.get(consumer);\n            if (consumerSkipRecord) {\n              consumerSkipRecord.allowSkip = false;\n            }\n          }\n        }\n\n        if (!record.operation.runner!.cacheable) {\n          // This operation doesn't support skip detection.\n          return;\n        }\n\n        const { packageDeps, packageDepsPath } = skipRecord;\n\n        if (\n          status === OperationStatus.NoOp ||\n          (packageDeps &&\n            (status === OperationStatus.Success ||\n              (status === OperationStatus.SuccessWithWarning &&\n                record.operation.runner!.warningsAreAllowed &&\n                allowWarningsInSuccessfulBuild)))\n        ) {\n          // Write deps on success.\n          await JsonFile.saveAsync(packageDeps, packageDepsPath, {\n            ensureFolderExists: true\n          });\n        }\n      }\n    );\n  }\n}\n"]}