{"version":3,"file":"ShardedPhaseOperationPlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/ShardedPhaseOperationPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { IPhase } from '../../api/CommandLineConfiguration';\nimport type { IOperationSettings, RushProjectConfiguration } from '../../api/RushProjectConfiguration';\nimport type {\n  ICreateOperationsContext,\n  IPhasedCommandPlugin,\n  PhasedCommandHooks\n} from '../../pluginFramework/PhasedCommandHooks';\nimport { RushConstants } from '../RushConstants';\nimport { NullOperationRunner } from './NullOperationRunner';\nimport { Operation } from './Operation';\nimport { OperationStatus } from './OperationStatus';\nimport {\n  getCustomParameterValuesByPhase,\n  getDisplayName,\n  initializeShellOperationRunner\n} from './ShellOperationRunnerPlugin';\n\nexport const PLUGIN_NAME: 'ShardedPhasedOperationPlugin' = 'ShardedPhasedOperationPlugin';\n\n// eslint-disable-next-line @typescript-eslint/typedef\nconst TemplateStrings = {\n  SHARD_INDEX: '{shardIndex}',\n  SHARD_COUNT: '{shardCount}',\n  PHASE_NAME: '{phaseName}'\n} as const;\n\n// eslint-disable-next-line @typescript-eslint/typedef\nconst TemplateStringRegexes = {\n  SHARD_INDEX: new RegExp(TemplateStrings.SHARD_INDEX, 'g'),\n  SHARD_COUNT: new RegExp(TemplateStrings.SHARD_COUNT, 'g'),\n  PHASE_NAME: new RegExp(TemplateStrings.PHASE_NAME, 'g')\n} as const;\n\n/**\n * Phased command that shards a phase into multiple operations.\n */\nexport class ShardedPhasedOperationPlugin implements IPhasedCommandPlugin {\n  public apply(hooks: PhasedCommandHooks): void {\n    hooks.createOperations.tap(PLUGIN_NAME, spliceShards);\n  }\n}\n\nfunction spliceShards(existingOperations: Set<Operation>, context: ICreateOperationsContext): Set<Operation> {\n  const { rushConfiguration, projectConfigurations } = context;\n\n  const getCustomParameterValuesForPhase: (phase: IPhase) => ReadonlyArray<string> =\n    getCustomParameterValuesByPhase();\n\n  for (const operation of existingOperations) {\n    const {\n      associatedPhase: phase,\n      associatedProject: project,\n      settings: operationSettings,\n      logFilenameIdentifier: baseLogFilenameIdentifier\n    } = operation;\n    if (phase && project && operationSettings?.sharding && !operation.runner) {\n      const { count: shards } = operationSettings.sharding;\n\n      /**\n       * A single operation to reduce the number of edges in the graph when creating shards.\n       * ```\n       * depA -\\          /- shard 1 -\\\n       * depB -- > noop < -- shard 2 -- > collator (reused operation)\n       * depC -/          \\- shard 3 -/\n       * ```\n       */\n      const preShardOperation: Operation = new Operation({\n        phase,\n        project,\n        settings: operationSettings,\n        runner: new NullOperationRunner({\n          name: `${getDisplayName(phase, project)} - pre-shard`,\n          result: OperationStatus.NoOp,\n          silent: true\n        }),\n        logFilenameIdentifier: `${baseLogFilenameIdentifier}_pre-shard`\n      });\n\n      existingOperations.add(preShardOperation);\n\n      for (const dependency of operation.dependencies) {\n        preShardOperation.addDependency(dependency);\n        operation.deleteDependency(dependency);\n      }\n\n      const outputFolderArgumentFormat: string =\n        operationSettings.sharding.outputFolderArgumentFormat ??\n        `--shard-output-directory=${RushConstants.projectRushFolderName}/operations/${TemplateStrings.PHASE_NAME}/shards/${TemplateStrings.SHARD_INDEX}`;\n\n      if (!outputFolderArgumentFormat.includes('=')) {\n        throw new Error(\n          'sharding.outputFolderArgumentFormat must contain an \"=\" sign to differentiate between the key and the value'\n        );\n      }\n\n      if (!outputFolderArgumentFormat.endsWith(TemplateStrings.SHARD_INDEX)) {\n        throw new Error(\n          `sharding.outputFolderArgumentFormat must end with ${TemplateStrings.SHARD_INDEX}, \"${outputFolderArgumentFormat}\"`\n        );\n      }\n\n      // Replace the phase name only to begin with.\n      const outputDirectoryArgument: string = outputFolderArgumentFormat.replace(\n        TemplateStringRegexes.PHASE_NAME,\n        baseLogFilenameIdentifier\n      );\n\n      const outputFolderWithTemplate: string = outputDirectoryArgument.substring(\n        outputDirectoryArgument.indexOf('=') + 1\n      );\n\n      const parentFolder: string = outputFolderWithTemplate.substring(\n        0,\n        outputFolderWithTemplate.indexOf(TemplateStrings.SHARD_INDEX)\n      );\n\n      const collatorDisplayName: string = `${getDisplayName(phase, project)} - collate`;\n\n      const customParameters: readonly string[] = getCustomParameterValuesForPhase(phase);\n\n      const collatorParameters: string[] = [\n        ...customParameters,\n        `--shard-parent-folder=\"${parentFolder}\"`,\n        `--shard-count=\"${shards}\"`\n      ];\n\n      const { scripts } = project.packageJson;\n      const commandToRun: string | undefined = phase.shellCommand ?? scripts?.[phase.name];\n\n      operation.logFilenameIdentifier = `${baseLogFilenameIdentifier}_collate`;\n      operation.runner = initializeShellOperationRunner({\n        phase,\n        project,\n        displayName: collatorDisplayName,\n        rushConfiguration,\n        commandToRun,\n        customParameterValues: collatorParameters\n      });\n\n      const shardOperationName: string = `${phase.name}:shard`;\n      const baseCommand: string | undefined = scripts?.[shardOperationName];\n      if (baseCommand === undefined) {\n        throw new Error(\n          `The project '${project.packageName}' does not define a '${phase.name}:shard' command in the 'scripts' section of its package.json`\n        );\n      }\n\n      const shardArgumentFormat: string =\n        operationSettings.sharding.shardArgumentFormat ??\n        `--shard=${TemplateStrings.SHARD_INDEX}/${TemplateStrings.SHARD_COUNT}`;\n\n      if (\n        operationSettings.sharding.shardArgumentFormat &&\n        !shardArgumentFormat.includes(TemplateStrings.SHARD_INDEX) &&\n        !shardArgumentFormat.includes(TemplateStrings.SHARD_COUNT)\n      ) {\n        throw new Error(\n          `'shardArgumentFormat' must contain both ${TemplateStrings.SHARD_INDEX} and ${TemplateStrings.SHARD_COUNT} to be used for sharding.`\n        );\n      }\n\n      const projectConfiguration: RushProjectConfiguration | undefined = projectConfigurations.get(project);\n      for (let shard: number = 1; shard <= shards; shard++) {\n        const outputDirectory: string = outputFolderWithTemplate.replace(\n          TemplateStringRegexes.SHARD_INDEX,\n          shard.toString()\n        );\n\n        const shardOperationSettings: IOperationSettings =\n          projectConfiguration?.operationSettingsByOperationName.get(shardOperationName) ??\n          (operationSettings.sharding.shardOperationSettings as IOperationSettings);\n\n        const shardOperation: Operation = new Operation({\n          project,\n          phase,\n          settings: {\n            ...shardOperationSettings,\n            operationName: shardOperationName,\n            outputFolderNames: [outputDirectory]\n          },\n          logFilenameIdentifier: `${baseLogFilenameIdentifier}_shard_${shard}`\n        });\n\n        const shardArgument: string = shardArgumentFormat\n          .replace(TemplateStringRegexes.SHARD_INDEX, shard.toString())\n          .replace(TemplateStringRegexes.SHARD_COUNT, shards.toString());\n\n        const outputDirectoryArgumentWithShard: string = outputDirectoryArgument.replace(\n          TemplateStringRegexes.SHARD_INDEX,\n          shard.toString()\n        );\n\n        const shardedParameters: string[] = [\n          ...customParameters,\n          shardArgument,\n          outputDirectoryArgumentWithShard\n        ];\n\n        const shardDisplayName: string = `${getDisplayName(phase, project)} - shard ${shard}/${shards}`;\n\n        shardOperation.runner = initializeShellOperationRunner({\n          phase,\n          project,\n          commandToRun: baseCommand,\n          customParameterValues: shardedParameters,\n          displayName: shardDisplayName,\n          rushConfiguration\n        });\n\n        shardOperation.addDependency(preShardOperation);\n        operation.addDependency(shardOperation);\n        existingOperations.add(shardOperation);\n      }\n    }\n  }\n\n  return existingOperations;\n}\n"]}