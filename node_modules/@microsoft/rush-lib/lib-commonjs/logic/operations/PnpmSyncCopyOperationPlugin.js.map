{"version":3,"file":"PnpmSyncCopyOperationPlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/PnpmSyncCopyOperationPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,oEAAiE;AAEjE,iDAAmF;AAEnF,uDAAoD;AAIpD,yEAAsE;AAEtE,MAAM,WAAW,GAAkC,6BAA6B,CAAC;AAEjF,MAAa,2BAA2B;IAGtC,YAAmB,QAAmB;QACpC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IACM,KAAK,CAAC,KAAyB;QACpC,KAAK,CAAC,qBAAqB,CAAC,UAAU,CACpC,WAAW,EACX,KAAK,EAAE,aAAsC,EAAiB,EAAE;YAC9D,MAAM,MAAM,GAA6B,aAAyC,CAAC;YACnF,MAAM,EACJ,MAAM,EACN,SAAS,EAAE,EAAE,iBAAiB,EAAE,OAAO,EAAE,EAC1C,GAAG,MAAM,CAAC;YAEX,8CAA8C;YAC9C,IACE,MAAM,KAAK,iCAAe,CAAC,OAAO;gBAClC,MAAM,KAAK,iCAAe,CAAC,IAAI;gBAC/B,MAAM,KAAK,iCAAe,CAAC,OAAO,EAClC,CAAC;gBACD,OAAO;YACT,CAAC;YAED,IAAI,OAAO,EAAE,CAAC;gBACZ,MAAM,gBAAgB,GAAW,GAAG,OAAO,CAAC,aAAa,+BAA+B,CAAC;gBACzF,IAAI,MAAM,8BAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC;oBAC9C,MAAM,EAAE,gBAAgB,EAAE,GAAG;oBAC3B,0CAA0C;oBAC1C,8BAA8B,GAC/B,CAAC;oBACF,MAAM,IAAA,iCAAiB,EAAC;wBACtB,gBAAgB;wBAChB,iBAAiB,EAAE,8BAAU,CAAC,iBAAiB;wBAC/C,2BAA2B,EAAE,yBAAK,CAAC,YAAY;wBAC/C,uBAAuB,EAAE,gBAAgB,CAAC,4BAA4B;wBACtE,kBAAkB,EAAE,CAAC,iBAA6C,EAAE,EAAE,CACpE,qCAAiB,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC;qBACzE,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AA7CD,kEA6CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { Async, FileSystem } from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\nimport { type ILogMessageCallbackOptions, pnpmSyncCopyAsync } from 'pnpm-sync-lib';\n\nimport { OperationStatus } from './OperationStatus';\nimport type { IOperationRunnerContext } from './IOperationRunner';\nimport type { IPhasedCommandPlugin, PhasedCommandHooks } from '../../pluginFramework/PhasedCommandHooks';\nimport type { OperationExecutionRecord } from './OperationExecutionRecord';\nimport { PnpmSyncUtilities } from '../../utilities/PnpmSyncUtilities';\n\nconst PLUGIN_NAME: 'PnpmSyncCopyOperationPlugin' = 'PnpmSyncCopyOperationPlugin';\n\nexport class PnpmSyncCopyOperationPlugin implements IPhasedCommandPlugin {\n  private readonly _terminal: ITerminal;\n\n  public constructor(terminal: ITerminal) {\n    this._terminal = terminal;\n  }\n  public apply(hooks: PhasedCommandHooks): void {\n    hooks.afterExecuteOperation.tapPromise(\n      PLUGIN_NAME,\n      async (runnerContext: IOperationRunnerContext): Promise<void> => {\n        const record: OperationExecutionRecord = runnerContext as OperationExecutionRecord;\n        const {\n          status,\n          operation: { associatedProject: project }\n        } = record;\n\n        //skip if the phase is skipped or no operation\n        if (\n          status === OperationStatus.Skipped ||\n          status === OperationStatus.NoOp ||\n          status === OperationStatus.Failure\n        ) {\n          return;\n        }\n\n        if (project) {\n          const pnpmSyncJsonPath: string = `${project.projectFolder}/node_modules/.pnpm-sync.json`;\n          if (await FileSystem.exists(pnpmSyncJsonPath)) {\n            const { PackageExtractor } = await import(\n              /* webpackChunkName: 'PackageExtractor' */\n              '@rushstack/package-extractor'\n            );\n            await pnpmSyncCopyAsync({\n              pnpmSyncJsonPath,\n              ensureFolderAsync: FileSystem.ensureFolderAsync,\n              forEachAsyncWithConcurrency: Async.forEachAsync,\n              getPackageIncludedFiles: PackageExtractor.getPackageIncludedFilesAsync,\n              logMessageCallback: (logMessageOptions: ILogMessageCallbackOptions) =>\n                PnpmSyncUtilities.processLogMessage(logMessageOptions, this._terminal)\n            });\n          }\n        }\n      }\n    );\n  }\n}\n"]}