{"version":3,"file":"OperationStateFile.js","sourceRoot":"","sources":["../../../src/logic/operations/OperationStateFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAmF;AAmBnF;;;;GAIG;AACH,MAAa,kBAAkB;IAmB7B,YAAmB,OAAmC;QACpD,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC;QAClD,IAAI,CAAC,gBAAgB,GAAG,GAAG,cAAc,IAAI,kBAAkB,CAAC,QAAQ,EAAE,CAAC;QAC3E,IAAI,CAAC,QAAQ,GAAG,GAAG,aAAa,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC9D,CAAC;IAED,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,IAAyB;QAC/C,MAAM,4BAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,CAAC;QACzG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,eAAe;QAC1B,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,GAAG,MAAM,4BAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,8BAAU,CAAC,eAAe,CAAC,KAAc,CAAC,EAAE,CAAC;gBAC/C,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACN,yBAAyB;gBACzB,MAAM,IAAI,iCAAa,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;;AA9CH,gDA+CC;AA9Be,2BAAQ,GAAW,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, InternalError, JsonFile } from '@rushstack/node-core-library';\n\n/**\n * @internal\n */\nexport interface IOperationStateFileOptions {\n  projectFolder: string;\n  metadataFolder: string;\n}\n\n/**\n * @internal\n */\nexport interface IOperationStateJson {\n  nonCachedDurationMs: number;\n  cobuildContextId: string | undefined;\n  cobuildRunnerId: string | undefined;\n}\n\n/**\n * A helper class for managing the state file of a operation.\n *\n * @internal\n */\nexport class OperationStateFile {\n  private _state: IOperationStateJson | undefined;\n\n  /**\n   * The path of the state json file.\n   *\n   * Example: `/code/repo/my-project/.rush/temp/operation/_phase_build/state.json`\n   */\n  public readonly filepath: string;\n\n  /**\n   * The relative path of the state json file to project folder\n   *\n   * Example: `.rush/temp/operation/_phase_build/state.json`\n   */\n  public readonly relativeFilepath: string;\n\n  public static filename: string = 'state.json';\n\n  public constructor(options: IOperationStateFileOptions) {\n    const { projectFolder, metadataFolder } = options;\n    this.relativeFilepath = `${metadataFolder}/${OperationStateFile.filename}`;\n    this.filepath = `${projectFolder}/${this.relativeFilepath}`;\n  }\n\n  public get state(): IOperationStateJson | undefined {\n    return this._state;\n  }\n\n  public async writeAsync(json: IOperationStateJson): Promise<void> {\n    await JsonFile.saveAsync(json, this.filepath, { ensureFolderExists: true, ignoreUndefinedValues: true });\n    this._state = json;\n  }\n\n  public async tryRestoreAsync(): Promise<IOperationStateJson | undefined> {\n    try {\n      this._state = await JsonFile.loadAsync(this.filepath);\n    } catch (error) {\n      if (FileSystem.isNotExistError(error as Error)) {\n        this._state = undefined;\n      } else {\n        // This should not happen\n        throw new InternalError(error);\n      }\n    }\n    return this._state;\n  }\n}\n"]}