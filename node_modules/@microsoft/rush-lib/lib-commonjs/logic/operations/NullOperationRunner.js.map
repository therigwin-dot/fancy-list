{"version":3,"file":"NullOperationRunner.js","sourceRoot":"","sources":["../../../src/logic/operations/NullOperationRunner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAuB3D;;;GAGG;AACH,MAAa,mBAAmB;IAa9B,YAAmB,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAA8B;QAXvE,wDAAwD;QACxC,iBAAY,GAAY,KAAK,CAAC;QAE9C,4DAA4D;QACrD,cAAS,GAAY,KAAK,CAAC;QAClC,sDAAsD;QACtC,uBAAkB,GAAY,KAAK,CAAC;QACpC,WAAM,GAAY,IAAI,CAAC;QAKrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAgC;QACxD,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,aAAa;QAClB,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AA1BD,kDA0BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { OperationStatus } from './OperationStatus';\nimport type { IOperationRunner, IOperationRunnerContext } from './IOperationRunner';\n\n/**\n *\n */\nexport interface INullOperationRunnerParams {\n  /**\n   * The name to report in logs.\n   */\n  name: string;\n  /**\n   * The result to report from the runner.\n   */\n  result: OperationStatus;\n  /**\n   * If true, the operation will not log anything or be tracked in statistics.\n   */\n  silent: boolean;\n}\n\n/**\n * Implementation of `IOperationRunner` for operations that require no work, such as empty scripts,\n * skipped operations, or blocked operations.\n */\nexport class NullOperationRunner implements IOperationRunner {\n  public readonly name: string;\n  // This operation does nothing, so timing is meaningless\n  public readonly reportTiming: boolean = false;\n  public readonly silent: boolean;\n  // The operation is a no-op, so it is faster to not cache it\n  public cacheable: boolean = false;\n  // Nothing will get logged, no point allowing warnings\n  public readonly warningsAreAllowed: boolean = false;\n  public readonly isNoOp: boolean = true;\n\n  public readonly result: OperationStatus;\n\n  public constructor({ name, result, silent }: INullOperationRunnerParams) {\n    this.name = name;\n    this.result = result;\n    this.silent = silent;\n  }\n\n  public async executeAsync(context: IOperationRunnerContext): Promise<OperationStatus> {\n    return this.result;\n  }\n\n  public getConfigHash(): string {\n    return '';\n  }\n}\n"]}