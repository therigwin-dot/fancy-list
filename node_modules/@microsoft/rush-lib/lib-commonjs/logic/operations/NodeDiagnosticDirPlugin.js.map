{"version":3,"file":"NodeDiagnosticDirPlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/NodeDiagnosticDirPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,gDAAwB;AAExB,oEAA0D;AAO1D,MAAM,WAAW,GAA8B,yBAAyB,CAAC;AAMzE;;GAEG;AACH,MAAa,uBAAuB;IAGlC,YAAmB,OAAwC;QACzD,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,aAAa,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,KAAyB;QACpC,MAAM,gBAAgB,GAAG,CAAC,SAAoB,EAAsB,EAAE;YACpE,MAAM,EAAE,iBAAiB,EAAE,GAAG,SAAS,CAAC;YAExC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACvB,OAAO;YACT,CAAC;YAED,MAAM,aAAa,GAAW,cAAI,CAAC,OAAO,CACxC,IAAI,CAAC,eAAe,EACpB,iBAAiB,CAAC,WAAW,EAC7B,SAAS,CAAC,qBAAqB,CAChC,CAAC;YAEF,OAAO,aAAa,CAAC;QACvB,CAAC,CAAC;QAEF,KAAK,CAAC,6BAA6B,CAAC,GAAG,CACrC,WAAW,EACX,CAAC,GAAiB,EAAE,MAAiC,EAAE,EAAE;YACvD,MAAM,aAAa,GAAuB,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC7E,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnB,OAAO,GAAG,CAAC;YACb,CAAC;YAED,wEAAwE;YACxE,8BAAU,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAEvC,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC;YAE7B,MAAM,gBAAgB,GAAW,qBAAqB,aAAa,GAAG,CAAC;YAEvE,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,IAAI,gBAAgB,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;YAE3F,OAAO,GAAG,CAAC;QACb,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AA7CD,0DA6CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport path from 'path';\n\nimport { FileSystem } from '@rushstack/node-core-library';\n\nimport type { IPhasedCommandPlugin, PhasedCommandHooks } from '../../pluginFramework/PhasedCommandHooks';\nimport type { IEnvironment } from '../../utilities/Utilities';\nimport type { Operation } from './Operation';\nimport type { IOperationExecutionResult } from './IOperationExecutionResult';\n\nconst PLUGIN_NAME: 'NodeDiagnosticDirPlugin' = 'NodeDiagnosticDirPlugin';\n\nexport interface INodeDiagnosticDirPluginOptions {\n  diagnosticDir: string;\n}\n\n/**\n * Phased command plugin that configures the NodeJS --diagnostic-dir option to contain the project and phase name.\n */\nexport class NodeDiagnosticDirPlugin implements IPhasedCommandPlugin {\n  private readonly _diagnosticsDir: string;\n\n  public constructor(options: INodeDiagnosticDirPluginOptions) {\n    this._diagnosticsDir = options.diagnosticDir;\n  }\n\n  public apply(hooks: PhasedCommandHooks): void {\n    const getDiagnosticDir = (operation: Operation): string | undefined => {\n      const { associatedProject } = operation;\n\n      if (!associatedProject) {\n        return;\n      }\n\n      const diagnosticDir: string = path.resolve(\n        this._diagnosticsDir,\n        associatedProject.packageName,\n        operation.logFilenameIdentifier\n      );\n\n      return diagnosticDir;\n    };\n\n    hooks.createEnvironmentForOperation.tap(\n      PLUGIN_NAME,\n      (env: IEnvironment, record: IOperationExecutionResult) => {\n        const diagnosticDir: string | undefined = getDiagnosticDir(record.operation);\n        if (!diagnosticDir) {\n          return env;\n        }\n\n        // Not all versions of NodeJS create the directory, so ensure it exists:\n        FileSystem.ensureFolder(diagnosticDir);\n\n        const { NODE_OPTIONS } = env;\n\n        const diagnosticDirEnv: string = `--diagnostic-dir=\"${diagnosticDir}\"`;\n\n        env.NODE_OPTIONS = NODE_OPTIONS ? `${NODE_OPTIONS} ${diagnosticDirEnv}` : diagnosticDirEnv;\n\n        return env;\n      }\n    );\n  }\n}\n"]}