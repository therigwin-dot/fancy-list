import type { IPhase } from '../../api/CommandLineConfiguration';
import type { RushConfigurationProject } from '../../api/RushConfigurationProject';
import type { IPhasedCommandPlugin, PhasedCommandHooks } from '../../pluginFramework/PhasedCommandHooks';
import type { RushConfiguration } from '../../api/RushConfiguration';
import type { IOperationRunner } from './IOperationRunner';
export declare const PLUGIN_NAME: 'ShellOperationRunnerPlugin';
/**
 * Core phased command plugin that provides the functionality for executing an operation via shell command.
 */
export declare class ShellOperationRunnerPlugin implements IPhasedCommandPlugin {
    apply(hooks: PhasedCommandHooks): void;
}
export declare function initializeShellOperationRunner(options: {
    phase: IPhase;
    project: RushConfigurationProject;
    displayName: string;
    rushConfiguration: RushConfiguration;
    commandToRun: string | undefined;
    commandForHash?: string;
    customParameterValues: ReadonlyArray<string>;
}): IOperationRunner;
/**
 * Memoizer for custom parameter values by phase
 * @returns A function that returns the custom parameter values for a given phase
 */
export declare function getCustomParameterValuesByPhase(): (phase: IPhase) => ReadonlyArray<string>;
export declare function formatCommand(rawCommand: string, customParameterValues: ReadonlyArray<string>): string;
export declare function getDisplayName(phase: IPhase, project: RushConfigurationProject): string;
//# sourceMappingURL=ShellOperationRunnerPlugin.d.ts.map