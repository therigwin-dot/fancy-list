{"version":3,"file":"WeightedOperationPlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/WeightedOperationPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAW3D,oEAAqD;AAErD,MAAM,WAAW,GAA8B,yBAAyB,CAAC;AAEzE;;;;GAIG;AACH,MAAa,uBAAuB;IAC3B,KAAK,CAAC,KAAyB;QACpC,KAAK,CAAC,uBAAuB,CAAC,GAAG,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;IACnE,CAAC;CACF;AAJD,0DAIC;AAED,SAAS,gBAAgB,CACvB,UAAqD,EACrD,OAAiC;;IAEjC,MAAM,EAAE,qBAAqB,EAAE,GAAG,OAAO,CAAC;IAE1C,KAAK,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,UAAU,EAAE,CAAC;QAC7C,MAAM,EAAE,MAAM,EAAE,GAAG,MAAkC,CAAC;QACtD,MAAM,EAAE,iBAAiB,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,GAAG,SAAS,CAAC;QACzE,IAAI,MAAO,CAAC,MAAM,EAAE,CAAC;YACnB,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QACvB,CAAC;aAAM,IAAI,OAAO,IAAI,KAAK,EAAE,CAAC;YAC5B,MAAM,oBAAoB,GAAyC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACtG,MAAM,iBAAiB,GACrB,MAAA,SAAS,CAAC,QAAQ,mCAAI,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,CAAE,gCAAgC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/F,IAAI,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,MAAM,EAAE,CAAC;gBAC9B,SAAS,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC;YAC9C,CAAC;QACH,CAAC;QACD,yBAAK,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { Operation } from './Operation';\nimport type {\n  ICreateOperationsContext,\n  IPhasedCommandPlugin,\n  PhasedCommandHooks\n} from '../../pluginFramework/PhasedCommandHooks';\nimport type { IOperationSettings, RushProjectConfiguration } from '../../api/RushProjectConfiguration';\nimport type { IOperationExecutionResult } from './IOperationExecutionResult';\nimport type { OperationExecutionRecord } from './OperationExecutionRecord';\nimport { Async } from '@rushstack/node-core-library';\n\nconst PLUGIN_NAME: 'WeightedOperationPlugin' = 'WeightedOperationPlugin';\n\n/**\n * Add weights to operations based on the operation settings in rush-project.json.\n *\n * This also sets the weight of no-op operations to 0.\n */\nexport class WeightedOperationPlugin implements IPhasedCommandPlugin {\n  public apply(hooks: PhasedCommandHooks): void {\n    hooks.beforeExecuteOperations.tap(PLUGIN_NAME, weightOperations);\n  }\n}\n\nfunction weightOperations(\n  operations: Map<Operation, IOperationExecutionResult>,\n  context: ICreateOperationsContext\n): Map<Operation, IOperationExecutionResult> {\n  const { projectConfigurations } = context;\n\n  for (const [operation, record] of operations) {\n    const { runner } = record as OperationExecutionRecord;\n    const { associatedProject: project, associatedPhase: phase } = operation;\n    if (runner!.isNoOp) {\n      operation.weight = 0;\n    } else if (project && phase) {\n      const projectConfiguration: RushProjectConfiguration | undefined = projectConfigurations.get(project);\n      const operationSettings: IOperationSettings | undefined =\n        operation.settings ?? projectConfiguration?.operationSettingsByOperationName.get(phase.name);\n      if (operationSettings?.weight) {\n        operation.weight = operationSettings.weight;\n      }\n    }\n    Async.validateWeightedIterable(operation);\n  }\n  return operations;\n}\n"]}