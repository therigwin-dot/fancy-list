"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PnpmSyncCopyOperationPlugin = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const pnpm_sync_lib_1 = require("pnpm-sync-lib");
const OperationStatus_1 = require("./OperationStatus");
const PnpmSyncUtilities_1 = require("../../utilities/PnpmSyncUtilities");
const PLUGIN_NAME = 'PnpmSyncCopyOperationPlugin';
class PnpmSyncCopyOperationPlugin {
    constructor(terminal) {
        this._terminal = terminal;
    }
    apply(hooks) {
        hooks.afterExecuteOperation.tapPromise(PLUGIN_NAME, async (runnerContext) => {
            const record = runnerContext;
            const { status, operation: { associatedProject: project } } = record;
            //skip if the phase is skipped or no operation
            if (status === OperationStatus_1.OperationStatus.Skipped ||
                status === OperationStatus_1.OperationStatus.NoOp ||
                status === OperationStatus_1.OperationStatus.Failure) {
                return;
            }
            if (project) {
                const pnpmSyncJsonPath = `${project.projectFolder}/node_modules/.pnpm-sync.json`;
                if (await node_core_library_1.FileSystem.exists(pnpmSyncJsonPath)) {
                    const { PackageExtractor } = await Promise.resolve().then(() => __importStar(require(
                    /* webpackChunkName: 'PackageExtractor' */
                    '@rushstack/package-extractor')));
                    await (0, pnpm_sync_lib_1.pnpmSyncCopyAsync)({
                        pnpmSyncJsonPath,
                        ensureFolderAsync: node_core_library_1.FileSystem.ensureFolderAsync,
                        forEachAsyncWithConcurrency: node_core_library_1.Async.forEachAsync,
                        getPackageIncludedFiles: PackageExtractor.getPackageIncludedFilesAsync,
                        logMessageCallback: (logMessageOptions) => PnpmSyncUtilities_1.PnpmSyncUtilities.processLogMessage(logMessageOptions, this._terminal)
                    });
                }
            }
        });
    }
}
exports.PnpmSyncCopyOperationPlugin = PnpmSyncCopyOperationPlugin;
//# sourceMappingURL=PnpmSyncCopyOperationPlugin.js.map