{"version":3,"file":"IOperationRunner.js","sourceRoot":"","sources":["../../../src/logic/operations/IOperationRunner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ITerminal, ITerminalProvider } from '@rushstack/terminal';\nimport type { CollatedWriter } from '@rushstack/stream-collator';\n\nimport type { OperationStatus } from './OperationStatus';\nimport type { OperationMetadataManager } from './OperationMetadataManager';\nimport type { IStopwatchResult } from '../../utilities/Stopwatch';\nimport type { IEnvironment } from '../../utilities/Utilities';\n\n/**\n * Information passed to the executing `IOperationRunner`\n *\n * @beta\n */\nexport interface IOperationRunnerContext {\n  /**\n   * The writer into which this `IOperationRunner` should write its logs.\n   */\n  collatedWriter: CollatedWriter;\n  /**\n   * If Rush was invoked with `--debug`\n   */\n  debugMode: boolean;\n  /**\n   * Defaults to `true`. Will be `false` if Rush was invoked with `--verbose`.\n   */\n  quietMode: boolean;\n  /**\n   * Object used to manage metadata of the operation.\n   *\n   * @internal\n   */\n  _operationMetadataManager?: OperationMetadataManager;\n  /**\n   * Object used to track elapsed time.\n   */\n  stopwatch: IStopwatchResult;\n  /**\n   * The current execution status of an operation. Operations start in the 'ready' state,\n   * but can be 'blocked' if an upstream operation failed. It is 'executing' when\n   * the operation is executing. Once execution is complete, it is either 'success' or\n   * 'failure'.\n   */\n  status: OperationStatus;\n\n  /**\n   * The environment in which the operation is being executed.\n   * A return value of `undefined` indicates that it should inherit the environment from the parent process.\n   */\n  environment: IEnvironment | undefined;\n\n  /**\n   * Error which occurred while executing this operation, this is stored in case we need\n   * it later (for example to re-print errors at end of execution).\n   */\n  error?: Error;\n\n  /**\n   * Invokes the specified callback with a terminal that is associated with this operation.\n   *\n   * Will write to a log file corresponding to the phase and project, and clean it up upon completion.\n   */\n  runWithTerminalAsync<T>(\n    callback: (terminal: ITerminal, terminalProvider: ITerminalProvider) => Promise<T>,\n    options: {\n      createLogFile: boolean;\n      logFileSuffix?: string;\n    }\n  ): Promise<T>;\n}\n\n/**\n * The `Operation` class is a node in the dependency graph of work that needs to be scheduled by the\n * `OperationExecutionManager`. Each `Operation` has a `runner` member of type `IOperationRunner`, whose\n * implementation manages the actual process for running a single operation.\n *\n * @beta\n */\nexport interface IOperationRunner {\n  /**\n   * Name of the operation, for logging.\n   */\n  readonly name: string;\n\n  /**\n   * Whether or not the operation is cacheable. If false, all cache engines will be disabled for this operation.\n   */\n  cacheable: boolean;\n\n  /**\n   * Indicates that this runner's duration has meaning.\n   */\n  reportTiming: boolean;\n\n  /**\n   * Indicates that this runner is architectural and should not be reported on.\n   */\n  silent: boolean;\n\n  /**\n   * If set to true, a warning result should not make Rush exit with a nonzero\n   * exit code\n   */\n  warningsAreAllowed: boolean;\n\n  /**\n   * If set to true, this operation is considered a no-op and can be considered always skipped for\n   * analysis purposes.\n   */\n  readonly isNoOp?: boolean;\n\n  /**\n   * Method to be executed for the operation.\n   */\n  executeAsync(context: IOperationRunnerContext): Promise<OperationStatus>;\n\n  /**\n   * Return a hash of the configuration that affects the operation.\n   */\n  getConfigHash(): string;\n}\n"]}