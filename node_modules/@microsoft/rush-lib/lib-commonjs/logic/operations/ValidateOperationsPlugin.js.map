{"version":3,"file":"ValidateOperationsPlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/ValidateOperationsPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAc3D,MAAM,WAAW,GAA+B,0BAA0B,CAAC;AAE3E;;;GAGG;AACH,MAAa,wBAAwB;IAGnC,YAAmB,QAAmB;QACpC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,KAAyB;QACpC,KAAK,CAAC,uBAAuB,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtF,CAAC;IAEO,mBAAmB,CACzB,OAAkD,EAClD,OAAiC;QAEjC,MAAM,eAAe,GAA+C,IAAI,GAAG,EAAE,CAAC;QAC9E,KAAK,MAAM,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,EAAE,IAAI,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;YAC5E,IAAI,iBAAiB,IAAI,eAAe,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,CAAA,EAAE,CAAC;gBAC5D,4EAA4E;gBAC5E,qEAAqE;gBACrE,IAAI,aAAa,GAA4B,eAAe,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBACpF,IAAI,CAAC,aAAa,EAAE,CAAC;oBACnB,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;oBAC1B,eAAe,CAAC,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;gBACxD,CAAC;gBAED,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACrC,CAAC;QACH,CAAC;QAED,KAAK,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,eAAe,EAAE,CAAC;YAChD,MAAM,oBAAoB,GACxB,OAAO,CAAC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC7C,IAAI,oBAAoB,EAAE,CAAC;gBACzB,oBAAoB,CAAC,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAtCD,4DAsCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { Operation } from './Operation';\nimport type {\n  ICreateOperationsContext,\n  IPhasedCommandPlugin,\n  PhasedCommandHooks\n} from '../../pluginFramework/PhasedCommandHooks';\nimport type { IOperationExecutionResult } from './IOperationExecutionResult';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type { RushProjectConfiguration } from '../../api/RushProjectConfiguration';\nimport type { ITerminal } from '@rushstack/terminal';\nimport type { IPhase } from '../../api/CommandLineConfiguration';\n\nconst PLUGIN_NAME: 'ValidateOperationsPlugin' = 'ValidateOperationsPlugin';\n\n/**\n * Core phased command plugin that provides the functionality for generating a base operation graph\n * from the set of selected projects and phases.\n */\nexport class ValidateOperationsPlugin implements IPhasedCommandPlugin {\n  private readonly _terminal: ITerminal;\n\n  public constructor(terminal: ITerminal) {\n    this._terminal = terminal;\n  }\n\n  public apply(hooks: PhasedCommandHooks): void {\n    hooks.beforeExecuteOperations.tap(PLUGIN_NAME, this._validateOperations.bind(this));\n  }\n\n  private _validateOperations(\n    records: Map<Operation, IOperationExecutionResult>,\n    context: ICreateOperationsContext\n  ): void {\n    const phasesByProject: Map<RushConfigurationProject, Set<IPhase>> = new Map();\n    for (const { associatedPhase, associatedProject, runner } of records.keys()) {\n      if (associatedProject && associatedPhase && !runner?.isNoOp) {\n        // Ignore operations that aren't associated with a project or phase, or that\n        // use the NullOperationRunner (i.e. - the phase doesn't do anything)\n        let projectPhases: Set<IPhase> | undefined = phasesByProject.get(associatedProject);\n        if (!projectPhases) {\n          projectPhases = new Set();\n          phasesByProject.set(associatedProject, projectPhases);\n        }\n\n        projectPhases.add(associatedPhase);\n      }\n    }\n\n    for (const [project, phases] of phasesByProject) {\n      const projectConfiguration: RushProjectConfiguration | undefined =\n        context.projectConfigurations.get(project);\n      if (projectConfiguration) {\n        projectConfiguration.validatePhaseConfiguration(phases, this._terminal);\n      }\n    }\n  }\n}\n"]}