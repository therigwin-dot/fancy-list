{"version":3,"file":"StandardScriptUpdater.js","sourceRoot":"","sources":["../../src/logic/StandardScriptUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, Async } from '@rushstack/node-core-library';\n\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport {\n  installRunRushScriptFilename,\n  installRunRushxScriptFilename,\n  installRunRushPnpmScriptFilename,\n  installRunScriptFilename,\n  scriptsFolderPath\n} from '../utilities/PathConstants';\nimport { RushConstants } from './RushConstants';\n\nconst HEADER_LINES_PREFIX: string[] = [\n  '// THIS FILE WAS GENERATED BY A TOOL. ANY MANUAL MODIFICATIONS WILL GET OVERWRITTEN WHENEVER RUSH IS UPGRADED.',\n  '//'\n];\n\nconst HEADER_LINES_SUFFIX: string[] = [\n  '//',\n  '// For more information, see: https://rushjs.io/pages/maintainer/setup_new_repo/',\n  '//',\n  '// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.',\n  \"// See the @microsoft/rush package's LICENSE file for details.\",\n  ''\n];\n\ninterface IScriptSpecifier {\n  scriptName: string;\n  headerLines: string[];\n}\n\nconst _scripts: IScriptSpecifier[] = [\n  {\n    scriptName: installRunScriptFilename,\n    headerLines: [\n      '// This script is intended for usage in an automated build environment where a Node tool may not have',\n      '// been preinstalled, or may have an unpredictable version.  This script will automatically install the specified',\n      '// version of the specified tool (if not already installed), and then pass a command-line to it.',\n      '// An example usage would be:',\n      '//',\n      `//    node common/scripts/${installRunScriptFilename} qrcode@1.2.2 qrcode https://rushjs.io`\n    ]\n  },\n  {\n    scriptName: installRunRushScriptFilename,\n    headerLines: [\n      '// This script is intended for usage in an automated build environment where the Rush command may not have',\n      '// been preinstalled, or may have an unpredictable version.  This script will automatically install the version of Rush',\n      `// specified in the ${RushConstants.rushJsonFilename} configuration file (if not already installed), and then pass a command-line to it.`,\n      '// An example usage would be:',\n      '//',\n      `//    node common/scripts/${installRunRushScriptFilename} install`\n    ]\n  },\n  {\n    scriptName: installRunRushxScriptFilename,\n    headerLines: [\n      '// This script is intended for usage in an automated build environment where the Rush command may not have',\n      '// been preinstalled, or may have an unpredictable version.  This script will automatically install the version of Rush',\n      `// specified in the ${RushConstants.rushJsonFilename} configuration file (if not already installed), and then pass a command-line to the`,\n      '// rushx command.',\n      '//',\n      '// An example usage would be:',\n      '//',\n      `//    node common/scripts/${installRunRushxScriptFilename} custom-command`\n    ]\n  }\n];\n\nconst _pnpmOnlyScripts: IScriptSpecifier[] = [\n  {\n    scriptName: installRunRushPnpmScriptFilename,\n    headerLines: [\n      '// This script is intended for usage in an automated build environment where the Rush command may not have',\n      '// been preinstalled, or may have an unpredictable version.  This script will automatically install the version of Rush',\n      `// specified in the ${RushConstants.rushJsonFilename} configuration file (if not already installed), and then pass a command-line to the`,\n      '// rush-pnpm command.',\n      '//',\n      '// An example usage would be:',\n      '//',\n      `//    node common/scripts/${installRunRushPnpmScriptFilename} pnpm-command`\n    ]\n  }\n];\n\nconst getScripts = (rushConfiguration: RushConfiguration): IScriptSpecifier[] => {\n  if (rushConfiguration.isPnpm) {\n    return _scripts.concat(_pnpmOnlyScripts);\n  }\n\n  return _scripts;\n};\n\n/**\n * Checks whether the common/scripts files are up to date, and recopies them if needed.\n * This is used by the \"rush install\" and \"rush update\" commands.\n */\nexport class StandardScriptUpdater {\n  /**\n   * Recopy the scripts if the scripts are out of date.\n   * Used by \"rush update\".\n   */\n  public static async updateAsync(rushConfiguration: RushConfiguration): Promise<boolean> {\n    await FileSystem.ensureFolderAsync(rushConfiguration.commonScriptsFolder);\n\n    let anyChanges: boolean = false;\n    await Async.forEachAsync(\n      getScripts(rushConfiguration),\n      async (script: IScriptSpecifier) => {\n        const changed: boolean = await StandardScriptUpdater._updateScriptOrThrowAsync(\n          script,\n          rushConfiguration,\n          false\n        );\n        anyChanges ||= changed;\n      },\n      { concurrency: 10 }\n    );\n\n    if (anyChanges) {\n      // eslint-disable-next-line no-console\n      console.log(); // print a newline after the notices\n    }\n\n    return anyChanges;\n  }\n\n  /**\n   * Throw an exception if the scripts are out of date.\n   * Used by \"rush install\".\n   */\n  public static async validateAsync(rushConfiguration: RushConfiguration): Promise<void> {\n    await Async.forEachAsync(\n      getScripts(rushConfiguration),\n      async (script: IScriptSpecifier) => {\n        await StandardScriptUpdater._updateScriptOrThrowAsync(script, rushConfiguration, true);\n      },\n      { concurrency: 10 }\n    );\n  }\n\n  /**\n   * Compares a single script in the common/script folder to see if it needs to be updated.\n   * If throwInsteadOfCopy=false, then an outdated or missing script will be recopied;\n   * otherwise, an exception is thrown.\n   */\n  private static async _updateScriptOrThrowAsync(\n    script: IScriptSpecifier,\n    rushConfiguration: RushConfiguration,\n    throwInsteadOfCopy: boolean\n  ): Promise<boolean> {\n    const targetFilePath: string = `${rushConfiguration.commonScriptsFolder}/${script.scriptName}`;\n\n    // Are the files the same?\n    let filesAreSame: boolean = false;\n\n    let targetContent: string | undefined;\n    try {\n      targetContent = await FileSystem.readFileAsync(targetFilePath);\n    } catch (e) {\n      if (!FileSystem.isNotExistError(e)) {\n        throw e;\n      }\n    }\n    const targetNormalized: string | undefined = targetContent\n      ? StandardScriptUpdater._normalize(targetContent)\n      : undefined;\n\n    let sourceNormalized: string;\n    if (targetNormalized) {\n      sourceNormalized = await StandardScriptUpdater._getExpectedFileDataAsync(script);\n      if (sourceNormalized === targetNormalized) {\n        filesAreSame = true;\n      }\n    }\n\n    if (!filesAreSame) {\n      if (throwInsteadOfCopy) {\n        throw new Error(\n          'The standard files in the \"common/scripts\" folders need to be updated' +\n            ' for this Rush version.  Please run \"rush update\" and commit the changes.'\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.log(`Script is out of date; updating \"${targetFilePath}\"`);\n        sourceNormalized ||= await StandardScriptUpdater._getExpectedFileDataAsync(script);\n        await FileSystem.writeFileAsync(targetFilePath, sourceNormalized);\n      }\n    }\n\n    return !filesAreSame;\n  }\n\n  private static _normalize(content: string): string {\n    // Ignore newline differences from .gitattributes\n    return (\n      content\n        .split('\\n')\n        // Ignore trailing whitespace\n        .map((x) => x.trimRight())\n        .join('\\n')\n    );\n  }\n\n  private static async _getExpectedFileDataAsync({\n    scriptName,\n    headerLines\n  }: IScriptSpecifier): Promise<string> {\n    const sourceFilePath: string = `${scriptsFolderPath}/${scriptName}`;\n    let sourceContent: string = await FileSystem.readFileAsync(sourceFilePath);\n    sourceContent = [...HEADER_LINES_PREFIX, ...headerLines, ...HEADER_LINES_SUFFIX, sourceContent].join(\n      '\\n'\n    );\n    const sourceNormalized: string = StandardScriptUpdater._normalize(sourceContent);\n    return sourceNormalized;\n  }\n}\n"]}