{"version":3,"file":"ChangelogGenerator.js","sourceRoot":"","sources":["../../src/logic/ChangelogGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as semver from 'semver';\n\nimport { FileSystem, JsonFile, JsonSchema } from '@rushstack/node-core-library';\n\nimport { type IChangeRequests, PublishUtilities } from './PublishUtilities';\nimport { type IChangeInfo, ChangeType } from '../api/ChangeManagement';\nimport type {\n  IChangelog,\n  IChangeLogEntry,\n  IChangeLogComment,\n  IChangeLogEntryComments\n} from '../api/Changelog';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport schemaJson from '../schemas/changelog.schema.json';\n\nconst CHANGELOG_JSON: string = 'CHANGELOG.json';\nconst CHANGELOG_MD: string = 'CHANGELOG.md';\nconst EOL: string = '\\n';\n\nexport class ChangelogGenerator {\n  /**\n   * The JSON Schema for Changelog file (changelog.schema.json).\n   */\n  public static readonly jsonSchema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  /**\n   * Updates the appropriate changelogs with the given changes.\n   */\n  public static updateChangelogs(\n    allChanges: IChangeRequests,\n    allProjects: ReadonlyMap<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration,\n    shouldCommit: boolean\n  ): IChangelog[] {\n    const updatedChangeLogs: IChangelog[] = [];\n\n    allChanges.packageChanges.forEach((change, packageName) => {\n      const project: RushConfigurationProject | undefined = allProjects.get(packageName);\n\n      if (project && ChangelogGenerator._shouldUpdateChangeLog(project, allChanges)) {\n        const changeLog: IChangelog | undefined = ChangelogGenerator.updateIndividualChangelog(\n          change,\n          project.projectFolder,\n          shouldCommit,\n          rushConfiguration,\n          project.versionPolicy && project.versionPolicy.isLockstepped,\n          project.isMainProject\n        );\n\n        if (changeLog) {\n          updatedChangeLogs.push(changeLog);\n        }\n      }\n    });\n    return updatedChangeLogs;\n  }\n\n  /**\n   * Fully regenerate the markdown files based on the current json files.\n   */\n  public static regenerateChangelogs(\n    allProjects: ReadonlyMap<string, RushConfigurationProject>,\n    rushConfiguration: RushConfiguration\n  ): void {\n    allProjects.forEach((project) => {\n      const markdownPath: string = path.resolve(project.projectFolder, CHANGELOG_MD);\n      const markdownJSONPath: string = path.resolve(project.projectFolder, CHANGELOG_JSON);\n\n      if (FileSystem.exists(markdownPath)) {\n        // eslint-disable-next-line no-console\n        console.log('Found: ' + markdownPath);\n        if (!FileSystem.exists(markdownJSONPath)) {\n          throw new Error('A CHANGELOG.md without json: ' + markdownPath);\n        }\n\n        const changelog: IChangelog = ChangelogGenerator._getChangelog(\n          project.packageName,\n          project.projectFolder\n        );\n        const isLockstepped: boolean = !!project.versionPolicy && project.versionPolicy.isLockstepped;\n\n        FileSystem.writeFile(\n          path.join(project.projectFolder, CHANGELOG_MD),\n          ChangelogGenerator._translateToMarkdown(changelog, rushConfiguration, isLockstepped)\n        );\n      }\n    });\n  }\n\n  /**\n   * Updates an individual changelog for a single project.\n   */\n  public static updateIndividualChangelog(\n    change: IChangeInfo,\n    projectFolder: string,\n    shouldCommit: boolean,\n    rushConfiguration: RushConfiguration,\n    isLockstepped: boolean = false,\n    isMain: boolean = true\n  ): IChangelog | undefined {\n    if (isLockstepped && !isMain) {\n      // Early return if the project is lockstepped and does not host change logs\n      return undefined;\n    }\n    const changelog: IChangelog = ChangelogGenerator._getChangelog(change.packageName, projectFolder);\n\n    if (!changelog.entries.some((entry) => entry.version === change.newVersion)) {\n      const changelogEntry: IChangeLogEntry = {\n        version: change.newVersion!,\n        tag: PublishUtilities.createTagname(\n          change.packageName,\n          change.newVersion!,\n          rushConfiguration.gitTagSeparator\n        ),\n        date: new Date().toUTCString(),\n        comments: {}\n      };\n\n      change.changes!.forEach((individualChange) => {\n        if (individualChange.comment) {\n          // Initialize the comments array only as necessary.\n          const changeTypeString: keyof IChangeLogEntryComments = ChangeType[\n            individualChange.changeType!\n          ] as keyof IChangeLogEntryComments;\n\n          changelogEntry.comments[changeTypeString] = changelogEntry.comments[changeTypeString] || [];\n          const comments: IChangeLogComment[] = changelogEntry.comments[changeTypeString]!;\n\n          const changeLogComment: IChangeLogComment = {\n            comment: individualChange.comment\n          };\n          if (individualChange.author) {\n            changeLogComment.author = individualChange.author;\n          }\n          if (individualChange.commit) {\n            changeLogComment.commit = individualChange.commit;\n          }\n          if (individualChange.customFields) {\n            changeLogComment.customFields = individualChange.customFields;\n          }\n          comments.push(changeLogComment);\n        }\n      });\n\n      // Add the changelog entry to the start of the list.\n      changelog.entries.unshift(changelogEntry);\n\n      const changelogFilename: string = path.join(projectFolder, CHANGELOG_JSON);\n\n      // eslint-disable-next-line no-console\n      console.log(\n        `${EOL}* ${shouldCommit ? 'APPLYING' : 'DRYRUN'}: ` +\n          `Changelog update for \"${change.packageName}@${change.newVersion}\".`\n      );\n\n      if (shouldCommit) {\n        // Write markdown transform.\n        JsonFile.save(changelog, changelogFilename);\n\n        FileSystem.writeFile(\n          path.join(projectFolder, CHANGELOG_MD),\n          ChangelogGenerator._translateToMarkdown(changelog, rushConfiguration, isLockstepped)\n        );\n      }\n      return changelog;\n    }\n    // change log not updated.\n    return undefined;\n  }\n\n  /**\n   * Loads the changelog json from disk, or creates a new one if there isn't one.\n   */\n  private static _getChangelog(packageName: string, projectFolder: string): IChangelog {\n    const changelogFilename: string = path.join(projectFolder, CHANGELOG_JSON);\n    let changelog: IChangelog | undefined = undefined;\n\n    // Try to read the existing changelog.\n    if (FileSystem.exists(changelogFilename)) {\n      changelog = JsonFile.loadAndValidate(changelogFilename, ChangelogGenerator.jsonSchema);\n    }\n\n    if (!changelog) {\n      changelog = {\n        name: packageName,\n        entries: []\n      };\n    } else {\n      // Force the changelog name to be same as package name.\n      // In case the package has been renamed but change log name is not updated.\n      changelog.name = packageName;\n    }\n\n    return changelog;\n  }\n\n  /**\n   * Translates the given changelog json object into a markdown string.\n   */\n  private static _translateToMarkdown(\n    changelog: IChangelog,\n    rushConfiguration: RushConfiguration,\n    isLockstepped: boolean = false\n  ): string {\n    let markdown: string = [\n      `# Change Log - ${changelog.name}`,\n      '',\n      `This log was last generated on ${new Date().toUTCString()} and should not be manually modified.`,\n      '',\n      ''\n    ].join(EOL);\n\n    changelog.entries.forEach((entry, index) => {\n      markdown += `## ${entry.version}${EOL}`;\n\n      if (entry.date) {\n        markdown += `${entry.date}${EOL}`;\n      }\n\n      markdown += EOL;\n\n      let comments: string = '';\n\n      comments += ChangelogGenerator._getChangeComments('Breaking changes', entry.comments.major);\n\n      comments += ChangelogGenerator._getChangeComments('Minor changes', entry.comments.minor);\n\n      comments += ChangelogGenerator._getChangeComments('Patches', entry.comments.patch);\n\n      if (isLockstepped) {\n        // In lockstepped projects, all changes are of type ChangeType.none.\n        comments += ChangelogGenerator._getChangeComments('Updates', entry.comments.none);\n      }\n\n      if (rushConfiguration.hotfixChangeEnabled) {\n        comments += ChangelogGenerator._getChangeComments('Hotfixes', entry.comments.hotfix);\n      }\n\n      if (!comments) {\n        markdown +=\n          (changelog.entries.length === index + 1 ? '_Initial release_' : '_Version update only_') +\n          EOL +\n          EOL;\n      } else {\n        markdown += comments;\n      }\n    });\n\n    return markdown;\n  }\n\n  /**\n   * Helper to return the comments string to be appends to the markdown content.\n   */\n  private static _getChangeComments(title: string, commentsArray: IChangeLogComment[] | undefined): string {\n    let comments: string = '';\n\n    if (commentsArray) {\n      comments = `### ${title}${EOL + EOL}`;\n      commentsArray.forEach((comment) => {\n        comments += `- ${comment.comment}${EOL}`;\n      });\n      comments += EOL;\n    }\n\n    return comments;\n  }\n\n  /**\n   * Changelogs should only be generated for publishable projects.\n   * Do not update changelog or delete the change files for prerelease. Save them for the official release.\n   * Unless the package is a hotfix, in which case do delete the change files.\n   *\n   * @param project\n   * @param allChanges\n   */\n  private static _shouldUpdateChangeLog(\n    project: RushConfigurationProject,\n    allChanges: IChangeRequests\n  ): boolean {\n    return (\n      project.shouldPublish &&\n      (!semver.prerelease(project.packageJson.version) ||\n        allChanges.packageChanges.get(project.packageName)?.changeType === ChangeType.hotfix)\n    );\n  }\n}\n"]}