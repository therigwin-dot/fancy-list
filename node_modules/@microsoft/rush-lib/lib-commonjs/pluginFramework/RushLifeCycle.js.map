{"version":3,"file":"RushLifeCycle.js","sourceRoot":"","sources":["../../src/pluginFramework/RushLifeCycle.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,qCAAsE;AAqCtE;;;;GAIG;AACH,MAAa,kBAAkB;IAA/B;QACE;;WAEG;QACa,eAAU,GAAkC,IAAI,yBAAe,CAC7E,CAAC,SAAS,CAAC,EACX,YAAY,CACb,CAAC;QAEF;;WAEG;QACa,8BAAyB,GACvC,IAAI,yBAAe,CAAiB,CAAC,SAAS,CAAC,EAAE,2BAA2B,CAAC,CAAC;QAEhF;;WAEG;QACa,2BAAsB,GAA6C,IAAI,iBAAO,CAC5F,CAAC,GAAW,EAAE,EAAE;YACd,OAAO,IAAI,yBAAe,CAAiB,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;QAC/D,CAAC,EACD,wBAAwB,CACzB,CAAC;QAEF;;WAEG;QACa,wBAAmB,GAAoC,IAAI,yBAAe,CACxF,CAAC,SAAS,CAAC,EACX,qBAAqB,CACtB,CAAC;QAEF;;WAEG;QACa,qBAAgB,GAA6C,IAAI,iBAAO,CAAC,CAAC,GAAW,EAAE,EAAE;YACvG,OAAO,IAAI,yBAAe,CAAiB,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;QAC/D,CAAC,EAAE,kBAAkB,CAAC,CAAC;QAEvB;;WAEG;QACa,kBAAa,GAEzB,IAAI,yBAAe,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,SAAS,CAAC,EAAE,eAAe,CAAC,CAAC;QAE7E;;WAEG;QACa,iBAAY,GAExB,IAAI,yBAAe,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,SAAS,CAAC,EAAE,cAAc,CAAC,CAAC;QAE5E;;WAEG;QACa,mBAAc,GAAuD,IAAI,2BAAiB,CACxG,CAAC,eAAe,CAAC,EACjB,gBAAgB,CACjB,CAAC;IACJ,CAAC;CAAA;AA7DD,gDA6DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AsyncParallelHook, AsyncSeriesHook, HookMap } from 'tapable';\nimport type { ITelemetryData } from '../logic/Telemetry';\n\nimport type { PhasedCommandHooks } from './PhasedCommandHooks';\nimport type { Subspace } from '../api/Subspace';\n\n/**\n * Information about the currently executing command provided to plugins.\n * @beta\n */\nexport interface IRushCommand {\n  /**\n   * The name of this command, as seen on the command line\n   */\n  readonly actionName: string;\n}\n\n/**\n * Information about the currently executing global script command (as defined in command-line.json) provided to plugins.\n * @beta\n */\nexport interface IGlobalCommand extends IRushCommand {\n  // Nothing added.\n}\n\n/**\n * Information about the currently executing phased script command (as defined in command-line.json, or default \"build\" or \"rebuild\") provided to plugins.\n * @beta\n */\nexport interface IPhasedCommand extends IRushCommand {\n  /**\n   * Hooks into the execution of the current phased command\n   * @alpha\n   */\n  readonly hooks: PhasedCommandHooks;\n}\n\n/**\n * Hooks into the lifecycle of the Rush process invocation that plugins may tap into.\n *\n * @beta\n */\nexport class RushLifecycleHooks {\n  /**\n   * The hook to run before executing any Rush CLI Command.\n   */\n  public readonly initialize: AsyncSeriesHook<IRushCommand> = new AsyncSeriesHook<IRushCommand>(\n    ['command'],\n    'initialize'\n  );\n\n  /**\n   * The hook to run before executing any global Rush CLI Command (defined in command-line.json).\n   */\n  public readonly runAnyGlobalCustomCommand: AsyncSeriesHook<IGlobalCommand> =\n    new AsyncSeriesHook<IGlobalCommand>(['command'], 'runAnyGlobalCustomCommand');\n\n  /**\n   * A hook map to allow plugins to hook specific named global commands (defined in command-line.json) before execution.\n   */\n  public readonly runGlobalCustomCommand: HookMap<AsyncSeriesHook<IGlobalCommand>> = new HookMap(\n    (key: string) => {\n      return new AsyncSeriesHook<IGlobalCommand>(['command'], key);\n    },\n    'runGlobalCustomCommand'\n  );\n\n  /**\n   * The hook to run before executing any phased Rush CLI Command (defined in command-line.json, or the default \"build\" or \"rebuild\").\n   */\n  public readonly runAnyPhasedCommand: AsyncSeriesHook<IPhasedCommand> = new AsyncSeriesHook<IPhasedCommand>(\n    ['command'],\n    'runAnyPhasedCommand'\n  );\n\n  /**\n   * A hook map to allow plugins to hook specific named phased commands (defined in command-line.json) before execution.\n   */\n  public readonly runPhasedCommand: HookMap<AsyncSeriesHook<IPhasedCommand>> = new HookMap((key: string) => {\n    return new AsyncSeriesHook<IPhasedCommand>(['command'], key);\n  }, 'runPhasedCommand');\n\n  /**\n   * The hook to run between preparing the common/temp folder and invoking the package manager during \"rush install\" or \"rush update\".\n   */\n  public readonly beforeInstall: AsyncSeriesHook<\n    [command: IGlobalCommand, subspace: Subspace, variant: string | undefined]\n  > = new AsyncSeriesHook(['command', 'subspace', 'variant'], 'beforeInstall');\n\n  /**\n   * The hook to run after a successful install.\n   */\n  public readonly afterInstall: AsyncSeriesHook<\n    [command: IRushCommand, subspace: Subspace, variant: string | undefined]\n  > = new AsyncSeriesHook(['command', 'subspace', 'variant'], 'afterInstall');\n\n  /**\n   * A hook to allow plugins to hook custom logic to process telemetry data.\n   */\n  public readonly flushTelemetry: AsyncParallelHook<[ReadonlyArray<ITelemetryData>]> = new AsyncParallelHook(\n    ['telemetryData'],\n    'flushTelemetry'\n  );\n}\n"]}