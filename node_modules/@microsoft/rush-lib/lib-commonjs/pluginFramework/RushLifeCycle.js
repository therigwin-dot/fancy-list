"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.RushLifecycleHooks = void 0;
const tapable_1 = require("tapable");
/**
 * Hooks into the lifecycle of the Rush process invocation that plugins may tap into.
 *
 * @beta
 */
class RushLifecycleHooks {
    constructor() {
        /**
         * The hook to run before executing any Rush CLI Command.
         */
        this.initialize = new tapable_1.AsyncSeriesHook(['command'], 'initialize');
        /**
         * The hook to run before executing any global Rush CLI Command (defined in command-line.json).
         */
        this.runAnyGlobalCustomCommand = new tapable_1.AsyncSeriesHook(['command'], 'runAnyGlobalCustomCommand');
        /**
         * A hook map to allow plugins to hook specific named global commands (defined in command-line.json) before execution.
         */
        this.runGlobalCustomCommand = new tapable_1.HookMap((key) => {
            return new tapable_1.AsyncSeriesHook(['command'], key);
        }, 'runGlobalCustomCommand');
        /**
         * The hook to run before executing any phased Rush CLI Command (defined in command-line.json, or the default "build" or "rebuild").
         */
        this.runAnyPhasedCommand = new tapable_1.AsyncSeriesHook(['command'], 'runAnyPhasedCommand');
        /**
         * A hook map to allow plugins to hook specific named phased commands (defined in command-line.json) before execution.
         */
        this.runPhasedCommand = new tapable_1.HookMap((key) => {
            return new tapable_1.AsyncSeriesHook(['command'], key);
        }, 'runPhasedCommand');
        /**
         * The hook to run between preparing the common/temp folder and invoking the package manager during "rush install" or "rush update".
         */
        this.beforeInstall = new tapable_1.AsyncSeriesHook(['command', 'subspace', 'variant'], 'beforeInstall');
        /**
         * The hook to run after a successful install.
         */
        this.afterInstall = new tapable_1.AsyncSeriesHook(['command', 'subspace', 'variant'], 'afterInstall');
        /**
         * A hook to allow plugins to hook custom logic to process telemetry data.
         */
        this.flushTelemetry = new tapable_1.AsyncParallelHook(['telemetryData'], 'flushTelemetry');
    }
}
exports.RushLifecycleHooks = RushLifecycleHooks;
//# sourceMappingURL=RushLifeCycle.js.map