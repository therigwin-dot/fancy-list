{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../../src/pluginFramework/logging/Logger.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,kDAAuE;AAyBvE,MAAa,MAAM;IAOjB,YAAmB,OAAuB;QALzB,YAAO,GAAY,EAAE,CAAC;QACtB,cAAS,GAAY,EAAE,CAAC;QAKvC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACzD,CAAC;IAED,IAAW,MAAM;QACf,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,KAAY;QACxC,OAAO,KAAK,CAAC,OAAO,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,SAAS,CAAC,KAAY;QAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACxE,IAAI,IAAI,CAAC,kBAAkB,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;YAC3C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC;IAED;;OAEG;IACI,WAAW,CAAC,OAAc;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC9E,IAAI,IAAI,CAAC,kBAAkB,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;YAC7C,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED,IAAY,kBAAkB;QAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;IAC9C,CAAC;CACF;AAjDD,wBAiDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { type ITerminalProvider, Terminal } from '@rushstack/terminal';\n\n/**\n * @beta\n */\nexport interface ILogger {\n  readonly terminal: Terminal;\n\n  /**\n   * Call this function to emit an error to the Rush runtime.\n   */\n  emitError(error: Error): void;\n\n  /**\n   * Call this function to emit a warning to the Rush runtime.\n   */\n  emitWarning(warning: Error): void;\n}\n\nexport interface ILoggerOptions {\n  loggerName: string;\n  terminalProvider: ITerminalProvider;\n  getShouldPrintStacks: () => boolean;\n}\n\nexport class Logger implements ILogger {\n  private readonly _options: ILoggerOptions;\n  private readonly _errors: Error[] = [];\n  private readonly _warnings: Error[] = [];\n\n  public readonly terminal: Terminal;\n\n  public constructor(options: ILoggerOptions) {\n    this._options = options;\n    this.terminal = new Terminal(options.terminalProvider);\n  }\n\n  public get errors(): ReadonlyArray<Error> {\n    return [...this.errors];\n  }\n\n  public get warnings(): ReadonlyArray<Error> {\n    return [...this.warnings];\n  }\n\n  public static getErrorMessage(error: Error): string {\n    return error.message;\n  }\n\n  /**\n   * {@inheritdoc ILogger.emitError}\n   */\n  public emitError(error: Error): void {\n    this._errors.push(error);\n    this.terminal.writeErrorLine(`Error: ${Logger.getErrorMessage(error)}`);\n    if (this._shouldPrintStacks && error.stack) {\n      this.terminal.writeErrorLine(error.stack);\n    }\n  }\n\n  /**\n   * {@inheritdoc ILogger.emitWarning}\n   */\n  public emitWarning(warning: Error): void {\n    this._warnings.push(warning);\n    this.terminal.writeWarningLine(`Warning: ${Logger.getErrorMessage(warning)}`);\n    if (this._shouldPrintStacks && warning.stack) {\n      this.terminal.writeWarningLine(warning.stack);\n    }\n  }\n\n  private get _shouldPrintStacks(): boolean {\n    return this._options.getShouldPrintStacks();\n  }\n}\n"]}