"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.RushSession = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const Logger_1 = require("./logging/Logger");
const RushLifeCycle_1 = require("./RushLifeCycle");
/**
 * @beta
 */
class RushSession {
    constructor(options) {
        this._cloudBuildCacheProviderFactories = new Map();
        this._cobuildLockProviderFactories = new Map();
        this._options = options;
        this.hooks = new RushLifeCycle_1.RushLifecycleHooks();
    }
    getLogger(name) {
        if (!name) {
            throw new node_core_library_1.InternalError('RushSession.getLogger(name) called without a name');
        }
        const terminalProvider = this._options.terminalProvider;
        const loggerOptions = {
            loggerName: name,
            getShouldPrintStacks: () => this._options.getIsDebugMode(),
            terminalProvider
        };
        return new Logger_1.Logger(loggerOptions);
    }
    get terminalProvider() {
        return this._options.terminalProvider;
    }
    registerCloudBuildCacheProviderFactory(cacheProviderName, factory) {
        if (this._cloudBuildCacheProviderFactories.has(cacheProviderName)) {
            throw new Error(`A build cache provider factory for ${cacheProviderName} has already been registered`);
        }
        this._cloudBuildCacheProviderFactories.set(cacheProviderName, factory);
    }
    getCloudBuildCacheProviderFactory(cacheProviderName) {
        return this._cloudBuildCacheProviderFactories.get(cacheProviderName);
    }
    registerCobuildLockProviderFactory(cobuildLockProviderName, factory) {
        if (this._cobuildLockProviderFactories.has(cobuildLockProviderName)) {
            throw new Error(`A cobuild lock provider factory for ${cobuildLockProviderName} has already been registered`);
        }
        this._cobuildLockProviderFactories.set(cobuildLockProviderName, factory);
    }
    getCobuildLockProviderFactory(cobuildLockProviderName) {
        return this._cobuildLockProviderFactories.get(cobuildLockProviderName);
    }
}
exports.RushSession = RushSession;
//# sourceMappingURL=RushSession.js.map