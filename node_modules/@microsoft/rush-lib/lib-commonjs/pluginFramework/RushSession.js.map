{"version":3,"file":"RushSession.js","sourceRoot":"","sources":["../../src/pluginFramework/RushSession.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAA6D;AAE7D,6CAA6E;AAC7E,mDAAqD;AA6BrD;;GAEG;AACH,MAAa,WAAW;IAOtB,YAAmB,OAA4B;QAL9B,sCAAiC,GAAgD,IAAI,GAAG,EAAE,CAAC;QAC3F,kCAA6B,GAA4C,IAAI,GAAG,EAAE,CAAC;QAKlG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,KAAK,GAAG,IAAI,kCAAkB,EAAE,CAAC;IACxC,CAAC;IAEM,SAAS,CAAC,IAAY;QAC3B,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,iCAAa,CAAC,mDAAmD,CAAC,CAAC;QAC/E,CAAC;QAED,MAAM,gBAAgB,GAAsB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QAC3E,MAAM,aAAa,GAAmB;YACpC,UAAU,EAAE,IAAI;YAChB,oBAAoB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;YAC1D,gBAAgB;SACjB,CAAC;QACF,OAAO,IAAI,eAAM,CAAC,aAAa,CAAC,CAAC;IACnC,CAAC;IAED,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;IACxC,CAAC;IAEM,sCAAsC,CAC3C,iBAAyB,EACzB,OAAuC;QAEvC,IAAI,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC;YAClE,MAAM,IAAI,KAAK,CAAC,sCAAsC,iBAAiB,8BAA8B,CAAC,CAAC;QACzG,CAAC;QAED,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;IACzE,CAAC;IAEM,iCAAiC,CACtC,iBAAyB;QAEzB,OAAO,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACvE,CAAC;IAEM,kCAAkC,CACvC,uBAA+B,EAC/B,OAAmC;QAEnC,IAAI,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,uBAAuB,CAAC,EAAE,CAAC;YACpE,MAAM,IAAI,KAAK,CACb,uCAAuC,uBAAuB,8BAA8B,CAC7F,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,uBAAuB,EAAE,OAAO,CAAC,CAAC;IAC3E,CAAC;IAEM,6BAA6B,CAClC,uBAA+B;QAE/B,OAAO,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IACzE,CAAC;CACF;AAjED,kCAiEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { InternalError } from '@rushstack/node-core-library';\nimport type { ITerminalProvider } from '@rushstack/terminal';\nimport { type ILogger, type ILoggerOptions, Logger } from './logging/Logger';\nimport { RushLifecycleHooks } from './RushLifeCycle';\n\nimport type { IBuildCacheJson } from '../api/BuildCacheConfiguration';\nimport type { ICloudBuildCacheProvider } from '../logic/buildCache/ICloudBuildCacheProvider';\nimport type { ICobuildJson } from '../api/CobuildConfiguration';\nimport type { ICobuildLockProvider } from '../logic/cobuild/ICobuildLockProvider';\n\n/**\n * @beta\n */\nexport interface IRushSessionOptions {\n  terminalProvider: ITerminalProvider;\n  getIsDebugMode: () => boolean;\n}\n\n/**\n * @beta\n */\nexport type CloudBuildCacheProviderFactory = (\n  buildCacheJson: IBuildCacheJson\n) => ICloudBuildCacheProvider | Promise<ICloudBuildCacheProvider>;\n\n/**\n * @beta\n */\nexport type CobuildLockProviderFactory = (\n  cobuildJson: ICobuildJson\n) => ICobuildLockProvider | Promise<ICobuildLockProvider>;\n\n/**\n * @beta\n */\nexport class RushSession {\n  private readonly _options: IRushSessionOptions;\n  private readonly _cloudBuildCacheProviderFactories: Map<string, CloudBuildCacheProviderFactory> = new Map();\n  private readonly _cobuildLockProviderFactories: Map<string, CobuildLockProviderFactory> = new Map();\n\n  public readonly hooks: RushLifecycleHooks;\n\n  public constructor(options: IRushSessionOptions) {\n    this._options = options;\n\n    this.hooks = new RushLifecycleHooks();\n  }\n\n  public getLogger(name: string): ILogger {\n    if (!name) {\n      throw new InternalError('RushSession.getLogger(name) called without a name');\n    }\n\n    const terminalProvider: ITerminalProvider = this._options.terminalProvider;\n    const loggerOptions: ILoggerOptions = {\n      loggerName: name,\n      getShouldPrintStacks: () => this._options.getIsDebugMode(),\n      terminalProvider\n    };\n    return new Logger(loggerOptions);\n  }\n\n  public get terminalProvider(): ITerminalProvider {\n    return this._options.terminalProvider;\n  }\n\n  public registerCloudBuildCacheProviderFactory(\n    cacheProviderName: string,\n    factory: CloudBuildCacheProviderFactory\n  ): void {\n    if (this._cloudBuildCacheProviderFactories.has(cacheProviderName)) {\n      throw new Error(`A build cache provider factory for ${cacheProviderName} has already been registered`);\n    }\n\n    this._cloudBuildCacheProviderFactories.set(cacheProviderName, factory);\n  }\n\n  public getCloudBuildCacheProviderFactory(\n    cacheProviderName: string\n  ): CloudBuildCacheProviderFactory | undefined {\n    return this._cloudBuildCacheProviderFactories.get(cacheProviderName);\n  }\n\n  public registerCobuildLockProviderFactory(\n    cobuildLockProviderName: string,\n    factory: CobuildLockProviderFactory\n  ): void {\n    if (this._cobuildLockProviderFactories.has(cobuildLockProviderName)) {\n      throw new Error(\n        `A cobuild lock provider factory for ${cobuildLockProviderName} has already been registered`\n      );\n    }\n    this._cobuildLockProviderFactories.set(cobuildLockProviderName, factory);\n  }\n\n  public getCobuildLockProviderFactory(\n    cobuildLockProviderName: string\n  ): CobuildLockProviderFactory | undefined {\n    return this._cobuildLockProviderFactories.get(cobuildLockProviderName);\n  }\n}\n"]}