{"version":3,"file":"AsyncRecycler.js","sourceRoot":"","sources":["../../src/utilities/AsyncRecycler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as child_process from 'child_process';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\n\nimport { Text, Path, FileSystem, type FolderItem } from '@rushstack/node-core-library';\n\nimport { Utilities } from './Utilities';\n\n/**\n * For deleting large folders, AsyncRecycler is significantly faster than Utilities.dangerouslyDeletePath().\n * It works by moving one or more folders into a temporary \"recycler\" folder, and then launches a separate\n * background process to recursively delete that folder.\n */\nexport class AsyncRecycler {\n  private _movedFolderCount: number;\n  private _deleting: boolean;\n  private _prefix: string;\n\n  /**\n   * The full path of the recycler folder.\n   * Example: `C:\\MyRepo\\common\\rush-recycler`\n   */\n  public readonly recyclerFolder: string;\n\n  public constructor(recyclerFolder: string) {\n    this.recyclerFolder = path.resolve(recyclerFolder);\n    this._movedFolderCount = 0;\n    this._deleting = false;\n    this._prefix = `${Date.now()}`;\n  }\n\n  /**\n   * Synchronously moves the specified folder into the recycler folder.  If the specified folder\n   * does not exist, then no operation is performed.  After calling this function one or more times,\n   * deleteAll() must be called to actually delete the contents of the recycler folder.\n   */\n  public moveFolder(folderPath: string): void {\n    if (this._deleting) {\n      throw new Error('AsyncRecycler.moveFolder() must not be called after deleteAll() has started');\n    }\n\n    if (Path.isUnder(this.recyclerFolder, folderPath)) {\n      throw new Error('AsyncRecycler.moveFolder() cannot be called on a parent of the recycler folder');\n    }\n\n    if (!FileSystem.exists(folderPath)) {\n      return;\n    }\n\n    ++this._movedFolderCount;\n\n    // We need to do a simple \"fs.renameSync\" here, however if the folder we're trying to rename\n    // has a lock, or if its destination container doesn't exist yet,\n    // then there seems to be some OS process (virus scanner?) that holds\n    // a lock on the folder for a split second, which causes renameSync to\n    // fail. To workaround that, retry for up to 7 seconds before giving up.\n    const maxWaitTimeMs: number = 7 * 1000;\n\n    Utilities.createFolderWithRetry(this.recyclerFolder);\n\n    Utilities.retryUntilTimeout(\n      () => this._renameOrRecurseInFolder(folderPath),\n      maxWaitTimeMs,\n      (e) =>\n        new Error(`Error: ${e}\\nOften this is caused by a file lock from a process like the virus scanner.`),\n      'recycleFolder'\n    );\n  }\n\n  /**\n   * This deletes all items under the specified folder, except for the items in the membersToExclude.\n   * To be conservative, a case-insensitive comparison is used for membersToExclude.\n   * The membersToExclude must be file/folder names that would match readdir() results.\n   */\n  public moveAllItemsInFolder(folderPath: string, membersToExclude?: ReadonlyArray<string>): void {\n    const resolvedFolderPath: string = path.resolve(folderPath);\n\n    const excludeSet: Set<string> = new Set<string>((membersToExclude || []).map((x) => x.toUpperCase()));\n\n    for (const dirent of FileSystem.readFolderItems(resolvedFolderPath)) {\n      const normalizedMemberName: string = dirent.name.toUpperCase();\n      if (!excludeSet.has(normalizedMemberName)) {\n        const absolutePath: string = path.resolve(folderPath, dirent.name);\n        if (dirent.isDirectory()) {\n          this._renameOrRecurseInFolder(absolutePath);\n        } else {\n          FileSystem.deleteFile(absolutePath);\n        }\n      }\n    }\n  }\n\n  /**\n   * Starts an asynchronous process to delete the recycler folder.  Deleting will continue\n   * even if the current Node.js process is killed.\n   *\n   * NOTE: To avoid spawning multiple instances of the same command, moveFolder()\n   * MUST NOT be called again after deleteAll() has started.\n   */\n  public async startDeleteAllAsync(): Promise<void> {\n    if (this._deleting) {\n      throw new Error(\n        `${AsyncRecycler.name}.${this.startDeleteAllAsync.name}() must not be called more than once`\n      );\n    }\n\n    this._deleting = true;\n\n    if (this._movedFolderCount === 0) {\n      // Nothing to do\n      return;\n    }\n\n    // Asynchronously delete the folder contents.\n    let command: string;\n    let args: string[];\n\n    const options: child_process.SpawnOptions = {\n      detached: true,\n      // The child won't stay alive unless we detach its stdio\n      stdio: 'ignore'\n    };\n\n    if (os.platform() === 'win32') {\n      // PowerShell.exe doesn't work with a detached console, so we need cmd.exe to create\n      // the new console for us.\n      command = 'cmd.exe';\n\n      // In PowerShell single-quote literals, single quotes are escaped by doubling them\n      const escapedRecyclerFolder: string = Text.replaceAll(this.recyclerFolder, \"'\", \"''\");\n\n      // As of PowerShell 3.0, the \"\\\\?\" prefix can be used for paths that exceed MAX_PATH.\n      // (This prefix does not seem to work for cmd.exe's \"rd\" command.)\n      args = [\n        '/c',\n        '\"' +\n          'PowerShell.exe -Version 3.0 -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command' +\n          ` Get-ChildItem -Force '${escapedRecyclerFolder}'` +\n          // The \"^|\" here prevents cmd.exe from interpreting the \"|\" symbol\n          ` ^| ForEach ($_) { Remove-Item -ErrorAction Ignore -Force -Recurse \"\\\\\\\\?\\\\$($_.FullName)\" }` +\n          '\"'\n      ];\n\n      options.windowsVerbatimArguments = true;\n    } else {\n      command = 'rm';\n      args = ['-rf'];\n\n      let pathCount: number = 0;\n\n      let folderItemNames: string[] = [];\n      try {\n        folderItemNames = await FileSystem.readFolderItemNamesAsync(this.recyclerFolder);\n      } catch (e) {\n        if (!FileSystem.isNotExistError(e)) {\n          throw e;\n        }\n      }\n\n      // child_process.spawn() doesn't expand wildcards.  To be safe, we will do it manually\n      // rather than rely on an unknown shell.\n      for (const filename of folderItemNames) {\n        // The \".\" and \"..\" are supposed to be excluded, but let's be safe\n        if (filename !== '.' && filename !== '..') {\n          args.push(path.join(this.recyclerFolder, filename));\n          ++pathCount;\n        }\n      }\n\n      if (pathCount === 0) {\n        // Nothing to do\n        return;\n      }\n    }\n\n    const process: child_process.ChildProcess = child_process.spawn(command, args, options);\n\n    // The child won't stay alive unless we unlink it from the parent process\n    process.unref();\n  }\n\n  private _renameOrRecurseInFolder(folderPath: string): void {\n    const ordinal: number = this._movedFolderCount++;\n    const targetDir: string = `${this.recyclerFolder}/${this._prefix}_${ordinal}`;\n    try {\n      fs.renameSync(folderPath, targetDir);\n      return;\n    } catch (err) {\n      if (FileSystem.isNotExistError(err)) {\n        return;\n      }\n\n      if (err.code !== 'EPERM') {\n        throw err;\n      }\n    }\n\n    const children: FolderItem[] = FileSystem.readFolderItems(folderPath);\n    for (const child of children) {\n      const absoluteChild: string = `${folderPath}/${child.name}`;\n      if (child.isDirectory()) {\n        this._renameOrRecurseInFolder(absoluteChild);\n      } else {\n        FileSystem.deleteFile(absoluteChild);\n      }\n    }\n\n    // Yes, this is a folder. The API deletes empty folders, too.\n    FileSystem.deleteFile(folderPath);\n  }\n}\n"]}