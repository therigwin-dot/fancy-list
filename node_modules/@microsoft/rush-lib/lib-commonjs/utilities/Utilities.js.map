{"version":3,"file":"Utilities.js","sourceRoot":"","sources":["../../src/utilities/Utilities.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as child_process from 'child_process';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { performance } from 'perf_hooks';\nimport { Transform } from 'stream';\nimport {\n  JsonFile,\n  type IPackageJson,\n  FileSystem,\n  FileConstants,\n  type FileSystemStats,\n  SubprocessTerminator,\n  Executable,\n  type IWaitForExitResult,\n  Async\n} from '@rushstack/node-core-library';\n\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport { syncNpmrc } from './npmrcUtilities';\nimport { EnvironmentVariableNames } from '../api/EnvironmentConfiguration';\nimport { RushConstants } from '../logic/RushConstants';\n\nexport type UNINITIALIZED = 'UNINITIALIZED';\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const UNINITIALIZED: UNINITIALIZED = 'UNINITIALIZED';\n\nexport interface IEnvironment {\n  // NOTE: the process.env doesn't actually support \"undefined\" as a value.\n  // If you try to assign it, it will be converted to the text string \"undefined\".\n  // But this typing is needed for reading values from the dictionary, and for\n  // subsets that get combined.\n  [environmentVariableName: string]: string | undefined;\n}\n\n/**\n * Options for {@link Utilities.executeCommandAsync}.\n */\nexport interface IExecuteCommandOptions {\n  command: string;\n  args: string[];\n  workingDirectory: string;\n  environment?: IEnvironment;\n  suppressOutput?: boolean;\n  keepEnvironment?: boolean;\n  /**\n   * Note that this takes precedence over {@link IExecuteCommandOptions.suppressOutput}\n   */\n  onStdoutStreamChunk?: (chunk: string) => string | void;\n  captureExitCodeAndSignal?: boolean;\n}\n\n/**\n * Options for {@link Utilities.installPackageInDirectoryAsync}.\n */\nexport interface IInstallPackageInDirectoryOptions {\n  directory: string;\n  packageName: string;\n  version: string;\n  tempPackageTitle: string;\n  maxInstallAttempts: number;\n  commonRushConfigFolder: string | undefined;\n  suppressOutput?: boolean;\n}\n\nexport interface ILifecycleCommandOptions {\n  /**\n   * The rush configuration, if the command is running in a rush repo.\n   */\n  rushConfiguration: RushConfiguration | undefined;\n\n  /**\n   * Working directory for running the command\n   */\n  workingDirectory: string;\n\n  /**\n   * The folder containing a local .npmrc, which will be used for the INIT_CWD environment variable\n   */\n  initCwd: string;\n\n  /**\n   * If true, suppress the process's output, but if there is a nonzero exit code then print stderr\n   */\n  handleOutput: boolean;\n\n  /**\n   * an existing environment to copy instead of process.env\n   */\n  initialEnvironment?: IEnvironment;\n\n  /**\n   * Options for what should be added to the PATH variable\n   */\n  environmentPathOptions: IEnvironmentPathOptions;\n\n  /**\n   * If true, attempt to establish a NodeJS IPC channel to the child process.\n   */\n  ipc?: boolean;\n\n  /**\n   * If true, wire up SubprocessTerminator to the child process.\n   */\n  connectSubprocessTerminator?: boolean;\n}\n\nexport interface IEnvironmentPathOptions {\n  /**\n   * If true, include <project root>/node_modules/.bin in the PATH. If both this and\n   * {@link IEnvironmentPathOptions.includeRepoBin} are set, this path will take precedence.\n   */\n  includeProjectBin?: boolean;\n\n  /**\n   * If true, include <repo root>/common/temp/node_modules/.bin in the PATH.\n   */\n  includeRepoBin?: boolean;\n\n  /**\n   * Additional folders to be prepended to the search PATH.\n   */\n  additionalPathFolders?: string[] | undefined;\n}\n\nexport interface IDisposable {\n  dispose(): void;\n}\n\ninterface ICreateEnvironmentForRushCommandPathOptions extends IEnvironmentPathOptions {\n  rushJsonFolder: string | undefined;\n  projectRoot: string | undefined;\n  commonTempFolder: string | undefined;\n}\n\ninterface ICreateEnvironmentForRushCommandOptions {\n  /**\n   * The INIT_CWD environment variable\n   */\n  initCwd?: string;\n\n  /**\n   * an existing environment to copy instead of process.env\n   */\n  initialEnvironment?: IEnvironment;\n\n  /**\n   * Options for what should be added to the PATH variable\n   */\n  pathOptions?: ICreateEnvironmentForRushCommandPathOptions;\n}\n\nexport class Utilities {\n  public static syncNpmrc: typeof syncNpmrc = syncNpmrc;\n\n  /**\n   * Get the user's home directory. On windows this looks something like \"C:\\users\\username\\\" and on UNIX\n   * this looks something like \"/home/username/\"\n   */\n  public static getHomeFolder(): string {\n    const unresolvedUserFolder: string | undefined =\n      process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];\n    const dirError: string = \"Unable to determine the current user's home directory\";\n    if (unresolvedUserFolder === undefined) {\n      throw new Error(dirError);\n    }\n    const homeFolder: string = path.resolve(unresolvedUserFolder);\n    if (!FileSystem.exists(homeFolder)) {\n      throw new Error(dirError);\n    }\n\n    return homeFolder;\n  }\n\n  /**\n   * Node.js equivalent of performance.now().\n   */\n  public static getTimeInMs(): number {\n    return performance.now();\n  }\n\n  /**\n   * Retries a function until a timeout is reached. The function is expected to throw if it failed and\n   *  should be retried.\n   */\n  public static retryUntilTimeout<TResult>(\n    fn: () => TResult,\n    maxWaitTimeMs: number,\n    getTimeoutError: (innerError: Error) => Error,\n    fnName: string\n  ): TResult {\n    const startTime: number = Utilities.getTimeInMs();\n    let looped: boolean = false;\n\n    let result: TResult;\n    for (;;) {\n      try {\n        result = fn();\n        break;\n      } catch (e) {\n        looped = true;\n        const currentTime: number = Utilities.getTimeInMs();\n        if (currentTime - startTime > maxWaitTimeMs) {\n          throw getTimeoutError(e as Error);\n        }\n      }\n    }\n\n    if (looped) {\n      const currentTime: number = Utilities.getTimeInMs();\n      const totalSeconds: string = ((currentTime - startTime) / 1000.0).toFixed(2);\n      // This logging statement isn't meaningful to the end-user. `fnName` should be updated\n      // to something like `operationDescription`\n      // eslint-disable-next-line no-console\n      console.log(`${fnName}() stalled for ${totalSeconds} seconds`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Creates the specified folder by calling FileSystem.ensureFolder(), but using a\n   * retry loop to recover from temporary locks that may be held by other processes.\n   * If the folder already exists, no error occurs.\n   */\n  public static createFolderWithRetry(folderName: string): void {\n    // Note: If a file exists with the same name, then we fall through and report\n    // an error.\n    if (Utilities.directoryExists(folderName)) {\n      return;\n    }\n\n    // We need to do a simple \"FileSystem.ensureFolder(localModulesFolder)\" here,\n    // however if the folder we deleted above happened to contain any files,\n    // then there seems to be some OS process (virus scanner?) that holds\n    // a lock on the folder for a split second, which causes mkdirSync to\n    // fail.  To workaround that, retry for up to 7 seconds before giving up.\n    const maxWaitTimeMs: number = 7 * 1000;\n\n    return Utilities.retryUntilTimeout(\n      () => FileSystem.ensureFolder(folderName),\n      maxWaitTimeMs,\n      (e) =>\n        new Error(\n          `Error: ${e}\\nOften this is caused by a file lock ` +\n            'from a process such as your text editor, command prompt, ' +\n            'or a filesystem watcher.'\n        ),\n      'createFolderWithRetry'\n    );\n  }\n\n  /**\n   * Determines if a path points to a directory and that it exists.\n   */\n  public static directoryExists(directoryPath: string): boolean {\n    let exists: boolean = false;\n\n    try {\n      const lstat: FileSystemStats = FileSystem.getLinkStatistics(directoryPath);\n      exists = lstat.isDirectory();\n    } catch (e) {\n      /* no-op */\n    }\n\n    return exists;\n  }\n\n  /**\n   * BE VERY CAREFUL CALLING THIS FUNCTION!\n   * If you specify the wrong folderPath (e.g. \"/\"), it could potentially delete your entire\n   * hard disk.\n   */\n  public static dangerouslyDeletePath(folderPath: string): void {\n    try {\n      FileSystem.deleteFolder(folderPath);\n    } catch (e) {\n      throw new Error(\n        `${(e as Error).message}\\nOften this is caused by a file lock from a process ` +\n          'such as your text editor, command prompt, or a filesystem watcher'\n      );\n    }\n  }\n\n  /*\n   * Returns true if dateToCompare is more recent than all of the inputFilenames, which\n   * would imply that we don't need to rebuild it. Returns false if any of the files\n   * does not exist.\n   * NOTE: The filenames can also be paths for directories, in which case the directory\n   * timestamp is compared.\n   */\n  public static async isFileTimestampCurrentAsync(\n    dateToCompare: Date,\n    inputFilePaths: string[]\n  ): Promise<boolean> {\n    let anyAreOutOfDate: boolean = false;\n    await Async.forEachAsync(\n      inputFilePaths,\n      async (filePath) => {\n        if (!anyAreOutOfDate) {\n          let inputStats: FileSystemStats | undefined;\n          try {\n            inputStats = await FileSystem.getStatisticsAsync(filePath);\n          } catch (e) {\n            if (FileSystem.isNotExistError(e)) {\n              // eslint-disable-next-line require-atomic-updates\n              anyAreOutOfDate = true;\n            } else {\n              throw e;\n            }\n          }\n\n          if (inputStats && dateToCompare < inputStats.mtime) {\n            // eslint-disable-next-line require-atomic-updates\n            anyAreOutOfDate = true;\n          }\n        }\n      },\n      { concurrency: 10 }\n    );\n\n    return !anyAreOutOfDate;\n  }\n\n  public static async executeCommandAsync(\n    options: IExecuteCommandOptions & { captureExitCodeAndSignal: true }\n  ): Promise<Pick<IWaitForExitResult, 'exitCode' | 'signal'>>;\n  public static async executeCommandAsync(options: IExecuteCommandOptions): Promise<void>;\n  /**\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\n   * The current directory will be set to the specified workingDirectory.\n   */\n  public static async executeCommandAsync({\n    command,\n    args,\n    workingDirectory,\n    suppressOutput,\n    onStdoutStreamChunk,\n    environment,\n    keepEnvironment,\n    captureExitCodeAndSignal\n  }: IExecuteCommandOptions): Promise<void | Pick<IWaitForExitResult, 'exitCode' | 'signal'>> {\n    const { exitCode, signal } = await Utilities._executeCommandInternalAsync({\n      command,\n      args,\n      workingDirectory,\n      stdio: onStdoutStreamChunk\n        ? // Inherit the stdin and stderr streams, but pipe the stdout stream, which will then be piped\n          // to the process's stdout after being intercepted by the onStdoutStreamChunk callback.\n          ['inherit', 'pipe', 'inherit']\n        : suppressOutput\n          ? // If the output is being suppressed, create pipes for all streams to prevent the child process\n            // from printing to the parent process's (this process's) stdout/stderr, but allow the stdout and\n            // stderr to be inspected if an error occurs.\n            // TODO: Consider ignoring stdout and stdin and only piping stderr for inspection on error.\n            ['pipe', 'pipe', 'pipe']\n          : // If the output is not being suppressed or intercepted, inherit all streams from the parent process.\n            ['inherit', 'inherit', 'inherit'],\n      environment,\n      keepEnvironment,\n      onStdoutStreamChunk,\n      captureOutput: false,\n      captureExitCodeAndSignal\n    });\n\n    if (captureExitCodeAndSignal) {\n      return { exitCode, signal };\n    }\n  }\n\n  /**\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\n   * The current directory will be set to the specified workingDirectory.\n   */\n  public static async executeCommandAndCaptureOutputAsync(\n    command: string,\n    args: string[],\n    workingDirectory: string,\n    environment?: IEnvironment,\n    keepEnvironment: boolean = false\n  ): Promise<string> {\n    const { stdout } = await Utilities._executeCommandInternalAsync({\n      command,\n      args,\n      workingDirectory,\n      stdio: ['pipe', 'pipe', 'pipe'],\n      environment,\n      keepEnvironment,\n      captureOutput: true\n    });\n\n    return stdout;\n  }\n\n  /**\n   * Attempts to run Utilities.executeCommand() up to maxAttempts times before giving up.\n   */\n  public static async executeCommandWithRetryAsync(\n    options: IExecuteCommandOptions,\n    maxAttempts: number,\n    retryCallback?: () => void\n  ): Promise<void> {\n    if (maxAttempts < 1) {\n      throw new Error('The maxAttempts parameter cannot be less than 1');\n    }\n\n    let attemptNumber: number = 1;\n\n    for (;;) {\n      try {\n        await Utilities.executeCommandAsync(options);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log('\\nThe command failed:');\n        const { command, args } = options;\n        // eslint-disable-next-line no-console\n        console.log(` ${command} ` + args.join(' '));\n        // eslint-disable-next-line no-console\n        console.log(`ERROR: ${(error as Error).toString()}`);\n\n        if (attemptNumber < maxAttempts) {\n          ++attemptNumber;\n          // eslint-disable-next-line no-console\n          console.log(`Trying again (attempt #${attemptNumber})...\\n`);\n          if (retryCallback) {\n            retryCallback();\n          }\n\n          continue;\n        } else {\n          // eslint-disable-next-line no-console\n          console.error(`Giving up after ${attemptNumber} attempts\\n`);\n          throw error;\n        }\n      }\n\n      break;\n    }\n  }\n\n  /**\n   * Executes the command using cmd if running on windows, or using sh if running on a non-windows OS.\n   * @param command - the command to run on shell\n   * @param options - options for how the command should be run\n   */\n  public static executeLifecycleCommand(command: string, options: ILifecycleCommandOptions): number {\n    const result: child_process.SpawnSyncReturns<string | Buffer> =\n      Utilities._executeLifecycleCommandInternal(command, child_process.spawnSync, options);\n\n    if (options.handleOutput) {\n      Utilities._processResult({\n        error: result.error,\n        status: result.status,\n        stderr: result.stderr.toString()\n      });\n    }\n\n    if (result.status !== null) {\n      return result.status;\n    } else {\n      throw result.error || new Error('An unknown error occurred.');\n    }\n  }\n\n  /**\n   * Executes the command using cmd if running on windows, or using sh if running on a non-windows OS.\n   * @param command - the command to run on shell\n   * @param options - options for how the command should be run\n   */\n  public static executeLifecycleCommandAsync(\n    command: string,\n    options: ILifecycleCommandOptions\n  ): child_process.ChildProcess {\n    const child: child_process.ChildProcess = Utilities._executeLifecycleCommandInternal(\n      command,\n      child_process.spawn,\n      options\n    );\n    if (options.connectSubprocessTerminator) {\n      SubprocessTerminator.killProcessTreeOnExit(child, SubprocessTerminator.RECOMMENDED_OPTIONS);\n    }\n    return child;\n  }\n\n  /**\n   * For strings passed to a shell command, this adds appropriate escaping\n   * to avoid misinterpretation of spaces or special characters.\n   *\n   * Example: 'hello there' --> '\"hello there\"'\n   */\n  public static escapeShellParameter(parameter: string): string {\n    // This approach is based on what NPM 7 now does:\n    // https://github.com/npm/run-script/blob/47a4d539fb07220e7215cc0e482683b76407ef9b/lib/run-script-pkg.js#L34\n    return JSON.stringify(parameter);\n  }\n\n  /**\n   * Installs a package by name and version in the specified directory.\n   */\n  public static async installPackageInDirectoryAsync({\n    packageName,\n    version,\n    tempPackageTitle,\n    commonRushConfigFolder,\n    maxInstallAttempts,\n    suppressOutput,\n    directory\n  }: IInstallPackageInDirectoryOptions): Promise<void> {\n    directory = path.resolve(directory);\n    const directoryExists: boolean = await FileSystem.existsAsync(directory);\n    if (directoryExists) {\n      // eslint-disable-next-line no-console\n      console.log('Deleting old files from ' + directory);\n    }\n\n    await FileSystem.ensureEmptyFolderAsync(directory);\n\n    const npmPackageJson: IPackageJson = {\n      dependencies: {\n        [packageName]: version\n      },\n      description: 'Temporary file generated by the Rush tool',\n      name: tempPackageTitle,\n      private: true,\n      version: '0.0.0'\n    };\n    await JsonFile.saveAsync(npmPackageJson, path.join(directory, FileConstants.PackageJson));\n\n    if (commonRushConfigFolder) {\n      Utilities.syncNpmrc({\n        sourceNpmrcFolder: commonRushConfigFolder,\n        targetNpmrcFolder: directory,\n        supportEnvVarFallbackSyntax: false\n      });\n    }\n\n    // eslint-disable-next-line no-console\n    console.log('\\nRunning \"npm install\" in ' + directory);\n\n    // NOTE: Here we use whatever version of NPM we happen to find in the PATH\n    await Utilities.executeCommandWithRetryAsync(\n      {\n        command: 'npm',\n        args: ['install'],\n        workingDirectory: directory,\n        environment: Utilities._createEnvironmentForRushCommand({}),\n        suppressOutput\n      },\n      maxInstallAttempts\n    );\n  }\n\n  /**\n   * Copies the file \"sourcePath\" to \"destinationPath\", overwriting the target file location.\n   * If the source file does not exist, then the target file is deleted.\n   */\n  public static syncFile(sourcePath: string, destinationPath: string): void {\n    if (FileSystem.exists(sourcePath)) {\n      // eslint-disable-next-line no-console\n      console.log(`Copying \"${sourcePath}\"`);\n      // eslint-disable-next-line no-console\n      console.log(`  --> \"${destinationPath}\"`);\n      FileSystem.copyFile({ sourcePath, destinationPath });\n    } else {\n      if (FileSystem.exists(destinationPath)) {\n        // If the source file doesn't exist and there is one in the target, delete the one in the target\n        // eslint-disable-next-line no-console\n        console.log(`Deleting ${destinationPath}`);\n        FileSystem.deleteFile(destinationPath);\n      }\n    }\n  }\n\n  public static getRushConfigNotFoundError(): Error {\n    return new Error(`Unable to find ${RushConstants.rushJsonFilename} configuration file`);\n  }\n\n  public static async usingAsync<TDisposable extends IDisposable>(\n    getDisposableAsync: () => Promise<TDisposable> | IDisposable,\n    doActionAsync: (disposable: TDisposable) => Promise<void> | void\n  ): Promise<void> {\n    let disposable: TDisposable | undefined;\n    try {\n      disposable = (await getDisposableAsync()) as TDisposable;\n      await doActionAsync(disposable);\n    } finally {\n      disposable?.dispose();\n    }\n  }\n\n  public static trimAfterLastSlash(filePath: string): string {\n    const indexOfLastSlash: number = Math.max(filePath.lastIndexOf('/'), filePath.lastIndexOf('\\\\'));\n    if (indexOfLastSlash < 0) {\n      return filePath;\n    }\n    return filePath.substring(0, indexOfLastSlash);\n  }\n\n  /**\n   * If the path refers to a symlink, `FileSystem.exists()` would normally test whether the symlink\n   * points to a target that exists. By contrast, `existsOrIsBrokenSymlink()` will return true even if\n   * the symlink exists but its target does not. */\n  public static existsOrIsSymlink(linkPath: string): boolean {\n    try {\n      FileSystem.getLinkStatistics(linkPath);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  private static _executeLifecycleCommandInternal<TCommandResult>(\n    command: string,\n    spawnFunction: (\n      command: string,\n      args: string[],\n      spawnOptions: child_process.SpawnOptions\n    ) => TCommandResult,\n    options: ILifecycleCommandOptions\n  ): TCommandResult {\n    let shellCommand: string = process.env.comspec || 'cmd';\n    let commandFlags: string = '/d /s /c';\n    let useShell: boolean = true;\n    if (process.platform !== 'win32') {\n      shellCommand = 'sh';\n      commandFlags = '-c';\n      useShell = false;\n    }\n\n    const environment: IEnvironment = Utilities._createEnvironmentForRushCommand({\n      initCwd: options.initCwd,\n      initialEnvironment: options.initialEnvironment,\n      pathOptions: {\n        ...options.environmentPathOptions,\n        rushJsonFolder: options.rushConfiguration?.rushJsonFolder,\n        projectRoot: options.workingDirectory,\n        commonTempFolder: options.rushConfiguration ? options.rushConfiguration.commonTempFolder : undefined\n      }\n    });\n\n    const stdio: child_process.StdioOptions = options.handleOutput ? ['pipe', 'pipe', 'pipe'] : [0, 1, 2];\n    if (options.ipc) {\n      stdio.push('ipc');\n    }\n\n    const spawnOptions: child_process.SpawnOptions = {\n      cwd: options.workingDirectory,\n      shell: useShell,\n      env: environment,\n      stdio\n    };\n\n    if (options.connectSubprocessTerminator) {\n      Object.assign(spawnOptions, SubprocessTerminator.RECOMMENDED_OPTIONS);\n    }\n\n    return spawnFunction(shellCommand, [commandFlags, command], spawnOptions);\n  }\n\n  /**\n   * Returns a process.env environment suitable for executing lifecycle scripts.\n   * @param initialEnvironment - an existing environment to copy instead of process.env\n   *\n   * @remarks\n   * Rush._assignRushInvokedFolder() assigns the `RUSH_INVOKED_FOLDER` variable globally\n   * via the parent process's environment.\n   */\n  private static _createEnvironmentForRushCommand(\n    options: ICreateEnvironmentForRushCommandOptions\n  ): IEnvironment {\n    if (options.initialEnvironment === undefined) {\n      options.initialEnvironment = process.env;\n    }\n\n    // Set some defaults for the environment\n    const environment: IEnvironment = {};\n    if (options.pathOptions?.rushJsonFolder) {\n      environment.RUSHSTACK_FILE_ERROR_BASE_FOLDER = options.pathOptions.rushJsonFolder;\n    }\n\n    for (const key of Object.getOwnPropertyNames(options.initialEnvironment)) {\n      const normalizedKey: string = os.platform() === 'win32' ? key.toUpperCase() : key;\n\n      // If Rush itself was invoked inside a lifecycle script, this may be set and would interfere\n      // with Rush's installations.  If we actually want it, we will set it explicitly below.\n      if (normalizedKey === 'INIT_CWD') {\n        continue;\n      }\n\n      // When NPM invokes a lifecycle event, it copies its entire configuration into environment\n      // variables.  Rush is supposed to be a deterministic controlled environment, so don't bring\n      // this along.\n      //\n      // NOTE: Longer term we should clean out the entire environment and use rush.json to bring\n      // back specific environment variables that the repo maintainer has determined to be safe.\n      if (normalizedKey.match(/^NPM_CONFIG_/)) {\n        continue;\n      }\n\n      // Use the uppercased environment variable name on Windows because environment variable names\n      // are case-insensitive on Windows\n      environment[normalizedKey] = options.initialEnvironment[key];\n    }\n\n    // When NPM invokes a lifecycle script, it sets an environment variable INIT_CWD that remembers\n    // the directory that NPM started in.  This allows naive scripts to change their current working directory\n    // and invoke NPM operations, while still be able to find a local .npmrc file.  Although Rush recommends\n    // for toolchain scripts to be professionally written (versus brittle stuff like\n    // \"cd ./lib && npm run tsc && cd ..\"), we support INIT_CWD for compatibility.\n    //\n    // More about this feature: https://github.com/npm/npm/pull/12356\n    if (options.initCwd) {\n      environment['INIT_CWD'] = options.initCwd; // eslint-disable-line dot-notation\n    }\n\n    if (options.pathOptions) {\n      if (options.pathOptions.includeRepoBin && options.pathOptions.commonTempFolder) {\n        environment.PATH = Utilities._prependNodeModulesBinToPath(\n          environment.PATH,\n          options.pathOptions.commonTempFolder\n        );\n      }\n\n      if (options.pathOptions.includeProjectBin && options.pathOptions.projectRoot) {\n        environment.PATH = Utilities._prependNodeModulesBinToPath(\n          environment.PATH,\n          options.pathOptions.projectRoot\n        );\n      }\n\n      if (options.pathOptions.additionalPathFolders) {\n        environment.PATH = [...options.pathOptions.additionalPathFolders, environment.PATH].join(\n          path.delimiter\n        );\n      }\n    }\n\n    // Communicate to downstream calls that they should not try to run hooks\n    environment[EnvironmentVariableNames._RUSH_RECURSIVE_RUSHX_CALL] = '1';\n\n    return environment;\n  }\n\n  /**\n   * Prepend the node_modules/.bin folder under the specified folder to the specified PATH variable. For example,\n   * if `rootDirectory` is \"/foobar\" and `existingPath` is \"/bin\", this function will return\n   * \"/foobar/node_modules/.bin:/bin\"\n   */\n  private static _prependNodeModulesBinToPath(\n    existingPath: string | undefined,\n    rootDirectory: string\n  ): string {\n    const binPath: string = path.resolve(rootDirectory, 'node_modules', '.bin');\n    if (existingPath) {\n      return `${binPath}${path.delimiter}${existingPath}`;\n    } else {\n      return binPath;\n    }\n  }\n\n  /**\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\n   * The current directory will be set to the specified workingDirectory.\n   */\n  private static async _executeCommandInternalAsync({\n    command,\n    args,\n    workingDirectory,\n    stdio,\n    environment,\n    keepEnvironment,\n    onStdoutStreamChunk,\n    captureOutput,\n    captureExitCodeAndSignal\n  }: Omit<IExecuteCommandOptions, 'suppressOutput'> & {\n    stdio: child_process.SpawnSyncOptions['stdio'];\n    captureOutput: boolean;\n  }): Promise<IWaitForExitResult> {\n    const options: child_process.SpawnSyncOptions = {\n      cwd: workingDirectory,\n      shell: true,\n      stdio: stdio,\n      env: keepEnvironment\n        ? environment\n        : Utilities._createEnvironmentForRushCommand({ initialEnvironment: environment }),\n      maxBuffer: 10 * 1024 * 1024 // Set default max buffer size to 10MB\n    };\n\n    // This is needed since we specify shell=true below.\n    // NOTE: On Windows if we escape \"NPM\", the spawnSync() function runs something like this:\n    //   [ 'C:\\\\Windows\\\\system32\\\\cmd.exe', '/s', '/c', '\"\"NPM\" \"install\"\"' ]\n    //\n    // Due to a bug with Windows cmd.exe, the npm.cmd batch file's \"%~dp0\" variable will\n    // return the current working directory instead of the batch file's directory.\n    // The workaround is to not escape, npm, i.e. do this instead:\n    //   [ 'C:\\\\Windows\\\\system32\\\\cmd.exe', '/s', '/c', '\"npm \"install\"\"' ]\n    //\n    // We will come up with a better solution for this when we promote executeCommand()\n    // into node-core-library, but for now this hack will unblock people:\n\n    // Only escape the command if it actually contains spaces:\n    const escapedCommand: string =\n      command.indexOf(' ') < 0 ? command : Utilities.escapeShellParameter(command);\n\n    const escapedArgs: string[] = args.map((x) => Utilities.escapeShellParameter(x));\n\n    const childProcess: child_process.ChildProcess = child_process.spawn(\n      escapedCommand,\n      escapedArgs,\n      options\n    );\n\n    if (onStdoutStreamChunk) {\n      const inspectStream: Transform = new Transform({\n        transform: onStdoutStreamChunk\n          ? (\n              chunk: string | Buffer,\n              encoding: BufferEncoding,\n              callback: (error?: Error, data?: string | Buffer) => void\n            ) => {\n              const chunkString: string = chunk.toString();\n              const updatedChunk: string | void = onStdoutStreamChunk(chunkString);\n              callback(undefined, updatedChunk ?? chunk);\n            }\n          : undefined\n      });\n\n      childProcess.stdout?.pipe(inspectStream).pipe(process.stdout);\n    }\n\n    return await Executable.waitForExitAsync(childProcess, {\n      encoding: captureOutput ? 'utf8' : undefined,\n      throwOnNonZeroExitCode: !captureExitCodeAndSignal,\n      throwOnSignal: !captureExitCodeAndSignal\n    });\n  }\n\n  private static _processResult({\n    error,\n    stderr,\n    status\n  }: {\n    error: Error | undefined;\n    stderr: string;\n    status: number | null;\n  }): void {\n    if (error) {\n      error.message += `\\n${stderr}`;\n      if (status) {\n        error.message += `\\nExited with status ${status}`;\n      }\n\n      throw error;\n    }\n\n    if (status) {\n      throw new Error(`The command failed with exit code ${status}\\n${stderr}`);\n    }\n  }\n}\n"]}