{"version":3,"file":"Stopwatch.js","sourceRoot":"","sources":["../../src/utilities/Stopwatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { Utilities } from './Utilities';\n\n/**\n * Used with the Stopwatch class.\n */\nexport enum StopwatchState {\n  Stopped = 1,\n  Started = 2\n}\n\n/**\n * Represents a readonly view of a `Stopwatch`.\n * @beta\n */\nexport interface IStopwatchResult {\n  /**\n   * Displays how long the stopwatch has been executing in a human readable format.\n   */\n  toString(): string;\n  /**\n   * Get the duration in seconds.\n   */\n  get duration(): number;\n  /**\n   * Return the start time of the most recent stopwatch run.\n   */\n  get startTime(): number | undefined;\n  /**\n   * Return the end time of the most recent stopwatch run.\n   */\n  get endTime(): number | undefined;\n}\n\n/**\n * Represents a typical timer/stopwatch which keeps track\n * of elapsed time in between two events.\n */\nexport class Stopwatch implements IStopwatchResult {\n  private _startTime: number | undefined;\n  private _endTime: number | undefined;\n  private _state: StopwatchState;\n\n  private _getTime: () => number;\n\n  public constructor(getTime: () => number = Utilities.getTimeInMs) {\n    this._startTime = undefined;\n    this._endTime = undefined;\n    this._getTime = getTime;\n    this._state = StopwatchState.Stopped;\n  }\n\n  /**\n   * Static helper function which creates a stopwatch which is immediately started\n   */\n  public static start(): Stopwatch {\n    return new Stopwatch().start();\n  }\n\n  public get state(): StopwatchState {\n    return this._state;\n  }\n\n  /**\n   * Starts the stopwatch. Note that if end() has been called,\n   * reset() should be called before calling start() again.\n   */\n  public start(): Stopwatch {\n    if (this._startTime !== undefined) {\n      throw new Error('Call reset() before starting the Stopwatch');\n    }\n    this._startTime = this._getTime();\n    this._endTime = undefined;\n    this._state = StopwatchState.Started;\n    return this;\n  }\n\n  /**\n   * Stops executing the stopwatch and saves the current timestamp\n   */\n  public stop(): Stopwatch {\n    this._endTime = this._startTime !== undefined ? this._getTime() : undefined;\n    this._state = StopwatchState.Stopped;\n    return this;\n  }\n\n  /**\n   * Resets all values of the stopwatch back to the original\n   */\n  public reset(): Stopwatch {\n    this._endTime = this._startTime = undefined;\n    this._state = StopwatchState.Stopped;\n    return this;\n  }\n\n  /**\n   * Displays how long the stopwatch has been executing in a human readable format.\n   */\n  public toString(): string {\n    if (this._state === StopwatchState.Stopped && this._startTime === undefined) {\n      return '0.00 seconds (stopped)';\n    }\n    const totalSeconds: number = this.duration;\n\n    if (totalSeconds > 60) {\n      const minutes: number = Math.floor(totalSeconds / 60);\n      const seconds: number = totalSeconds % 60.0;\n\n      return `${minutes.toFixed(0)} minute${minutes === 1 ? '' : 's'} ${seconds.toFixed(1)} seconds`;\n    } else {\n      return `${totalSeconds.toFixed(2)} seconds`;\n    }\n  }\n\n  /**\n   * Get the duration in seconds.\n   */\n  public get duration(): number {\n    if (this._startTime === undefined) {\n      return 0;\n    }\n    const curTime: number = this._endTime !== undefined ? this._endTime : this._getTime();\n\n    return (curTime - this._startTime) / 1000.0;\n  }\n\n  /**\n   * Return the start time of the most recent stopwatch run.\n   */\n  public get startTime(): number | undefined {\n    return this._startTime;\n  }\n\n  /**\n   * Return the end time of the most recent stopwatch run.\n   */\n  public get endTime(): number | undefined {\n    return this._endTime;\n  }\n}\n"]}