{"version":3,"file":"PluginLoaderBase.js","sourceRoot":"","sources":["../../../src/pluginFramework/PluginLoader/PluginLoaderBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport {\n  FileSystem,\n  InternalError,\n  JsonFile,\n  type JsonObject,\n  JsonSchema\n} from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\nimport * as path from 'path';\n\nimport { CommandLineConfiguration } from '../../api/CommandLineConfiguration';\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { IRushPluginConfigurationBase } from '../../api/RushPluginsConfiguration';\nimport { RushConstants } from '../../logic/RushConstants';\nimport type { IRushPlugin } from '../IRushPlugin';\nimport { RushSdk } from './RushSdk';\nimport schemaJson from '../../schemas/rush-plugin-manifest.schema.json';\n\nexport interface IRushPluginManifest {\n  pluginName: string;\n  description: string;\n  entryPoint?: string;\n  optionsSchema?: string;\n  associatedCommands?: string[];\n  commandLineJsonFilePath?: string;\n}\n\nexport interface IRushPluginManifestJson {\n  plugins: IRushPluginManifest[];\n}\n\nexport interface IPluginLoaderOptions<TPluginConfiguration extends IRushPluginConfigurationBase> {\n  pluginConfiguration: TPluginConfiguration;\n  rushConfiguration: RushConfiguration;\n  terminal: ITerminal;\n}\n\nexport abstract class PluginLoaderBase<\n  TPluginConfiguration extends IRushPluginConfigurationBase = IRushPluginConfigurationBase\n> {\n  protected static _jsonSchema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  public readonly packageName: Readonly<string>;\n  public readonly pluginName: Readonly<string>;\n  protected readonly _rushConfiguration: RushConfiguration;\n  protected readonly _terminal: ITerminal;\n\n  protected _manifestCache: Readonly<IRushPluginManifest> | undefined;\n\n  /**\n   * The folder that should be used for resolving the plugin's NPM package.\n   */\n  public abstract readonly packageFolder: string;\n\n  public constructor({\n    pluginConfiguration,\n    rushConfiguration,\n    terminal\n  }: IPluginLoaderOptions<TPluginConfiguration>) {\n    this.packageName = pluginConfiguration.packageName;\n    this.pluginName = pluginConfiguration.pluginName;\n    this._rushConfiguration = rushConfiguration;\n    this._terminal = terminal;\n  }\n\n  public load(): IRushPlugin | undefined {\n    const resolvedPluginPath: string | undefined = this._resolvePlugin();\n    if (!resolvedPluginPath) {\n      return undefined;\n    }\n    const pluginOptions: JsonObject = this._getPluginOptions();\n\n    RushSdk.ensureInitialized();\n\n    return this._loadAndValidatePluginPackage(resolvedPluginPath, pluginOptions);\n  }\n\n  public get pluginManifest(): IRushPluginManifest {\n    return this._getRushPluginManifest();\n  }\n\n  public getCommandLineConfiguration(): CommandLineConfiguration | undefined {\n    const commandLineJsonFilePath: string | undefined = this._getCommandLineJsonFilePath();\n    if (!commandLineJsonFilePath) {\n      return undefined;\n    }\n    const commandLineConfiguration: CommandLineConfiguration | undefined =\n      CommandLineConfiguration.tryLoadFromFile(commandLineJsonFilePath);\n    if (!commandLineConfiguration) {\n      return undefined;\n    }\n\n    for (const additionalPathFolder of this._getCommandLineAdditionalPathFolders().reverse()) {\n      commandLineConfiguration.prependAdditionalPathFolder(additionalPathFolder);\n    }\n\n    commandLineConfiguration.shellCommandTokenContext = {\n      packageFolder: this.packageFolder\n    };\n    return commandLineConfiguration;\n  }\n\n  protected _getCommandLineAdditionalPathFolders(): string[] {\n    return [\n      // Example: `@microsoft/rush-lib/node_modules/<packageName>/node_modules/.bin`\n      // Example: `common/autoinstaller/plugins/node_modules/<packageName>/node_modules/.bin`\n      path.join(this.packageFolder, 'node_modules', '.bin')\n    ];\n  }\n\n  protected _getCommandLineJsonFilePath(): string | undefined {\n    const { commandLineJsonFilePath } = this._getRushPluginManifest();\n    if (!commandLineJsonFilePath) {\n      return undefined;\n    }\n    return path.join(this.packageFolder, commandLineJsonFilePath);\n  }\n\n  private _loadAndValidatePluginPackage(resolvedPluginPath: string, options?: JsonObject): IRushPlugin {\n    type IRushPluginCtor<T = JsonObject> = new (opts: T) => IRushPlugin;\n    let pluginPackage: IRushPluginCtor;\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const loadedPluginPackage: IRushPluginCtor | { default: IRushPluginCtor } = require(resolvedPluginPath);\n      pluginPackage = (loadedPluginPackage as { default: IRushPluginCtor }).default || loadedPluginPackage;\n    } catch (e) {\n      throw new InternalError(`Error loading rush plugin from \"${resolvedPluginPath}\": ${e}`);\n    }\n\n    if (!pluginPackage) {\n      throw new InternalError(`Rush plugin loaded from \"${resolvedPluginPath}\" is null or undefined.`);\n    }\n\n    this._terminal.writeVerboseLine(`Loaded rush plugin from \"${resolvedPluginPath}\"`);\n\n    const plugin: IRushPlugin = new pluginPackage(options);\n\n    if (!plugin.apply || typeof pluginPackage.apply !== 'function') {\n      throw new InternalError(\n        `Rush plugin must define an \"apply\" function. The plugin loaded from \"${resolvedPluginPath}\" ` +\n          'either doesn\\'t define an \"apply\" property, or its value isn\\'t a function.'\n      );\n    }\n\n    return plugin;\n  }\n\n  private _resolvePlugin(): string | undefined {\n    const entryPoint: string | undefined = this._getRushPluginManifest().entryPoint;\n    if (!entryPoint) {\n      return undefined;\n    }\n    const packageFolder: string = this.packageFolder;\n    const modulePath: string = path.join(packageFolder, entryPoint);\n    if (!FileSystem.exists(modulePath)) {\n      throw new InternalError(\n        `Unable to find entry point \"${modulePath}\" for rush plugin \"${this.pluginName}\".`\n      );\n    }\n    return modulePath;\n  }\n\n  protected _getPluginOptions(): JsonObject {\n    const optionsJsonFilePath: string = this._getPluginOptionsJsonFilePath();\n    const optionsSchema: JsonSchema | undefined = this._getRushPluginOptionsSchema();\n\n    let pluginOptions: JsonObject = {};\n    try {\n      pluginOptions = JsonFile.load(optionsJsonFilePath);\n    } catch (e) {\n      if (FileSystem.isFileDoesNotExistError(e as Error)) {\n        return {};\n      }\n      throw e;\n    }\n\n    if (optionsSchema) {\n      optionsSchema.validateObject(pluginOptions, optionsJsonFilePath);\n    }\n\n    return pluginOptions;\n  }\n\n  protected _getPluginOptionsJsonFilePath(): string {\n    return path.join(this._rushConfiguration.rushPluginOptionsFolder, `${this.pluginName}.json`);\n  }\n\n  protected _getRushPluginOptionsSchema(): JsonSchema | undefined {\n    const optionsSchema: string | undefined = this._getRushPluginManifest().optionsSchema;\n    if (!optionsSchema) {\n      return undefined;\n    }\n    const optionsSchemaFilePath: string = path.join(this.packageFolder, optionsSchema);\n    return JsonSchema.fromFile(optionsSchemaFilePath);\n  }\n\n  private _getRushPluginManifest(): IRushPluginManifest {\n    if (!this._manifestCache) {\n      const packageName: string = this.packageName;\n      const pluginName: string = this.pluginName;\n\n      const manifestPath: string = this._getManifestPath();\n\n      if (!FileSystem.exists(manifestPath)) {\n        throw new Error(\n          `Manifest for rush plugin package ${packageName} not found.\\nPlease run 'rush update' first.`\n        );\n      }\n\n      const rushPluginManifestJson: IRushPluginManifestJson = JsonFile.loadAndValidate(\n        manifestPath,\n        PluginLoaderBase._jsonSchema\n      );\n\n      const pluginManifest: IRushPluginManifest | undefined = rushPluginManifestJson.plugins.find(\n        (item) => item.pluginName === pluginName\n      );\n      if (!pluginManifest) {\n        throw new Error(`${pluginName} is not provided by Rush plugin package \"${packageName}\"`);\n      }\n\n      this._manifestCache = pluginManifest;\n    }\n\n    return this._manifestCache;\n  }\n\n  protected _getManifestPath(): string {\n    return path.join(this.packageFolder, RushConstants.rushPluginManifestFilename);\n  }\n}\n"]}