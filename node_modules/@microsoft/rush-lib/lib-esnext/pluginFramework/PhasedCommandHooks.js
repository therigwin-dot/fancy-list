// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { AsyncParallelHook, AsyncSeriesBailHook, AsyncSeriesHook, AsyncSeriesWaterfallHook, SyncHook, SyncWaterfallHook } from 'tapable';
/**
 * Hooks into the execution process for phased commands
 * @alpha
 */
export class PhasedCommandHooks {
    constructor() {
        /**
         * Hook invoked to create operations for execution.
         * Use the context to distinguish between the initial run and phased runs.
         */
        this.createOperations = new AsyncSeriesWaterfallHook(['operations', 'context'], 'createOperations');
        /**
         * Hook invoked before operation start
         * Hook is series for stable output.
         */
        this.beforeExecuteOperations = new AsyncSeriesHook(['records', 'context']);
        /**
         * Hook invoked when operation status changed
         * Hook is series for stable output.
         */
        this.onOperationStatusChanged = new SyncHook(['record']);
        /**
         * Hook invoked after executing a set of operations.
         * Use the context to distinguish between the initial run and phased runs.
         * Hook is series for stable output.
         */
        this.afterExecuteOperations = new AsyncSeriesHook(['results', 'context']);
        /**
         * Hook invoked before executing a operation.
         */
        this.beforeExecuteOperation = new AsyncSeriesBailHook(['runnerContext'], 'beforeExecuteOperation');
        /**
         * Hook invoked to define environment variables for an operation.
         * May be invoked by the runner to get the environment for the operation.
         */
        this.createEnvironmentForOperation = new SyncWaterfallHook(['environment', 'runnerContext'], 'createEnvironmentForOperation');
        /**
         * Hook invoked after executing a operation.
         */
        this.afterExecuteOperation = new AsyncSeriesHook(['runnerContext'], 'afterExecuteOperation');
        /**
         * Hook invoked to shutdown long-lived work in plugins.
         */
        this.shutdownAsync = new AsyncParallelHook(undefined, 'shutdown');
        /**
         * Hook invoked after a run has finished and the command is watching for changes.
         * May be used to display additional relevant data to the user.
         * Only relevant when running in watch mode.
         */
        this.waitingForChanges = new SyncHook(undefined, 'waitingForChanges');
        /**
         * Hook invoked after executing operations and before waitingForChanges. Allows the caller
         * to augment or modify the log entry about to be written.
         */
        this.beforeLog = new SyncHook(['telemetryData'], 'beforeLog');
    }
}
//# sourceMappingURL=PhasedCommandHooks.js.map