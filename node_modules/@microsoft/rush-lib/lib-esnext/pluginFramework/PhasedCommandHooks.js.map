{"version":3,"file":"PhasedCommandHooks.js","sourceRoot":"","sources":["../../src/pluginFramework/PhasedCommandHooks.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,EACL,iBAAiB,EACjB,mBAAmB,EACnB,eAAe,EACf,wBAAwB,EACxB,QAAQ,EACR,iBAAiB,EAClB,MAAM,SAAS,CAAC;AAmHjB;;;GAGG;AACH,MAAM,OAAO,kBAAkB;IAA/B;QACE;;;WAGG;QACa,qBAAgB,GAC9B,IAAI,wBAAwB,CAAC,CAAC,YAAY,EAAE,SAAS,CAAC,EAAE,kBAAkB,CAAC,CAAC;QAE9E;;;WAGG;QACa,4BAAuB,GAEnC,IAAI,eAAe,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAEhD;;;WAGG;QACa,6BAAwB,GAA0C,IAAI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE3G;;;;WAIG;QACa,2BAAsB,GACpC,IAAI,eAAe,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAE9C;;WAEG;QACa,2BAAsB,GAGlC,IAAI,mBAAmB,CAAC,CAAC,eAAe,CAAC,EAAE,wBAAwB,CAAC,CAAC;QAEzE;;;WAGG;QACa,kCAA6B,GAEzC,IAAI,iBAAiB,CAAC,CAAC,aAAa,EAAE,eAAe,CAAC,EAAE,+BAA+B,CAAC,CAAC;QAE7F;;WAEG;QACa,0BAAqB,GAEjC,IAAI,eAAe,CAAC,CAAC,eAAe,CAAC,EAAE,uBAAuB,CAAC,CAAC;QAEpE;;WAEG;QACa,kBAAa,GAA4B,IAAI,iBAAiB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAEtG;;;;WAIG;QACa,sBAAiB,GAAmB,IAAI,QAAQ,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;QAEjG;;;WAGG;QACa,cAAS,GAAmC,IAAI,QAAQ,CAAC,CAAC,eAAe,CAAC,EAAE,WAAW,CAAC,CAAC;IAC3G,CAAC;CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport {\n  AsyncParallelHook,\n  AsyncSeriesBailHook,\n  AsyncSeriesHook,\n  AsyncSeriesWaterfallHook,\n  SyncHook,\n  SyncWaterfallHook\n} from 'tapable';\nimport type { CommandLineParameter } from '@rushstack/ts-command-line';\n\nimport type { BuildCacheConfiguration } from '../api/BuildCacheConfiguration';\nimport type { IPhase } from '../api/CommandLineConfiguration';\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport type { Operation } from '../logic/operations/Operation';\nimport type {\n  IExecutionResult,\n  IOperationExecutionResult\n} from '../logic/operations/IOperationExecutionResult';\nimport type { CobuildConfiguration } from '../api/CobuildConfiguration';\nimport type { RushProjectConfiguration } from '../api/RushProjectConfiguration';\nimport type { IOperationRunnerContext } from '../logic/operations/IOperationRunner';\nimport type { ITelemetryData } from '../logic/Telemetry';\nimport type { OperationStatus } from '../logic/operations/OperationStatus';\nimport type { IInputsSnapshot } from '../logic/incremental/InputsSnapshot';\nimport type { IEnvironment } from '../utilities/Utilities';\n\n/**\n * A plugin that interacts with a phased commands.\n * @alpha\n */\nexport interface IPhasedCommandPlugin {\n  /**\n   * Applies this plugin.\n   */\n  apply(hooks: PhasedCommandHooks): void;\n}\n\n/**\n * Context used for creating operations to be executed.\n * @alpha\n */\nexport interface ICreateOperationsContext {\n  /**\n   * The configuration for the build cache, if the feature is enabled.\n   */\n  readonly buildCacheConfiguration: BuildCacheConfiguration | undefined;\n  /**\n   * The configuration for the cobuild, if cobuild feature and build cache feature are both enabled.\n   */\n  readonly cobuildConfiguration: CobuildConfiguration | undefined;\n  /**\n   * The set of custom parameters for the executing command.\n   * Maps from the `longName` field in command-line.json to the parser configuration in ts-command-line.\n   */\n  readonly customParameters: ReadonlyMap<string, CommandLineParameter>;\n  /**\n   * If true, projects may read their output from cache or be skipped if already up to date.\n   * If false, neither of the above may occur, e.g. \"rush rebuild\"\n   */\n  readonly isIncrementalBuildAllowed: boolean;\n  /**\n   * If true, this is the initial run of the command.\n   * If false, this execution is in response to changes.\n   */\n  readonly isInitial: boolean;\n  /**\n   * If true, the command is running in watch mode.\n   */\n  readonly isWatch: boolean;\n  /**\n   * The set of phases original for the current command execution.\n   */\n  readonly phaseOriginal: ReadonlySet<IPhase>;\n  /**\n   * The set of phases selected for the current command execution.\n   */\n  readonly phaseSelection: ReadonlySet<IPhase>;\n  /**\n   * The set of Rush projects selected for the current command execution.\n   */\n  readonly projectSelection: ReadonlySet<RushConfigurationProject>;\n  /**\n   * All successfully loaded rush-project.json data for selected projects.\n   */\n  readonly projectConfigurations: ReadonlyMap<RushConfigurationProject, RushProjectConfiguration>;\n  /**\n   * The set of Rush projects that have not been built in the current process since they were last modified.\n   * When `isInitial` is true, this will be an exact match of `projectSelection`.\n   */\n  readonly projectsInUnknownState: ReadonlySet<RushConfigurationProject>;\n  /**\n   * The Rush configuration\n   */\n  readonly rushConfiguration: RushConfiguration;\n  /**\n   * If true, Rush will automatically include the dependent phases for the specified set of phases.\n   * @remarks\n   * If the selection of projects was \"unsafe\" (i.e. missing some dependencies), this will add the\n   * minimum number of phases required to make it safe.\n   */\n  readonly includePhaseDeps: boolean;\n  /**\n   * Marks an operation's result as invalid, potentially triggering a new build. Only applicable in watch mode.\n   * @param operation - The operation to invalidate\n   * @param reason - The reason for invalidating the operation\n   */\n  readonly invalidateOperation?: ((operation: Operation, reason: string) => void) | undefined;\n}\n\n/**\n * Context used for executing operations.\n * @alpha\n */\nexport interface IExecuteOperationsContext extends ICreateOperationsContext {\n  /**\n   * The current state of the repository, if available.\n   * Not part of the creation context to avoid the overhead of Git calls when initializing the graph.\n   */\n  readonly inputsSnapshot?: IInputsSnapshot;\n}\n\n/**\n * Hooks into the execution process for phased commands\n * @alpha\n */\nexport class PhasedCommandHooks {\n  /**\n   * Hook invoked to create operations for execution.\n   * Use the context to distinguish between the initial run and phased runs.\n   */\n  public readonly createOperations: AsyncSeriesWaterfallHook<[Set<Operation>, ICreateOperationsContext]> =\n    new AsyncSeriesWaterfallHook(['operations', 'context'], 'createOperations');\n\n  /**\n   * Hook invoked before operation start\n   * Hook is series for stable output.\n   */\n  public readonly beforeExecuteOperations: AsyncSeriesHook<\n    [Map<Operation, IOperationExecutionResult>, IExecuteOperationsContext]\n  > = new AsyncSeriesHook(['records', 'context']);\n\n  /**\n   * Hook invoked when operation status changed\n   * Hook is series for stable output.\n   */\n  public readonly onOperationStatusChanged: SyncHook<[IOperationExecutionResult]> = new SyncHook(['record']);\n\n  /**\n   * Hook invoked after executing a set of operations.\n   * Use the context to distinguish between the initial run and phased runs.\n   * Hook is series for stable output.\n   */\n  public readonly afterExecuteOperations: AsyncSeriesHook<[IExecutionResult, IExecuteOperationsContext]> =\n    new AsyncSeriesHook(['results', 'context']);\n\n  /**\n   * Hook invoked before executing a operation.\n   */\n  public readonly beforeExecuteOperation: AsyncSeriesBailHook<\n    [IOperationRunnerContext & IOperationExecutionResult],\n    OperationStatus | undefined\n  > = new AsyncSeriesBailHook(['runnerContext'], 'beforeExecuteOperation');\n\n  /**\n   * Hook invoked to define environment variables for an operation.\n   * May be invoked by the runner to get the environment for the operation.\n   */\n  public readonly createEnvironmentForOperation: SyncWaterfallHook<\n    [IEnvironment, IOperationRunnerContext & IOperationExecutionResult]\n  > = new SyncWaterfallHook(['environment', 'runnerContext'], 'createEnvironmentForOperation');\n\n  /**\n   * Hook invoked after executing a operation.\n   */\n  public readonly afterExecuteOperation: AsyncSeriesHook<\n    [IOperationRunnerContext & IOperationExecutionResult]\n  > = new AsyncSeriesHook(['runnerContext'], 'afterExecuteOperation');\n\n  /**\n   * Hook invoked to shutdown long-lived work in plugins.\n   */\n  public readonly shutdownAsync: AsyncParallelHook<void> = new AsyncParallelHook(undefined, 'shutdown');\n\n  /**\n   * Hook invoked after a run has finished and the command is watching for changes.\n   * May be used to display additional relevant data to the user.\n   * Only relevant when running in watch mode.\n   */\n  public readonly waitingForChanges: SyncHook<void> = new SyncHook(undefined, 'waitingForChanges');\n\n  /**\n   * Hook invoked after executing operations and before waitingForChanges. Allows the caller\n   * to augment or modify the log entry about to be written.\n   */\n  public readonly beforeLog: SyncHook<ITelemetryData, void> = new SyncHook(['telemetryData'], 'beforeLog');\n}\n"]}