{"version":3,"file":"PluginManager.js","sourceRoot":"","sources":["../../src/pluginFramework/PluginManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, Import, InternalError } from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\n\nimport type { CommandLineConfiguration } from '../api/CommandLineConfiguration';\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport { BuiltInPluginLoader, type IBuiltInPluginConfiguration } from './PluginLoader/BuiltInPluginLoader';\nimport type { IRushPlugin } from './IRushPlugin';\nimport { AutoinstallerPluginLoader } from './PluginLoader/AutoinstallerPluginLoader';\nimport type { RushSession } from './RushSession';\nimport type { PluginLoaderBase } from './PluginLoader/PluginLoaderBase';\nimport { Rush } from '../api/Rush';\nimport type { RushGlobalFolder } from '../api/RushGlobalFolder';\n\nexport interface IPluginManagerOptions {\n  terminal: ITerminal;\n  rushConfiguration: RushConfiguration;\n  rushSession: RushSession;\n  builtInPluginConfigurations: IBuiltInPluginConfiguration[];\n  restrictConsoleOutput: boolean;\n  rushGlobalFolder: RushGlobalFolder;\n}\n\nexport interface ICustomCommandLineConfigurationInfo {\n  commandLineConfiguration: CommandLineConfiguration;\n  pluginLoader: PluginLoaderBase;\n}\n\nexport class PluginManager {\n  private readonly _terminal: ITerminal;\n  private readonly _rushConfiguration: RushConfiguration;\n  private readonly _rushSession: RushSession;\n  private readonly _restrictConsoleOutput: boolean;\n  private readonly _builtInPluginLoaders: BuiltInPluginLoader[];\n  private readonly _autoinstallerPluginLoaders: AutoinstallerPluginLoader[];\n  private readonly _installedAutoinstallerNames: Set<string>;\n  private readonly _loadedPluginNames: Set<string> = new Set<string>();\n  private readonly _rushGlobalFolder: RushGlobalFolder;\n\n  private _error: Error | undefined;\n\n  public constructor(options: IPluginManagerOptions) {\n    this._terminal = options.terminal;\n    this._rushConfiguration = options.rushConfiguration;\n    this._rushSession = options.rushSession;\n    this._restrictConsoleOutput = options.restrictConsoleOutput;\n    this._rushGlobalFolder = options.rushGlobalFolder;\n\n    this._installedAutoinstallerNames = new Set<string>();\n\n    // Eventually we will require end users to explicitly configure all Rush plugins in use, regardless of\n    // whether they are first party or third party plugins.  However, we're postponing that requirement\n    // until after the plugin feature has stabilized and is fully documented.  In the meantime, Rush's\n    // built-in plugins are dependencies of @microsoft/rush-lib and get loaded by default (without any\n    // configuration).\n    //\n    // The plugins have devDependencies on Rush, which would create a circular dependency in our local\n    // workspace if we added them to rush-lib/package.json.  Instead we put them in a special section\n    // \"publishOnlyDependencies\" which gets moved into \"dependencies\" during publishing.\n    const builtInPluginConfigurations: IBuiltInPluginConfiguration[] = options.builtInPluginConfigurations;\n\n    const ownPackageJsonDependencies: Record<string, string> = Rush._rushLibPackageJson.dependencies || {};\n    function tryAddBuiltInPlugin(builtInPluginName: string, pluginPackageName?: string): void {\n      if (!pluginPackageName) {\n        pluginPackageName = `@rushstack/${builtInPluginName}`;\n      }\n      if (ownPackageJsonDependencies[pluginPackageName]) {\n        builtInPluginConfigurations.push({\n          packageName: pluginPackageName,\n          pluginName: builtInPluginName,\n          pluginPackageFolder: Import.resolvePackage({\n            packageName: pluginPackageName,\n            baseFolderPath: __dirname\n          })\n        });\n      }\n    }\n\n    tryAddBuiltInPlugin('rush-amazon-s3-build-cache-plugin');\n    tryAddBuiltInPlugin('rush-azure-storage-build-cache-plugin');\n    tryAddBuiltInPlugin('rush-http-build-cache-plugin');\n    // This is a secondary plugin inside the `@rushstack/rush-azure-storage-build-cache-plugin`\n    // package. Because that package comes with Rush (for now), it needs to get registered here.\n    // If the necessary config file doesn't exist, this plugin doesn't do anything.\n    tryAddBuiltInPlugin(\n      'rush-azure-interactive-auth-plugin',\n      '@rushstack/rush-azure-storage-build-cache-plugin'\n    );\n\n    this._builtInPluginLoaders = builtInPluginConfigurations.map((pluginConfiguration) => {\n      return new BuiltInPluginLoader({\n        pluginConfiguration,\n        rushConfiguration: this._rushConfiguration,\n        terminal: this._terminal\n      });\n    });\n\n    this._autoinstallerPluginLoaders = (\n      this._rushConfiguration?._rushPluginsConfiguration.configuration.plugins ?? []\n    ).map((pluginConfiguration) => {\n      return new AutoinstallerPluginLoader({\n        pluginConfiguration,\n        rushConfiguration: this._rushConfiguration,\n        terminal: this._terminal,\n        restrictConsoleOutput: this._restrictConsoleOutput,\n        rushGlobalFolder: this._rushGlobalFolder\n      });\n    });\n  }\n\n  /**\n   * If an error occurs while attempting to load plugins, it will be saved in this property.\n   * Rush will attempt to continue and will report the error later by `BaseRushAction._throwPluginErrorIfNeed()`\n   * (unless we are invoking a command that is used to fix plugin problems).\n   */\n  public get error(): Error | undefined {\n    return this._error;\n  }\n\n  public async updateAsync(): Promise<void> {\n    await this._preparePluginAutoinstallersAsync(this._autoinstallerPluginLoaders);\n    const preparedAutoinstallerNames: Set<string> = new Set<string>();\n    for (const { autoinstaller } of this._autoinstallerPluginLoaders) {\n      const storePath: string = AutoinstallerPluginLoader.getPluginAutoinstallerStorePath(autoinstaller);\n      if (!preparedAutoinstallerNames.has(autoinstaller.name)) {\n        FileSystem.ensureEmptyFolder(storePath);\n        preparedAutoinstallerNames.add(autoinstaller.name);\n      }\n    }\n    for (const pluginLoader of this._autoinstallerPluginLoaders) {\n      pluginLoader.update();\n    }\n  }\n\n  public async reinitializeAllPluginsForCommandAsync(commandName: string): Promise<void> {\n    this._error = undefined;\n    await this.tryInitializeUnassociatedPluginsAsync();\n    await this.tryInitializeAssociatedCommandPluginsAsync(commandName);\n  }\n\n  public async _preparePluginAutoinstallersAsync(pluginLoaders: AutoinstallerPluginLoader[]): Promise<void> {\n    for (const { autoinstaller } of pluginLoaders) {\n      if (!this._installedAutoinstallerNames.has(autoinstaller.name)) {\n        await autoinstaller.prepareAsync();\n        this._installedAutoinstallerNames.add(autoinstaller.name);\n      }\n    }\n  }\n\n  public async tryInitializeUnassociatedPluginsAsync(): Promise<void> {\n    try {\n      const autoinstallerPluginLoaders: AutoinstallerPluginLoader[] = this._getUnassociatedPluginLoaders(\n        this._autoinstallerPluginLoaders\n      );\n      await this._preparePluginAutoinstallersAsync(autoinstallerPluginLoaders);\n      const builtInPluginLoaders: BuiltInPluginLoader[] = this._getUnassociatedPluginLoaders(\n        this._builtInPluginLoaders\n      );\n      this._initializePlugins([...builtInPluginLoaders, ...autoinstallerPluginLoaders]);\n    } catch (e) {\n      this._error = e as Error;\n    }\n  }\n\n  public async tryInitializeAssociatedCommandPluginsAsync(commandName: string): Promise<void> {\n    try {\n      const autoinstallerPluginLoaders: AutoinstallerPluginLoader[] = this._getPluginLoadersForCommand(\n        commandName,\n        this._autoinstallerPluginLoaders\n      );\n      await this._preparePluginAutoinstallersAsync(autoinstallerPluginLoaders);\n      const builtInPluginLoaders: BuiltInPluginLoader[] = this._getPluginLoadersForCommand(\n        commandName,\n        this._builtInPluginLoaders\n      );\n      this._initializePlugins([...builtInPluginLoaders, ...autoinstallerPluginLoaders]);\n    } catch (e) {\n      this._error = e as Error;\n    }\n  }\n\n  public tryGetCustomCommandLineConfigurationInfos(): ICustomCommandLineConfigurationInfo[] {\n    const commandLineConfigurationInfos: ICustomCommandLineConfigurationInfo[] = [];\n    for (const pluginLoader of this._autoinstallerPluginLoaders) {\n      const commandLineConfiguration: CommandLineConfiguration | undefined =\n        pluginLoader.getCommandLineConfiguration();\n      if (commandLineConfiguration) {\n        commandLineConfigurationInfos.push({\n          commandLineConfiguration,\n          pluginLoader\n        });\n      }\n    }\n    return commandLineConfigurationInfos;\n  }\n\n  private _initializePlugins(pluginLoaders: PluginLoaderBase[]): void {\n    for (const pluginLoader of pluginLoaders) {\n      const pluginName: string = pluginLoader.pluginName;\n      if (this._loadedPluginNames.has(pluginName)) {\n        throw new Error(`Error applying plugin: A plugin with name \"${pluginName}\" has already been applied`);\n      }\n      const plugin: IRushPlugin | undefined = pluginLoader.load();\n      this._loadedPluginNames.add(pluginName);\n      if (plugin) {\n        this._applyPlugin(plugin, pluginName);\n      }\n    }\n  }\n\n  private _getUnassociatedPluginLoaders<T extends AutoinstallerPluginLoader | BuiltInPluginLoader>(\n    pluginLoaders: T[]\n  ): T[] {\n    return pluginLoaders.filter((pluginLoader) => {\n      return !pluginLoader.pluginManifest.associatedCommands;\n    });\n  }\n\n  private _getPluginLoadersForCommand<T extends AutoinstallerPluginLoader | BuiltInPluginLoader>(\n    commandName: string,\n    pluginLoaders: T[]\n  ): T[] {\n    return pluginLoaders.filter((pluginLoader) => {\n      return pluginLoader.pluginManifest.associatedCommands?.includes(commandName);\n    });\n  }\n\n  private _applyPlugin(plugin: IRushPlugin, pluginName: string): void {\n    try {\n      plugin.apply(this._rushSession, this._rushConfiguration);\n    } catch (e) {\n      throw new InternalError(`Error applying \"${pluginName}\": ${e}`);\n    }\n  }\n}\n"]}