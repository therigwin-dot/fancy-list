{"version":3,"file":"ChangeManagement.js","sourceRoot":"","sources":["../../src/api/ChangeManagement.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAW3D;;GAEG;AACH,MAAM,CAAN,IAAY,UAOX;AAPD,WAAY,UAAU;IACpB,2CAAQ,CAAA;IACR,uDAAc,CAAA;IACd,+CAAU,CAAA;IACV,6CAAS,CAAA;IACT,6CAAS,CAAA;IACT,6CAAS,CAAA;AACX,CAAC,EAPW,UAAU,KAAV,UAAU,QAOrB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * Representation for a changes file\n */\nexport interface IChangeFile {\n  changes: IChangeInfo[];\n  packageName: string;\n  email: string | undefined;\n}\n\n/**\n * Represents all of the types of change requests.\n */\nexport enum ChangeType {\n  none = 0,\n  dependency = 1,\n  hotfix = 2,\n  patch = 3,\n  minor = 4,\n  major = 5\n}\n\nexport interface IVersionPolicyChangeInfo {\n  /**\n   * Defines the type of change.\n   */\n  changeType: ChangeType;\n\n  /**\n   * The new version for the version policy, as calculated by the findChangeRequests function.\n   */\n  newVersion: string;\n\n  /**\n   * The name of the version policy.\n   */\n  versionPolicyName: string;\n}\n\n/**\n * Defines an IChangeInfo object.\n */\nexport interface IChangeInfo {\n  /**\n   * Defines the type of change. This is not expected to exist within the JSON file definition as we\n   * parse it from the \"type\" property.\n   */\n  changeType?: ChangeType;\n\n  /**\n   * Defines the array of related changes for the given package. This is used to iterate over comments\n   * requested by the change requests.\n   */\n  changes?: IChangeInfo[];\n\n  /**\n   * A user provided comment for the change.\n   */\n  comment?: string;\n\n  /**\n   * An optional dictionary of custom string fields.\n   */\n  customFields?: Record<string, string>;\n\n  /**\n   * The email of the user who provided the comment. Pulled from the Git log.\n   */\n  author?: string;\n\n  /**\n   * The commit hash for the change.\n   */\n  commit?: string;\n\n  /**\n   * The new downstream range dependency, as calculated by the findChangeRequests function.\n   */\n  newRangeDependency?: string;\n\n  /**\n   * The new version for the package, as calculated by the findChangeRequests function.\n   */\n  newVersion?: string;\n\n  /**\n   * The order in which the change request should be published.\n   */\n  order?: number;\n\n  /**\n   * The name of the package.\n   */\n  packageName: string;\n\n  /**\n   * The type of the package publishing request (patch/minor/major), as provided by the JSON file.\n   */\n  type?: string;\n}\n"]}