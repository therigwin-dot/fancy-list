{"version":3,"file":"Changelog.js","sourceRoot":"","sources":["../../src/api/Changelog.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * Interface representing a changelog json object for a package used to represent the parsed\n * content of CHANGELOG.json\n */\nexport interface IChangelog {\n  /**\n   * Name of the project\n   */\n  name: string;\n\n  /**\n   * Entries within the changelog corresponding to each published version.\n   */\n  entries: IChangeLogEntry[];\n}\n\n/**\n * Interface representing a single published entry in the changelog.\n */\nexport interface IChangeLogEntryComments {\n  /** Describes changes which cause a patch-level SemVer bump */\n  patch?: IChangeLogComment[];\n  /** Describes changes which cause a minor-level SemVer bump */\n  minor?: IChangeLogComment[];\n  /** Describes changes which cause a major-level SemVer bump */\n  major?: IChangeLogComment[];\n  /** Describes changes to the package's dependencies */\n  dependency?: IChangeLogComment[];\n  /** Describe changes that do not have version information */\n  none?: IChangeLogComment[];\n  /** Describe changes that do not have version information */\n  hotfix?: IChangeLogComment[];\n}\n\n/**\n * Interface representing a single published entry in the changelog.\n */\nexport interface IChangeLogEntry {\n  /**\n   * Published version for the entry. (Example: 1.0.0)\n   */\n  version: string;\n\n  /**\n   * Git tag used to identify the published commit. (Example: b7f55611e54910327a206476b185265498c66acf)\n   */\n  tag: string;\n\n  /**\n   * The UTC date when the publish was applied. (Example: Fri, 02 Dec 2016 22:27:16 GMT)\n   */\n  date: string | undefined;\n\n  /**\n   * Comments for the entry, where key represents the ChangeType string (Example: major)\n   */\n  comments: IChangeLogEntryComments;\n}\n\n/**\n * Interface representing a single changelog comment within an entry.\n */\nexport interface IChangeLogComment {\n  /**\n   * The given comment. (supports markdown.)\n   */\n  comment: string;\n\n  /**\n   * The author, if applicable, that created the change request.\n   */\n  author?: string;\n\n  /**\n   * The commit, if applicable, including the change request.\n   */\n  commit?: string;\n\n  /**\n   * An optional dictionary of custom string fields.\n   */\n  customFields?: Record<string, string>;\n}\n"]}