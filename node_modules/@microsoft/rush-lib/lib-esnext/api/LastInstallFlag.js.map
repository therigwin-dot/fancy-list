{"version":3,"file":"LastInstallFlag.js","sourceRoot":"","sources":["../../src/api/LastInstallFlag.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { JsonFile, type JsonObject, Path, type IPackageJson } from '@rushstack/node-core-library';\nimport { pnpmSyncGetJsonVersion } from 'pnpm-sync-lib';\nimport type { PackageManagerName } from './packageManager/PackageManager';\nimport type { RushConfiguration } from './RushConfiguration';\nimport * as objectUtilities from '../utilities/objectUtilities';\nimport type { Subspace } from './Subspace';\nimport { Selection } from '../logic/Selection';\nimport { FlagFile } from './FlagFile';\n\nconst LAST_INSTALL_FLAG_FILE_NAME: string = 'last-install';\n\n/**\n * This represents the JSON data structure for the \"last-install.flag\" file.\n */\nexport interface ILastInstallFlagJson {\n  /**\n   * Current node version\n   */\n  node?: string;\n  /**\n   * Current package manager name\n   */\n  packageManager?: PackageManagerName;\n  /**\n   * Current package manager version\n   */\n  packageManagerVersion: string;\n  /**\n   * Current rush json folder\n   */\n  rushJsonFolder: string;\n  /**\n   * The content of package.json, used in the flag file of autoinstaller\n   */\n  packageJson?: IPackageJson;\n  /**\n   * Same with pnpmOptions.pnpmStorePath in rush.json\n   */\n  storePath?: string;\n  /**\n   * An experimental flag used by cleanInstallAfterNpmrcChanges\n   */\n  npmrcHash?: string;\n  /**\n   * True when \"useWorkspaces\" is true in rush.json\n   */\n  workspaces?: boolean;\n  /**\n   * True when user explicitly specify \"--ignore-scripts\" CLI parameter or deferredInstallationScripts\n   */\n  ignoreScripts?: boolean;\n  /**\n   * When specified, it is a list of selected projects during partial install\n   * It is undefined when full install\n   */\n  selectedProjectNames?: string[];\n  /**\n   * pnpm-sync-lib version\n   */\n  pnpmSync?: string;\n}\n\ninterface ILockfileValidityCheckOptions {\n  statePropertiesToIgnore?: (keyof ILastInstallFlagJson)[];\n  rushVerb?: string;\n}\n\n/**\n * A helper class for managing last-install flags, which are persistent and\n * indicate that something installed in the folder was successfully completed.\n * It also compares state, so that if something like the Node.js version has changed,\n * it can invalidate the last install.\n */\nexport class LastInstallFlag extends FlagFile<Partial<ILastInstallFlagJson>> {\n  /**\n   * Creates a new LastInstall flag\n   * @param folderPath - the folder that this flag is managing\n   * @param state - optional, the state that should be managed or compared\n   */\n  public constructor(folderPath: string, state?: Partial<ILastInstallFlagJson>) {\n    super(folderPath, LAST_INSTALL_FLAG_FILE_NAME, state || {});\n  }\n\n  /**\n   * Returns true if the file exists and the contents match the current state.\n   */\n  public async isValidAsync(): Promise<boolean> {\n    return await this._isValidAsync(false, {});\n  }\n\n  /**\n   * Same as isValid(), but with an additional check:  If the current state is not equal to the previous\n   * state, and an the current state causes an error, then throw an exception with a friendly message.\n   *\n   * @internal\n   */\n  public async checkValidAndReportStoreIssuesAsync(\n    options: ILockfileValidityCheckOptions & { rushVerb: string }\n  ): Promise<boolean> {\n    return this._isValidAsync(true, options);\n  }\n\n  private async _isValidAsync(\n    checkValidAndReportStoreIssues: boolean,\n    { rushVerb = 'update', statePropertiesToIgnore }: ILockfileValidityCheckOptions = {}\n  ): Promise<boolean> {\n    let oldState: JsonObject;\n    try {\n      oldState = await JsonFile.loadAsync(this.path);\n    } catch (err) {\n      return false;\n    }\n\n    const newState: ILastInstallFlagJson = { ...this._state } as ILastInstallFlagJson;\n    if (statePropertiesToIgnore) {\n      for (const optionToIgnore of statePropertiesToIgnore) {\n        delete newState[optionToIgnore];\n        delete oldState[optionToIgnore];\n      }\n    }\n\n    if (!objectUtilities.objectsAreDeepEqual(oldState, newState)) {\n      if (checkValidAndReportStoreIssues) {\n        const pkgManager: PackageManagerName = newState.packageManager as PackageManagerName;\n        if (pkgManager === 'pnpm') {\n          if (\n            // Only throw an error if the package manager hasn't changed from PNPM\n            oldState.packageManager === pkgManager\n          ) {\n            const normalizedOldStorePath: string = oldState.storePath\n              ? Path.convertToPlatformDefault(oldState.storePath)\n              : '<global>';\n            const normalizedNewStorePath: string = newState.storePath\n              ? Path.convertToPlatformDefault(newState.storePath)\n              : '<global>';\n            if (\n              // Throw if the store path changed\n              normalizedOldStorePath !== normalizedNewStorePath\n            ) {\n              throw new Error(\n                'Current PNPM store path does not match the last one used. This may cause inconsistency in your builds.\\n\\n' +\n                  `If you wish to install with the new store path, please run \"rush ${rushVerb} --purge\"\\n\\n` +\n                  `Old Path: ${normalizedOldStorePath}\\n` +\n                  `New Path: ${normalizedNewStorePath}`\n              );\n            }\n          }\n          // check whether new selected projects are installed\n          if (newState.selectedProjectNames) {\n            if (!oldState.selectedProjectNames) {\n              // used to be a full install\n              return true;\n            } else if (\n              Selection.union(newState.selectedProjectNames, oldState.selectedProjectNames).size ===\n              oldState.selectedProjectNames.length\n            ) {\n              // current selected projects are included in old selected projects\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Merge new data into current state by \"merge\"\n   */\n  public mergeFromObject(data: JsonObject): void {\n    if (objectUtilities.isMatch(this._state, data)) {\n      return;\n    }\n    objectUtilities.merge(this._state, data);\n  }\n}\n\n/**\n * Gets the LastInstall flag and sets the current state. This state is used to compare\n * against the last-known-good state tracked by the LastInstall flag.\n * @param rushConfiguration - the configuration of the Rush repo to get the install\n * state from\n *\n * @internal\n */\nexport function getCommonTempFlag(\n  rushConfiguration: RushConfiguration,\n  subspace: Subspace,\n  extraState: Record<string, string> = {}\n): LastInstallFlag {\n  const currentState: ILastInstallFlagJson = {\n    node: process.versions.node,\n    packageManager: rushConfiguration.packageManager,\n    packageManagerVersion: rushConfiguration.packageManagerToolVersion,\n    rushJsonFolder: rushConfiguration.rushJsonFolder,\n    ignoreScripts: false,\n    pnpmSync: pnpmSyncGetJsonVersion(),\n    ...extraState\n  };\n\n  if (currentState.packageManager === 'pnpm' && rushConfiguration.pnpmOptions) {\n    currentState.storePath = rushConfiguration.pnpmOptions.pnpmStorePath;\n    if (rushConfiguration.pnpmOptions.useWorkspaces) {\n      currentState.workspaces = rushConfiguration.pnpmOptions.useWorkspaces;\n    }\n  }\n\n  return new LastInstallFlag(subspace.getSubspaceTempFolderPath(), currentState);\n}\n"]}