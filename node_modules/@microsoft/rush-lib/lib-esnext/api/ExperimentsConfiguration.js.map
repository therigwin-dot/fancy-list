{"version":3,"file":"ExperimentsConfiguration.js","sourceRoot":"","sources":["../../src/api/ExperimentsConfiguration.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAChF,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAE/C,OAAO,UAAU,MAAM,oCAAoC,CAAC;AAE5D,MAAM,qBAAqB,GAAgB,IAAI,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;AA4HvE,MAAM,wBAAwB,GAAe,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAErF;;;;GAIG;AACH,MAAM,OAAO,wBAAwB;IAOnC;;OAEG;IACH,YAAmB,YAAoB;QACrC,IAAI,CAAC;YACH,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,CAAC;QACxF,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC;gBAClC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,CAAC;YACV,CAAC;QACH,CAAC;QAED,KAAK,MAAM,cAAc,IAAI,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;YAC5E,IAAI,qBAAqB,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC;gBAC9C,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CACT,QAAQ,CAAC,MAAM,CACb,mBAAmB,cAAc,qEAAqE;oBACpG,IAAI,YAAY,IAAI,CACvB,CACF,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { JsonFile, JsonSchema, FileSystem } from '@rushstack/node-core-library';\nimport { Colorize } from '@rushstack/terminal';\n\nimport schemaJson from '../schemas/experiments.schema.json';\n\nconst GRADUATED_EXPERIMENTS: Set<string> = new Set(['phasedCommands']);\n\n/**\n * This interface represents the raw experiments.json file which allows repo\n * maintainers to enable and disable experimental Rush features.\n * @beta\n */\nexport interface IExperimentsJson {\n  /**\n   * By default, 'rush install' passes --no-prefer-frozen-lockfile to 'pnpm install'.\n   * Set this option to true to pass '--frozen-lockfile' instead for faster installs.\n   */\n  usePnpmFrozenLockfileForRushInstall?: boolean;\n\n  /**\n   * By default, 'rush update' passes --no-prefer-frozen-lockfile to 'pnpm install'.\n   * Set this option to true to pass '--prefer-frozen-lockfile' instead to minimize shrinkwrap changes.\n   */\n  usePnpmPreferFrozenLockfileForRushUpdate?: boolean;\n\n  /**\n   * By default, 'rush update' runs as a single operation.\n   * Set this option to true to instead update the lockfile with `--lockfile-only`, then perform a `--frozen-lockfile` install.\n   * Necessary when using the `afterAllResolved` hook in .pnpmfile.cjs.\n   */\n  usePnpmLockfileOnlyThenFrozenLockfileForRushUpdate?: boolean;\n\n  /**\n   * If using the 'preventManualShrinkwrapChanges' option, restricts the hash to only include the layout of external dependencies.\n   * Used to allow links between workspace projects or the addition/removal of references to existing dependency versions to not\n   * cause hash changes.\n   */\n  omitImportersFromPreventManualShrinkwrapChanges?: boolean;\n\n  /**\n   * If true, the chmod field in temporary project tar headers will not be normalized.\n   * This normalization can help ensure consistent tarball integrity across platforms.\n   */\n  noChmodFieldInTarHeaderNormalization?: boolean;\n\n  /**\n   * If true, build caching will respect the allowWarningsInSuccessfulBuild flag and cache builds with warnings.\n   * This will not replay warnings from the cached build.\n   */\n  buildCacheWithAllowWarningsInSuccessfulBuild?: boolean;\n\n  /**\n   * If true, build skipping will respect the allowWarningsInSuccessfulBuild flag and skip builds with warnings.\n   * This will not replay warnings from the skipped build.\n   */\n  buildSkipWithAllowWarningsInSuccessfulBuild?: boolean;\n\n  /**\n   * If true, perform a clean install after when running `rush install` or `rush update` if the\n   * `.npmrc` file has changed since the last install.\n   */\n  cleanInstallAfterNpmrcChanges?: boolean;\n\n  /**\n   * If true, print the outputs of shell commands defined in event hooks to the console.\n   */\n  printEventHooksOutputToConsole?: boolean;\n\n  /**\n   * If true, Rush will not allow node_modules in the repo folder or in parent folders.\n   */\n  forbidPhantomResolvableNodeModulesFolders?: boolean;\n\n  /**\n   * (UNDER DEVELOPMENT) For certain installation problems involving peer dependencies, PNPM cannot\n   * correctly satisfy versioning requirements without installing duplicate copies of a package inside the\n   * node_modules folder. This poses a problem for \"workspace:*\" dependencies, as they are normally\n   * installed by making a symlink to the local project source folder. PNPM's \"injected dependencies\"\n   * feature provides a model for copying the local project folder into node_modules, however copying\n   * must occur AFTER the dependency project is built and BEFORE the consuming project starts to build.\n   * The \"pnpm-sync\" tool manages this operation; see its documentation for details.\n   * Enable this experiment if you want \"rush\" and \"rushx\" commands to resync injected dependencies\n   * by invoking \"pnpm-sync\" during the build.\n   */\n  usePnpmSyncForInjectedDependencies?: boolean;\n\n  /**\n   * If set to true, Rush will generate a `project-impact-graph.yaml` file in the repository root during `rush update`.\n   */\n  generateProjectImpactGraphDuringRushUpdate?: boolean;\n\n  /**\n   * If true, when running in watch mode, Rush will check for phase scripts named `_phase:<name>:ipc` and run them instead\n   * of `_phase:<name>` if they exist. The created child process will be provided with an IPC channel and expected to persist\n   * across invocations.\n   */\n  useIPCScriptsInWatchMode?: boolean;\n\n  /**\n   * (UNDER DEVELOPMENT) The Rush alerts feature provides a way to send announcements to engineers\n   * working in the monorepo, by printing directly in the user's shell window when they invoke Rush commands.\n   * This ensures that important notices will be seen by anyone doing active development, since people often\n   * ignore normal discussion group messages or don't know to subscribe.\n   */\n  rushAlerts?: boolean;\n\n  /**\n   * Allow cobuilds without using the build cache to store previous execution info. When setting up\n   *  distributed builds, Rush will allow uncacheable projects to still leverage the cobuild feature.\n   * This is useful when you want to speed up operations that can't (or shouldn't) be cached.\n   */\n  allowCobuildWithoutCache?: boolean;\n\n  /**\n   * By default, rush perform a full scan of the entire repository. For example, Rush runs `git status` to check for local file changes.\n   * When this toggle is enabled, Rush will only scan specific paths, significantly speeding up Git operations.\n   */\n  enableSubpathScan?: boolean;\n\n  /**\n   * Rush has a policy that normally requires Rush projects to specify `workspace:*` in package.json when depending\n   * on other projects in the workspace, unless they are explicitly declared as `decoupledLocalDependencies`\n   * in rush.json.  Enabling this experiment will remove that requirement for dependencies belonging to a different\n   * subspace.  This is useful for large product groups who work in separate subspaces and generally prefer to consume\n   * each other's packages via the NPM registry.\n   */\n  exemptDecoupledDependenciesBetweenSubspaces?: boolean;\n}\n\nconst _EXPERIMENTS_JSON_SCHEMA: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n/**\n * Use this class to load the \"common/config/rush/experiments.json\" config file.\n * This file allows repo maintainers to enable and disable experimental Rush features.\n * @public\n */\nexport class ExperimentsConfiguration {\n  /**\n   * Get the experiments configuration.\n   * @beta\n   */\n  public readonly configuration: Readonly<IExperimentsJson>;\n\n  /**\n   * @internal\n   */\n  public constructor(jsonFilePath: string) {\n    try {\n      this.configuration = JsonFile.loadAndValidate(jsonFilePath, _EXPERIMENTS_JSON_SCHEMA);\n    } catch (e) {\n      if (FileSystem.isNotExistError(e)) {\n        this.configuration = {};\n      } else {\n        throw e;\n      }\n    }\n\n    for (const experimentName of Object.getOwnPropertyNames(this.configuration)) {\n      if (GRADUATED_EXPERIMENTS.has(experimentName)) {\n        // eslint-disable-next-line no-console\n        console.log(\n          Colorize.yellow(\n            `The experiment \"${experimentName}\" has graduated to a standard feature. Remove this experiment from ` +\n              `\"${jsonFilePath}\".`\n          )\n        );\n      }\n    }\n  }\n}\n"]}