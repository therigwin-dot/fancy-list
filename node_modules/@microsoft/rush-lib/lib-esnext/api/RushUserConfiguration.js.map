{"version":3,"file":"RushUserConfiguration.js","sourceRoot":"","sources":["../../src/api/RushUserConfiguration.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAChF,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACvD,OAAO,UAAU,MAAM,2CAA2C,CAAC;AAMnE;;;;GAIG;AACH,MAAM,OAAO,qBAAqB;IAQhC,YAAoB,yBAA4D;QAC9E,IAAI,CAAC,gBAAgB,GAAG,yBAAyB,aAAzB,yBAAyB,uBAAzB,yBAAyB,CAAE,gBAAgB,CAAC;QACpE,IAAI,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;YACrE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,eAAe;QACjC,MAAM,kBAAkB,GAAW,qBAAqB,CAAC,qBAAqB,EAAE,CAAC;QACjF,MAAM,wBAAwB,GAAW,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;QACxF,IAAI,oBAAuD,CAAC;QAC5D,IAAI,CAAC;YACH,oBAAoB,GAAG,MAAM,QAAQ,CAAC,oBAAoB,CACxD,wBAAwB,EACxB,qBAAqB,CAAC,OAAO,CAC9B,CAAC;QACJ,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAU,CAAC,EAAE,CAAC;gBAC5C,MAAM,CAAC,CAAC;YACV,CAAC;QACH,CAAC;QAED,OAAO,IAAI,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IACzD,CAAC;IAEM,MAAM,CAAC,qBAAqB;QACjC,MAAM,cAAc,GAAW,SAAS,CAAC,aAAa,EAAE,CAAC;QACzD,MAAM,wBAAwB,GAAW,IAAI,CAAC,IAAI,CAChD,cAAc,EACd,aAAa,CAAC,+BAA+B,CAC9C,CAAC;QACF,OAAO,wBAAwB,CAAC;IAClC,CAAC;;AAvCc,6BAAO,GAAe,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, JsonFile, JsonSchema } from '@rushstack/node-core-library';\nimport * as path from 'path';\n\nimport { Utilities } from '../utilities/Utilities';\nimport { RushConstants } from '../logic/RushConstants';\nimport schemaJson from '../schemas/rush-user-settings.schema.json';\n\ninterface IRushUserSettingsJson {\n  buildCacheFolder?: string;\n}\n\n/**\n * Rush per-user configuration data.\n *\n * @beta\n */\nexport class RushUserConfiguration {\n  private static _schema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  /**\n   * If provided, store build cache in the specified folder. Must be an absolute path.\n   */\n  public readonly buildCacheFolder: string | undefined;\n\n  private constructor(rushUserConfigurationJson: IRushUserSettingsJson | undefined) {\n    this.buildCacheFolder = rushUserConfigurationJson?.buildCacheFolder;\n    if (this.buildCacheFolder && !path.isAbsolute(this.buildCacheFolder)) {\n      throw new Error('buildCacheFolder must be an absolute path');\n    }\n  }\n\n  public static async initializeAsync(): Promise<RushUserConfiguration> {\n    const rushUserFolderPath: string = RushUserConfiguration.getRushUserFolderPath();\n    const rushUserSettingsFilePath: string = path.join(rushUserFolderPath, 'settings.json');\n    let rushUserSettingsJson: IRushUserSettingsJson | undefined;\n    try {\n      rushUserSettingsJson = await JsonFile.loadAndValidateAsync(\n        rushUserSettingsFilePath,\n        RushUserConfiguration._schema\n      );\n    } catch (e) {\n      if (!FileSystem.isNotExistError(e as Error)) {\n        throw e;\n      }\n    }\n\n    return new RushUserConfiguration(rushUserSettingsJson);\n  }\n\n  public static getRushUserFolderPath(): string {\n    const homeFolderPath: string = Utilities.getHomeFolder();\n    const rushUserSettingsFilePath: string = path.join(\n      homeFolderPath,\n      RushConstants.rushUserConfigurationFolderName\n    );\n    return rushUserSettingsFilePath;\n  }\n}\n"]}