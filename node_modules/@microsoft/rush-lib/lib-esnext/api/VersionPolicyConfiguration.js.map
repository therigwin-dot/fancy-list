{"version":3,"file":"VersionPolicyConfiguration.js","sourceRoot":"","sources":["../../src/api/VersionPolicyConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { JsonFile, JsonSchema, FileSystem } from '@rushstack/node-core-library';\n\nimport { VersionPolicy, type BumpType, type LockStepVersionPolicy } from './VersionPolicy';\nimport type { RushConfigurationProject } from './RushConfigurationProject';\nimport schemaJson from '../schemas/version-policies.schema.json';\n\nexport interface IVersionPolicyJson {\n  policyName: string;\n  definitionName: string;\n  dependencies?: IVersionPolicyDependencyJson;\n  exemptFromRushChange?: boolean;\n  includeEmailInChangeFile?: boolean;\n}\n\nexport interface ILockStepVersionJson extends IVersionPolicyJson {\n  version: string;\n  nextBump?: string;\n  mainProject?: string;\n}\n\nexport interface IIndividualVersionJson extends IVersionPolicyJson {\n  lockedMajor?: number;\n}\n\nexport enum VersionFormatForPublish {\n  original = 'original',\n  exact = 'exact'\n}\n\nexport enum VersionFormatForCommit {\n  wildcard = 'wildcard',\n  original = 'original'\n}\n\nexport interface IVersionPolicyDependencyJson {\n  versionFormatForPublish?: VersionFormatForPublish;\n  versionFormatForCommit?: VersionFormatForCommit;\n}\n\n/**\n * Use this class to load and save the \"common/config/rush/version-policies.json\" config file.\n * This config file configures how different groups of projects will be published by Rush,\n * and how their version numbers will be determined.\n * @public\n */\nexport class VersionPolicyConfiguration {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  private _jsonFileName: string;\n\n  /**\n   * Gets all the version policies\n   */\n  public readonly versionPolicies: Map<string, VersionPolicy>;\n\n  /**\n   * @internal\n   */\n  public constructor(jsonFileName: string) {\n    this._jsonFileName = jsonFileName;\n    this.versionPolicies = new Map<string, VersionPolicy>();\n    this._loadFile();\n  }\n\n  /**\n   * Validate the version policy configuration against the rush config\n   */\n  public validate(projectsByName: ReadonlyMap<string, RushConfigurationProject>): void {\n    if (!this.versionPolicies) {\n      return;\n    }\n    this.versionPolicies.forEach((policy) => {\n      const lockStepPolicy: LockStepVersionPolicy = policy as LockStepVersionPolicy;\n      if (lockStepPolicy.mainProject && !projectsByName.get(lockStepPolicy.mainProject)) {\n        throw new Error(\n          `Version policy \\\"${policy.policyName}\\\" has a non-existing mainProject:` +\n            ` ${lockStepPolicy.mainProject}.`\n        );\n      }\n    });\n  }\n\n  /**\n   * Gets the version policy by its name.\n   * Throws error if the version policy is not found.\n   * @param policyName - Name of the version policy\n   */\n  public getVersionPolicy(policyName: string): VersionPolicy {\n    const policy: VersionPolicy | undefined = this.versionPolicies.get(policyName);\n    if (!policy) {\n      throw new Error(`Failed to find version policy by name \\'${policyName}\\'`);\n    }\n    return policy;\n  }\n\n  /**\n   * Bumps up versions for the specified version policy or all version policies\n   *\n   * @param versionPolicyName - version policy name\n   * @param bumpType - bump type to override what policy has defined.\n   * @param identifier - prerelease identifier to override what policy has defined.\n   * @param shouldCommit - should save to disk\n   */\n  public bump(\n    versionPolicyName?: string,\n    bumpType?: BumpType,\n    identifier?: string,\n    shouldCommit?: boolean\n  ): void {\n    if (versionPolicyName) {\n      const policy: VersionPolicy | undefined = this.versionPolicies.get(versionPolicyName);\n      if (policy) {\n        policy.bump(bumpType, identifier);\n      }\n    } else {\n      this.versionPolicies.forEach((versionPolicy) => {\n        if (versionPolicy) {\n          versionPolicy.bump(bumpType, identifier);\n        }\n      });\n    }\n    this._saveFile(!!shouldCommit);\n  }\n\n  /**\n   * Updates the version directly for the specified version policy\n   * @param versionPolicyName - version policy name\n   * @param newVersion - new version\n   */\n  public update(versionPolicyName: string, newVersion: string, shouldCommit?: boolean): void {\n    const policy: VersionPolicy | undefined = this.versionPolicies.get(versionPolicyName);\n    if (!policy || !policy.isLockstepped) {\n      throw new Error(`Lockstep Version policy with name \"${versionPolicyName}\" cannot be found`);\n    }\n    const lockStepVersionPolicy: LockStepVersionPolicy = policy as LockStepVersionPolicy;\n    const previousVersion: string = lockStepVersionPolicy.version;\n    if (lockStepVersionPolicy.update(newVersion)) {\n      // eslint-disable-next-line no-console\n      console.log(`\\nUpdate version policy ${versionPolicyName} from ${previousVersion} to ${newVersion}`);\n      this._saveFile(!!shouldCommit);\n    }\n  }\n\n  private _loadFile(): void {\n    if (!FileSystem.exists(this._jsonFileName)) {\n      return;\n    }\n    const versionPolicyJson: IVersionPolicyJson[] = JsonFile.loadAndValidate(\n      this._jsonFileName,\n      VersionPolicyConfiguration._jsonSchema\n    );\n\n    versionPolicyJson.forEach((policyJson) => {\n      const policy: VersionPolicy | undefined = VersionPolicy.load(policyJson);\n      if (policy) {\n        this.versionPolicies.set(policy.policyName, policy);\n      }\n    });\n  }\n\n  private _saveFile(shouldCommit: boolean): void {\n    const versionPolicyJson: IVersionPolicyJson[] = [];\n    this.versionPolicies.forEach((versionPolicy) => {\n      versionPolicyJson.push(versionPolicy._json);\n    });\n    if (shouldCommit) {\n      JsonFile.save(versionPolicyJson, this._jsonFileName, { updateExistingFile: true });\n    }\n  }\n}\n"]}