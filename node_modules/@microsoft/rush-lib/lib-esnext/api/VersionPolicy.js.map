{"version":3,"file":"VersionPolicy.js","sourceRoot":"","sources":["../../src/api/VersionPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as semver from 'semver';\nimport { type IPackageJson, Enum } from '@rushstack/node-core-library';\n\nimport {\n  type IVersionPolicyJson,\n  type ILockStepVersionJson,\n  type IIndividualVersionJson,\n  VersionFormatForCommit,\n  VersionFormatForPublish,\n  type IVersionPolicyDependencyJson\n} from './VersionPolicyConfiguration';\nimport type { PackageJsonEditor } from './PackageJsonEditor';\nimport type { RushConfiguration } from './RushConfiguration';\nimport type { RushConfigurationProject } from './RushConfigurationProject';\nimport { cloneDeep } from '../utilities/objectUtilities';\n\n/**\n * Type of version bumps\n * @public\n *\n * @internalRemarks\n * This is a copy of the semver ReleaseType enum, but with the `none` value added and\n * the `premajor` and `prepatch` omitted.\n * See {@link LockStepVersionPolicy._getReleaseType}.\n *\n * TODO: Consider supporting `premajor` and `prepatch` in the future.\n */\nexport enum BumpType {\n  // No version bump\n  'none' = 0,\n  // Prerelease version bump\n  'prerelease' = 1,\n  // Patch version bump\n  'patch' = 2,\n  // Preminor version bump\n  'preminor' = 3,\n  // Minor version bump\n  'minor' = 4,\n  // Major version bump\n  'major' = 5\n}\n\n/**\n * Version policy base type names\n * @public\n */\nexport enum VersionPolicyDefinitionName {\n  'lockStepVersion',\n  'individualVersion'\n}\n\n/**\n * This is the base class for version policy which controls how versions get bumped.\n * @public\n */\nexport abstract class VersionPolicy {\n  private _versionFormatForCommit: VersionFormatForCommit;\n  private _versionFormatForPublish: VersionFormatForPublish;\n\n  /**\n   * Version policy name\n   */\n  public readonly policyName: string;\n\n  /**\n   * Version policy definition name\n   */\n  public readonly definitionName: VersionPolicyDefinitionName;\n\n  /**\n   * Determines if a version policy wants to opt out of changelog files.\n   */\n  public readonly exemptFromRushChange: boolean;\n\n  /**\n   * Determines if a version policy wants to opt in to including email.\n   */\n  public readonly includeEmailInChangeFile: boolean;\n\n  /**\n   * @internal\n   */\n  public constructor(versionPolicyJson: IVersionPolicyJson) {\n    this.policyName = versionPolicyJson.policyName;\n    this.definitionName = Enum.getValueByKey(VersionPolicyDefinitionName, versionPolicyJson.definitionName);\n    this.exemptFromRushChange = versionPolicyJson.exemptFromRushChange || false;\n    this.includeEmailInChangeFile = versionPolicyJson.includeEmailInChangeFile || false;\n\n    const jsonDependencies: IVersionPolicyDependencyJson = versionPolicyJson.dependencies || {};\n    this._versionFormatForCommit = jsonDependencies.versionFormatForCommit || VersionFormatForCommit.original;\n    this._versionFormatForPublish =\n      jsonDependencies.versionFormatForPublish || VersionFormatForPublish.original;\n  }\n\n  /**\n   * Loads from version policy json\n   *\n   * @param versionPolicyJson - version policy Json\n   *\n   * @internal\n   */\n  public static load(versionPolicyJson: IVersionPolicyJson): VersionPolicy | undefined {\n    const definition: VersionPolicyDefinitionName = Enum.getValueByKey(\n      VersionPolicyDefinitionName,\n      versionPolicyJson.definitionName\n    );\n    if (definition === VersionPolicyDefinitionName.lockStepVersion) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return new LockStepVersionPolicy(versionPolicyJson as ILockStepVersionJson);\n    } else if (definition === VersionPolicyDefinitionName.individualVersion) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return new IndividualVersionPolicy(versionPolicyJson as IIndividualVersionJson);\n    }\n    return undefined;\n  }\n\n  /**\n   * Whether it is a lockstepped version policy\n   */\n  public get isLockstepped(): boolean {\n    return this.definitionName === VersionPolicyDefinitionName.lockStepVersion;\n  }\n\n  /**\n   * Returns an updated package json that satisfies the policy.\n   *\n   * @param project - package json\n   * @param force - force update even when the project version is higher than the policy version.\n   */\n  public abstract ensure(project: IPackageJson, force?: boolean): IPackageJson | undefined;\n\n  /**\n   * Bumps version based on the policy\n   *\n   * @param bumpType - (optional) override bump type\n   * @param identifier - (optional) override prerelease Id\n   */\n  public abstract bump(bumpType?: BumpType, identifier?: string): void;\n\n  /**\n   * Serialized json for the policy\n   *\n   * @internal\n   */\n  public abstract get _json(): IVersionPolicyJson;\n\n  /**\n   * Validates the specified version and throws if the version does not satisfy the policy.\n   *\n   * @param versionString - version string\n   * @param packageName - package name\n   */\n  public abstract validate(versionString: string, packageName: string): void;\n\n  /**\n   * Tells the version policy to modify any dependencies in the target package\n   * to values used for publishing.\n   */\n  public setDependenciesBeforePublish(packageName: string, configuration: RushConfiguration): void {\n    if (this._versionFormatForPublish === VersionFormatForPublish.exact) {\n      const project: RushConfigurationProject = configuration.getProjectByName(packageName)!;\n\n      const packageJsonEditor: PackageJsonEditor = project.packageJsonEditor;\n\n      for (const dependency of packageJsonEditor.dependencyList) {\n        const rushDependencyProject: RushConfigurationProject | undefined = configuration.getProjectByName(\n          dependency.name\n        );\n\n        if (rushDependencyProject) {\n          const dependencyVersion: string = rushDependencyProject.packageJson.version;\n\n          dependency.setVersion(dependencyVersion);\n        }\n      }\n\n      packageJsonEditor.saveIfModified();\n    }\n  }\n\n  /**\n   * Tells the version policy to modify any dependencies in the target package\n   * to values used for checked-in source.\n   */\n  public setDependenciesBeforeCommit(packageName: string, configuration: RushConfiguration): void {\n    if (this._versionFormatForCommit === VersionFormatForCommit.wildcard) {\n      const project: RushConfigurationProject = configuration.getProjectByName(packageName)!;\n\n      const packageJsonEditor: PackageJsonEditor = project.packageJsonEditor;\n\n      for (const dependency of packageJsonEditor.dependencyList) {\n        const rushDependencyProject: RushConfigurationProject | undefined = configuration.getProjectByName(\n          dependency.name\n        );\n\n        if (rushDependencyProject) {\n          dependency.setVersion('*');\n        }\n      }\n\n      packageJsonEditor.saveIfModified();\n    }\n  }\n}\n\n/**\n * This policy indicates all related projects should use the same version.\n * @public\n */\nexport class LockStepVersionPolicy extends VersionPolicy {\n  private _version: semver.SemVer;\n\n  /**\n   * The type of bump for next bump.\n   */\n  // nextBump is probably not needed. It can be prerelease only.\n  // Other types of bumps can be passed in as a parameter to bump method, so can identifier.\n  public readonly nextBump: BumpType | undefined;\n\n  /**\n   * The main project for the version policy.\n   *\n   * If the value is provided, change logs will only be generated in that project.\n   * If the value is not provided, change logs will be hosted in each project associated with the policy.\n   */\n  public readonly mainProject: string | undefined;\n\n  /**\n   * @internal\n   */\n  public constructor(versionPolicyJson: ILockStepVersionJson) {\n    super(versionPolicyJson);\n    this._version = new semver.SemVer(versionPolicyJson.version);\n    this.nextBump =\n      versionPolicyJson.nextBump !== undefined\n        ? Enum.getValueByKey(BumpType, versionPolicyJson.nextBump)\n        : undefined;\n    this.mainProject = versionPolicyJson.mainProject;\n  }\n\n  /**\n   * The value of the lockstep version\n   */\n  public get version(): string {\n    return this._version.format();\n  }\n\n  /**\n   * Serialized json for this policy\n   *\n   * @internal\n   */\n  public get _json(): ILockStepVersionJson {\n    const json: ILockStepVersionJson = {\n      policyName: this.policyName,\n      definitionName: VersionPolicyDefinitionName[this.definitionName],\n      version: this.version\n    };\n    if (this.nextBump !== undefined) {\n      json.nextBump = BumpType[this.nextBump];\n    }\n    if (this.mainProject !== undefined) {\n      json.mainProject = this.mainProject;\n    }\n    return json;\n  }\n\n  /**\n   * Returns an updated package json that satisfies the version policy.\n   *\n   * @param project - input package json\n   * @param force - force update even when the project version is higher than the policy version.\n   */\n  public ensure(project: IPackageJson, force?: boolean): IPackageJson | undefined {\n    const packageVersion: semver.SemVer = new semver.SemVer(project.version);\n    const compareResult: number = packageVersion.compare(this._version);\n    if (compareResult === 0) {\n      return undefined;\n    } else if (compareResult > 0 && !force) {\n      const errorMessage: string =\n        `Version ${project.version} in package ${project.name}` +\n        ` is higher than locked version ${this._version.format()}.`;\n      throw new Error(errorMessage);\n    }\n    return this._updatePackageVersion(project, this._version);\n  }\n\n  /**\n   * Bumps the version of the lockstep policy\n   *\n   * @param bumpType - Overwrite bump type in version-policy.json with the provided value.\n   * @param identifier - Prerelease identifier if bump type is prerelease.\n   */\n  public bump(bumpType?: BumpType, identifier?: string): void {\n    const nextBump: BumpType | undefined = bumpType ?? this.nextBump;\n\n    if (nextBump === undefined) {\n      // let change files drive version bump.\n      return;\n    }\n\n    this._version.inc(this._getReleaseType(nextBump), identifier);\n  }\n\n  /**\n   * Updates the version of the policy directly with a new value\n   * @param newVersionString - New version\n   */\n  public update(newVersionString: string): boolean {\n    const newVersion: semver.SemVer = new semver.SemVer(newVersionString);\n    if (!newVersion || this._version === newVersion) {\n      return false;\n    }\n    this._version = newVersion;\n    return true;\n  }\n\n  /**\n   * Validates the specified version and throws if the version does not satisfy lockstep version.\n   *\n   * @param versionString - version string\n   * @param packageName - package name\n   */\n  public validate(versionString: string, packageName: string): void {\n    const versionToTest: semver.SemVer = new semver.SemVer(versionString, false);\n    if (this._version.compare(versionToTest) !== 0) {\n      throw new Error(`Invalid version ${versionString} in ${packageName}`);\n    }\n  }\n\n  private _updatePackageVersion(project: IPackageJson, newVersion: semver.SemVer): IPackageJson {\n    const updatedProject: IPackageJson = cloneDeep(project);\n    updatedProject.version = newVersion.format();\n    return updatedProject;\n  }\n\n  private _getReleaseType(bumpType: BumpType): semver.ReleaseType {\n    // Eventually we should just use ReleaseType and get rid of bump type.\n    return BumpType[bumpType] as semver.ReleaseType;\n  }\n}\n\n/**\n * This policy indicates all related projects get version bump driven by their own changes.\n * @public\n */\nexport class IndividualVersionPolicy extends VersionPolicy {\n  /**\n   * The major version that has been locked\n   */\n  public readonly lockedMajor: number | undefined;\n\n  /**\n   * @internal\n   */\n  public constructor(versionPolicyJson: IIndividualVersionJson) {\n    super(versionPolicyJson);\n    this.lockedMajor = versionPolicyJson.lockedMajor;\n  }\n\n  /**\n   * Serialized json for this policy\n   *\n   * @internal\n   */\n  public get _json(): IIndividualVersionJson {\n    const json: IIndividualVersionJson = {\n      policyName: this.policyName,\n      definitionName: VersionPolicyDefinitionName[this.definitionName]\n    };\n    if (this.lockedMajor !== undefined) {\n      json.lockedMajor = this.lockedMajor;\n    }\n    return json;\n  }\n\n  /**\n   * Returns an updated package json that satisfies the version policy.\n   *\n   * @param project - input package json\n   * @param force - force update even when the project version is higher than the policy version.\n   */\n  public ensure(project: IPackageJson, force?: boolean): IPackageJson | undefined {\n    if (this.lockedMajor) {\n      const version: semver.SemVer = new semver.SemVer(project.version);\n      if (version.major < this.lockedMajor) {\n        const updatedProject: IPackageJson = cloneDeep(project);\n        updatedProject.version = `${this.lockedMajor}.0.0`;\n        return updatedProject;\n      } else if (version.major > this.lockedMajor) {\n        const errorMessage: string =\n          `Version ${project.version} in package ${project.name}` +\n          ` is higher than locked major version ${this.lockedMajor}.`;\n        throw new Error(errorMessage);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Bumps version.\n   * Individual version policy lets change files drive version bump. This method currently does not do anything.\n   *\n   * @param bumpType - bump type\n   * @param identifier - prerelease id\n   */\n  public bump(bumpType?: BumpType, identifier?: string): void {\n    // individual version policy lets change files drive version bump.\n  }\n\n  /**\n   * Validates the specified version and throws if the version does not satisfy the policy.\n   *\n   * @param versionString - version string\n   * @param packageName - package name\n   */\n  public validate(versionString: string, packageName: string): void {\n    const versionToTest: semver.SemVer = new semver.SemVer(versionString, false);\n    if (this.lockedMajor !== undefined) {\n      if (this.lockedMajor !== versionToTest.major) {\n        throw new Error(`Invalid major version ${versionString} in ${packageName}`);\n      }\n    }\n  }\n}\n"]}