{"version":3,"file":"RushConfigurationProject.js","sourceRoot":"","sources":["../../src/api/RushConfigurationProject.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport { type IPackageJson, FileSystem, FileConstants } from '@rushstack/node-core-library';\n\nimport type { RushConfiguration } from './RushConfiguration';\nimport type { VersionPolicy, LockStepVersionPolicy } from './VersionPolicy';\nimport type { PackageJsonEditor } from './PackageJsonEditor';\nimport { RushConstants } from '../logic/RushConstants';\nimport { PackageNameParsers } from './PackageNameParsers';\nimport { DependencySpecifier, DependencySpecifierType } from '../logic/DependencySpecifier';\nimport { SaveCallbackPackageJsonEditor } from './SaveCallbackPackageJsonEditor';\nimport type { Subspace } from './Subspace';\n\n/**\n * This represents the JSON data object for a project entry in the rush.json configuration file.\n */\nexport interface IRushConfigurationProjectJson {\n  packageName: string;\n  projectFolder: string;\n  reviewCategory?: string;\n  decoupledLocalDependencies: string[];\n  cyclicDependencyProjects?: string[];\n  versionPolicyName?: string;\n  shouldPublish?: boolean;\n  skipRushCheck?: boolean;\n  publishFolder?: string;\n  tags?: string[];\n  subspaceName?: string;\n}\n\n/**\n * @internal\n */\nexport interface IRushConfigurationProjectOptions {\n  /**\n   * The raw JSON representation from rush.json\n   */\n  projectJson: IRushConfigurationProjectJson;\n  /**\n   * The enclosing configuration\n   */\n  rushConfiguration: RushConfiguration;\n  /**\n   * A unique string name for this project\n   */\n  tempProjectName: string;\n  /**\n   * If specified, validate project tags against this list.\n   */\n  allowedProjectTags: Set<string> | undefined;\n\n  /**\n   * The containing subspace.\n   */\n  subspace: Subspace;\n}\n\n/**\n * This represents the configuration of a project that is built by Rush, based on\n * the Rush.json configuration file.\n * @public\n */\nexport class RushConfigurationProject {\n  private readonly _shouldPublish: boolean;\n\n  private _versionPolicy: VersionPolicy | undefined = undefined;\n  private _dependencyProjects: Set<RushConfigurationProject> | undefined = undefined;\n  private _consumingProjects: Set<RushConfigurationProject> | undefined = undefined;\n  private _packageJson: IPackageJson;\n\n  /**\n   * The name of the NPM package.  An error is reported if this name is not\n   * identical to packageJson.name.\n   *\n   * Example: `@scope/MyProject`\n   */\n  public readonly packageName: string;\n\n  /**\n   * The full path of the folder that contains the project to be built by Rush.\n   *\n   * Example: `C:\\MyRepo\\libraries\\my-project`\n   */\n  public readonly projectFolder: string;\n\n  /**\n   * The relative path of the folder that contains the project to be built by Rush.\n   *\n   * Example: `libraries/my-project`\n   */\n  public readonly projectRelativeFolder: string;\n\n  /**\n   * The project-specific Rush configuration folder.\n   *\n   * Example: `C:\\MyRepo\\libraries\\my-project\\config\\rush`\n   */\n  public readonly projectRushConfigFolder: string;\n\n  /**\n   * The project-specific Rush temp folder. This folder is used to store Rush-specific temporary files.\n   *\n   * Example: `C:\\MyRepo\\libraries\\my-project\\.rush\\temp`\n   */\n  public readonly projectRushTempFolder: string;\n\n  /**\n   * The Rush configuration for the monorepo that the project belongs to.\n   */\n  public readonly rushConfiguration: RushConfiguration;\n\n  /**\n   * Returns the subspace name that a project belongs to.\n   * If subspaces is not enabled, returns the default subspace.\n   */\n  public readonly subspace: Subspace;\n\n  /**\n   * The review category name, or undefined if no category was assigned.\n   * This name must be one of the valid choices listed in RushConfiguration.reviewCategories.\n   */\n  public readonly reviewCategory: string | undefined;\n\n  /**\n   * A list of local projects that appear as devDependencies for this project, but cannot be\n   * locally linked because it would create a cyclic dependency; instead, the last published\n   * version will be installed in the Common folder.\n   *\n   * These are package names that would be found by RushConfiguration.getProjectByName().\n   */\n  public readonly decoupledLocalDependencies: Set<string>;\n\n  /**\n   * The parsed NPM \"package.json\" file from projectFolder.\n   */\n  public get packageJson(): IPackageJson {\n    return this._packageJson;\n  }\n\n  /**\n   * A useful wrapper around the package.json file for making modifications\n   * @beta\n   */\n  public readonly packageJsonEditor: PackageJsonEditor;\n\n  /**\n   * The unique name for the temporary project that will be generated in the Common folder.\n   * For example, if the project name is `@scope/MyProject`, the temporary project name\n   * might be `@rush-temp/MyProject-2`.\n   *\n   * Example: `@rush-temp/MyProject-2`\n   */\n  public readonly tempProjectName: string;\n\n  /**\n   * The unscoped temporary project name\n   *\n   * Example: `my-project-2`\n   */\n  public readonly unscopedTempProjectName: string;\n\n  /**\n   * If true, then this project will be ignored by the \"rush check\" command.\n   * The default value is false.\n   */\n  public readonly skipRushCheck: boolean;\n\n  /**\n   * Name of the version policy used by this project.\n   * @beta\n   */\n  public readonly versionPolicyName: string | undefined;\n\n  /**\n   * The full path of the folder that will get published by Rush.\n   *\n   * @remarks\n   * By default this is the same as the project folder, but a custom folder can be specified\n   * using the the \"publishFolder\" setting in rush.json.\n   *\n   * Example: `C:\\MyRepo\\libraries\\my-project\\temp\\publish`\n   */\n  public readonly publishFolder: string;\n\n  /**\n   * An optional set of custom tags that can be used to select this project.\n   *\n   * @remarks\n   * For example, adding `my-custom-tag` will allow this project to be selected by the\n   * command `rush list --only tag:my-custom-tag`.  The tag name must be one or more words separated\n   * by hyphens, where a word may contain lowercase letters, digits, and the period character.\n   *\n   * @beta\n   */\n  public readonly tags: ReadonlySet<string>;\n\n  /**\n   * Returns the subspace name specified in the `\"subspaceName\"` field in `rush.json`.\n   * Note that this field may be undefined, if the `default` subspace is being used,\n   * and this field may be ignored if the subspaces feature is disabled.\n   *\n   * @beta\n   */\n  public readonly configuredSubspaceName: string | undefined;\n\n  /** @internal */\n  public constructor(options: IRushConfigurationProjectOptions) {\n    const { projectJson, rushConfiguration, tempProjectName, allowedProjectTags } = options;\n    const { packageName, projectFolder: projectRelativeFolder } = projectJson;\n    this.rushConfiguration = rushConfiguration;\n    this.packageName = packageName;\n    this.projectRelativeFolder = projectRelativeFolder;\n\n    validateRelativePathField(projectRelativeFolder, 'projectFolder', rushConfiguration.rushJsonFile);\n\n    // For example, the depth of \"a/b/c\" would be 3.  The depth of \"a\" is 1.\n    const projectFolderDepth: number = projectRelativeFolder.split('/').length;\n    if (projectFolderDepth < rushConfiguration.projectFolderMinDepth) {\n      throw new Error(\n        `To keep things organized, this repository has a projectFolderMinDepth policy` +\n          ` requiring project folders to be at least ${rushConfiguration.projectFolderMinDepth} levels deep.` +\n          `  Problem folder: \"${projectRelativeFolder}\"`\n      );\n    }\n    if (projectFolderDepth > rushConfiguration.projectFolderMaxDepth) {\n      throw new Error(\n        `To keep things organized, this repository has a projectFolderMaxDepth policy` +\n          ` preventing project folders from being deeper than ${rushConfiguration.projectFolderMaxDepth} levels.` +\n          `  Problem folder:  \"${projectRelativeFolder}\"`\n      );\n    }\n\n    const absoluteProjectFolder: string = path.join(rushConfiguration.rushJsonFolder, projectRelativeFolder);\n    this.projectFolder = absoluteProjectFolder;\n    const packageJsonFilename: string = path.join(absoluteProjectFolder, FileConstants.PackageJson);\n\n    try {\n      const packageJsonText: string = FileSystem.readFile(packageJsonFilename);\n      // JSON.parse is native and runs in less than 1/2 the time of jju.parse. package.json is required to be strict JSON by NodeJS.\n      this._packageJson = JSON.parse(packageJsonText);\n    } catch (error) {\n      if (FileSystem.isNotExistError(error as Error)) {\n        throw new Error(`Could not find package.json for ${packageName} at ${packageJsonFilename}`);\n      }\n\n      // Encountered an error while loading the package.json file. Please append the error message with the corresponding file location.\n      if (error instanceof SyntaxError) {\n        error.message = `${error.message}\\nFilename: ${packageJsonFilename}`;\n      }\n      throw error;\n    }\n\n    this.projectRushConfigFolder = path.join(absoluteProjectFolder, 'config', 'rush');\n    this.projectRushTempFolder = path.join(\n      absoluteProjectFolder,\n      RushConstants.projectRushFolderName,\n      RushConstants.rushTempFolderName\n    );\n\n    // Are we using a package review file?\n    if (rushConfiguration.approvedPackagesPolicy.enabled) {\n      // If so, then every project needs to have a reviewCategory that was defined\n      // by the reviewCategories array.\n      if (!projectJson.reviewCategory) {\n        throw new Error(\n          `The \"approvedPackagesPolicy\" feature is enabled ${RushConstants.rushJsonFilename}, but a reviewCategory` +\n            ` was not specified for the project \"${packageName}\".`\n        );\n      }\n      if (!rushConfiguration.approvedPackagesPolicy.reviewCategories.has(projectJson.reviewCategory)) {\n        throw new Error(\n          `The project \"${packageName}\" specifies its reviewCategory as` +\n            `\"${projectJson.reviewCategory}\" which is not one of the defined reviewCategories.`\n        );\n      }\n      this.reviewCategory = projectJson.reviewCategory;\n    }\n\n    if (this.packageJson.name !== this.packageName) {\n      throw new Error(\n        `The package name \"${this.packageName}\" specified in ${RushConstants.rushJsonFilename} does not` +\n          ` match the name \"${this.packageJson.name}\" from package.json`\n      );\n    }\n\n    if (!semver.valid(this.packageJson.version)) {\n      throw new Error(\n        `The value \"${this.packageJson.version}\" is not valid SemVer syntax for the \\\"version\\\" field` +\n          ` in the file \"${packageJsonFilename}\"`\n      );\n    }\n\n    this.packageJsonEditor = SaveCallbackPackageJsonEditor.fromObjectWithCallback({\n      object: this.packageJson,\n      filename: packageJsonFilename,\n      onSaved: (newObject) => {\n        // Just update the in-memory copy, don't bother doing the validation again\n        this._packageJson = newObject;\n        this._dependencyProjects = undefined; // Reset the cached dependency projects\n      }\n    });\n\n    this.tempProjectName = tempProjectName;\n\n    // The \"rushProject.tempProjectName\" is guaranteed to be unique name (e.g. by adding the \"-2\"\n    // suffix).  Even after we strip the NPM scope, it will still be unique.\n    // Example: \"my-project-2\"\n    this.unscopedTempProjectName = PackageNameParsers.permissive.getUnscopedName(tempProjectName);\n\n    this.decoupledLocalDependencies = new Set<string>();\n    if (projectJson.cyclicDependencyProjects || projectJson.decoupledLocalDependencies) {\n      if (projectJson.cyclicDependencyProjects && projectJson.decoupledLocalDependencies) {\n        throw new Error(\n          'A project configuration cannot specify both \"decoupledLocalDependencies\" and \"cyclicDependencyProjects\". Please use \"decoupledLocalDependencies\" only -- the other name is deprecated.'\n        );\n      }\n      for (const cyclicDependencyProject of projectJson.cyclicDependencyProjects ||\n        projectJson.decoupledLocalDependencies) {\n        this.decoupledLocalDependencies.add(cyclicDependencyProject);\n      }\n    }\n    this._shouldPublish = !!projectJson.shouldPublish;\n    this.skipRushCheck = !!projectJson.skipRushCheck;\n    this.versionPolicyName = projectJson.versionPolicyName;\n\n    if (this._shouldPublish && this.packageJson.private) {\n      throw new Error(\n        `The project \"${packageName}\" specifies \"shouldPublish\": true, ` +\n          `but the package.json file specifies \"private\": true.`\n      );\n    }\n\n    this.publishFolder = absoluteProjectFolder;\n    const { publishFolder } = projectJson;\n    if (publishFolder) {\n      validateRelativePathField(publishFolder, 'publishFolder', rushConfiguration.rushJsonFile);\n      this.publishFolder = path.join(this.publishFolder, publishFolder);\n    }\n\n    if (allowedProjectTags && projectJson.tags) {\n      const tags: Set<string> = new Set();\n      for (const tag of projectJson.tags) {\n        if (!allowedProjectTags.has(tag)) {\n          throw new Error(\n            `The tag \"${tag}\" specified for project \"${packageName}\" is not listed in the ` +\n              `allowedProjectTags field in ${RushConstants.rushJsonFilename}.`\n          );\n        } else {\n          tags.add(tag);\n        }\n      }\n      this.tags = tags;\n    } else {\n      this.tags = new Set(projectJson.tags);\n    }\n\n    this.configuredSubspaceName = projectJson.subspaceName;\n    this.subspace = options.subspace;\n  }\n\n  /**\n   * A list of local projects that appear as devDependencies for this project, but cannot be\n   * locally linked because it would create a cyclic dependency; instead, the last published\n   * version will be installed in the Common folder.\n   *\n   * These are package names that would be found by RushConfiguration.getProjectByName().\n   *\n   * @deprecated Use `decoupledLocalDependencies` instead, as it better describes the purpose of the data.\n   */\n  public get cyclicDependencyProjects(): Set<string> {\n    return this.decoupledLocalDependencies;\n  }\n\n  /**\n   * An array of projects within the Rush configuration which directly depend on this package.\n   * @deprecated Use `consumingProjectNames` instead, as it has Set semantics, which better reflect the nature\n   * of the data.\n   */\n  public get downstreamDependencyProjects(): string[] {\n    return Array.from(this.consumingProjects, (project: RushConfigurationProject) => project.packageName);\n  }\n\n  /**\n   * An array of projects within the Rush configuration which this project declares as dependencies.\n   * @deprecated Use `dependencyProjects` instead, as it has Set semantics, which better reflect the nature\n   * of the data.\n   */\n  public get localDependencyProjects(): ReadonlyArray<RushConfigurationProject> {\n    return [...this.dependencyProjects];\n  }\n\n  /**\n   * The set of projects within the Rush configuration which this project declares as dependencies.\n   *\n   * @remarks\n   * Can be used recursively to walk the project dependency graph to find all projects that are directly or indirectly\n   * referenced from this project.\n   */\n  public get dependencyProjects(): ReadonlySet<RushConfigurationProject> {\n    let dependencyProjects: Set<RushConfigurationProject> | undefined = this._dependencyProjects;\n    if (!dependencyProjects) {\n      this._dependencyProjects = dependencyProjects = new Set();\n      const { packageJson } = this;\n      for (const dependencySet of [\n        packageJson.dependencies,\n        packageJson.devDependencies,\n        packageJson.optionalDependencies\n      ]) {\n        if (dependencySet) {\n          for (const [dependency, version] of Object.entries(dependencySet)) {\n            const dependencySpecifier: DependencySpecifier = new DependencySpecifier(dependency, version);\n            const dependencyName: string =\n              dependencySpecifier.aliasTarget?.packageName ?? dependencySpecifier.packageName;\n            // Skip if we can't find the local project or it's a cyclic dependency\n            const localProject: RushConfigurationProject | undefined =\n              this.rushConfiguration.getProjectByName(dependencyName);\n            if (localProject && !this.decoupledLocalDependencies.has(dependency)) {\n              // Set the value if it's a workspace project, or if we have a local project and the semver is satisfied\n              switch (dependencySpecifier.specifierType) {\n                case DependencySpecifierType.Version:\n                case DependencySpecifierType.Range:\n                  if (\n                    semver.satisfies(localProject.packageJson.version, dependencySpecifier.versionSpecifier)\n                  ) {\n                    dependencyProjects.add(localProject);\n                  }\n                  break;\n                case DependencySpecifierType.Workspace:\n                  dependencyProjects.add(localProject);\n                  break;\n              }\n            }\n          }\n        }\n      }\n    }\n    return dependencyProjects;\n  }\n\n  /**\n   * The set of projects within the Rush configuration which declare this project as a dependency.\n   * Excludes those that declare this project as a `cyclicDependencyProject`.\n   *\n   * @remarks\n   * This field is the counterpart to `dependencyProjects`, and can be used recursively to walk the project dependency\n   * graph to find all projects which will be impacted by changes to this project.\n   */\n  public get consumingProjects(): ReadonlySet<RushConfigurationProject> {\n    if (!this._consumingProjects) {\n      // Force initialize all dependency relationships\n      // This needs to operate on every project in the set because the relationships are only specified\n      // in the consuming project\n      const { projects } = this.rushConfiguration;\n\n      for (const project of projects) {\n        project._consumingProjects = new Set();\n      }\n\n      for (const project of projects) {\n        for (const dependency of project.dependencyProjects) {\n          dependency._consumingProjects!.add(project);\n        }\n      }\n    }\n    return this._consumingProjects!;\n  }\n\n  /**\n   * A flag which indicates whether changes to this project should be published. This controls\n   * whether or not the project would show up when running `rush change`, and whether or not it\n   * should be published during `rush publish`.\n   */\n  public get shouldPublish(): boolean {\n    return this._shouldPublish || !!this.versionPolicyName;\n  }\n\n  /**\n   * Version policy of the project\n   * @beta\n   */\n  public get versionPolicy(): VersionPolicy | undefined {\n    if (!this._versionPolicy) {\n      if (this.versionPolicyName && this.rushConfiguration.versionPolicyConfiguration) {\n        this._versionPolicy = this.rushConfiguration.versionPolicyConfiguration.getVersionPolicy(\n          this.versionPolicyName\n        );\n      }\n    }\n    return this._versionPolicy;\n  }\n\n  /**\n   * Indicate whether this project is the main project for the related version policy.\n   *\n   * False if the project is not for publishing.\n   * True if the project is individually versioned or if its lockstep version policy does not specify main project.\n   * False if the project is lockstepped and is not the main project for its version policy.\n   *\n   * @beta\n   */\n  public get isMainProject(): boolean {\n    if (!this.shouldPublish) {\n      return false;\n    }\n    let isMain: boolean = true;\n    if (this.versionPolicy && this.versionPolicy.isLockstepped) {\n      const lockStepPolicy: LockStepVersionPolicy = this.versionPolicy as LockStepVersionPolicy;\n      if (lockStepPolicy.mainProject && lockStepPolicy.mainProject !== this.packageName) {\n        isMain = false;\n      }\n    }\n    return isMain;\n  }\n}\n\nexport function validateRelativePathField(relativePath: string, field: string, file: string): void {\n  // path.isAbsolute delegates depending on platform; however, path.posix.isAbsolute('C:/a') returns false,\n  // while path.win32.isAbsolute('C:/a') returns true. We want consistent validation across platforms.\n  if (path.posix.isAbsolute(relativePath) || path.win32.isAbsolute(relativePath)) {\n    throw new Error(\n      `The value \"${relativePath}\" in the \"${field}\" field in \"${file}\" must be a relative path.`\n    );\n  }\n\n  if (relativePath.includes('\\\\')) {\n    throw new Error(\n      `The value \"${relativePath}\" in the \"${field}\" field in \"${file}\" may not contain backslashes ('\\\\'), since they are interpreted differently` +\n        ` on POSIX and Windows. Paths must use '/' as the path separator.`\n    );\n  }\n\n  if (relativePath.endsWith('/')) {\n    throw new Error(\n      `The value \"${relativePath}\" in the \"${field}\" field in \"${file}\" may not end with a trailing '/' character.`\n    );\n  }\n\n  const normalized: string = path.posix.normalize(relativePath);\n  if (relativePath !== normalized) {\n    throw new Error(\n      `The value \"${relativePath}\" in the \"${field}\" field in \"${file}\" should be replaced with its normalized form \"${normalized}\".`\n    );\n  }\n}\n"]}