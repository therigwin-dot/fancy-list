{"version":3,"file":"CommandLineJson.js","sourceRoot":"","sources":["../../src/api/CommandLineJson.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * \"baseCommand\" from command-line.schema.json\n */\nexport interface IBaseCommandJson {\n  commandKind: 'bulk' | 'global' | 'phased';\n  name: string;\n  summary: string;\n  /**\n   * If omitted, the summary will be used instead.\n   */\n  description?: string;\n  safeForSimultaneousRushProcesses: boolean;\n  autoinstallerName?: string;\n  shellCommand?: string;\n}\n\n/**\n * \"bulkCommand\" from command-line.schema.json\n */\nexport interface IBulkCommandJson extends IBaseCommandJson {\n  commandKind: 'bulk';\n  enableParallelism: boolean;\n  ignoreDependencyOrder?: boolean;\n  ignoreMissingScript?: boolean;\n  incremental?: boolean;\n  allowWarningsInSuccessfulBuild?: boolean;\n  watchForChanges?: boolean;\n  disableBuildCache?: boolean;\n}\n\n/**\n * Base interface shared by the \"phasedCommand\" JSON entries and the post-processed\n * \"IPhase\" interface in the CommandLineConfiguration\n */\nexport interface IPhasedCommandWithoutPhasesJson extends IBaseCommandJson {\n  commandKind: 'phased';\n  enableParallelism: boolean;\n  incremental?: boolean;\n}\n\n/**\n * \"phasedCommand\" from command-line.schema.json\n */\nexport interface IPhasedCommandJson extends IPhasedCommandWithoutPhasesJson {\n  phases: string[];\n  watchOptions?: {\n    alwaysWatch: boolean;\n    debounceMs?: number;\n    watchPhases: string[];\n  };\n  installOptions?: {\n    alwaysInstall: boolean;\n  };\n}\n\n/**\n * \"globalCommand\" from command-line.schema.json\n */\nexport interface IGlobalCommandJson extends IBaseCommandJson {\n  commandKind: 'global';\n  shellCommand: string;\n}\n\nexport type CommandJson = IBulkCommandJson | IGlobalCommandJson | IPhasedCommandJson;\n\n/**\n * The dependencies of a phase.\n * @alpha\n */\nexport interface IPhaseDependencies {\n  /**\n   * Dependency phases within the same project.\n   */\n  self?: string[];\n  /**\n   * Dependency phases in upstream projects.\n   */\n  upstream?: string[];\n}\n\n/**\n * A phase, used in the phased command feature.\n * @alpha\n */\nexport interface IPhaseJson {\n  /**\n   * The name of the phase. Note that this value must start with the \\\"_phase:\\\" prefix.\n   */\n  name: string;\n  /**\n   * The dependencies of this phase.\n   */\n  dependencies?: IPhaseDependencies;\n  /**\n   * Normally Rush requires that each project's package.json has a \\\"scripts\\\" entry matching the phase name. To disable this check, set \\\"ignoreMissingScript\\\" to true.\n   */\n  ignoreMissingScript?: boolean;\n  /**\n   * What should happen if the script is not defined in a project's package.json scripts field. Default is \"error\". Supersedes \\\"ignoreMissingScript\\\".\n   */\n  missingScriptBehavior?: 'silent' | 'log' | 'error';\n  /**\n   * By default, Rush returns a nonzero exit code if errors or warnings occur during a command. If this option is set to \\\"true\\\", Rush will return a zero exit code if warnings occur during the execution of this phase.\n   */\n  allowWarningsOnSuccess?: boolean;\n}\n\n/**\n * \"baseParameter\" from command-line.schema.json\n * @public\n */\nexport interface IBaseParameterJson {\n  /**\n   * Indicates the kind of syntax for this command-line parameter: \\\"flag\\\" or \\\"choice\\\" or \\\"string\\\" or \\\"stringList\\\" or \\\"integerList\\\" or \\\"choiceList\\\".\n   */\n  parameterKind: 'flag' | 'choice' | 'string' | 'integer' | 'stringList' | 'integerList' | 'choiceList';\n  /**\n   * The name of the parameter (e.g. \\\"--verbose\\\").  This is a required field.\n   */\n  longName: string;\n  /**\n   * An optional short form of the parameter (e.g. \\\"-v\\\" instead of \\\"--verbose\\\").\n   */\n  shortName?: string;\n  /**\n   * A detailed description of the parameter, which appears when requesting help for the command (e.g. \\\"rush --help my-command\\\").\n   */\n  description: string;\n  /**\n   * A list of custom commands and/or built-in Rush commands that this parameter may be used with, by name.\n   */\n  associatedCommands?: string[];\n  /**\n   * A list of the names of the phases that this command-line parameter should be provided to.\n   */\n  associatedPhases?: string[];\n  /**\n   * If true, then this parameter must be included on the command line.\n   */\n  required?: boolean;\n}\n\n/**\n * A custom command-line parameter whose presence acts as an on/off switch.\n * @public\n */\nexport interface IFlagParameterJson extends IBaseParameterJson {\n  /**\n   * Denotes that this is a flag (boolean) parameter.\n   */\n  parameterKind: 'flag';\n}\n\n/**\n * Part of \"choiceParameter\" from command-line.schema.json\n * @public\n */\nexport interface IChoiceParameterAlternativeJson {\n  /**\n   * A token that is one of the alternatives that can be used with the choice parameter, e.g. \\\"vanilla\\\" in \\\"--flavor vanilla\\\".\n   */\n  name: string;\n  /**\n   * A detailed description for the alternative that will be shown in the command-line help.\n   */\n  description: string;\n}\n\n/**\n * A custom command-line parameter whose argument must be chosen from a list of allowable alternatives.\n * @public\n */\nexport interface IChoiceParameterJson extends IBaseParameterJson {\n  /**\n   * Denotes that this is a choice parameter.\n   */\n  parameterKind: 'choice';\n  /**\n   * A list of alternative argument values that can be chosen for this parameter.\n   */\n  alternatives: IChoiceParameterAlternativeJson[];\n  /**\n   * If the parameter is omitted from the command line, this value will be inserted by default.\n   */\n  defaultValue?: string;\n}\n\n/**\n * A custom command-line parameter whose value is interpreted as a string.\n * @public\n */\nexport interface IStringParameterJson extends IBaseParameterJson {\n  /**\n   * Denotes that this is a string parameter.\n   */\n  parameterKind: 'string';\n  /**\n   * The name of the argument for this parameter.\n   */\n  argumentName: string;\n}\n/**\n * A custom command-line parameter whose value is interpreted as a integer.\n * @public\n */\nexport interface IIntegerParameterJson extends IBaseParameterJson {\n  /**\n   * Denotes that this is a string parameter.\n   */\n  parameterKind: 'integer';\n  /**\n   * The name of the argument for this parameter.\n   */\n  argumentName: string;\n}\n\n/**\n * A custom command-line parameter whose presence acts as a list of string\n * @public\n */\nexport interface IStringListParameterJson extends IBaseParameterJson {\n  /**\n   * Denotes that this is a string list parameter.\n   */\n  parameterKind: 'stringList';\n  /**\n   * The name of the argument for this parameter.\n   */\n  argumentName: string;\n}\n/**\n * A custom command-line parameter whose presence acts as a list of integer\n * @public\n */\nexport interface IIntegerListParameterJson extends IBaseParameterJson {\n  /**\n   * Denotes that this is a integer list parameter.\n   */\n  parameterKind: 'integerList';\n  /**\n   * The name of the argument for this parameter.\n   */\n  argumentName: string;\n}\n/**\n * A custom command-line parameter whose presence acts as a list of choice\n * @public\n */\nexport interface IChoiceListParameterJson extends IBaseParameterJson {\n  /**\n   * Denotes that this is a choice list parameter.\n   */\n  parameterKind: 'choiceList';\n  /**\n   * A list of alternative argument values that can be chosen for this parameter.\n   */\n  alternatives: IChoiceParameterAlternativeJson[];\n}\n\nexport type ParameterJson =\n  | IFlagParameterJson\n  | IChoiceParameterJson\n  | IStringParameterJson\n  | IIntegerParameterJson\n  | IStringListParameterJson\n  | IIntegerListParameterJson\n  | IChoiceListParameterJson;\n\n/**\n * Interfaces for the file format described by command-line.schema.json\n */\nexport interface ICommandLineJson {\n  commands?: CommandJson[];\n  phases?: IPhaseJson[];\n  parameters?: ParameterJson[];\n}\n"]}