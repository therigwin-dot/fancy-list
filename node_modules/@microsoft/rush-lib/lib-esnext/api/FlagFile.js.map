{"version":3,"file":"FlagFile.js","sourceRoot":"","sources":["../../src/api/FlagFile.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAmB,MAAM,8BAA8B,CAAC;AACrF,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AAEnE;;;GAGG;AACH,MAAM,OAAO,QAAQ;IAWnB;;;;OAIG;IACH,YAAmB,UAAkB,EAAE,QAAgB,EAAE,YAAoB;QAC3E,IAAI,CAAC,IAAI,GAAG,GAAG,UAAU,IAAI,QAAQ,OAAO,CAAC;QAC7C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,YAAY;QACvB,IAAI,QAAgC,CAAC;QACrC,IAAI,CAAC;YACH,QAAQ,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,QAAQ,GAAe,IAAI,CAAC,MAAM,CAAC;YACzC,OAAO,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,WAAW;QACtB,MAAM,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE;YAC/C,kBAAkB,EAAE,IAAI;SACzB,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,UAAU;QACrB,MAAM,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, JsonFile, type JsonObject } from '@rushstack/node-core-library';\nimport { objectsAreDeepEqual } from '../utilities/objectUtilities';\n\n/**\n * A base class for flag file.\n * @internal\n */\nexport class FlagFile<TState extends JsonObject = JsonObject> {\n  /**\n   * Flag file path\n   */\n  public readonly path: string;\n\n  /**\n   * Content of the flag\n   */\n  protected _state: TState;\n\n  /**\n   * Creates a new flag file\n   * @param folderPath - the folder that this flag is managing\n   * @param state - optional, the state that should be managed or compared\n   */\n  public constructor(folderPath: string, flagName: string, initialState: TState) {\n    this.path = `${folderPath}/${flagName}.flag`;\n    this._state = initialState;\n  }\n\n  /**\n   * Returns true if the file exists and the contents match the current state.\n   */\n  public async isValidAsync(): Promise<boolean> {\n    let oldState: JsonObject | undefined;\n    try {\n      oldState = await JsonFile.loadAsync(this.path);\n      const newState: JsonObject = this._state;\n      return objectsAreDeepEqual(oldState, newState);\n    } catch (err) {\n      return false;\n    }\n  }\n\n  /**\n   * Writes the flag file to disk with the current state\n   */\n  public async createAsync(): Promise<void> {\n    await JsonFile.saveAsync(this._state, this.path, {\n      ensureFolderExists: true\n    });\n  }\n\n  /**\n   * Removes the flag file\n   */\n  public async clearAsync(): Promise<void> {\n    await FileSystem.deleteFileAsync(this.path);\n  }\n}\n"]}