{"version":3,"file":"EnvironmentConfiguration.js","sourceRoot":"","sources":["../../src/api/EnvironmentConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\nimport * as path from 'path';\nimport { trueCasePathSync } from 'true-case-path';\n\nimport type { IEnvironment } from '../utilities/Utilities';\n\n/**\n * @beta\n */\nexport interface IEnvironmentConfigurationInitializeOptions {\n  doNotNormalizePaths?: boolean;\n}\n\n/**\n * Names of environment variables used by Rush.\n * @beta\n */\n// eslint-disable-next-line @typescript-eslint/typedef\nexport const EnvironmentVariableNames = {\n  /**\n   * This variable overrides the temporary folder used by Rush.\n   * The default value is \"common/temp\" under the repository root.\n   *\n   * @remarks This environment variable is not compatible with workspace installs. If attempting\n   * to move the PNPM store path, see the `RUSH_PNPM_STORE_PATH` environment variable.\n   */\n  RUSH_TEMP_FOLDER: 'RUSH_TEMP_FOLDER',\n\n  /**\n   * This variable overrides the version of Rush that will be installed by\n   * the version selector.  The default value is determined by the \"rushVersion\"\n   * field from rush.json.\n   */\n  RUSH_PREVIEW_VERSION: 'RUSH_PREVIEW_VERSION',\n\n  /**\n   * If this variable is set to \"1\", Rush will not fail the build when running a version\n   * of Node that does not match the criteria specified in the \"nodeSupportedVersionRange\"\n   * field from rush.json.\n   */\n  RUSH_ALLOW_UNSUPPORTED_NODEJS: 'RUSH_ALLOW_UNSUPPORTED_NODEJS',\n\n  /**\n   * Setting this environment variable overrides the value of `allowWarningsInSuccessfulBuild`\n   * in the `command-line.json` configuration file. Specify `1` to allow warnings in a successful build,\n   * or `0` to disallow them. (See the comments in the command-line.json file for more information).\n   */\n  RUSH_ALLOW_WARNINGS_IN_SUCCESSFUL_BUILD: 'RUSH_ALLOW_WARNINGS_IN_SUCCESSFUL_BUILD',\n\n  /**\n   * This variable selects a specific installation variant for Rush to use when installing\n   * and linking package dependencies.\n   * For more information, see the command-line help for the `--variant` parameter\n   * and this article:  https://rushjs.io/pages/advanced/installation_variants/\n   */\n  RUSH_VARIANT: 'RUSH_VARIANT',\n\n  /**\n   * Specifies the maximum number of concurrent processes to launch during a build.\n   * For more information, see the command-line help for the `--parallelism` parameter for \"rush build\".\n   */\n  RUSH_PARALLELISM: 'RUSH_PARALLELISM',\n\n  /**\n   * If this variable is set to \"1\", Rush will create symlinks with absolute paths instead\n   * of relative paths. This can be necessary when a repository is moved during a build or\n   * if parts of a repository are moved into a sandbox.\n   */\n  RUSH_ABSOLUTE_SYMLINKS: 'RUSH_ABSOLUTE_SYMLINKS',\n\n  /**\n   * When using PNPM as the package manager, this variable can be used to configure the path that\n   * PNPM will use as the store directory.\n   *\n   * If a relative path is used, then the store path will be resolved relative to the process's\n   * current working directory.  An absolute path is recommended.\n   */\n  RUSH_PNPM_STORE_PATH: 'RUSH_PNPM_STORE_PATH',\n\n  /**\n   * When using PNPM as the package manager, this variable can be used to control whether or not PNPM\n   * validates the integrity of the PNPM store during installation. The value of this environment variable must be\n   * `1` (for true) or `0` (for false). If not specified, defaults to the value in .npmrc.\n   */\n  RUSH_PNPM_VERIFY_STORE_INTEGRITY: 'RUSH_PNPM_VERIFY_STORE_INTEGRITY',\n\n  /**\n   * This environment variable can be used to specify the `--target-folder` parameter\n   * for the \"rush deploy\" command.\n   */\n  RUSH_DEPLOY_TARGET_FOLDER: 'RUSH_DEPLOY_TARGET_FOLDER',\n\n  /**\n   * Overrides the location of the `~/.rush` global folder where Rush stores temporary files.\n   *\n   * @remarks\n   *\n   * Most of the temporary files created by Rush are stored separately for each monorepo working folder,\n   * to avoid issues of concurrency and compatibility between tool versions.  However, a small set\n   * of files (e.g. installations of the `@microsoft/rush-lib` engine and the package manager) are stored\n   * in a global folder to speed up installations.  The default location is `~/.rush` on POSIX-like\n   * operating systems or `C:\\Users\\YourName` on Windows.\n   *\n   * Use `RUSH_GLOBAL_FOLDER` to specify a different folder path.  This is useful for example if a Windows\n   * group policy forbids executing scripts installed in a user's home directory.\n   *\n   * POSIX is a registered trademark of the Institute of Electrical and Electronic Engineers, Inc.\n   */\n  RUSH_GLOBAL_FOLDER: 'RUSH_GLOBAL_FOLDER',\n\n  /**\n   * Provides a credential for a remote build cache, if configured.  This credential overrides any cached credentials.\n   *\n   * @remarks\n   * Setting this environment variable overrides whatever credential has been saved in the\n   * local cloud cache credentials using `rush update-cloud-credentials`.\n   *\n   *\n   * If Azure Blob Storage is used to store cache entries, this must be a SAS token serialized as query\n   * parameters.\n   *\n   * For information on SAS tokens, see here: https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview\n   */\n  RUSH_BUILD_CACHE_CREDENTIAL: 'RUSH_BUILD_CACHE_CREDENTIAL',\n\n  /**\n   * Setting this environment variable overrides the value of `buildCacheEnabled` in the `build-cache.json`\n   * configuration file.\n   *\n   * @remarks\n   * Specify `1` to enable the build cache or `0` to disable it.\n   *\n   * If there is no build cache configured, then this environment variable is ignored.\n   */\n  RUSH_BUILD_CACHE_ENABLED: 'RUSH_BUILD_CACHE_ENABLED',\n\n  /**\n   * Overrides the value of `isCacheWriteAllowed` in the `build-cache.json` configuration file. The value of this\n   * environment variable must be `1` (for true) or `0` (for false). If there is no build cache configured, then\n   * this environment variable is ignored.\n   */\n  RUSH_BUILD_CACHE_WRITE_ALLOWED: 'RUSH_BUILD_CACHE_WRITE_ALLOWED',\n\n  /**\n   * Setting this environment variable opts into running with cobuilds. The context id should be the same across\n   * multiple VMs, but changed when it is a new round of cobuilds.\n   *\n   * e.g. `Build.BuildNumber` in Azure DevOps Pipeline.\n   *\n   * @remarks\n   * If there is no cobuild configured, then this environment variable is ignored.\n   */\n  RUSH_COBUILD_CONTEXT_ID: 'RUSH_COBUILD_CONTEXT_ID',\n\n  /**\n   * Explicitly specifies a name for each participating cobuild runner.\n   *\n   * Setting this environment variable opts into running with cobuilds.\n   *\n   * @remarks\n   * This environment variable is optional, if it is not provided, a random id is used.\n   *\n   * If there is no cobuild configured, then this environment variable is ignored.\n   */\n  RUSH_COBUILD_RUNNER_ID: 'RUSH_COBUILD_RUNNER_ID',\n\n  /**\n   * If this variable is set to \"1\", When getting distributed builds, Rush will automatically handle the leaf project\n   * with build cache \"disabled\" by writing to the cache in a special \"log files only mode\". This is useful when you\n   * want to use Cobuilds to improve the performance in CI validations and the leaf projects have not enabled cache.\n   */\n  RUSH_COBUILD_LEAF_PROJECT_LOG_ONLY_ALLOWED: 'RUSH_COBUILD_LEAF_PROJECT_LOG_ONLY_ALLOWED',\n\n  /**\n   * Explicitly specifies the path for the Git binary that is invoked by certain Rush operations.\n   */\n  RUSH_GIT_BINARY_PATH: 'RUSH_GIT_BINARY_PATH',\n\n  /**\n   * Explicitly specifies the path for the `tar` binary that is invoked by certain Rush operations.\n   */\n  RUSH_TAR_BINARY_PATH: 'RUSH_TAR_BINARY_PATH',\n\n  /**\n   * Internal variable used by `rushx` when recursively invoking another `rushx` process, to avoid\n   * nesting event hooks.\n   */\n  _RUSH_RECURSIVE_RUSHX_CALL: '_RUSH_RECURSIVE_RUSHX_CALL',\n\n  /**\n   * Internal variable that explicitly specifies the path for the version of `@microsoft/rush-lib` being executed.\n   * Will be set upon loading Rush.\n   */\n  _RUSH_LIB_PATH: '_RUSH_LIB_PATH',\n\n  /**\n   * When Rush executes shell scripts, it sometimes changes the working directory to be a project folder or\n   * the repository root folder.  The original working directory (where the Rush command was invoked) is assigned\n   * to the the child process's `RUSH_INVOKED_FOLDER` environment variable, in case it is needed by the script.\n   *\n   * @remarks\n   * The `RUSH_INVOKED_FOLDER` variable is the same idea as the `INIT_CWD` variable that package managers\n   * assign when they execute lifecycle scripts.\n   */\n  RUSH_INVOKED_FOLDER: 'RUSH_INVOKED_FOLDER',\n\n  /**\n   * When running a hook script, this environment variable communicates the original arguments\n   * passed to the `rush` or `rushx` command.\n   *\n   * @remarks\n   * Unlike `RUSH_INVOKED_FOLDER`, the `RUSH_INVOKED_ARGS` variable is only available for hook scripts.\n   * Other lifecycle scripts should not make assumptions about Rush's command line syntax\n   * if Rush did not explicitly pass along command-line parameters to their process.\n   */\n  RUSH_INVOKED_ARGS: 'RUSH_INVOKED_ARGS'\n} as const;\n\n/**\n * Provides Rush-specific environment variable data. All Rush environment variables must start with \"RUSH_\". This class\n * is designed to be used by RushConfiguration.\n * @beta\n *\n * @remarks\n * Initialize will throw if any unknown parameters are present.\n */\nexport class EnvironmentConfiguration {\n  private static _hasBeenValidated: boolean = false;\n\n  private static _rushTempFolderOverride: string | undefined;\n\n  private static _absoluteSymlinks: boolean = false;\n\n  private static _allowUnsupportedNodeVersion: boolean = false;\n\n  private static _allowWarningsInSuccessfulBuild: boolean = false;\n\n  private static _pnpmStorePathOverride: string | undefined;\n\n  private static _pnpmVerifyStoreIntegrity: boolean | undefined;\n\n  private static _rushGlobalFolderOverride: string | undefined;\n\n  private static _buildCacheCredential: string | undefined;\n\n  private static _buildCacheEnabled: boolean | undefined;\n\n  private static _buildCacheWriteAllowed: boolean | undefined;\n\n  private static _cobuildContextId: string | undefined;\n\n  private static _cobuildRunnerId: string | undefined;\n\n  private static _cobuildLeafProjectLogOnlyAllowed: boolean | undefined;\n\n  private static _gitBinaryPath: string | undefined;\n\n  private static _tarBinaryPath: string | undefined;\n\n  /**\n   * An override for the common/temp folder path.\n   */\n  public static get rushTempFolderOverride(): string | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._rushTempFolderOverride;\n  }\n\n  /**\n   * If \"1\", create symlinks with absolute paths instead of relative paths.\n   * See {@link EnvironmentVariableNames.RUSH_ABSOLUTE_SYMLINKS}\n   */\n  public static get absoluteSymlinks(): boolean {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._absoluteSymlinks;\n  }\n\n  /**\n   * If this environment variable is set to \"1\", the Node.js version check will print a warning\n   * instead of causing a hard error if the environment's Node.js version doesn't match the\n   * version specifier in `rush.json`'s \"nodeSupportedVersionRange\" property.\n   *\n   * See {@link EnvironmentVariableNames.RUSH_ALLOW_UNSUPPORTED_NODEJS}.\n   */\n  public static get allowUnsupportedNodeVersion(): boolean {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._allowUnsupportedNodeVersion;\n  }\n\n  /**\n   * Setting this environment variable overrides the value of `allowWarningsInSuccessfulBuild`\n   * in the `command-line.json` configuration file. Specify `1` to allow warnings in a successful build,\n   * or `0` to disallow them. (See the comments in the command-line.json file for more information).\n   */\n  public static get allowWarningsInSuccessfulBuild(): boolean {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._allowWarningsInSuccessfulBuild;\n  }\n\n  /**\n   * An override for the PNPM store path, if `pnpmStore` configuration is set to 'path'\n   * See {@link EnvironmentVariableNames.RUSH_PNPM_STORE_PATH}\n   */\n  public static get pnpmStorePathOverride(): string | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._pnpmStorePathOverride;\n  }\n\n  /**\n   * If specified, enables or disables integrity verification of the pnpm store during install.\n   * See {@link EnvironmentVariableNames.RUSH_PNPM_VERIFY_STORE_INTEGRITY}\n   */\n  public static get pnpmVerifyStoreIntegrity(): boolean | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._pnpmVerifyStoreIntegrity;\n  }\n\n  /**\n   * Overrides the location of the `~/.rush` global folder where Rush stores temporary files.\n   * See {@link EnvironmentVariableNames.RUSH_GLOBAL_FOLDER}\n   */\n  public static get rushGlobalFolderOverride(): string | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._rushGlobalFolderOverride;\n  }\n\n  /**\n   * Provides a credential for reading from and writing to a remote build cache, if configured.\n   * See {@link EnvironmentVariableNames.RUSH_BUILD_CACHE_CREDENTIAL}\n   */\n  public static get buildCacheCredential(): string | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._buildCacheCredential;\n  }\n\n  /**\n   * If set, enables or disables the cloud build cache feature.\n   * See {@link EnvironmentVariableNames.RUSH_BUILD_CACHE_ENABLED}\n   */\n  public static get buildCacheEnabled(): boolean | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._buildCacheEnabled;\n  }\n\n  /**\n   * If set, enables or disables writing to the cloud build cache.\n   * See {@link EnvironmentVariableNames.RUSH_BUILD_CACHE_WRITE_ALLOWED}\n   */\n  public static get buildCacheWriteAllowed(): boolean | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._buildCacheWriteAllowed;\n  }\n\n  /**\n   * Provides a determined cobuild context id if configured\n   * See {@link EnvironmentVariableNames.RUSH_COBUILD_CONTEXT_ID}\n   */\n  public static get cobuildContextId(): string | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._cobuildContextId;\n  }\n\n  /**\n   * Provides a determined cobuild runner id if configured\n   * See {@link EnvironmentVariableNames.RUSH_COBUILD_RUNNER_ID}\n   */\n  public static get cobuildRunnerId(): string | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._cobuildRunnerId;\n  }\n\n  /**\n   * If set, enables or disables the cobuild leaf project log only feature.\n   * See {@link EnvironmentVariableNames.RUSH_COBUILD_LEAF_PROJECT_LOG_ONLY_ALLOWED}\n   */\n  public static get cobuildLeafProjectLogOnlyAllowed(): boolean | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._cobuildLeafProjectLogOnlyAllowed;\n  }\n\n  /**\n   * Allows the git binary path to be explicitly provided.\n   * See {@link EnvironmentVariableNames.RUSH_GIT_BINARY_PATH}\n   */\n  public static get gitBinaryPath(): string | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._gitBinaryPath;\n  }\n\n  /**\n   * Allows the tar binary path to be explicitly provided.\n   * See {@link EnvironmentVariableNames.RUSH_TAR_BINARY_PATH}\n   */\n  public static get tarBinaryPath(): string | undefined {\n    EnvironmentConfiguration._ensureValidated();\n    return EnvironmentConfiguration._tarBinaryPath;\n  }\n\n  /**\n   * The front-end RushVersionSelector relies on `RUSH_GLOBAL_FOLDER`, so its value must be read before\n   * `EnvironmentConfiguration` is initialized (and actually before the correct version of `EnvironmentConfiguration`\n   * is even installed). Thus we need to read this environment variable differently from all the others.\n   * @internal\n   */\n  public static _getRushGlobalFolderOverride(processEnv: IEnvironment): string | undefined {\n    const value: string | undefined = processEnv[EnvironmentVariableNames.RUSH_GLOBAL_FOLDER];\n    if (value) {\n      const normalizedValue: string | undefined =\n        EnvironmentConfiguration._normalizeDeepestParentFolderPath(value);\n      return normalizedValue;\n    }\n  }\n\n  /**\n   * Reads and validates environment variables. If any are invalid, this function will throw.\n   */\n  public static validate(options: IEnvironmentConfigurationInitializeOptions = {}): void {\n    EnvironmentConfiguration.reset();\n\n    const unknownEnvVariables: string[] = [];\n    for (const envVarName in process.env) {\n      if (process.env.hasOwnProperty(envVarName) && envVarName.match(/^RUSH_/i)) {\n        const value: string | undefined = process.env[envVarName];\n        // Environment variables are only case-insensitive on Windows\n        const normalizedEnvVarName: string =\n          os.platform() === 'win32' ? envVarName.toUpperCase() : envVarName;\n        switch (normalizedEnvVarName) {\n          case EnvironmentVariableNames.RUSH_TEMP_FOLDER: {\n            EnvironmentConfiguration._rushTempFolderOverride =\n              value && !options.doNotNormalizePaths\n                ? EnvironmentConfiguration._normalizeDeepestParentFolderPath(value) || value\n                : value;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_ABSOLUTE_SYMLINKS: {\n            EnvironmentConfiguration._absoluteSymlinks =\n              EnvironmentConfiguration.parseBooleanEnvironmentVariable(\n                EnvironmentVariableNames.RUSH_ABSOLUTE_SYMLINKS,\n                value\n              ) ?? false;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_ALLOW_UNSUPPORTED_NODEJS: {\n            if (value === 'true' || value === 'false') {\n              // Small, undocumented acceptance of old \"true\" and \"false\" values for\n              // users of RUSH_ALLOW_UNSUPPORTED_NODEJS in rush pre-v5.46.\n              EnvironmentConfiguration._allowUnsupportedNodeVersion = value === 'true';\n            } else {\n              EnvironmentConfiguration._allowUnsupportedNodeVersion =\n                EnvironmentConfiguration.parseBooleanEnvironmentVariable(\n                  EnvironmentVariableNames.RUSH_ALLOW_UNSUPPORTED_NODEJS,\n                  value\n                ) ?? false;\n            }\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_ALLOW_WARNINGS_IN_SUCCESSFUL_BUILD: {\n            EnvironmentConfiguration._allowWarningsInSuccessfulBuild =\n              EnvironmentConfiguration.parseBooleanEnvironmentVariable(\n                EnvironmentVariableNames.RUSH_ALLOW_WARNINGS_IN_SUCCESSFUL_BUILD,\n                value\n              ) ?? false;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_PNPM_STORE_PATH: {\n            EnvironmentConfiguration._pnpmStorePathOverride =\n              value && !options.doNotNormalizePaths\n                ? EnvironmentConfiguration._normalizeDeepestParentFolderPath(value) || value\n                : value;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_PNPM_VERIFY_STORE_INTEGRITY: {\n            EnvironmentConfiguration._pnpmVerifyStoreIntegrity =\n              value === '1' ? true : value === '0' ? false : undefined;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_GLOBAL_FOLDER: {\n            // Handled specially below\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_BUILD_CACHE_CREDENTIAL: {\n            EnvironmentConfiguration._buildCacheCredential = value;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_BUILD_CACHE_ENABLED: {\n            EnvironmentConfiguration._buildCacheEnabled =\n              EnvironmentConfiguration.parseBooleanEnvironmentVariable(\n                EnvironmentVariableNames.RUSH_BUILD_CACHE_ENABLED,\n                value\n              );\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_BUILD_CACHE_WRITE_ALLOWED: {\n            EnvironmentConfiguration._buildCacheWriteAllowed =\n              EnvironmentConfiguration.parseBooleanEnvironmentVariable(\n                EnvironmentVariableNames.RUSH_BUILD_CACHE_WRITE_ALLOWED,\n                value\n              );\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_COBUILD_CONTEXT_ID: {\n            EnvironmentConfiguration._cobuildContextId = value;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_COBUILD_RUNNER_ID: {\n            EnvironmentConfiguration._cobuildRunnerId = value;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_COBUILD_LEAF_PROJECT_LOG_ONLY_ALLOWED: {\n            EnvironmentConfiguration._cobuildLeafProjectLogOnlyAllowed =\n              EnvironmentConfiguration.parseBooleanEnvironmentVariable(\n                EnvironmentVariableNames.RUSH_COBUILD_LEAF_PROJECT_LOG_ONLY_ALLOWED,\n                value\n              );\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_GIT_BINARY_PATH: {\n            EnvironmentConfiguration._gitBinaryPath = value;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_TAR_BINARY_PATH: {\n            EnvironmentConfiguration._tarBinaryPath = value;\n            break;\n          }\n\n          case EnvironmentVariableNames.RUSH_PARALLELISM:\n          case EnvironmentVariableNames.RUSH_PREVIEW_VERSION:\n          case EnvironmentVariableNames.RUSH_VARIANT:\n          case EnvironmentVariableNames.RUSH_DEPLOY_TARGET_FOLDER:\n            // Handled by @microsoft/rush front end\n            break;\n\n          case EnvironmentVariableNames.RUSH_INVOKED_FOLDER:\n          case EnvironmentVariableNames.RUSH_INVOKED_ARGS:\n          case EnvironmentVariableNames._RUSH_LIB_PATH:\n            // Assigned by Rush itself\n            break;\n\n          case EnvironmentVariableNames._RUSH_RECURSIVE_RUSHX_CALL:\n            // Assigned/read internally by RushXCommandLine\n            break;\n\n          default:\n            unknownEnvVariables.push(envVarName);\n            break;\n        }\n      }\n    }\n\n    // This strictness intends to catch mistakes where variables are misspelled or not used correctly.\n    if (unknownEnvVariables.length > 0) {\n      throw new Error(\n        'The following environment variables were found with the \"RUSH_\" prefix, but they are not ' +\n          `recognized by this version of Rush: ${unknownEnvVariables.join(', ')}`\n      );\n    }\n\n    // See doc comment for EnvironmentConfiguration._getRushGlobalFolderOverride().\n    EnvironmentConfiguration._rushGlobalFolderOverride =\n      EnvironmentConfiguration._getRushGlobalFolderOverride(process.env);\n\n    EnvironmentConfiguration._hasBeenValidated = true;\n  }\n\n  /**\n   * Resets EnvironmentConfiguration into an un-initialized state.\n   */\n  public static reset(): void {\n    EnvironmentConfiguration._rushTempFolderOverride = undefined;\n\n    EnvironmentConfiguration._hasBeenValidated = false;\n  }\n\n  private static _ensureValidated(): void {\n    if (!EnvironmentConfiguration._hasBeenValidated) {\n      EnvironmentConfiguration.validate();\n    }\n  }\n\n  public static parseBooleanEnvironmentVariable(\n    name: string,\n    value: string | undefined\n  ): boolean | undefined {\n    if (value === '' || value === undefined) {\n      return undefined;\n    } else if (value === '0') {\n      return false;\n    } else if (value === '1') {\n      return true;\n    } else {\n      throw new Error(\n        `Invalid value \"${value}\" for the environment variable ${name}. Valid choices are 0 or 1.`\n      );\n    }\n  }\n\n  /**\n   * Given a path to a folder (that may or may not exist), normalize the path, including casing,\n   * to the first existing parent folder in the path.\n   *\n   * If no existing path can be found (for example, if the root is a volume that doesn't exist),\n   * this function returns undefined.\n   *\n   * @example\n   * If the following path exists on disk: `C:\\Folder1\\folder2\\`\n   * _normalizeFirstExistingFolderPath('c:\\\\folder1\\\\folder2\\\\temp\\\\subfolder')\n   * returns 'C:\\\\Folder1\\\\folder2\\\\temp\\\\subfolder'\n   */\n  private static _normalizeDeepestParentFolderPath(folderPath: string): string | undefined {\n    folderPath = path.normalize(folderPath);\n    const endsWithSlash: boolean = folderPath.charAt(folderPath.length - 1) === path.sep;\n    const parsedPath: path.ParsedPath = path.parse(folderPath);\n    const pathRoot: string = parsedPath.root;\n    const pathWithoutRoot: string = parsedPath.dir.substr(pathRoot.length);\n    const pathParts: string[] = [...pathWithoutRoot.split(path.sep), parsedPath.name].filter(\n      (part) => !!part\n    );\n\n    // Starting with all path sections, and eliminating one from the end during each loop iteration,\n    // run trueCasePathSync. If trueCasePathSync returns without exception, we've found a subset\n    // of the path that exists and we've now gotten the correct casing.\n    //\n    // Once we've found a parent folder that exists, append the path sections that didn't exist.\n    for (let i: number = pathParts.length; i >= 0; i--) {\n      const constructedPath: string = path.join(pathRoot, ...pathParts.slice(0, i));\n      try {\n        const normalizedConstructedPath: string = trueCasePathSync(constructedPath);\n        const result: string = path.join(normalizedConstructedPath, ...pathParts.slice(i));\n        if (endsWithSlash) {\n          return `${result}${path.sep}`;\n        } else {\n          return result;\n        }\n      } catch (e) {\n        // This path doesn't exist, continue to the next subpath\n      }\n    }\n\n    return undefined;\n  }\n}\n"]}