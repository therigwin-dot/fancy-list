// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { FileSystem, NewlineKind } from '@rushstack/node-core-library';
import { Colorize } from '@rushstack/terminal';
import { BaseRushAction } from './BaseRushAction';
import { DeployScenarioConfiguration } from '../../logic/deploy/DeployScenarioConfiguration';
import { assetsFolderPath } from '../../utilities/PathConstants';
import { RushConstants } from '../../logic/RushConstants';
const CONFIG_TEMPLATE_PATH = `${assetsFolderPath}/rush-init-deploy/scenario-template.json`;
export class InitDeployAction extends BaseRushAction {
    constructor(parser) {
        super({
            actionName: 'init-deploy',
            summary: 'Creates a deployment scenario config file for use with "rush deploy".',
            documentation: 'Use this command to initialize a new scenario config file for use with "rush deploy".' +
                ' The default filename is common/config/rush/deploy.json. However, if you need to manage multiple' +
                ' deployments with different settings, you can use use "--scenario" to create additional config files.',
            parser
        });
        this._project = this.defineStringParameter({
            parameterLongName: '--project',
            parameterShortName: '-p',
            argumentName: 'PROJECT_NAME',
            required: true,
            description: 'Specifies the name of the main Rush project to be deployed in this scenario.' +
                ' It will be added to the "deploymentProjectNames" setting.'
        });
        this._scenario = this.defineStringParameter({
            parameterLongName: '--scenario',
            parameterShortName: '-s',
            argumentName: 'SCENARIO',
            description: 'By default, the deployment configuration will be written to "common/config/rush/deploy.json".' +
                ' You can use "--scenario" to specify an alternate name. The name must be lowercase and separated by dashes.' +
                ' For example, if the name is "web", then the config file would be "common/config/rush/deploy-web.json".'
        });
    }
    async runAsync() {
        const scenarioFilePath = DeployScenarioConfiguration.getConfigFilePath(this._scenario.value, this.rushConfiguration);
        if (FileSystem.exists(scenarioFilePath)) {
            throw new Error('The target file already exists:\n' +
                scenarioFilePath +
                '\nIf you intend to replace it, please delete the old file first.');
        }
        // eslint-disable-next-line no-console
        console.log(Colorize.green('Creating scenario file: ') + scenarioFilePath);
        const shortProjectName = this._project.value;
        const rushProject = this.rushConfiguration.findProjectByShorthandName(shortProjectName);
        if (!rushProject) {
            throw new Error(`The specified project was not found in ${RushConstants.rushJsonFilename}: "${shortProjectName}"`);
        }
        const templateContent = FileSystem.readFile(CONFIG_TEMPLATE_PATH);
        const expandedContent = templateContent.replace('[%PROJECT_NAME_TO_DEPLOY%]', rushProject.packageName);
        FileSystem.writeFile(scenarioFilePath, expandedContent, {
            ensureFolderExists: true,
            convertLineEndings: NewlineKind.OsDefault
        });
        // eslint-disable-next-line no-console
        console.log('\nFile successfully written. Please review the file contents before committing.');
    }
}
//# sourceMappingURL=InitDeployAction.js.map