// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { BaseAddAndRemoveAction } from './BaseAddAndRemoveAction';
import { getVariantAsync, VARIANT_PARAMETER } from '../../api/Variants';
export class RemoveAction extends BaseAddAndRemoveAction {
    constructor(parser) {
        const documentation = [
            'Removes specified package(s) from the dependencies of the current project (as determined by the current working directory)' +
                ' and then runs "rush update".'
        ].join('\n');
        super({
            actionName: 'remove',
            summary: 'Removes one or more dependencies from the package.json and runs rush update.',
            documentation,
            safeForSimultaneousRushProcesses: false,
            parser
        });
        this._terminal = parser.terminal;
        this._packageNameList = this.defineStringListParameter({
            parameterLongName: '--package',
            parameterShortName: '-p',
            required: true,
            argumentName: 'PACKAGE',
            description: 'The name of the package which should be removed.' +
                ' To remove multiple packages, run "rush remove --package foo --package bar".'
        });
        this._allFlag = this.defineFlagParameter({
            parameterLongName: '--all',
            description: 'If specified, the dependency will be removed from all projects that declare it.'
        });
        this._variantParameter = this.defineStringParameter(VARIANT_PARAMETER);
    }
    async getUpdateOptionsAsync() {
        const projects = super.getProjects();
        const packagesToRemove = [];
        for (const specifiedPackageName of this.specifiedPackageNameList) {
            /**
             * Name
             */
            const packageName = specifiedPackageName;
            if (!this.rushConfiguration.packageNameParser.isValidName(packageName)) {
                throw new Error(`The package name "${packageName}" is not valid.`);
            }
            for (const project of projects) {
                if (!project.packageJsonEditor.tryGetDependency(packageName) &&
                    !project.packageJsonEditor.tryGetDevDependency(packageName)) {
                    this._terminal.writeLine(`The project "${project.packageName}" does not have "${packageName}" in package.json.`);
                }
            }
            packagesToRemove.push({ packageName });
        }
        const variant = await getVariantAsync(this._variantParameter, this.rushConfiguration, true);
        return {
            projects: projects,
            packagesToUpdate: packagesToRemove,
            skipUpdate: this._skipUpdateFlag.value,
            debugInstall: this.parser.isDebug,
            actionName: this.actionName,
            variant
        };
    }
}
//# sourceMappingURL=RemoveAction.js.map