{"version":3,"file":"CheckAction.js","sourceRoot":"","sources":["../../../src/cli/actions/CheckAction.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAG3D,OAAO,EAAE,QAAQ,EAAkB,MAAM,qBAAqB,CAAC;AAG/D,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,qBAAqB,EAAE,MAAM,mDAAmD,CAAC;AAC1F,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAExE,MAAM,OAAO,WAAY,SAAQ,cAAc;IAO7C,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,OAAO;YACnB,OAAO,EACL,6FAA6F;gBAC7F,oCAAoC;YACtC,aAAa,EACX,wFAAwF;gBACxF,yCAAyC;YAC3C,gCAAgC,EAAE,IAAI;YACtC,MAAM;SACP,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACxC,iBAAiB,EAAE,QAAQ;YAC3B,WAAW,EAAE,2DAA2D;SACzE,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC3C,iBAAiB,EAAE,WAAW;YAC9B,WAAW,EACT,gFAAgF;gBAChF,6BAA6B,IAAI,CAAC,SAAS,CAAC,QAAQ,0BAA0B;SACjF,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC;YACnD,iBAAiB,EAAE,YAAY;YAC/B,YAAY,EAAE,eAAe;YAC7B,WAAW,EACT,0FAA0F;gBAC1F,mGAAmG;gBACnG,kEAAkE;SACrE,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;IACzE,CAAC;IAES,KAAK,CAAC,QAAQ;;QACtB,IAAI,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC/E,MAAM,IAAI,KAAK,CACb,yFAAyF,CAC1F,CAAC;QACJ,CAAC;QAED,MAAM,yBAAyB,GAC7B,MAAM,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,EAAE,CAAC;QACnE,MAAM,OAAO,GAAuB,MAAM,eAAe,CACvD,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,iBAAiB,EACtB,IAAI,CACL,CAAC;QACF,IAAI,CAAC,OAAO,IAAI,yBAAyB,EAAE,CAAC;YAC1C,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAC7B,QAAQ,CAAC,MAAM,CACb,YAAY,yBAAyB,oFAAoF;gBACvH,aAAa,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,KAAK,yBAAyB,sCAAsC,CACtI,CACF,CAAC;QACJ,CAAC;QAED,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,EAAE;YACtE,OAAO;YACP,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK;YACjC,4BAA4B,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK;YACtD,QAAQ,EAAE,CAAA,MAAA,IAAI,CAAC,kBAAkB,0CAAE,KAAK;gBACtC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;gBACnE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,eAAe;SAC3C,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { CommandLineFlagParameter, CommandLineStringParameter } from '@rushstack/ts-command-line';\nimport { Colorize, type ITerminal } from '@rushstack/terminal';\n\nimport type { RushCommandLineParser } from '../RushCommandLineParser';\nimport { BaseRushAction } from './BaseRushAction';\nimport { VersionMismatchFinder } from '../../logic/versionMismatch/VersionMismatchFinder';\nimport { getVariantAsync, VARIANT_PARAMETER } from '../../api/Variants';\n\nexport class CheckAction extends BaseRushAction {\n  private readonly _terminal: ITerminal;\n  private readonly _jsonFlag: CommandLineFlagParameter;\n  private readonly _verboseFlag: CommandLineFlagParameter;\n  private readonly _subspaceParameter: CommandLineStringParameter | undefined;\n  private readonly _variantParameter: CommandLineStringParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'check',\n      summary:\n        \"Checks each project's package.json files and ensures that all dependencies are of the same \" +\n        'version throughout the repository.',\n      documentation:\n        \"Checks each project's package.json files and ensures that all dependencies are of the \" +\n        'same version throughout the repository.',\n      safeForSimultaneousRushProcesses: true,\n      parser\n    });\n\n    this._terminal = parser.terminal;\n    this._jsonFlag = this.defineFlagParameter({\n      parameterLongName: '--json',\n      description: 'If this flag is specified, output will be in JSON format.'\n    });\n    this._verboseFlag = this.defineFlagParameter({\n      parameterLongName: '--verbose',\n      description:\n        'If this flag is specified, long lists of package names will not be truncated. ' +\n        `This has no effect if the ${this._jsonFlag.longName} flag is also specified.`\n    });\n    this._subspaceParameter = this.defineStringParameter({\n      parameterLongName: '--subspace',\n      argumentName: 'SUBSPACE_NAME',\n      description:\n        '(EXPERIMENTAL) Specifies an individual Rush subspace to check, requiring versions to be ' +\n        'consistent only within that subspace (ignoring other subspaces). This parameter is required when ' +\n        'the \"subspacesEnabled\" setting is set to true in subspaces.json.'\n    });\n    this._variantParameter = this.defineStringParameter(VARIANT_PARAMETER);\n  }\n\n  protected async runAsync(): Promise<void> {\n    if (this.rushConfiguration.subspacesFeatureEnabled && !this._subspaceParameter) {\n      throw new Error(\n        `The --subspace parameter must be specified with \"rush check\" when subspaces is enabled.`\n      );\n    }\n\n    const currentlyInstalledVariant: string | undefined =\n      await this.rushConfiguration.getCurrentlyInstalledVariantAsync();\n    const variant: string | undefined = await getVariantAsync(\n      this._variantParameter,\n      this.rushConfiguration,\n      true\n    );\n    if (!variant && currentlyInstalledVariant) {\n      this._terminal.writeWarningLine(\n        Colorize.yellow(\n          `Variant '${currentlyInstalledVariant}' has been installed, but 'rush check' is currently checking the default variant. ` +\n            `Use 'rush ${this.actionName} ${this._variantParameter.longName} '${currentlyInstalledVariant}' to check the current installation.`\n        )\n      );\n    }\n\n    VersionMismatchFinder.rushCheck(this.rushConfiguration, this._terminal, {\n      variant,\n      printAsJson: this._jsonFlag.value,\n      truncateLongPackageNameLists: !this._verboseFlag.value,\n      subspace: this._subspaceParameter?.value\n        ? this.rushConfiguration.getSubspace(this._subspaceParameter.value)\n        : this.rushConfiguration.defaultSubspace\n    });\n  }\n}\n"]}