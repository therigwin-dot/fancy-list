{"version":3,"file":"UpgradeInteractiveAction.js","sourceRoot":"","sources":["../../../src/cli/actions/UpgradeInteractiveAction.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAI3D,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAIlD,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAExE,MAAM,OAAO,wBAAyB,SAAQ,cAAc;IAK1D,YAAmB,MAA6B;QAC9C,MAAM,aAAa,GAAa;YAC9B,8GAA8G;gBAC5G,qFAAqF;gBACrF,8EAA8E;gBAC9E,+GAA+G;gBAC/G,4GAA4G;gBAC5G,kGAAkG;gBAClG,6DAA6D;SAChE,CAAC;QACF,KAAK,CAAC;YACJ,UAAU,EAAE,qBAAqB;YACjC,OAAO,EAAE,4EAA4E;YACrF,gCAAgC,EAAE,KAAK;YACvC,aAAa,EAAE,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;YACrC,MAAM;SACP,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAClD,iBAAiB,EAAE,mBAAmB;YACtC,WAAW,EACT,mGAAmG;SACtG,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC9C,iBAAiB,EAAE,eAAe;YAClC,kBAAkB,EAAE,IAAI;YACxB,WAAW,EACT,gGAAgG;SACnG,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;IACzE,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,MAAM,CAAC,EAAE,kBAAkB,EAAE,EAAE,EAAE,mBAAmB,EAAE,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC1E,MAAM,CAAC,4CAA4C,CAAC,gCAAgC,CAAC;YACrF,MAAM,CAAC,6CAA6C,CAAC,iCAAiC,CAAC;SACxF,CAAC,CAAC;QAEH,MAAM,kBAAkB,GAA8C,IAAI,kBAAkB,CAC1F,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,gBAAgB,CACtB,CAAC;QACF,MAAM,mBAAmB,GAAgD,IAAI,mBAAmB,CAC9F,IAAI,CAAC,iBAAiB,CACvB,CAAC;QAEF,MAAM,OAAO,GAAuB,MAAM,eAAe,CACvD,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,iBAAiB,EACtB,IAAI,CACL,CAAC;QACF,MAAM,oBAAoB,GACxB,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,8BAA8B,CAAC,OAAO,CAAC;YAC9E,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;QAEjC,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,MAAM,mBAAmB,CAAC,YAAY,EAAE,CAAC;QAE7E,MAAM,kBAAkB,CAAC,kBAAkB,CAAC;YAC1C,QAAQ;YACR,aAAa,EAAE,aAAa,CAAC,QAAQ;YACrC,mBAAmB,EAAE,oBAAoB;YACzC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK;YACtC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;YACjC,OAAO;SACR,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { CommandLineFlagParameter, CommandLineStringParameter } from '@rushstack/ts-command-line';\nimport type { RushCommandLineParser } from '../RushCommandLineParser';\nimport { BaseRushAction } from './BaseRushAction';\n\nimport type * as PackageJsonUpdaterType from '../../logic/PackageJsonUpdater';\nimport type * as InteractiveUpgraderType from '../../logic/InteractiveUpgrader';\nimport { getVariantAsync, VARIANT_PARAMETER } from '../../api/Variants';\n\nexport class UpgradeInteractiveAction extends BaseRushAction {\n  private _makeConsistentFlag: CommandLineFlagParameter;\n  private _skipUpdateFlag: CommandLineFlagParameter;\n  private readonly _variantParameter: CommandLineStringParameter;\n\n  public constructor(parser: RushCommandLineParser) {\n    const documentation: string[] = [\n      'Provide an interactive way to upgrade your dependencies. Running the command will open an interactive prompt' +\n        ' that will ask you which projects and which dependencies you would like to upgrade.' +\n        ' It will then update your package.json files, and run \"rush update\" for you.' +\n        ' If you are using ensureConsistentVersions policy, upgrade-interactive will update all packages which use the' +\n        ' dependencies that you are upgrading and match their SemVer range if provided. If ensureConsistentVersions' +\n        ' is not enabled, upgrade-interactive will only update the dependency in the package you specify.' +\n        ' This can be overriden by using the --make-consistent flag.'\n    ];\n    super({\n      actionName: 'upgrade-interactive',\n      summary: 'Provides interactive prompt for upgrading package dependencies per project',\n      safeForSimultaneousRushProcesses: false,\n      documentation: documentation.join(''),\n      parser\n    });\n\n    this._makeConsistentFlag = this.defineFlagParameter({\n      parameterLongName: '--make-consistent',\n      description:\n        'When upgrading dependencies from a single project, also upgrade dependencies from other projects.'\n    });\n\n    this._skipUpdateFlag = this.defineFlagParameter({\n      parameterLongName: '--skip-update',\n      parameterShortName: '-s',\n      description:\n        'If specified, the \"rush update\" command will not be run after updating the package.json files.'\n    });\n\n    this._variantParameter = this.defineStringParameter(VARIANT_PARAMETER);\n  }\n\n  public async runAsync(): Promise<void> {\n    const [{ PackageJsonUpdater }, { InteractiveUpgrader }] = await Promise.all([\n      import(/* webpackChunkName: 'PackageJsonUpdater' */ '../../logic/PackageJsonUpdater'),\n      import(/* webpackChunkName: 'InteractiveUpgrader' */ '../../logic/InteractiveUpgrader')\n    ]);\n\n    const packageJsonUpdater: PackageJsonUpdaterType.PackageJsonUpdater = new PackageJsonUpdater(\n      this.rushConfiguration,\n      this.rushGlobalFolder\n    );\n    const interactiveUpgrader: InteractiveUpgraderType.InteractiveUpgrader = new InteractiveUpgrader(\n      this.rushConfiguration\n    );\n\n    const variant: string | undefined = await getVariantAsync(\n      this._variantParameter,\n      this.rushConfiguration,\n      true\n    );\n    const shouldMakeConsistent: boolean =\n      this.rushConfiguration.defaultSubspace.shouldEnsureConsistentVersions(variant) ||\n      this._makeConsistentFlag.value;\n\n    const { projects, depsToUpgrade } = await interactiveUpgrader.upgradeAsync();\n\n    await packageJsonUpdater.doRushUpgradeAsync({\n      projects,\n      packagesToAdd: depsToUpgrade.packages,\n      updateOtherPackages: shouldMakeConsistent,\n      skipUpdate: this._skipUpdateFlag.value,\n      debugInstall: this.parser.isDebug,\n      variant\n    });\n  }\n}\n"]}