{"version":3,"file":"InitAction.js","sourceRoot":"","sources":["../../../src/cli/actions/InitAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport {\n  FileSystem,\n  InternalError,\n  AlreadyReportedError,\n  type FileSystemStats\n} from '@rushstack/node-core-library';\nimport type { CommandLineFlagParameter } from '@rushstack/ts-command-line';\nimport { Colorize } from '@rushstack/terminal';\n\nimport type { RushCommandLineParser } from '../RushCommandLineParser';\nimport { BaseConfiglessRushAction } from './BaseRushAction';\n\nimport { assetsFolderPath } from '../../utilities/PathConstants';\nimport { copyTemplateFileAsync } from '../../utilities/templateUtilities';\n\nexport class InitAction extends BaseConfiglessRushAction {\n  private readonly _overwriteParameter: CommandLineFlagParameter;\n  private readonly _rushExampleParameter: CommandLineFlagParameter;\n  private readonly _experimentsParameter: CommandLineFlagParameter;\n\n  // template section name --> whether it should be commented out\n  private _commentedBySectionName: Map<string, boolean> = new Map<string, boolean>();\n\n  public constructor(parser: RushCommandLineParser) {\n    super({\n      actionName: 'init',\n      summary: 'Initializes a new repository to be managed by Rush',\n      documentation:\n        'When invoked in an empty folder, this command provisions a standard' +\n        ' set of config file templates to start managing projects using Rush.',\n      parser\n    });\n\n    this._overwriteParameter = this.defineFlagParameter({\n      parameterLongName: '--overwrite-existing',\n      description:\n        'By default \"rush init\" will not overwrite existing config files.' +\n        ' Specify this switch to override that. This can be useful when upgrading' +\n        ' your repo to a newer release of Rush. WARNING: USE WITH CARE!'\n    });\n    this._rushExampleParameter = this.defineFlagParameter({\n      parameterLongName: '--rush-example-repo',\n      description:\n        'When copying the template config files, this uncomments fragments that are used' +\n        ' by the \"rush-example\" GitHub repo, which is a sample monorepo that illustrates many Rush' +\n        ' features. This option is primarily intended for maintaining that example.'\n    });\n    this._experimentsParameter = this.defineFlagParameter({\n      parameterLongName: '--include-experiments',\n      description:\n        'Include features that may not be complete features, useful for demoing specific future features' +\n        ' or current work in progress features.'\n    });\n  }\n\n  protected async runAsync(): Promise<void> {\n    const initFolder: string = process.cwd();\n\n    if (!this._overwriteParameter.value) {\n      if (!this._validateFolderIsEmpty(initFolder)) {\n        throw new AlreadyReportedError();\n      }\n    }\n\n    await this._copyTemplateFilesAsync(initFolder);\n  }\n\n  // Check whether it's safe to run \"rush init\" in the current working directory.\n  private _validateFolderIsEmpty(initFolder: string): boolean {\n    if (this.rushConfiguration !== undefined) {\n      // eslint-disable-next-line no-console\n      console.error(\n        Colorize.red('ERROR: Found an existing configuration in: ' + this.rushConfiguration.rushJsonFile)\n      );\n      // eslint-disable-next-line no-console\n      console.log(\n        '\\nThe \"rush init\" command must be run in a new folder without an existing Rush configuration.'\n      );\n      return false;\n    }\n\n    for (const itemName of FileSystem.readFolderItemNames(initFolder)) {\n      if (itemName.substr(0, 1) === '.') {\n        // Ignore any items that start with \".\", for example \".git\"\n        continue;\n      }\n\n      const itemPath: string = path.join(initFolder, itemName);\n\n      const stats: FileSystemStats = FileSystem.getStatistics(itemPath);\n      // Ignore any loose files in the current folder, e.g. \"README.md\"\n      // or \"CONTRIBUTING.md\"\n      if (stats.isDirectory()) {\n        // eslint-disable-next-line no-console\n        console.error(Colorize.red(`ERROR: Found a subdirectory: \"${itemName}\"`));\n        // eslint-disable-next-line no-console\n        console.log('\\nThe \"rush init\" command must be run in a new folder with no projects added yet.');\n        return false;\n      } else {\n        if (itemName.toLowerCase() === 'package.json') {\n          // eslint-disable-next-line no-console\n          console.error(Colorize.red(`ERROR: Found a package.json file in this folder`));\n          // eslint-disable-next-line no-console\n          console.log('\\nThe \"rush init\" command must be run in a new folder with no projects added yet.');\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  private async _copyTemplateFilesAsync(initFolder: string): Promise<void> {\n    // The \"[dot]\" base name is used for hidden files to prevent various tools from interpreting them.\n    // For example, \"npm publish\" will always exclude the filename \".gitignore\"\n    const templateFilePaths: string[] = [\n      '[dot]github/workflows/ci.yml',\n\n      'common/config/rush/.pnpmfile.cjs',\n      'common/config/rush/[dot]npmrc',\n      'common/config/rush/[dot]npmrc-publish',\n      'common/config/rush/artifactory.json',\n      'common/config/rush/build-cache.json',\n      'common/config/rush/cobuild.json',\n      'common/config/rush/command-line.json',\n      'common/config/rush/common-versions.json',\n      'common/config/rush/custom-tips.json',\n      'common/config/rush/experiments.json',\n      'common/config/rush/pnpm-config.json',\n      'common/config/rush/rush-plugins.json',\n      'common/config/rush/subspaces.json',\n      'common/config/rush/version-policies.json',\n\n      'common/git-hooks/commit-msg.sample',\n\n      '[dot]gitattributes',\n      '[dot]gitignore',\n      'rush.json'\n    ];\n\n    const experimentalTemplateFilePaths: string[] = ['common/config/rush/rush-alerts.json'];\n\n    if (this._experimentsParameter.value) {\n      templateFilePaths.push(...experimentalTemplateFilePaths);\n    }\n\n    const assetsSubfolder: string = `${assetsFolderPath}/rush-init`;\n\n    for (const templateFilePath of templateFilePaths) {\n      const sourcePath: string = path.join(assetsSubfolder, templateFilePath);\n\n      if (!FileSystem.exists(sourcePath)) {\n        // If this happens, please report a Rush bug\n        throw new InternalError('Unable to find template input file: ' + sourcePath);\n      }\n\n      const destinationPath: string = path.join(initFolder, templateFilePath).replace('[dot]', '.');\n\n      // The \"DEMO\" sections are uncommented only when \"--rush-example-repo\" is specified.\n      await copyTemplateFileAsync(\n        sourcePath,\n        destinationPath,\n        this._overwriteParameter.value,\n        !this._rushExampleParameter.value\n      );\n    }\n  }\n}\n"]}