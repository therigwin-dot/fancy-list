// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { BaseRushAction } from '../actions/BaseRushAction';
import { RushConstants } from '../../logic/RushConstants';
/**
 * Base class for command-line actions that are implemented using user-defined scripts.
 *
 * @remarks
 * Compared to the normal built-in actions, these actions are special because (1) they
 * can be discovered dynamically via common/config/command-line.json, and (2)
 * user-defined command-line parameters can be passed through to the script.
 *
 * The two subclasses are BulkScriptAction and GlobalScriptAction.
 */
export class BaseScriptAction extends BaseRushAction {
    constructor(options) {
        super(options);
        this.customParameters = new Map();
        this.commandLineConfiguration = options.commandLineConfiguration;
        this.command = options.command;
    }
    defineScriptParameters() {
        if (!this.commandLineConfiguration) {
            return;
        }
        // Find any parameters that are associated with this command
        for (const parameter of this.command.associatedParameters) {
            let tsCommandLineParameter;
            switch (parameter.parameterKind) {
                case 'flag':
                    tsCommandLineParameter = this.defineFlagParameter({
                        parameterShortName: parameter.shortName,
                        parameterLongName: parameter.longName,
                        description: parameter.description,
                        required: parameter.required
                    });
                    break;
                case 'choice':
                    tsCommandLineParameter = this.defineChoiceParameter({
                        parameterShortName: parameter.shortName,
                        parameterLongName: parameter.longName,
                        description: parameter.description,
                        required: parameter.required,
                        alternatives: parameter.alternatives.map((x) => x.name),
                        defaultValue: parameter.defaultValue
                    });
                    break;
                case 'string':
                    tsCommandLineParameter = this.defineStringParameter({
                        parameterLongName: parameter.longName,
                        parameterShortName: parameter.shortName,
                        description: parameter.description,
                        required: parameter.required,
                        argumentName: parameter.argumentName
                    });
                    break;
                case 'integer':
                    tsCommandLineParameter = this.defineIntegerParameter({
                        parameterLongName: parameter.longName,
                        parameterShortName: parameter.shortName,
                        description: parameter.description,
                        required: parameter.required,
                        argumentName: parameter.argumentName
                    });
                    break;
                case 'stringList':
                    tsCommandLineParameter = this.defineStringListParameter({
                        parameterLongName: parameter.longName,
                        parameterShortName: parameter.shortName,
                        description: parameter.description,
                        required: parameter.required,
                        argumentName: parameter.argumentName
                    });
                    break;
                case 'integerList':
                    tsCommandLineParameter = this.defineIntegerListParameter({
                        parameterLongName: parameter.longName,
                        parameterShortName: parameter.shortName,
                        description: parameter.description,
                        required: parameter.required,
                        argumentName: parameter.argumentName
                    });
                    break;
                case 'choiceList':
                    tsCommandLineParameter = this.defineChoiceListParameter({
                        parameterShortName: parameter.shortName,
                        parameterLongName: parameter.longName,
                        description: parameter.description,
                        required: parameter.required,
                        alternatives: parameter.alternatives.map((x) => x.name)
                    });
                    break;
                default:
                    throw new Error(`${RushConstants.commandLineFilename} defines a parameter "${parameter.longName}" using an unsupported parameter kind "${parameter.parameterKind}"`);
            }
            this.customParameters.set(parameter, tsCommandLineParameter);
        }
    }
}
//# sourceMappingURL=BaseScriptAction.js.map