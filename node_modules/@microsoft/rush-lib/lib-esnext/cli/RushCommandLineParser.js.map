{"version":3,"file":"RushCommandLineParser.js","sourceRoot":"","sources":["../../src/cli/RushCommandLineParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\n\nimport {\n  CommandLineParser,\n  type CommandLineFlagParameter,\n  CommandLineHelper\n} from '@rushstack/ts-command-line';\nimport { InternalError, AlreadyReportedError, Text } from '@rushstack/node-core-library';\nimport {\n  ConsoleTerminalProvider,\n  Terminal,\n  PrintUtilities,\n  Colorize,\n  type ITerminal\n} from '@rushstack/terminal';\n\nimport { RushConfiguration } from '../api/RushConfiguration';\nimport { RushConstants } from '../logic/RushConstants';\nimport {\n  type Command,\n  CommandLineConfiguration,\n  type IGlobalCommandConfig,\n  type IPhasedCommandConfig\n} from '../api/CommandLineConfiguration';\n\nimport { AddAction } from './actions/AddAction';\nimport { ChangeAction } from './actions/ChangeAction';\nimport { CheckAction } from './actions/CheckAction';\nimport { DeployAction } from './actions/DeployAction';\nimport { InitAction } from './actions/InitAction';\nimport { InitAutoinstallerAction } from './actions/InitAutoinstallerAction';\nimport { InitDeployAction } from './actions/InitDeployAction';\nimport { InstallAction } from './actions/InstallAction';\nimport { LinkAction } from './actions/LinkAction';\nimport { ListAction } from './actions/ListAction';\nimport { PublishAction } from './actions/PublishAction';\nimport { PurgeAction } from './actions/PurgeAction';\nimport { RemoveAction } from './actions/RemoveAction';\nimport { ScanAction } from './actions/ScanAction';\nimport { UnlinkAction } from './actions/UnlinkAction';\nimport { UpdateAction } from './actions/UpdateAction';\nimport { UpdateAutoinstallerAction } from './actions/UpdateAutoinstallerAction';\nimport { VersionAction } from './actions/VersionAction';\nimport { UpdateCloudCredentialsAction } from './actions/UpdateCloudCredentialsAction';\nimport { UpgradeInteractiveAction } from './actions/UpgradeInteractiveAction';\nimport { AlertAction } from './actions/AlertAction';\n\nimport { GlobalScriptAction } from './scriptActions/GlobalScriptAction';\nimport type { IBaseScriptActionOptions } from './scriptActions/BaseScriptAction';\n\nimport { Telemetry } from '../logic/Telemetry';\nimport { RushGlobalFolder } from '../api/RushGlobalFolder';\nimport { NodeJsCompatibility } from '../logic/NodeJsCompatibility';\nimport { SetupAction } from './actions/SetupAction';\nimport { type ICustomCommandLineConfigurationInfo, PluginManager } from '../pluginFramework/PluginManager';\nimport { RushSession } from '../pluginFramework/RushSession';\nimport { PhasedScriptAction } from './scriptActions/PhasedScriptAction';\nimport type { IBuiltInPluginConfiguration } from '../pluginFramework/PluginLoader/BuiltInPluginLoader';\nimport { InitSubspaceAction } from './actions/InitSubspaceAction';\nimport { RushAlerts } from '../utilities/RushAlerts';\nimport { InstallAutoinstallerAction } from './actions/InstallAutoinstallerAction';\n\n/**\n * Options for `RushCommandLineParser`.\n */\nexport interface IRushCommandLineParserOptions {\n  cwd: string; // Defaults to `cwd`\n  alreadyReportedNodeTooNewError: boolean;\n  builtInPluginConfigurations: IBuiltInPluginConfiguration[];\n}\n\nexport class RushCommandLineParser extends CommandLineParser {\n  public telemetry: Telemetry | undefined;\n  public rushGlobalFolder: RushGlobalFolder;\n  public readonly rushConfiguration!: RushConfiguration;\n  public readonly rushSession: RushSession;\n  public readonly pluginManager: PluginManager;\n\n  private readonly _debugParameter: CommandLineFlagParameter;\n  private readonly _quietParameter: CommandLineFlagParameter;\n  private readonly _restrictConsoleOutput: boolean = RushCommandLineParser.shouldRestrictConsoleOutput();\n  private readonly _rushOptions: IRushCommandLineParserOptions;\n  private readonly _terminalProvider: ConsoleTerminalProvider;\n  private readonly _terminal: Terminal;\n\n  public constructor(options?: Partial<IRushCommandLineParserOptions>) {\n    super({\n      toolFilename: 'rush',\n      toolDescription:\n        'Rush makes life easier for JavaScript developers who develop, build, and publish' +\n        ' many packages from a central Git repo.  It is designed to handle very large repositories' +\n        ' supporting many projects and people.  Rush provides policies, protections, and customizations' +\n        ' that help coordinate teams and safely onboard new contributors.  Rush also generates change logs' +\n        ' and automates package publishing.  It can manage decoupled subsets of projects with different' +\n        ' release and versioning strategies.  A full API is included to facilitate integration with other' +\n        ' automation tools.  If you are looking for a proven turnkey solution for monorepo management,' +\n        ' Rush is for you.',\n      enableTabCompletionAction: true\n    });\n\n    this._debugParameter = this.defineFlagParameter({\n      parameterLongName: '--debug',\n      parameterShortName: '-d',\n      description: 'Show the full call stack if an error occurs while executing the tool'\n    });\n\n    this._quietParameter = this.defineFlagParameter({\n      parameterLongName: '--quiet',\n      parameterShortName: '-q',\n      description: 'Hide rush startup information'\n    });\n\n    this._terminalProvider = new ConsoleTerminalProvider();\n    this._terminal = new Terminal(this._terminalProvider);\n    this._rushOptions = this._normalizeOptions(options || {});\n\n    try {\n      const rushJsonFilename: string | undefined = RushConfiguration.tryFindRushJsonLocation({\n        startingFolder: this._rushOptions.cwd,\n        showVerbose: !this._restrictConsoleOutput\n      });\n      if (rushJsonFilename) {\n        this.rushConfiguration = RushConfiguration.loadFromConfigurationFile(rushJsonFilename);\n      }\n    } catch (error) {\n      this._reportErrorAndSetExitCode(error as Error);\n    }\n\n    NodeJsCompatibility.warnAboutCompatibilityIssues({\n      isRushLib: true,\n      alreadyReportedNodeTooNewError: this._rushOptions.alreadyReportedNodeTooNewError,\n      rushConfiguration: this.rushConfiguration\n    });\n\n    this.rushGlobalFolder = new RushGlobalFolder();\n\n    this.rushSession = new RushSession({\n      getIsDebugMode: () => this.isDebug,\n      terminalProvider: this._terminalProvider\n    });\n    this.pluginManager = new PluginManager({\n      rushSession: this.rushSession,\n      rushConfiguration: this.rushConfiguration,\n      terminal: this._terminal,\n      builtInPluginConfigurations: this._rushOptions.builtInPluginConfigurations,\n      restrictConsoleOutput: this._restrictConsoleOutput,\n      rushGlobalFolder: this.rushGlobalFolder\n    });\n\n    this._populateActions();\n\n    const pluginCommandLineConfigurations: ICustomCommandLineConfigurationInfo[] =\n      this.pluginManager.tryGetCustomCommandLineConfigurationInfos();\n    for (const { commandLineConfiguration, pluginLoader } of pluginCommandLineConfigurations) {\n      try {\n        this._addCommandLineConfigActions(commandLineConfiguration);\n      } catch (e) {\n        this._terminal.writeErrorLine(\n          `Error from plugin ${pluginLoader.pluginName} by ${pluginLoader.packageName}: ${(\n            e as Error\n          ).toString()}`\n        );\n      }\n    }\n  }\n\n  public get isDebug(): boolean {\n    return this._debugParameter.value;\n  }\n\n  public get isQuiet(): boolean {\n    return this._quietParameter.value;\n  }\n\n  public get terminal(): ITerminal {\n    return this._terminal;\n  }\n\n  /**\n   * Utility to determine if the app should restrict writing to the console.\n   */\n  public static shouldRestrictConsoleOutput(): boolean {\n    if (CommandLineHelper.isTabCompletionActionRequest(process.argv)) {\n      return true;\n    }\n\n    for (let i: number = 2; i < process.argv.length; i++) {\n      const arg: string = process.argv[i];\n      if (arg === '-q' || arg === '--quiet' || arg === '--json') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public flushTelemetry(): void {\n    this.telemetry?.flush();\n  }\n\n  public async executeAsync(args?: string[]): Promise<boolean> {\n    // debugParameter will be correctly parsed during super.executeAsync(), so manually parse here.\n    this._terminalProvider.verboseEnabled = this._terminalProvider.debugEnabled =\n      process.argv.indexOf('--debug') >= 0;\n\n    await this.pluginManager.tryInitializeUnassociatedPluginsAsync();\n\n    return await super.executeAsync(args);\n  }\n\n  protected async onExecute(): Promise<void> {\n    // Defensively set the exit code to 1 so if Rush crashes for whatever reason, we'll have a nonzero exit code.\n    // For example, Node.js currently has the inexcusable design of terminating with zero exit code when\n    // there is an uncaught promise exception.  This will supposedly be fixed in Node.js 9.\n    // Ideally we should do this for all the Rush actions, but \"rush build\" is the most critical one\n    // -- if it falsely appears to succeed, we could merge bad PRs, publish empty packages, etc.\n    process.exitCode = 1;\n\n    if (this._debugParameter.value) {\n      InternalError.breakInDebugger = true;\n    }\n\n    try {\n      await this._wrapOnExecuteAsync();\n\n      // TODO: rushConfiguration is typed as \"!: RushConfiguration\" here, but can sometimes be undefined\n      if (this.rushConfiguration) {\n        try {\n          const { configuration: experiments } = this.rushConfiguration.experimentsConfiguration;\n\n          if (experiments.rushAlerts) {\n            // TODO: Fix this\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const actionName: string = (this as any)\n              ._getArgumentParser()\n              .parseArgs(process.argv.slice(2)).action;\n\n            // only display alerts when certain specific actions are triggered\n            if (RushAlerts.alertTriggerActions.includes(actionName)) {\n              this._terminal.writeDebugLine('Checking Rush alerts...');\n              const rushAlerts: RushAlerts = await RushAlerts.loadFromConfigurationAsync(\n                this.rushConfiguration,\n                this._terminal\n              );\n              // Print out alerts if have after each successful command actions\n              await rushAlerts.printAlertsAsync();\n            }\n          }\n        } catch (error) {\n          if (error instanceof AlreadyReportedError) {\n            throw error;\n          }\n          // Generally the RushAlerts implementation should handle its own error reporting; if not,\n          // clarify the source, since the Rush Alerts behavior is nondeterministic and may not repro easily:\n          this._terminal.writeErrorLine(`\\nAn unexpected error was encountered by the Rush alerts feature:`);\n          this._terminal.writeErrorLine(error.message);\n          throw new AlreadyReportedError();\n        }\n      }\n\n      // If we make it here, everything went fine, so reset the exit code back to 0\n      process.exitCode = 0;\n    } catch (error) {\n      this._reportErrorAndSetExitCode(error as Error);\n    }\n\n    // This only gets hit if the wrapped execution completes successfully\n    await this.telemetry?.ensureFlushedAsync();\n  }\n\n  private _normalizeOptions(options: Partial<IRushCommandLineParserOptions>): IRushCommandLineParserOptions {\n    return {\n      cwd: options.cwd || process.cwd(),\n      alreadyReportedNodeTooNewError: options.alreadyReportedNodeTooNewError || false,\n      builtInPluginConfigurations: options.builtInPluginConfigurations || []\n    };\n  }\n\n  private async _wrapOnExecuteAsync(): Promise<void> {\n    if (this.rushConfiguration) {\n      this.telemetry = new Telemetry(this.rushConfiguration, this.rushSession);\n    }\n\n    try {\n      await super.onExecute();\n    } finally {\n      if (this.telemetry) {\n        this.flushTelemetry();\n      }\n    }\n  }\n\n  private _populateActions(): void {\n    try {\n      // Alphabetical order\n      this.addAction(new AddAction(this));\n      this.addAction(new ChangeAction(this));\n      this.addAction(new CheckAction(this));\n      this.addAction(new DeployAction(this));\n      this.addAction(new InitAction(this));\n      this.addAction(new InitAutoinstallerAction(this));\n      this.addAction(new InitDeployAction(this));\n      this.addAction(new InitSubspaceAction(this));\n      this.addAction(new InstallAction(this));\n      this.addAction(new LinkAction(this));\n      this.addAction(new ListAction(this));\n      this.addAction(new PublishAction(this));\n      this.addAction(new PurgeAction(this));\n      this.addAction(new RemoveAction(this));\n      this.addAction(new ScanAction(this));\n      this.addAction(new SetupAction(this));\n      this.addAction(new UnlinkAction(this));\n      this.addAction(new UpdateAction(this));\n      this.addAction(new InstallAutoinstallerAction(this));\n      this.addAction(new UpdateAutoinstallerAction(this));\n      this.addAction(new UpdateCloudCredentialsAction(this));\n      this.addAction(new UpgradeInteractiveAction(this));\n      this.addAction(new VersionAction(this));\n      this.addAction(new AlertAction(this));\n\n      this._populateScriptActions();\n    } catch (error) {\n      this._reportErrorAndSetExitCode(error as Error);\n    }\n  }\n\n  private _populateScriptActions(): void {\n    // If there is not a rush.json file, we still want \"build\" and \"rebuild\" to appear in the\n    // command-line help\n    let commandLineConfigFilePath: string | undefined;\n    if (this.rushConfiguration) {\n      commandLineConfigFilePath = path.join(\n        this.rushConfiguration.commonRushConfigFolder,\n        RushConstants.commandLineFilename\n      );\n    }\n\n    const commandLineConfiguration: CommandLineConfiguration =\n      CommandLineConfiguration.loadFromFileOrDefault(commandLineConfigFilePath);\n    this._addCommandLineConfigActions(commandLineConfiguration);\n  }\n\n  private _addCommandLineConfigActions(commandLineConfiguration: CommandLineConfiguration): void {\n    // Register each custom command\n    for (const command of commandLineConfiguration.commands.values()) {\n      this._addCommandLineConfigAction(commandLineConfiguration, command);\n    }\n  }\n\n  private _addCommandLineConfigAction(\n    commandLineConfiguration: CommandLineConfiguration,\n    command: Command\n  ): void {\n    if (this.tryGetAction(command.name)) {\n      throw new Error(\n        `${RushConstants.commandLineFilename} defines a command \"${command.name}\"` +\n          ` using a name that already exists`\n      );\n    }\n\n    switch (command.commandKind) {\n      case RushConstants.globalCommandKind: {\n        this._addGlobalScriptAction(commandLineConfiguration, command);\n        break;\n      }\n\n      case RushConstants.phasedCommandKind: {\n        this._addPhasedCommandLineConfigAction(commandLineConfiguration, command);\n        break;\n      }\n\n      default:\n        throw new Error(\n          `${RushConstants.commandLineFilename} defines a command \"${(command as Command).name}\"` +\n            ` using an unsupported command kind \"${(command as Command).commandKind}\"`\n        );\n    }\n  }\n\n  private _getSharedCommandActionOptions<TCommand extends Command>(\n    commandLineConfiguration: CommandLineConfiguration,\n    command: TCommand\n  ): IBaseScriptActionOptions<TCommand> {\n    return {\n      actionName: command.name,\n      summary: command.summary,\n      documentation: command.description || command.summary,\n      safeForSimultaneousRushProcesses: command.safeForSimultaneousRushProcesses,\n\n      command,\n      parser: this,\n      commandLineConfiguration: commandLineConfiguration\n    };\n  }\n\n  private _addGlobalScriptAction(\n    commandLineConfiguration: CommandLineConfiguration,\n    command: IGlobalCommandConfig\n  ): void {\n    if (\n      command.name === RushConstants.buildCommandName ||\n      command.name === RushConstants.rebuildCommandName\n    ) {\n      throw new Error(\n        `${RushConstants.commandLineFilename} defines a command \"${command.name}\" using ` +\n          `the command kind \"${RushConstants.globalCommandKind}\". This command can only be designated as a command ` +\n          `kind \"${RushConstants.bulkCommandKind}\" or \"${RushConstants.phasedCommandKind}\".`\n      );\n    }\n\n    const sharedCommandOptions: IBaseScriptActionOptions<IGlobalCommandConfig> =\n      this._getSharedCommandActionOptions(commandLineConfiguration, command);\n\n    this.addAction(\n      new GlobalScriptAction({\n        ...sharedCommandOptions,\n\n        shellCommand: command.shellCommand,\n        autoinstallerName: command.autoinstallerName\n      })\n    );\n  }\n\n  private _addPhasedCommandLineConfigAction(\n    commandLineConfiguration: CommandLineConfiguration,\n    command: IPhasedCommandConfig\n  ): void {\n    const baseCommandOptions: IBaseScriptActionOptions<IPhasedCommandConfig> =\n      this._getSharedCommandActionOptions(commandLineConfiguration, command);\n\n    this.addAction(\n      new PhasedScriptAction({\n        ...baseCommandOptions,\n\n        enableParallelism: command.enableParallelism,\n        incremental: command.incremental || false,\n        disableBuildCache: command.disableBuildCache || false,\n\n        initialPhases: command.phases,\n        originalPhases: command.originalPhases,\n        watchPhases: command.watchPhases,\n        watchDebounceMs: command.watchDebounceMs ?? RushConstants.defaultWatchDebounceMs,\n        phases: commandLineConfiguration.phases,\n\n        alwaysWatch: command.alwaysWatch,\n        alwaysInstall: command.alwaysInstall\n      })\n    );\n  }\n\n  private _reportErrorAndSetExitCode(error: Error): void {\n    if (!(error instanceof AlreadyReportedError)) {\n      const prefix: string = 'ERROR: ';\n\n      // The colors package will eat multi-newlines, which could break formatting\n      // in user-specified messages and instructions, so we prefer to color each\n      // line individually.\n      const message: string = Text.splitByNewLines(PrintUtilities.wrapWords(prefix + error.message))\n        .map((line) => Colorize.red(line))\n        .join('\\n');\n      // eslint-disable-next-line no-console\n      console.error(`\\n${message}`);\n    }\n\n    if (this._debugParameter.value) {\n      // If catchSyncErrors() called this, then show a call stack similar to what Node.js\n      // would show for an uncaught error\n      // eslint-disable-next-line no-console\n      console.error(`\\n${error.stack}`);\n    }\n\n    this.flushTelemetry();\n\n    const handleExit = (): never => {\n      // Ideally we want to eliminate all calls to process.exit() from our code, and replace them\n      // with normal control flow that properly cleans up its data structures.\n      // For this particular call, we have a problem that the RushCommandLineParser constructor\n      // performs nontrivial work that can throw an exception.  Either the Rush class would need\n      // to handle reporting for those exceptions, or else _populateActions() should be moved\n      // to a RushCommandLineParser lifecycle stage that can handle it.\n      if (process.exitCode !== undefined) {\n        process.exit(process.exitCode);\n      } else {\n        process.exit(1);\n      }\n    };\n\n    if (this.telemetry && this.rushSession.hooks.flushTelemetry.isUsed()) {\n      this.telemetry.ensureFlushedAsync().then(handleExit).catch(handleExit);\n    } else {\n      handleExit();\n    }\n  }\n}\n"]}