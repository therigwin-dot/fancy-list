{"version":3,"file":"ProjectChangeAnalyzer.js","sourceRoot":"","sources":["../../src/logic/ProjectChangeAnalyzer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport ignore, { type Ignore } from 'ignore';\n\nimport type { IReadonlyLookupByPath, LookupByPath } from '@rushstack/lookup-by-path';\nimport { Path, FileSystem, Async, AlreadyReportedError } from '@rushstack/node-core-library';\nimport {\n  getRepoChanges,\n  getRepoRoot,\n  getRepoStateAsync,\n  hashFilesAsync,\n  type IFileDiffStatus\n} from '@rushstack/package-deps-hash';\nimport type { ITerminal } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport { RushProjectConfiguration } from '../api/RushProjectConfiguration';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport { BaseProjectShrinkwrapFile } from './base/BaseProjectShrinkwrapFile';\nimport { PnpmShrinkwrapFile } from './pnpm/PnpmShrinkwrapFile';\nimport { Git } from './Git';\nimport {\n  type IInputsSnapshotProjectMetadata,\n  type IInputsSnapshot,\n  InputsSnapshot,\n  type GetInputsSnapshotAsyncFn\n} from './incremental/InputsSnapshot';\n\n/**\n * @beta\n */\nexport interface IGetChangedProjectsOptions {\n  targetBranchName: string;\n  terminal: ITerminal;\n  shouldFetch?: boolean;\n  variant?: string;\n\n  /**\n   * If set to `true`, consider a project's external dependency installation layout as defined in the\n   * package manager lockfile when determining if it has changed.\n   */\n  includeExternalDependencies: boolean;\n\n  /**\n   * If set to `true` apply the `incrementalBuildIgnoredGlobs` property in a project's `rush-project.json`\n   * and exclude matched files from change detection.\n   */\n  enableFiltering: boolean;\n}\n\n/**\n * @internal\n */\nexport interface IRawRepoState {\n  projectState: Map<RushConfigurationProject, Map<string, string>> | undefined;\n  rootDir: string;\n  rawHashes: Map<string, string>;\n}\n\n/**\n * @beta\n */\nexport class ProjectChangeAnalyzer {\n  private readonly _rushConfiguration: RushConfiguration;\n  private readonly _git: Git;\n\n  public constructor(rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n    this._git = new Git(this._rushConfiguration);\n  }\n\n  /**\n   * Gets a list of projects that have changed in the current state of the repo\n   * when compared to the specified branch, optionally taking the shrinkwrap and settings in\n   * the rush-project.json file into consideration.\n   */\n  public async getChangedProjectsAsync(\n    options: IGetChangedProjectsOptions\n  ): Promise<Set<RushConfigurationProject>> {\n    const { _rushConfiguration: rushConfiguration } = this;\n\n    const { targetBranchName, terminal, includeExternalDependencies, enableFiltering, shouldFetch, variant } =\n      options;\n\n    const gitPath: string = this._git.getGitPathOrThrow();\n    const repoRoot: string = getRepoRoot(rushConfiguration.rushJsonFolder);\n\n    // if the given targetBranchName is a commit, we assume it is the merge base\n    const isTargetBranchACommit: boolean = await this._git.determineIfRefIsACommitAsync(targetBranchName);\n    const mergeCommit: string = isTargetBranchACommit\n      ? targetBranchName\n      : await this._git.getMergeBaseAsync(targetBranchName, terminal, shouldFetch);\n\n    const changedFiles: Map<string, IFileDiffStatus> = getRepoChanges(repoRoot, mergeCommit, gitPath);\n    const lookup: LookupByPath<RushConfigurationProject> =\n      rushConfiguration.getProjectLookupForRoot(repoRoot);\n    const changesByProject: Map<\n      RushConfigurationProject,\n      Map<string, IFileDiffStatus>\n    > = this.getChangesByProject(lookup, changedFiles);\n\n    const changedProjects: Set<RushConfigurationProject> = new Set();\n    if (enableFiltering) {\n      // Reading rush-project.json may be problematic if, e.g. rush install has not yet occurred and rigs are in use\n      await Async.forEachAsync(\n        changesByProject,\n        async ([project, projectChanges]) => {\n          const filteredChanges: Map<string, IFileDiffStatus> = await this._filterProjectDataAsync(\n            project,\n            projectChanges,\n            repoRoot,\n            terminal\n          );\n\n          if (filteredChanges.size > 0) {\n            changedProjects.add(project);\n          }\n        },\n        { concurrency: 10 }\n      );\n    } else {\n      for (const [project, projectChanges] of changesByProject) {\n        if (projectChanges.size > 0) {\n          changedProjects.add(project);\n        }\n      }\n    }\n\n    // External dependency changes are not allowed to be filtered, so add these after filtering\n    if (includeExternalDependencies) {\n      // Even though changing the installed version of a nested dependency merits a change file,\n      // ignore lockfile changes for `rush change` for the moment\n\n      const variantToUse: string | undefined =\n        variant ?? (await this._rushConfiguration.getCurrentlyInstalledVariantAsync());\n      const fullShrinkwrapPath: string =\n        rushConfiguration.defaultSubspace.getCommittedShrinkwrapFilePath(variantToUse);\n\n      const relativeShrinkwrapFilePath: string = Path.convertToSlashes(\n        path.relative(repoRoot, fullShrinkwrapPath)\n      );\n      const shrinkwrapStatus: IFileDiffStatus | undefined = changedFiles.get(relativeShrinkwrapFilePath);\n\n      if (shrinkwrapStatus) {\n        if (shrinkwrapStatus.status !== 'M') {\n          terminal.writeLine(`Lockfile was created or deleted. Assuming all projects are affected.`);\n          return new Set(rushConfiguration.projects);\n        }\n\n        if (rushConfiguration.isPnpm) {\n          const currentShrinkwrap: PnpmShrinkwrapFile | undefined =\n            PnpmShrinkwrapFile.loadFromFile(fullShrinkwrapPath);\n\n          if (!currentShrinkwrap) {\n            throw new Error(`Unable to obtain current shrinkwrap file.`);\n          }\n\n          const oldShrinkwrapText: string = await this._git.getBlobContentAsync({\n            // <ref>:<path> syntax: https://git-scm.com/docs/gitrevisions\n            blobSpec: `${mergeCommit}:${relativeShrinkwrapFilePath}`,\n            repositoryRoot: repoRoot\n          });\n          const oldShrinkWrap: PnpmShrinkwrapFile = PnpmShrinkwrapFile.loadFromString(oldShrinkwrapText);\n\n          for (const project of rushConfiguration.projects) {\n            if (\n              currentShrinkwrap\n                .getProjectShrinkwrap(project)\n                .hasChanges(oldShrinkWrap.getProjectShrinkwrap(project))\n            ) {\n              changedProjects.add(project);\n            }\n          }\n        } else {\n          terminal.writeLine(\n            `Lockfile has changed and lockfile content comparison is only supported for pnpm. Assuming all projects are affected.`\n          );\n          return new Set(rushConfiguration.projects);\n        }\n      }\n    }\n\n    return changedProjects;\n  }\n\n  protected getChangesByProject(\n    lookup: LookupByPath<RushConfigurationProject>,\n    changedFiles: Map<string, IFileDiffStatus>\n  ): Map<RushConfigurationProject, Map<string, IFileDiffStatus>> {\n    return lookup.groupByChild(changedFiles);\n  }\n\n  /**\n   * Gets a snapshot of the input state of the Rush workspace that can be queried for incremental\n   * build operations and use by the build cache.\n   * @internal\n   */\n  public async _tryGetSnapshotProviderAsync(\n    projectConfigurations: ReadonlyMap<RushConfigurationProject, RushProjectConfiguration>,\n    terminal: ITerminal,\n    projectSelection?: ReadonlySet<RushConfigurationProject>\n  ): Promise<GetInputsSnapshotAsyncFn | undefined> {\n    try {\n      const gitPath: string = this._git.getGitPathOrThrow();\n\n      if (!this._git.isPathUnderGitWorkingTree()) {\n        terminal.writeLine(\n          `The Rush monorepo is not in a Git repository. Rush will proceed without incremental build support.`\n        );\n\n        return;\n      }\n\n      const rushConfiguration: RushConfiguration = this._rushConfiguration;\n\n      // Do not use getGitInfo().root; it is the root of the *primary* worktree, not the *current* one.\n      const rootDirectory: string = getRepoRoot(rushConfiguration.rushJsonFolder, gitPath);\n\n      // Load the rush-project.json files for the whole repository\n      const additionalGlobs: IAdditionalGlob[] = [];\n\n      const projectMap: Map<RushConfigurationProject, IInputsSnapshotProjectMetadata> = new Map();\n\n      for (const project of rushConfiguration.projects) {\n        const projectConfig: RushProjectConfiguration | undefined = projectConfigurations.get(project);\n\n        const additionalFilesByOperationName: Map<string, Set<string>> = new Map();\n        const projectMetadata: IInputsSnapshotProjectMetadata = {\n          projectConfig,\n          additionalFilesByOperationName\n        };\n        projectMap.set(project, projectMetadata);\n\n        if (projectConfig) {\n          const { operationSettingsByOperationName } = projectConfig;\n          for (const [operationName, { dependsOnAdditionalFiles }] of operationSettingsByOperationName) {\n            if (dependsOnAdditionalFiles) {\n              const additionalFilesForOperation: Set<string> = new Set();\n              additionalFilesByOperationName.set(operationName, additionalFilesForOperation);\n              for (const pattern of dependsOnAdditionalFiles) {\n                additionalGlobs.push({\n                  project,\n                  operationName,\n                  additionalFilesForOperation,\n                  pattern\n                });\n              }\n            }\n          }\n        }\n      }\n\n      // Include project shrinkwrap files as part of the computation\n      const additionalRelativePathsToHash: string[] = [];\n      const globalAdditionalFiles: string[] = [];\n      if (rushConfiguration.isPnpm) {\n        await Async.forEachAsync(rushConfiguration.projects, async (project: RushConfigurationProject) => {\n          const projectShrinkwrapFilePath: string = BaseProjectShrinkwrapFile.getFilePathForProject(project);\n          if (!(await FileSystem.existsAsync(projectShrinkwrapFilePath))) {\n            if (rushConfiguration.subspacesFeatureEnabled) {\n              return;\n            }\n\n            throw new Error(\n              `A project dependency file (${projectShrinkwrapFilePath}) is missing. You may need to run ` +\n                '\"rush install\" or \"rush update\".'\n            );\n          }\n\n          const relativeProjectShrinkwrapFilePath: string = Path.convertToSlashes(\n            path.relative(rootDirectory, projectShrinkwrapFilePath)\n          );\n          additionalRelativePathsToHash.push(relativeProjectShrinkwrapFilePath);\n        });\n      } else {\n        // Add the shrinkwrap file to every project's dependencies\n        const currentVariant: string | undefined =\n          await this._rushConfiguration.getCurrentlyInstalledVariantAsync();\n\n        const shrinkwrapFile: string = Path.convertToSlashes(\n          path.relative(\n            rootDirectory,\n            rushConfiguration.defaultSubspace.getCommittedShrinkwrapFilePath(currentVariant)\n          )\n        );\n\n        globalAdditionalFiles.push(shrinkwrapFile);\n      }\n\n      const lookupByPath: IReadonlyLookupByPath<RushConfigurationProject> =\n        this._rushConfiguration.getProjectLookupForRoot(rootDirectory);\n\n      let filterPath: string[] = [];\n\n      if (\n        projectSelection &&\n        projectSelection.size > 0 &&\n        this._rushConfiguration.experimentsConfiguration.configuration.enableSubpathScan\n      ) {\n        filterPath = Array.from(projectSelection, ({ projectFolder }) => projectFolder);\n      }\n\n      return async function tryGetSnapshotAsync(): Promise<IInputsSnapshot | undefined> {\n        try {\n          const [hashes, additionalFiles] = await Promise.all([\n            getRepoStateAsync(rootDirectory, additionalRelativePathsToHash, gitPath, filterPath),\n            getAdditionalFilesFromRushProjectConfigurationAsync(\n              additionalGlobs,\n              lookupByPath,\n              rootDirectory,\n              terminal\n            )\n          ]);\n\n          for (const file of additionalFiles) {\n            if (hashes.has(file)) {\n              additionalFiles.delete(file);\n            }\n          }\n\n          const additionalHashes: Map<string, string> = new Map(\n            await hashFilesAsync(rootDirectory, additionalFiles, gitPath)\n          );\n\n          return new InputsSnapshot({\n            additionalHashes,\n            globalAdditionalFiles,\n            hashes,\n            lookupByPath,\n            projectMap: projectMap,\n            rootDir: rootDirectory\n          });\n        } catch (e) {\n          // If getRepoState fails, don't fail the whole build. Treat this case as if we don't know anything about\n          // the state of the files in the repo. This can happen if the environment doesn't have Git.\n          terminal.writeWarningLine(\n            `Error calculating the state of the repo. (inner error: ${\n              e.stack ?? e.message ?? e\n            }). Continuing without diffing files.`\n          );\n\n          return;\n        }\n      };\n    } catch (e) {\n      // If getRepoState fails, don't fail the whole build. Treat this case as if we don't know anything about\n      // the state of the files in the repo. This can happen if the environment doesn't have Git.\n      terminal.writeWarningLine(\n        `Error calculating the state of the repo. (inner error: ${\n          e.stack ?? e.message ?? e\n        }). Continuing without diffing files.`\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public async _filterProjectDataAsync<T>(\n    project: RushConfigurationProject,\n    unfilteredProjectData: Map<string, T>,\n    rootDir: string,\n    terminal: ITerminal\n  ): Promise<Map<string, T>> {\n    const ignoreMatcher: Ignore | undefined = await this._getIgnoreMatcherForProjectAsync(project, terminal);\n    if (!ignoreMatcher) {\n      return unfilteredProjectData;\n    }\n\n    const projectKey: string = path.relative(rootDir, project.projectFolder);\n    const projectKeyLength: number = projectKey.length + 1;\n\n    // At this point, `filePath` is guaranteed to start with `projectKey`, so\n    // we can safely slice off the first N characters to get the file path relative to the\n    // root of the project.\n    const filteredProjectData: Map<string, T> = new Map<string, T>();\n    for (const [filePath, value] of unfilteredProjectData) {\n      const relativePath: string = filePath.slice(projectKeyLength);\n      if (!ignoreMatcher.ignores(relativePath)) {\n        // Add the file path to the filtered data if it is not ignored\n        filteredProjectData.set(filePath, value);\n      }\n    }\n    return filteredProjectData;\n  }\n\n  private async _getIgnoreMatcherForProjectAsync(\n    project: RushConfigurationProject,\n    terminal: ITerminal\n  ): Promise<Ignore | undefined> {\n    const incrementalBuildIgnoredGlobs: ReadonlyArray<string> | undefined =\n      await RushProjectConfiguration.tryLoadIgnoreGlobsForProjectAsync(project, terminal);\n\n    if (incrementalBuildIgnoredGlobs && incrementalBuildIgnoredGlobs.length) {\n      const ignoreMatcher: Ignore = ignore();\n      ignoreMatcher.add(incrementalBuildIgnoredGlobs as string[]);\n      return ignoreMatcher;\n    }\n  }\n}\n\ninterface IAdditionalGlob {\n  project: RushConfigurationProject;\n  operationName: string;\n  additionalFilesForOperation: Set<string>;\n  pattern: string;\n}\n\nasync function getAdditionalFilesFromRushProjectConfigurationAsync(\n  additionalGlobs: IAdditionalGlob[],\n  rootRelativeLookupByPath: IReadonlyLookupByPath<RushConfigurationProject>,\n  rootDirectory: string,\n  terminal: ITerminal\n): Promise<Set<string>> {\n  const additionalFilesFromRushProjectConfiguration: Set<string> = new Set();\n\n  if (!additionalGlobs.length) {\n    return additionalFilesFromRushProjectConfiguration;\n  }\n\n  const { default: glob } = await import('fast-glob');\n  await Async.forEachAsync(additionalGlobs, async (item: IAdditionalGlob) => {\n    const { project, operationName, additionalFilesForOperation, pattern } = item;\n    const matches: string[] = await glob(pattern, {\n      cwd: project.projectFolder,\n      onlyFiles: true,\n      // We want to keep path's type unchanged,\n      // i.e. if the pattern was a  relative path, then matched paths should also be relative paths\n      //      if the pattern was an absolute path, then matched paths should also be absolute paths\n      //\n      // We are doing this because these paths are going to be used to calculate operation state hashes and some users\n      // might choose to depend on global files (e.g. `/etc/os-release`) and some might choose to depend on local non-project files\n      // (e.g. `../path/to/workspace/file`)\n      //\n      // In both cases we want that path to the resource to be the same on all machines,\n      // regardless of what is the current working directory.\n      //\n      // That being said, we want to keep `absolute` options here as false:\n      absolute: false\n    });\n\n    for (const match of matches) {\n      // The glob result is relative to the project folder, but we want it to be relative to the repo root\n      const rootRelativeFilePath: string = Path.convertToSlashes(\n        path.relative(rootDirectory, path.resolve(project.projectFolder, match))\n      );\n\n      if (rootRelativeFilePath.startsWith('../')) {\n        // The target file is outside of the Git tree, use the original result of the match.\n        additionalFilesFromRushProjectConfiguration.add(match);\n        additionalFilesForOperation.add(match);\n      } else {\n        // The target file is inside of the Git tree, find out if it is in a Rush project.\n        const projectMatch: RushConfigurationProject | undefined =\n          rootRelativeLookupByPath.findChildPath(rootRelativeFilePath);\n        if (projectMatch && projectMatch !== project) {\n          terminal.writeErrorLine(\n            `In project \"${project.packageName}\" (\"${project.projectRelativeFolder}\"), ` +\n              `config for operation \"${operationName}\" specifies a glob \"${pattern}\" that selects a file \"${rootRelativeFilePath}\" in a different workspace project ` +\n              `\"${projectMatch.packageName}\" (\"${projectMatch.projectRelativeFolder}\"). ` +\n              `This is forbidden. The \"dependsOnAdditionalFiles\" property of \"rush-project.json\" may only be used to refer to non-workspace files, non-project files, ` +\n              `or untracked files in the current project. To depend on files in another workspace project, use \"devDependencies\" in \"package.json\".`\n          );\n          throw new AlreadyReportedError();\n        }\n        additionalFilesForOperation.add(rootRelativeFilePath);\n        additionalFilesFromRushProjectConfiguration.add(rootRelativeFilePath);\n      }\n    }\n  });\n\n  return additionalFilesFromRushProjectConfiguration;\n}\n"]}