// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { FileSystem, Async } from '@rushstack/node-core-library';
import { installRunRushScriptFilename, installRunRushxScriptFilename, installRunRushPnpmScriptFilename, installRunScriptFilename, scriptsFolderPath } from '../utilities/PathConstants';
import { RushConstants } from './RushConstants';
const HEADER_LINES_PREFIX = [
    '// THIS FILE WAS GENERATED BY A TOOL. ANY MANUAL MODIFICATIONS WILL GET OVERWRITTEN WHENEVER RUSH IS UPGRADED.',
    '//'
];
const HEADER_LINES_SUFFIX = [
    '//',
    '// For more information, see: https://rushjs.io/pages/maintainer/setup_new_repo/',
    '//',
    '// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.',
    "// See the @microsoft/rush package's LICENSE file for details.",
    ''
];
const _scripts = [
    {
        scriptName: installRunScriptFilename,
        headerLines: [
            '// This script is intended for usage in an automated build environment where a Node tool may not have',
            '// been preinstalled, or may have an unpredictable version.  This script will automatically install the specified',
            '// version of the specified tool (if not already installed), and then pass a command-line to it.',
            '// An example usage would be:',
            '//',
            `//    node common/scripts/${installRunScriptFilename} qrcode@1.2.2 qrcode https://rushjs.io`
        ]
    },
    {
        scriptName: installRunRushScriptFilename,
        headerLines: [
            '// This script is intended for usage in an automated build environment where the Rush command may not have',
            '// been preinstalled, or may have an unpredictable version.  This script will automatically install the version of Rush',
            `// specified in the ${RushConstants.rushJsonFilename} configuration file (if not already installed), and then pass a command-line to it.`,
            '// An example usage would be:',
            '//',
            `//    node common/scripts/${installRunRushScriptFilename} install`
        ]
    },
    {
        scriptName: installRunRushxScriptFilename,
        headerLines: [
            '// This script is intended for usage in an automated build environment where the Rush command may not have',
            '// been preinstalled, or may have an unpredictable version.  This script will automatically install the version of Rush',
            `// specified in the ${RushConstants.rushJsonFilename} configuration file (if not already installed), and then pass a command-line to the`,
            '// rushx command.',
            '//',
            '// An example usage would be:',
            '//',
            `//    node common/scripts/${installRunRushxScriptFilename} custom-command`
        ]
    }
];
const _pnpmOnlyScripts = [
    {
        scriptName: installRunRushPnpmScriptFilename,
        headerLines: [
            '// This script is intended for usage in an automated build environment where the Rush command may not have',
            '// been preinstalled, or may have an unpredictable version.  This script will automatically install the version of Rush',
            `// specified in the ${RushConstants.rushJsonFilename} configuration file (if not already installed), and then pass a command-line to the`,
            '// rush-pnpm command.',
            '//',
            '// An example usage would be:',
            '//',
            `//    node common/scripts/${installRunRushPnpmScriptFilename} pnpm-command`
        ]
    }
];
const getScripts = (rushConfiguration) => {
    if (rushConfiguration.isPnpm) {
        return _scripts.concat(_pnpmOnlyScripts);
    }
    return _scripts;
};
/**
 * Checks whether the common/scripts files are up to date, and recopies them if needed.
 * This is used by the "rush install" and "rush update" commands.
 */
export class StandardScriptUpdater {
    /**
     * Recopy the scripts if the scripts are out of date.
     * Used by "rush update".
     */
    static async updateAsync(rushConfiguration) {
        await FileSystem.ensureFolderAsync(rushConfiguration.commonScriptsFolder);
        let anyChanges = false;
        await Async.forEachAsync(getScripts(rushConfiguration), async (script) => {
            const changed = await StandardScriptUpdater._updateScriptOrThrowAsync(script, rushConfiguration, false);
            anyChanges || (anyChanges = changed);
        }, { concurrency: 10 });
        if (anyChanges) {
            // eslint-disable-next-line no-console
            console.log(); // print a newline after the notices
        }
        return anyChanges;
    }
    /**
     * Throw an exception if the scripts are out of date.
     * Used by "rush install".
     */
    static async validateAsync(rushConfiguration) {
        await Async.forEachAsync(getScripts(rushConfiguration), async (script) => {
            await StandardScriptUpdater._updateScriptOrThrowAsync(script, rushConfiguration, true);
        }, { concurrency: 10 });
    }
    /**
     * Compares a single script in the common/script folder to see if it needs to be updated.
     * If throwInsteadOfCopy=false, then an outdated or missing script will be recopied;
     * otherwise, an exception is thrown.
     */
    static async _updateScriptOrThrowAsync(script, rushConfiguration, throwInsteadOfCopy) {
        const targetFilePath = `${rushConfiguration.commonScriptsFolder}/${script.scriptName}`;
        // Are the files the same?
        let filesAreSame = false;
        let targetContent;
        try {
            targetContent = await FileSystem.readFileAsync(targetFilePath);
        }
        catch (e) {
            if (!FileSystem.isNotExistError(e)) {
                throw e;
            }
        }
        const targetNormalized = targetContent
            ? StandardScriptUpdater._normalize(targetContent)
            : undefined;
        let sourceNormalized;
        if (targetNormalized) {
            sourceNormalized = await StandardScriptUpdater._getExpectedFileDataAsync(script);
            if (sourceNormalized === targetNormalized) {
                filesAreSame = true;
            }
        }
        if (!filesAreSame) {
            if (throwInsteadOfCopy) {
                throw new Error('The standard files in the "common/scripts" folders need to be updated' +
                    ' for this Rush version.  Please run "rush update" and commit the changes.');
            }
            else {
                // eslint-disable-next-line no-console
                console.log(`Script is out of date; updating "${targetFilePath}"`);
                sourceNormalized || (sourceNormalized = await StandardScriptUpdater._getExpectedFileDataAsync(script));
                await FileSystem.writeFileAsync(targetFilePath, sourceNormalized);
            }
        }
        return !filesAreSame;
    }
    static _normalize(content) {
        // Ignore newline differences from .gitattributes
        return (content
            .split('\n')
            // Ignore trailing whitespace
            .map((x) => x.trimRight())
            .join('\n'));
    }
    static async _getExpectedFileDataAsync({ scriptName, headerLines }) {
        const sourceFilePath = `${scriptsFolderPath}/${scriptName}`;
        let sourceContent = await FileSystem.readFileAsync(sourceFilePath);
        sourceContent = [...HEADER_LINES_PREFIX, ...headerLines, ...HEADER_LINES_SUFFIX, sourceContent].join('\n');
        const sourceNormalized = StandardScriptUpdater._normalize(sourceContent);
        return sourceNormalized;
    }
}
//# sourceMappingURL=StandardScriptUpdater.js.map