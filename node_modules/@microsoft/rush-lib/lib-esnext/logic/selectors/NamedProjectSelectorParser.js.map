{"version":3,"file":"NamedProjectSelectorParser.js","sourceRoot":"","sources":["../../../src/logic/selectors/NamedProjectSelectorParser.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,EAAE,oBAAoB,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAKjF,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD,MAAM,OAAO,0BAA0B;IAGrC,YAAmB,iBAAoC;QACrD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAEM,KAAK,CAAC,qBAAqB,CAAC,EACjC,gBAAgB,EAChB,QAAQ,EACR,aAAa,EACY;QACzB,MAAM,OAAO,GACX,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,gBAAgB,CAAC,CAAC;QACvE,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,QAAQ,CAAC,cAAc,CACrB,qBAAqB,gBAAgB,gBAAgB,aAAa,sBAAsB;gBACtF,GAAG,aAAa,CAAC,gBAAgB,GAAG,CACvC,CAAC;YACF,MAAM,IAAI,oBAAoB,EAAE,CAAC;QACnC,CAAC;QAED,OAAO,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IAEM,cAAc;QACnB,MAAM,gBAAgB,GAAwB,IAAI,GAAG,EAAkB,CAAC;QAExE,MAAM,WAAW,GAAgB,IAAI,GAAG,EAAE,CAAC;QAC3C,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC;YAC7E,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACrC,MAAM,YAAY,GAAW,WAAW,CAAC,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC9E,MAAM,KAAK,GAAW,gBAAgB,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC9D,gBAAgB,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,aAAa,GAAa,EAAE,CAAC;QACnC,KAAK,MAAM,CAAC,YAAY,EAAE,iBAAiB,CAAC,IAAI,gBAAgB,EAAE,CAAC;YACjE,yCAAyC;YACzC,IAAI,iBAAiB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC;gBAC9D,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACnC,CAAC;QACH,CAAC;QAED,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IAC9D,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AlreadyReportedError, PackageName } from '@rushstack/node-core-library';\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type { IEvaluateSelectorOptions, ISelectorParser } from './ISelectorParser';\nimport { RushConstants } from '../RushConstants';\n\nexport class NamedProjectSelectorParser implements ISelectorParser<RushConfigurationProject> {\n  private readonly _rushConfiguration: RushConfiguration;\n\n  public constructor(rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n  }\n\n  public async evaluateSelectorAsync({\n    unscopedSelector,\n    terminal,\n    parameterName\n  }: IEvaluateSelectorOptions): Promise<Iterable<RushConfigurationProject>> {\n    const project: RushConfigurationProject | undefined =\n      this._rushConfiguration.findProjectByShorthandName(unscopedSelector);\n    if (!project) {\n      terminal.writeErrorLine(\n        `The project name \"${unscopedSelector}\" passed to \"${parameterName}\" does not exist in ` +\n          `${RushConstants.rushJsonFilename}.`\n      );\n      throw new AlreadyReportedError();\n    }\n\n    return [project];\n  }\n\n  public getCompletions(): Iterable<string> {\n    const unscopedNamesMap: Map<string, number> = new Map<string, number>();\n\n    const scopedNames: Set<string> = new Set();\n    for (const project of this._rushConfiguration.rushConfigurationJson.projects) {\n      scopedNames.add(project.packageName);\n      const unscopedName: string = PackageName.getUnscopedName(project.packageName);\n      const count: number = unscopedNamesMap.get(unscopedName) || 0;\n      unscopedNamesMap.set(unscopedName, count + 1);\n    }\n\n    const unscopedNames: string[] = [];\n    for (const [unscopedName, unscopedNameCount] of unscopedNamesMap) {\n      // don't suggest ambiguous unscoped names\n      if (unscopedNameCount === 1 && !scopedNames.has(unscopedName)) {\n        unscopedNames.push(unscopedName);\n      }\n    }\n\n    return unscopedNames.sort().concat([...scopedNames].sort());\n  }\n}\n"]}