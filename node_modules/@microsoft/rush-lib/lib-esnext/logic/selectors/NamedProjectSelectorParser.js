// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { AlreadyReportedError, PackageName } from '@rushstack/node-core-library';
import { RushConstants } from '../RushConstants';
export class NamedProjectSelectorParser {
    constructor(rushConfiguration) {
        this._rushConfiguration = rushConfiguration;
    }
    async evaluateSelectorAsync({ unscopedSelector, terminal, parameterName }) {
        const project = this._rushConfiguration.findProjectByShorthandName(unscopedSelector);
        if (!project) {
            terminal.writeErrorLine(`The project name "${unscopedSelector}" passed to "${parameterName}" does not exist in ` +
                `${RushConstants.rushJsonFilename}.`);
            throw new AlreadyReportedError();
        }
        return [project];
    }
    getCompletions() {
        const unscopedNamesMap = new Map();
        const scopedNames = new Set();
        for (const project of this._rushConfiguration.rushConfigurationJson.projects) {
            scopedNames.add(project.packageName);
            const unscopedName = PackageName.getUnscopedName(project.packageName);
            const count = unscopedNamesMap.get(unscopedName) || 0;
            unscopedNamesMap.set(unscopedName, count + 1);
        }
        const unscopedNames = [];
        for (const [unscopedName, unscopedNameCount] of unscopedNamesMap) {
            // don't suggest ambiguous unscoped names
            if (unscopedNameCount === 1 && !scopedNames.has(unscopedName)) {
                unscopedNames.push(unscopedName);
            }
        }
        return unscopedNames.sort().concat([...scopedNames].sort());
    }
}
//# sourceMappingURL=NamedProjectSelectorParser.js.map