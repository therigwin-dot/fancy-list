{"version":3,"file":"UnlinkManager.js","sourceRoot":"","sources":["../../src/logic/UnlinkManager.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,UAAU,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAChF,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAG/C,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,yBAAyB,EAAE,MAAM,kCAAkC,CAAC;AAC7E,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD;;GAEG;AACH,MAAM,OAAO,aAAa;IAGxB,YAAmB,iBAAoC;QACrD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,WAAW,CAAC,QAAiB,KAAK;QAC7C,MAAM,aAAa,GACjB,IAAI,CAAC,kBAAkB,CAAC,WAAW,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,aAAa,CAAC;QAC3F,IAAI,CAAC,KAAK,IAAI,aAAa,EAAE,CAAC;YAC5B,sCAAsC;YACtC,OAAO,CAAC,GAAG,CACT,QAAQ,CAAC,GAAG,CACV,+EAA+E;gBAC7E,+BAA+B,CAClC,CACF,CAAC;YACF,MAAM,IAAI,oBAAoB,EAAE,CAAC;QACnC,CAAC;QAED,MAAM,IAAI,QAAQ,CAChB,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,yBAAyB,EAAE,EACnE,aAAa,CAAC,oBAAoB,EAClC,EAAE,CACH,CAAC,UAAU,EAAE,CAAC;QACf,OAAO,IAAI,CAAC,mBAAmB,EAAE,CAAC;IACpC,CAAC;IAED;;;;;;SAMK;IACG,mBAAmB;QACzB,IAAI,iBAAiB,GAAY,KAAK,CAAC;QAEvC,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;YAC3D,MAAM,iBAAiB,GAAW,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;YACvF,IAAI,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBACzC,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,WAAW,iBAAiB,EAAE,CAAC,CAAC;gBAC5C,SAAS,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;gBACnD,iBAAiB,GAAG,IAAI,CAAC;YAC3B,CAAC;YAED,MAAM,yBAAyB,GAAW,yBAAyB,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YACvG,IAAI,UAAU,CAAC,MAAM,CAAC,yBAAyB,CAAC,EAAE,CAAC;gBACjD,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,YAAY,yBAAyB,EAAE,CAAC,CAAC;gBACrD,UAAU,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC;gBACjD,iBAAiB,GAAG,IAAI,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,OAAO,iBAAiB,CAAC;IAC3B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { FileSystem, AlreadyReportedError } from '@rushstack/node-core-library';\nimport { Colorize } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport { Utilities } from '../utilities/Utilities';\nimport { BaseProjectShrinkwrapFile } from './base/BaseProjectShrinkwrapFile';\nimport { FlagFile } from '../api/FlagFile';\nimport { RushConstants } from './RushConstants';\n\n/**\n * This class implements the logic for \"rush unlink\"\n */\nexport class UnlinkManager {\n  private _rushConfiguration: RushConfiguration;\n\n  public constructor(rushConfiguration: RushConfiguration) {\n    this._rushConfiguration = rushConfiguration;\n  }\n\n  /**\n   * Delete flag file and all the existing node_modules symlinks and all\n   * project/.rush/temp/shrinkwrap-deps.json files\n   *\n   * Returns true if anything was deleted.\n   */\n  public async unlinkAsync(force: boolean = false): Promise<boolean> {\n    const useWorkspaces: boolean =\n      this._rushConfiguration.pnpmOptions && this._rushConfiguration.pnpmOptions.useWorkspaces;\n    if (!force && useWorkspaces) {\n      // eslint-disable-next-line no-console\n      console.log(\n        Colorize.red(\n          'Unlinking is not supported when using workspaces. Run \"rush purge\" to remove ' +\n            'project node_modules folders.'\n        )\n      );\n      throw new AlreadyReportedError();\n    }\n\n    await new FlagFile(\n      this._rushConfiguration.defaultSubspace.getSubspaceTempFolderPath(),\n      RushConstants.lastLinkFlagFilename,\n      {}\n    ).clearAsync();\n    return this._deleteProjectFiles();\n  }\n\n  /**\n   * Delete:\n   *  - all the node_modules symlinks of configured Rush projects\n   *  - all of the project/.rush/temp/shrinkwrap-deps.json files of configured Rush projects\n   *\n   * Returns true if anything was deleted\n   * */\n  private _deleteProjectFiles(): boolean {\n    let didDeleteAnything: boolean = false;\n\n    for (const rushProject of this._rushConfiguration.projects) {\n      const localModuleFolder: string = path.join(rushProject.projectFolder, 'node_modules');\n      if (FileSystem.exists(localModuleFolder)) {\n        // eslint-disable-next-line no-console\n        console.log(`Purging ${localModuleFolder}`);\n        Utilities.dangerouslyDeletePath(localModuleFolder);\n        didDeleteAnything = true;\n      }\n\n      const projectShrinkwrapFilePath: string = BaseProjectShrinkwrapFile.getFilePathForProject(rushProject);\n      if (FileSystem.exists(projectShrinkwrapFilePath)) {\n        // eslint-disable-next-line no-console\n        console.log(`Deleting ${projectShrinkwrapFilePath}`);\n        FileSystem.deleteFile(projectShrinkwrapFilePath);\n        didDeleteAnything = true;\n      }\n    }\n\n    return didDeleteAnything;\n  }\n}\n"]}