{"version":3,"file":"ChangeManager.js","sourceRoot":"","sources":["../../src/logic/ChangeManager.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAS3D,OAAO,EAAE,gBAAgB,EAAwB,MAAM,oBAAoB,CAAC;AAC5E,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAE1D;;;GAGG;AACH,MAAM,OAAO,aAAa;IASxB,YAAmB,iBAAoC,EAAE,iBAA2C;QAClG,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,SAAS,CACpB,WAAmB,EACnB,kBAAmC,IAAI,eAAe,EAAE,EACxD,uBAAgC,KAAK;QAErC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC;QAE3D,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QAExC,IAAI,CAAC,YAAY,GAAG,IAAI,WAAW,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,MAAM,gBAAgB,CAAC,uBAAuB,CAC/D,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,YAAY,EACjB,oBAAoB,EACpB,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,kBAAkB,CACxB,CAAC;QACF,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;IAC9F,CAAC;IAEM,UAAU;QACf,OAAO,CACL,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;YACzD,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,GAAG,CAAC,CAAC,CACrE,CAAC;IACJ,CAAC;IAED,IAAW,cAAc;QACvB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAEM,eAAe,CAAC,aAAyC;QAC9D,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;YAC9D,MAAM,WAAW,GACf,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACxD,IAAI,WAAW,EAAE,CAAC;gBAChB,IAAI,WAAW,CAAC,aAAa,EAAE,CAAC;oBAC9B,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAW,EAAE,WAAW,CAAC,CAAC;gBACtE,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,YAAqB;QAChC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;YACvB,OAAO;QACT,CAAC;QAED,0CAA0C;QAC1C,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,iBAAiB,EAAE,EAAE;YACvF,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,MAAM,CACvD,iBAAiB,EACjB,mBAAmB,CAAC,UAAU,EAC9B,YAAY,CACb,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,2CAA2C;QAC3C,MAAM,eAAe,GAA8B,gBAAgB,CAAC,cAAc,CAChF,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,kBAAkB,EACvB,YAAY,EACZ,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,kBAAkB,CACxB,CAAC;QAEF,OAAO,eAAe,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,oBAAoB,CAAC,YAAqB;QACrD,qEAAqE;QACrE,sCAAsC;QACtC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YACpC,qBAAqB;YACrB,MAAM,iBAAiB,GAAiB,kBAAkB,CAAC,gBAAgB,CACzE,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,kBAAkB,EACvB,YAAY,CACb,CAAC;YAEF,6DAA6D;YAC7D,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { IPackageJson } from '@rushstack/node-core-library';\n\nimport type { IChangeInfo } from '../api/ChangeManagement';\nimport type { IChangelog } from '../api/Changelog';\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport type { VersionPolicyConfiguration } from '../api/VersionPolicyConfiguration';\nimport { PublishUtilities, type IChangeRequests } from './PublishUtilities';\nimport { ChangeFiles } from './ChangeFiles';\nimport { PrereleaseToken } from './PrereleaseToken';\nimport { ChangelogGenerator } from './ChangelogGenerator';\n\n/**\n * The class manages change files and controls how changes logged by change files\n * can be applied to package.json and change logs.\n */\nexport class ChangeManager {\n  private _prereleaseToken!: PrereleaseToken;\n  private _orderedChanges!: IChangeInfo[];\n  private _allPackages!: ReadonlyMap<string, RushConfigurationProject>;\n  private _allChanges!: IChangeRequests;\n  private _changeFiles!: ChangeFiles;\n  private _rushConfiguration: RushConfiguration;\n  private _projectsToExclude: Set<string> | undefined;\n\n  public constructor(rushConfiguration: RushConfiguration, projectsToExclude?: Set<string> | undefined) {\n    this._rushConfiguration = rushConfiguration;\n    this._projectsToExclude = projectsToExclude;\n  }\n\n  /**\n   * Load changes from change files\n   * @param changesPath - location of change files\n   * @param prereleaseToken - prerelease token\n   * @param includeCommitDetails - whether commit details need to be included in changes\n   */\n  public async loadAsync(\n    changesPath: string,\n    prereleaseToken: PrereleaseToken = new PrereleaseToken(),\n    includeCommitDetails: boolean = false\n  ): Promise<void> {\n    this._allPackages = this._rushConfiguration.projectsByName;\n\n    this._prereleaseToken = prereleaseToken;\n\n    this._changeFiles = new ChangeFiles(changesPath);\n    this._allChanges = await PublishUtilities.findChangeRequestsAsync(\n      this._allPackages,\n      this._rushConfiguration,\n      this._changeFiles,\n      includeCommitDetails,\n      this._prereleaseToken,\n      this._projectsToExclude\n    );\n    this._orderedChanges = PublishUtilities.sortChangeRequests(this._allChanges.packageChanges);\n  }\n\n  public hasChanges(): boolean {\n    return (\n      (this._orderedChanges && this._orderedChanges.length > 0) ||\n      (this._allChanges && this._allChanges.versionPolicyChanges.size > 0)\n    );\n  }\n\n  public get packageChanges(): IChangeInfo[] {\n    return this._orderedChanges;\n  }\n\n  public get allPackages(): ReadonlyMap<string, RushConfigurationProject> {\n    return this._allPackages;\n  }\n\n  public validateChanges(versionConfig: VersionPolicyConfiguration): void {\n    this._allChanges.packageChanges.forEach((change, projectName) => {\n      const projectInfo: RushConfigurationProject | undefined =\n        this._rushConfiguration.getProjectByName(projectName);\n      if (projectInfo) {\n        if (projectInfo.versionPolicy) {\n          projectInfo.versionPolicy.validate(change.newVersion!, projectName);\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply changes to package.json\n   * @param shouldCommit - If the value is true, package.json will be updated.\n   * If the value is false, package.json and change logs will not be updated. It will only do a dry-run.\n   */\n  public apply(shouldCommit: boolean): Map<string, IPackageJson> | undefined {\n    if (!this.hasChanges()) {\n      return;\n    }\n\n    // Update all the changed version policies\n    this._allChanges.versionPolicyChanges.forEach((versionPolicyChange, versionPolicyName) => {\n      this._rushConfiguration.versionPolicyConfiguration.update(\n        versionPolicyName,\n        versionPolicyChange.newVersion,\n        shouldCommit\n      );\n    });\n\n    // Apply all changes to package.json files.\n    const updatedPackages: Map<string, IPackageJson> = PublishUtilities.updatePackages(\n      this._allChanges,\n      this._allPackages,\n      this._rushConfiguration,\n      shouldCommit,\n      this._prereleaseToken,\n      this._projectsToExclude\n    );\n\n    return updatedPackages;\n  }\n\n  public async updateChangelogAsync(shouldCommit: boolean): Promise<void> {\n    // Do not update changelog or delete the change files for prerelease.\n    // Save them for the official release.\n    if (!this._prereleaseToken.hasValue) {\n      // Update changelogs.\n      const updatedChangelogs: IChangelog[] = ChangelogGenerator.updateChangelogs(\n        this._allChanges,\n        this._allPackages,\n        this._rushConfiguration,\n        shouldCommit\n      );\n\n      // Remove the change request files only if \"-a\" was provided.\n      await this._changeFiles.deleteAllAsync(shouldCommit, updatedChangelogs);\n    }\n  }\n}\n"]}