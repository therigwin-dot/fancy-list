{"version":3,"file":"WorkspaceInstallManager.js","sourceRoot":"","sources":["../../../src/logic/installManager/WorkspaceInstallManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport yaml from 'js-yaml';\nimport {\n  FileSystem,\n  FileConstants,\n  AlreadyReportedError,\n  Async,\n  type IDependenciesMetaTable,\n  Path,\n  Sort\n} from '@rushstack/node-core-library';\nimport { createHash } from 'crypto';\n\nimport { BaseInstallManager } from '../base/BaseInstallManager';\nimport type { IInstallManagerOptions } from '../base/BaseInstallManagerTypes';\nimport type { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\nimport { DependencySpecifier, DependencySpecifierType } from '../DependencySpecifier';\nimport {\n  type PackageJsonEditor,\n  DependencyType,\n  type PackageJsonDependencyMeta\n} from '../../api/PackageJsonEditor';\nimport { PnpmWorkspaceFile } from '../pnpm/PnpmWorkspaceFile';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { RushConstants } from '../RushConstants';\nimport { Utilities } from '../../utilities/Utilities';\nimport { InstallHelpers } from './InstallHelpers';\nimport type { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\nimport type { RepoStateFile } from '../RepoStateFile';\nimport { EnvironmentConfiguration } from '../../api/EnvironmentConfiguration';\nimport { ShrinkwrapFileFactory } from '../ShrinkwrapFileFactory';\nimport { BaseProjectShrinkwrapFile } from '../base/BaseProjectShrinkwrapFile';\nimport { type CustomTipId, type ICustomTipInfo, PNPM_CUSTOM_TIPS } from '../../api/CustomTipsConfiguration';\nimport type { PnpmShrinkwrapFile } from '../pnpm/PnpmShrinkwrapFile';\nimport { objectsAreDeepEqual } from '../../utilities/objectUtilities';\nimport type { Subspace } from '../../api/Subspace';\nimport { Colorize, ConsoleTerminalProvider } from '@rushstack/terminal';\nimport { BaseLinkManager, SymlinkKind } from '../base/BaseLinkManager';\nimport { FlagFile } from '../../api/FlagFile';\nimport { Stopwatch } from '../../utilities/Stopwatch';\nimport type { PnpmOptionsConfiguration } from '../pnpm/PnpmOptionsConfiguration';\n\nexport interface IPnpmModules {\n  hoistedDependencies: { [dep in string]: { [depPath in string]: string } };\n}\n\n/**\n * This class implements common logic between \"rush install\" and \"rush update\".\n */\nexport class WorkspaceInstallManager extends BaseInstallManager {\n  /**\n   * @override\n   */\n  public async doInstallAsync(): Promise<void> {\n    // TODO: Remove when \"rush link\" and \"rush unlink\" are deprecated\n    if (this.options.noLink) {\n      // eslint-disable-next-line no-console\n      console.log(\n        Colorize.red(\n          'The \"--no-link\" option was provided but is not supported when using workspaces. Run the command again ' +\n            'without specifying this argument.'\n        )\n      );\n      throw new AlreadyReportedError();\n    }\n\n    await super.doInstallAsync();\n  }\n\n  /**\n   * Regenerates the common/temp/package.json and related workspace files.\n   * If shrinkwrapFile is provided, this function also validates whether it contains\n   * everything we need to install and returns true if so; in all other cases,\n   * the return value is false.\n   *\n   * @override\n   */\n  protected async prepareCommonTempAsync(\n    subspace: Subspace,\n    shrinkwrapFile: (PnpmShrinkwrapFile & BaseShrinkwrapFile) | undefined\n  ): Promise<{ shrinkwrapIsUpToDate: boolean; shrinkwrapWarnings: string[] }> {\n    // Block use of the RUSH_TEMP_FOLDER environment variable\n    if (EnvironmentConfiguration.rushTempFolderOverride !== undefined) {\n      throw new Error(\n        'The RUSH_TEMP_FOLDER environment variable is not compatible with workspace installs. If attempting ' +\n          'to move the PNPM store path, see the `RUSH_PNPM_STORE_PATH` environment variable.'\n      );\n    }\n\n    const { fullUpgrade, allowShrinkwrapUpdates, variant } = this.options;\n\n    // eslint-disable-next-line no-console\n    console.log('\\n' + Colorize.bold('Updating workspace files in ' + subspace.getSubspaceTempFolderPath()));\n\n    const shrinkwrapWarnings: string[] = [];\n\n    // We will start with the assumption that it's valid, and then set it to false if\n    // any of the checks fail\n    let shrinkwrapIsUpToDate: boolean = true;\n\n    if (!shrinkwrapFile) {\n      shrinkwrapIsUpToDate = false;\n    } else {\n      if (!shrinkwrapFile.isWorkspaceCompatible && !fullUpgrade) {\n        // eslint-disable-next-line no-console\n        console.log();\n        // eslint-disable-next-line no-console\n        console.log(\n          Colorize.red(\n            'The shrinkwrap file has not been updated to support workspaces. Run \"rush update --full\" to update ' +\n              'the shrinkwrap file.'\n          )\n        );\n        throw new AlreadyReportedError();\n      }\n\n      // If there are orphaned projects, we need to update\n      const orphanedProjects: ReadonlyArray<string> = shrinkwrapFile.findOrphanedProjects(\n        this.rushConfiguration,\n        subspace\n      );\n\n      if (orphanedProjects.length > 0) {\n        for (const orphanedProject of orphanedProjects) {\n          shrinkwrapWarnings.push(\n            `Your ${this.rushConfiguration.shrinkwrapFilePhrase} references \"${orphanedProject}\" ` +\n              `which was not found in ${RushConstants.rushJsonFilename}`\n          );\n        }\n        shrinkwrapIsUpToDate = false;\n      }\n    }\n\n    // If preferred versions have been updated, or if the repo-state.json is invalid,\n    // we can't be certain of the state of the shrinkwrap\n    const repoState: RepoStateFile = subspace.getRepoState();\n    if (!repoState.isValid) {\n      shrinkwrapWarnings.push(\n        `The ${RushConstants.repoStateFilename} file is invalid. There may be a merge conflict marker in the file.`\n      );\n      shrinkwrapIsUpToDate = false;\n    } else {\n      const commonVersions: CommonVersionsConfiguration = subspace.getCommonVersions(variant);\n      if (repoState.preferredVersionsHash !== commonVersions.getPreferredVersionsHash()) {\n        shrinkwrapWarnings.push(\n          `Preferred versions from ${RushConstants.commonVersionsFilename} have been modified.`\n        );\n        shrinkwrapIsUpToDate = false;\n      }\n\n      const stopwatch: Stopwatch = Stopwatch.start();\n\n      const packageJsonInjectedDependenciesHash: string | undefined =\n        subspace.getPackageJsonInjectedDependenciesHash(variant);\n\n      stopwatch.stop();\n\n      this._terminal.writeDebugLine(\n        `Total amount of time spent to hash related package.json files in the injected installation case: ${stopwatch.toString()}`\n      );\n\n      if (packageJsonInjectedDependenciesHash) {\n        // if packageJsonInjectedDependenciesHash exists\n        // make sure it matches the value in repoState\n        if (packageJsonInjectedDependenciesHash !== repoState.packageJsonInjectedDependenciesHash) {\n          shrinkwrapWarnings.push(`Some injected dependencies' package.json might have been modified.`);\n          shrinkwrapIsUpToDate = false;\n        }\n      } else {\n        // if packageJsonInjectedDependenciesHash not exists\n        // there is a situation that the subspace previously has injected dependencies but removed\n        // so we can check if the repoState up to date\n        if (repoState.packageJsonInjectedDependenciesHash !== undefined) {\n          shrinkwrapWarnings.push(\n            `It was detected that ${repoState.filePath} contains packageJsonInjectedDependenciesHash` +\n              ' but the injected dependencies feature is not enabled. You can manually remove this field in repo-state.json.' +\n              ' Or run rush update command to update the repo-state.json file.'\n          );\n        }\n      }\n    }\n\n    // To generate the workspace file, we will add each project to the file as we loop through and validate\n    const workspaceFile: PnpmWorkspaceFile = new PnpmWorkspaceFile(\n      path.join(subspace.getSubspaceTempFolderPath(), 'pnpm-workspace.yaml')\n    );\n\n    // For pnpm package manager, we need to handle dependenciesMeta changes in package.json. See more: https://pnpm.io/package_json#dependenciesmeta\n    // If dependenciesMeta settings is different between package.json and pnpm-lock.yaml, then shrinkwrapIsUpToDate return false.\n    // Build a object for dependenciesMeta settings in projects' package.json\n    // key is the package path, value is the dependenciesMeta info for that package\n    const expectedDependenciesMetaByProjectRelativePath: Record<string, IDependenciesMetaTable> = {};\n    const commonTempFolder: string = subspace.getSubspaceTempFolderPath();\n    const rushJsonFolder: string = this.rushConfiguration.rushJsonFolder;\n    // get the relative path from common temp folder to repo root folder\n    const relativeFromTempFolderToRootFolder: string = path.relative(commonTempFolder, rushJsonFolder);\n\n    // Loop through the projects and add them to the workspace file. While we're at it, also validate that\n    // referenced workspace projects are valid, and check if the shrinkwrap file is already up-to-date.\n    for (const rushProject of this.rushConfiguration.projects) {\n      if (!subspace.contains(rushProject)) {\n        // skip processing any project that isn't in this subspace\n        continue;\n      }\n      const packageJson: PackageJsonEditor = rushProject.packageJsonEditor;\n      workspaceFile.addPackage(rushProject.projectFolder);\n\n      for (const { name, version, dependencyType } of [\n        ...packageJson.dependencyList,\n        ...packageJson.devDependencyList\n      ]) {\n        // Allow the package manager to handle peer dependency resolution, since this is simply a constraint\n        // enforced by the package manager. Additionally, peer dependencies are simply a version constraint\n        // and do not need to be converted to workspaces protocol.\n        if (dependencyType === DependencyType.Peer) {\n          continue;\n        }\n\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(name, version);\n\n        // Is there a locally built Rush project that could satisfy this dependency?\n        let referencedLocalProject: RushConfigurationProject | undefined =\n          this.rushConfiguration.getProjectByName(name);\n\n        // If we enable exemptDecoupledDependenciesBetweenSubspaces, it will only check dependencies within the subspace.\n        if (\n          this.rushConfiguration.experimentsConfiguration.configuration\n            .exemptDecoupledDependenciesBetweenSubspaces\n        ) {\n          if (referencedLocalProject && !subspace.contains(referencedLocalProject)) {\n            referencedLocalProject = undefined;\n          }\n        }\n\n        // Validate that local projects are referenced with workspace notation. If not, and it is not a\n        // cyclic dependency, then it needs to be updated to specify `workspace:*` explicitly. Currently only\n        // supporting versions and version ranges for specifying a local project.\n        if (\n          (dependencySpecifier.specifierType === DependencySpecifierType.Version ||\n            dependencySpecifier.specifierType === DependencySpecifierType.Range) &&\n          referencedLocalProject &&\n          !rushProject.decoupledLocalDependencies.has(name)\n        ) {\n          // Make sure that this version is intended to target a local package. If not, then we will fail since it\n          // is not explicitly specified as a cyclic dependency.\n          if (\n            !semver.satisfies(\n              referencedLocalProject.packageJsonEditor.version,\n              dependencySpecifier.versionSpecifier\n            )\n          ) {\n            // eslint-disable-next-line no-console\n            console.log();\n            // eslint-disable-next-line no-console\n            console.log(\n              Colorize.red(\n                `\"${rushProject.packageName}\" depends on package \"${name}\" (${version}) which belongs to ` +\n                  'the workspace but cannot be fulfilled with the specified version range. Either ' +\n                  'specify a valid version range, or add the package to \"decoupledLocalDependencies\" in rush.json.'\n              )\n            );\n            throw new AlreadyReportedError();\n          }\n\n          if (!allowShrinkwrapUpdates) {\n            // eslint-disable-next-line no-console\n            console.log();\n            // eslint-disable-next-line no-console\n            console.log(\n              Colorize.red(\n                `\"${rushProject.packageName}\" depends on package \"${name}\" (${version}) which exists within ` +\n                  'the workspace. Run \"rush update\" to update workspace references for this package. ' +\n                  `If package \"${name}\" is intentionally expected to be installed from an external package feed, ` +\n                  `list package \"${name}\" in the \"decoupledLocalDependencies\" field in the ` +\n                  `\"${rushProject.packageName}\" entry in rush.json to suppress this error.`\n              )\n            );\n            throw new AlreadyReportedError();\n          }\n\n          if (fullUpgrade) {\n            // We will update to `workspace` notation. If the version specified is a range, then use the provided range.\n            // Otherwise, use `workspace:*` to ensure we're always using the workspace package.\n            const workspaceRange: string =\n              !!semver.validRange(dependencySpecifier.versionSpecifier) &&\n              !semver.valid(dependencySpecifier.versionSpecifier)\n                ? dependencySpecifier.versionSpecifier\n                : '*';\n            packageJson.addOrUpdateDependency(name, `workspace:${workspaceRange}`, dependencyType);\n            shrinkwrapIsUpToDate = false;\n            continue;\n          }\n        } else if (\n          dependencySpecifier.specifierType === DependencySpecifierType.Workspace &&\n          rushProject.decoupledLocalDependencies.has(name)\n        ) {\n          // If the dependency is a local project that is decoupled, then we need to ensure that it is not specified\n          // as a workspace project. If it is, then we need to update the package.json to remove the workspace notation.\n          this._terminal.writeWarningLine(\n            `\"${rushProject.packageName}\" depends on package ${name}@${version}, but also lists it in ` +\n              `its \"decoupledLocalDependencies\" array. Either update the host project's package.json to use ` +\n              `a version from an external feed instead of \"workspace:\" notation, or remove the dependency from the ` +\n              `host project's \"decoupledLocalDependencies\" array in rush.json.`\n          );\n          throw new AlreadyReportedError();\n        } else if (!rushProject.decoupledLocalDependencies.has(name)) {\n          // Already specified as a local project. Allow the package manager to validate this\n          continue;\n        }\n      }\n\n      // Save the package.json if we modified the version references and warn that the package.json was modified\n      if (packageJson.saveIfModified()) {\n        // eslint-disable-next-line no-console\n        console.log(\n          Colorize.yellow(\n            `\"${rushProject.packageName}\" depends on one or more workspace packages which did not use \"workspace:\" ` +\n              'notation. The package.json has been modified and must be committed to source control.'\n          )\n        );\n      }\n\n      // Now validate that the shrinkwrap file matches what is in the package.json\n      if (await shrinkwrapFile?.isWorkspaceProjectModifiedAsync(rushProject, subspace, variant)) {\n        shrinkwrapWarnings.push(\n          `Dependencies of project \"${rushProject.packageName}\" do not match the current shrinkwrap.`\n        );\n        shrinkwrapIsUpToDate = false;\n      }\n\n      const dependencyMetaList: ReadonlyArray<PackageJsonDependencyMeta> = packageJson.dependencyMetaList;\n      if (dependencyMetaList.length !== 0) {\n        const dependenciesMeta: IDependenciesMetaTable = {};\n        for (const dependencyMeta of dependencyMetaList) {\n          dependenciesMeta[dependencyMeta.name] = {\n            injected: dependencyMeta.injected\n          };\n        }\n\n        // get the relative path from common temp folder to package folder, to align with the value in pnpm-lock.yaml\n        const relativePathFromTempFolderToPackageFolder: string = Path.convertToSlashes(\n          `${relativeFromTempFolderToRootFolder}/${rushProject.projectRelativeFolder}`\n        );\n        expectedDependenciesMetaByProjectRelativePath[relativePathFromTempFolderToPackageFolder] =\n          dependenciesMeta;\n      }\n    }\n\n    // Build a object for dependenciesMeta settings in pnpm-lock.yaml\n    // key is the package path, value is the dependenciesMeta info for that package\n    const lockfileDependenciesMetaByProjectRelativePath: { [key: string]: IDependenciesMetaTable } = {};\n    if (shrinkwrapFile?.importers !== undefined) {\n      for (const [key, value] of shrinkwrapFile?.importers) {\n        const projectRelativePath: string = Path.convertToSlashes(key);\n\n        // we only need to verify packages that exist in package.json and pnpm-lock.yaml\n        // PNPM won't actively remove deleted packages in importers, unless it has to\n        // so it is possible that a deleted package still showing in pnpm-lock.yaml\n        if (expectedDependenciesMetaByProjectRelativePath[projectRelativePath] === undefined) {\n          continue;\n        }\n        if (value.dependenciesMeta !== undefined) {\n          lockfileDependenciesMetaByProjectRelativePath[projectRelativePath] = value.dependenciesMeta;\n        }\n      }\n    }\n\n    // Now, we compare these two objects to see if they are equal or not\n    const dependenciesMetaAreEqual: boolean = objectsAreDeepEqual(\n      expectedDependenciesMetaByProjectRelativePath,\n      lockfileDependenciesMetaByProjectRelativePath\n    );\n\n    if (!dependenciesMetaAreEqual) {\n      shrinkwrapWarnings.push(\n        \"The dependenciesMeta settings in one or more package.json don't match the current shrinkwrap.\"\n      );\n      shrinkwrapIsUpToDate = false;\n    }\n\n    // Check if overrides and globalOverrides are the same\n    const pnpmOptions: PnpmOptionsConfiguration =\n      subspace.getPnpmOptions() || this.rushConfiguration.pnpmOptions;\n\n    const overridesAreEqual: boolean = objectsAreDeepEqual<Record<string, string>>(\n      pnpmOptions.globalOverrides ?? {},\n      shrinkwrapFile?.overrides ? Object.fromEntries(shrinkwrapFile?.overrides) : {}\n    );\n\n    if (!overridesAreEqual) {\n      shrinkwrapWarnings.push(\"The overrides settings doesn't match the current shrinkwrap.\");\n      shrinkwrapIsUpToDate = false;\n    }\n\n    // Check if packageExtensionsChecksum matches globalPackageExtension's hash\n    const packageExtensionsChecksum: string | undefined = this._getPackageExtensionChecksum(\n      pnpmOptions.globalPackageExtensions\n    );\n    const packageExtensionsChecksumAreEqual: boolean =\n      packageExtensionsChecksum === shrinkwrapFile?.packageExtensionsChecksum;\n\n    if (!packageExtensionsChecksumAreEqual) {\n      shrinkwrapWarnings.push(\"The package extension hash doesn't match the current shrinkwrap.\");\n      shrinkwrapIsUpToDate = false;\n    }\n\n    // Write the common package.json\n    InstallHelpers.generateCommonPackageJson(this.rushConfiguration, subspace, undefined, this._terminal);\n\n    // Save the generated workspace file. Don't update the file timestamp unless the content has changed,\n    // since \"rush install\" will consider this timestamp\n    workspaceFile.save(workspaceFile.workspaceFilename, { onlyIfChanged: true });\n\n    return { shrinkwrapIsUpToDate, shrinkwrapWarnings };\n  }\n\n  private _getPackageExtensionChecksum(\n    packageExtensions: Record<string, unknown> | undefined\n  ): string | undefined {\n    // https://github.com/pnpm/pnpm/blob/ba9409ffcef0c36dc1b167d770a023c87444822d/pkg-manager/core/src/install/index.ts#L331\n    const packageExtensionsChecksum: string | undefined =\n      Object.keys(packageExtensions ?? {}).length === 0\n        ? undefined\n        : createObjectChecksum(packageExtensions!);\n\n    return packageExtensionsChecksum;\n  }\n\n  protected async canSkipInstallAsync(\n    lastModifiedDate: Date,\n    subspace: Subspace,\n    variant: string | undefined\n  ): Promise<boolean> {\n    if (!(await super.canSkipInstallAsync(lastModifiedDate, subspace, variant))) {\n      return false;\n    }\n\n    const potentiallyChangedFiles: string[] = [];\n\n    if (this.rushConfiguration.isPnpm) {\n      // Add workspace file. This file is only modified when workspace packages change.\n      const pnpmWorkspaceFilename: string = path.join(\n        subspace.getSubspaceTempFolderPath(),\n        'pnpm-workspace.yaml'\n      );\n\n      if (FileSystem.exists(pnpmWorkspaceFilename)) {\n        potentiallyChangedFiles.push(pnpmWorkspaceFilename);\n      }\n    }\n\n    // Also consider timestamps for all the project node_modules folders, as well as the package.json\n    // files\n    // Example: [ \"C:\\MyRepo\\projects\\projectA\\node_modules\", \"C:\\MyRepo\\projects\\projectA\\package.json\" ]\n    potentiallyChangedFiles.push(\n      ...subspace.getProjects().map((project) => {\n        return path.join(project.projectFolder, RushConstants.nodeModulesFolderName);\n      }),\n      ...subspace.getProjects().map((project) => {\n        return path.join(project.projectFolder, FileConstants.PackageJson);\n      })\n    );\n\n    // NOTE: If any of the potentiallyChangedFiles does not exist, then isFileTimestampCurrent()\n    // returns false.\n    return Utilities.isFileTimestampCurrentAsync(lastModifiedDate, potentiallyChangedFiles);\n  }\n\n  /**\n   * Runs \"pnpm install\" in the common folder.\n   */\n  protected async installAsync(cleanInstall: boolean, subspace: Subspace): Promise<void> {\n    // Example: \"C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm\"\n    const packageManagerFilename: string = this.rushConfiguration.packageManagerToolFilename;\n\n    const packageManagerEnv: NodeJS.ProcessEnv = InstallHelpers.getPackageManagerEnvironment(\n      this.rushConfiguration,\n      this.options\n    );\n    if (ConsoleTerminalProvider.supportsColor) {\n      packageManagerEnv.FORCE_COLOR = '1';\n    }\n\n    const commonNodeModulesFolder: string = path.join(\n      subspace.getSubspaceTempFolderPath(),\n      RushConstants.nodeModulesFolderName\n    );\n\n    // Is there an existing \"node_modules\" folder to consider?\n    if (FileSystem.exists(commonNodeModulesFolder)) {\n      // Should we delete the entire \"node_modules\" folder?\n      if (cleanInstall) {\n        // YES: Delete \"node_modules\"\n\n        // Explain to the user why we are hosing their node_modules folder\n        // eslint-disable-next-line no-console\n        console.log('Deleting files from ' + commonNodeModulesFolder);\n\n        this.installRecycler.moveFolder(commonNodeModulesFolder);\n\n        Utilities.createFolderWithRetry(commonNodeModulesFolder);\n      }\n    }\n\n    const doInstallInternalAsync = async (options: IInstallManagerOptions): Promise<void> => {\n      // Run \"npm install\" in the common folder\n      // To ensure that the output is always colored, set the option \"--color=always\", even when it's piped.\n      // Without this argument, certain text that should be colored (such as red) will appear white.\n      const installArgs: string[] = ['install'];\n      this.pushConfigurationArgs(installArgs, options, subspace);\n\n      // eslint-disable-next-line no-console\n      console.log(\n        '\\n' +\n          Colorize.bold(\n            `Running \"${this.rushConfiguration.packageManager} install\" in` +\n              ` ${subspace.getSubspaceTempFolderPath()}`\n          ) +\n          '\\n'\n      );\n\n      // If any diagnostic options were specified, then show the full command-line\n      if (\n        this.options.debug ||\n        this.options.collectLogFile ||\n        this.options.networkConcurrency ||\n        this.options.onlyShrinkwrap\n      ) {\n        // eslint-disable-next-line no-console\n        console.log(\n          '\\n' +\n            Colorize.green('Invoking package manager: ') +\n            FileSystem.getRealPath(packageManagerFilename) +\n            ' ' +\n            installArgs.join(' ') +\n            '\\n'\n        );\n      }\n\n      // Store the tip IDs that should be printed.\n      // They will be printed all at once *after* the install\n      const tipIDsToBePrinted: Set<CustomTipId> = new Set();\n      const pnpmTips: ICustomTipInfo[] = [];\n      for (const [customTipId, customTip] of Object.entries(PNPM_CUSTOM_TIPS)) {\n        if (\n          this.rushConfiguration.customTipsConfiguration.providedCustomTipsByTipId.has(\n            customTipId as CustomTipId\n          )\n        ) {\n          pnpmTips.push(customTip);\n        }\n      }\n\n      const onPnpmStdoutChunk: ((chunk: string) => void) | undefined =\n        pnpmTips.length > 0\n          ? (chunk: string): void => {\n              // Iterate over the supported custom tip metadata and try to match the chunk.\n              for (const { isMatch, tipId } of pnpmTips) {\n                if (isMatch?.(chunk)) {\n                  tipIDsToBePrinted.add(tipId);\n                }\n              }\n            }\n          : undefined;\n      try {\n        await Utilities.executeCommandWithRetryAsync(\n          {\n            command: packageManagerFilename,\n            args: installArgs,\n            workingDirectory: subspace.getSubspaceTempFolderPath(),\n            environment: packageManagerEnv,\n            suppressOutput: false,\n            onStdoutStreamChunk: onPnpmStdoutChunk\n          },\n          this.options.maxInstallAttempts,\n          () => {\n            if (this.rushConfiguration.isPnpm) {\n              this._terminal.writeWarningLine(`Deleting the \"node_modules\" folder`);\n              this.installRecycler.moveFolder(commonNodeModulesFolder);\n\n              // Leave the pnpm-store as is for the retry. This ensures that packages that have already\n              // been downloaded need not be downloaded again, thereby potentially increasing the chances\n              // of a subsequent successful install.\n\n              Utilities.createFolderWithRetry(commonNodeModulesFolder);\n            }\n          }\n        );\n      } finally {\n        // The try-finally is to avoid the tips NOT being printed if the install fails.\n        // NOT catching the error because we want to keep the other behaviors (i.e., the error will be caught and handle in upper layers).\n\n        if (tipIDsToBePrinted.size > 0) {\n          this._terminal.writeLine();\n          for (const tipID of tipIDsToBePrinted) {\n            this.rushConfiguration.customTipsConfiguration._showTip(this._terminal, tipID);\n          }\n        }\n      }\n    };\n\n    const { configuration: experiments } = this.rushConfiguration.experimentsConfiguration;\n    if (\n      this.options.allowShrinkwrapUpdates &&\n      experiments.usePnpmLockfileOnlyThenFrozenLockfileForRushUpdate\n    ) {\n      await doInstallInternalAsync({\n        ...this.options,\n        onlyShrinkwrap: true\n      });\n\n      await doInstallInternalAsync({\n        ...this.options,\n        allowShrinkwrapUpdates: false\n      });\n    } else {\n      await doInstallInternalAsync(this.options);\n    }\n\n    // If all attempts fail we just terminate. No special handling needed.\n\n    // Ensure that node_modules folders exist after install, since the timestamps on these folders are used\n    // to determine if the install can be skipped\n    const projectNodeModulesFolders: string[] = [\n      path.join(subspace.getSubspaceTempFolderPath(), RushConstants.nodeModulesFolderName),\n      ...this.rushConfiguration.projects.map((project) => {\n        return path.join(project.projectFolder, RushConstants.nodeModulesFolderName);\n      })\n    ];\n\n    for (const nodeModulesFolder of projectNodeModulesFolders) {\n      FileSystem.ensureFolder(nodeModulesFolder);\n    }\n\n    // eslint-disable-next-line no-console\n    console.log('');\n  }\n\n  protected async postInstallAsync(subspace: Subspace): Promise<void> {\n    // Grab the temp shrinkwrap, as this was the most recently completed install. It may also be\n    // more up-to-date than the checked-in shrinkwrap since filtered installs are not written back.\n    // Note that if there are no projects, or if we're in PNPM workspace mode and there are no\n    // projects with dependencies, a lockfile won't be generated.\n    const tempShrinkwrapFile: BaseShrinkwrapFile | undefined = ShrinkwrapFileFactory.getShrinkwrapFile(\n      this.rushConfiguration.packageManager,\n      subspace.getTempShrinkwrapFilename()\n    );\n\n    if (tempShrinkwrapFile) {\n      // Write or delete all project shrinkwraps related to the install\n      await Async.forEachAsync(\n        subspace.getProjects(),\n        async (project) => {\n          await tempShrinkwrapFile.getProjectShrinkwrap(project)?.updateProjectShrinkwrapAsync();\n        },\n        { concurrency: 10 }\n      );\n    } else if (this.rushConfiguration.isPnpm && this.rushConfiguration.pnpmOptions?.useWorkspaces) {\n      // If we're in PNPM workspace mode and PNPM didn't create a shrinkwrap file,\n      // there are no dependencies. Generate empty shrinkwrap files for all projects.\n      await Async.forEachAsync(\n        subspace.getProjects(),\n        async (project) => {\n          await BaseProjectShrinkwrapFile.saveEmptyProjectShrinkwrapFileAsync(project);\n        },\n        { concurrency: 10 }\n      );\n    } else {\n      // This is an unexpected case\n      throw new Error(\n        'A shrinkwrap file does not exist after after successful installation. This probably indicates a ' +\n          'bug in the package manager.'\n      );\n    }\n\n    // If the splitWorkspaceCompatibility is enabled for subspaces, create symlinks to mimic the behaviour\n    // of having the node_modules folder created directly in the project folder. This requires symlinking two categories:\n    // 1) Symlink any packages that are declared to be publicly hoisted, such as by using public-hoist-pattern in .npmrc.\n    //    This creates a symlink from <project_folder>/node_modules/<dependency> -> temp/<subspace_name>/node_modules/<dependency>\n    // 2) Symlink any workspace packages that are declared in the temp folder, as some packages may expect these packages to exist\n    //    in the node_modules folder.\n    //    This creates a symlink from temp/<subspace_name>/node_modules/<workspace_dependency_name> -> <workspace_dependency_folder>\n    if (\n      this.rushConfiguration.subspacesFeatureEnabled &&\n      this.rushConfiguration.subspacesConfiguration?.splitWorkspaceCompatibility\n    ) {\n      const tempNodeModulesPath: string = `${subspace.getSubspaceTempFolderPath()}/node_modules`;\n      const modulesFilePath: string = `${tempNodeModulesPath}/${RushConstants.pnpmModulesFilename}`;\n      if (\n        subspace.subspaceName.startsWith('split_') &&\n        subspace.getProjects().length === 1 &&\n        (await FileSystem.existsAsync(modulesFilePath))\n      ) {\n        // Find the .modules.yaml file in the subspace temp/node_modules folder\n        const modulesContent: string = await FileSystem.readFileAsync(modulesFilePath);\n        const yamlContent: IPnpmModules = yaml.load(modulesContent, { filename: modulesFilePath });\n        const { hoistedDependencies } = yamlContent;\n        const subspaceProject: RushConfigurationProject = subspace.getProjects()[0];\n        const projectNodeModulesPath: string = `${subspaceProject.projectFolder}/node_modules`;\n        for (const value of Object.values(hoistedDependencies)) {\n          for (const [filePath, type] of Object.entries(value)) {\n            if (type === 'public') {\n              if (Utilities.existsOrIsSymlink(`${projectNodeModulesPath}/${filePath}`)) {\n                await FileSystem.deleteFolderAsync(`${projectNodeModulesPath}/${filePath}`);\n              }\n              // If we don't already have a symlink for this package, create one\n              const parentDir: string = Utilities.trimAfterLastSlash(`${projectNodeModulesPath}/${filePath}`);\n              await FileSystem.ensureFolderAsync(parentDir);\n              BaseLinkManager._createSymlink({\n                linkTargetPath: `${tempNodeModulesPath}/${filePath}`,\n                newLinkPath: `${projectNodeModulesPath}/${filePath}`,\n                symlinkKind: SymlinkKind.Directory\n              });\n            }\n          }\n        }\n      }\n\n      // Look for any workspace linked packages anywhere in this subspace, symlink them from the temp node_modules folder.\n      const subspaceDependencyProjects: Set<RushConfigurationProject> = new Set();\n      for (const subspaceProject of subspace.getProjects()) {\n        for (const dependencyProject of subspaceProject.dependencyProjects) {\n          subspaceDependencyProjects.add(dependencyProject);\n        }\n      }\n      for (const dependencyProject of subspaceDependencyProjects) {\n        const symlinkToCreate: string = `${tempNodeModulesPath}/${dependencyProject.packageName}`;\n        if (!Utilities.existsOrIsSymlink(symlinkToCreate)) {\n          const parentFolder: string = Utilities.trimAfterLastSlash(symlinkToCreate);\n          await FileSystem.ensureFolderAsync(parentFolder);\n          BaseLinkManager._createSymlink({\n            linkTargetPath: dependencyProject.projectFolder,\n            newLinkPath: symlinkToCreate,\n            symlinkKind: SymlinkKind.Directory\n          });\n        }\n      }\n    }\n    // TODO: Remove when \"rush link\" and \"rush unlink\" are deprecated\n    await new FlagFile(\n      subspace.getSubspaceTempFolderPath(),\n      RushConstants.lastLinkFlagFilename,\n      {}\n    ).createAsync();\n  }\n\n  /**\n   * Used when invoking the NPM tool.  Appends the common configuration options\n   * to the command-line.\n   */\n  protected pushConfigurationArgs(args: string[], options: IInstallManagerOptions, subspace: Subspace): void {\n    super.pushConfigurationArgs(args, options, subspace);\n\n    // Add workspace-specific args\n    if (this.rushConfiguration.isPnpm) {\n      args.push('--recursive');\n      args.push('--link-workspace-packages', 'false');\n\n      if (process.stdout.isTTY) {\n        // If we're on a TTY console and something else didn't set a `--reporter` parameter,\n        // explicitly set the default reporter. This fixes an issue where, when the pnpm\n        // output is being monitored to match custom tips, pnpm will detect a non-TTY\n        // stdout stream and use the `append-only` reporter.\n        //\n        // See docs here: https://pnpm.io/cli/install#--reportername\n        let includesReporterArg: boolean = false;\n        for (const arg of args) {\n          if (arg.startsWith('--reporter')) {\n            includesReporterArg = true;\n            break;\n          }\n        }\n\n        if (!includesReporterArg) {\n          args.push('--reporter', 'default');\n        }\n      }\n\n      for (const arg of this.options.pnpmFilterArgumentValues) {\n        args.push('--filter', arg);\n      }\n    }\n  }\n}\n\n/**\n * Source: https://github.com/pnpm/pnpm/blob/ba9409ffcef0c36dc1b167d770a023c87444822d/pkg-manager/core/src/install/index.ts#L821-L824\n * @param obj\n * @returns\n */\nfunction createObjectChecksum(obj: Record<string, unknown>): string {\n  const s: string = JSON.stringify(Sort.sortKeys(obj));\n  return createHash('md5').update(s).digest('hex');\n}\n"]}