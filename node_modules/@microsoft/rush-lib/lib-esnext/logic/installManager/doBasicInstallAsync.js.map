{"version":3,"file":"doBasicInstallAsync.js","sourceRoot":"","sources":["../../../src/logic/installManager/doBasicInstallAsync.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAQ3D,OAAO,EAAE,qBAAqB,EAAE,MAAM,0BAA0B,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,qBAAqB,EAAE,MAAM,0CAA0C,CAAC;AAcjF,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,OAA2B;IACnE,MAAM,EACJ,iBAAiB,EACjB,gBAAgB,EAChB,OAAO,EACP,OAAO,EACP,QAAQ,EACR,kBAAkB,EAClB,iBAAiB,EACjB,QAAQ,EACT,GAAG,OAAO,CAAC;IAEZ,qBAAqB,CAAC,wBAAwB,CAAC,iBAAiB,EAAE,QAAQ,EAAE;QAC1E,OAAO;QACP,QAAQ;KACT,CAAC,CAAC;IACH,WAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IAExC,MAAM,YAAY,GAAkC,IAAI,YAAY,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;IAE1G,MAAM,cAAc,GAAuB,MAAM,qBAAqB,CAAC,sBAAsB,CAC3F,iBAAiB,EACjB,gBAAgB,EAChB,YAAY,EACZ;QACE,KAAK,EAAE,OAAO;QACd,sBAAsB,EAAE,KAAK;QAC7B,SAAS,EAAE,KAAK;QAChB,YAAY,EAAE,KAAK;QACnB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,KAAK;QAClB,iBAAiB,EAAE,KAAK;QACxB,OAAO,EAAE,KAAK;QACd,cAAc,EAAE,KAAK;QACrB,wBAAwB,EAAE,EAAE;QAC5B,gBAAgB,EAAE,IAAI,GAAG,CAAC,iBAAiB,CAAC,QAAQ,CAAC;QACrD,kBAAkB,EAAE,CAAC;QACrB,kBAAkB,EAAE,SAAS;QAC7B,QAAQ;QACR,QAAQ;QACR,OAAO;QACP,iBAAiB;QACjB,kBAAkB;KACnB,CACF,CAAC;IAEF,IAAI,CAAC;QACH,MAAM,cAAc,CAAC,cAAc,EAAE,CAAC;IACxC,CAAC;YAAS,CAAC;QACT,MAAM,YAAY,CAAC,mBAAmB,EAAE,CAAC;IAC3C,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ITerminal } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushGlobalFolder } from '../../api/RushGlobalFolder';\nimport type { BaseInstallManager } from '../base/BaseInstallManager';\nimport type { IInstallManagerOptions } from '../base/BaseInstallManagerTypes';\nimport { InstallManagerFactory } from '../InstallManagerFactory';\nimport { SetupChecks } from '../SetupChecks';\nimport { PurgeManager } from '../PurgeManager';\nimport { VersionMismatchFinder } from '../versionMismatch/VersionMismatchFinder';\nimport type { Subspace } from '../../api/Subspace';\n\nexport interface IRunInstallOptions {\n  afterInstallAsync?: IInstallManagerOptions['afterInstallAsync'];\n  beforeInstallAsync?: IInstallManagerOptions['beforeInstallAsync'];\n  rushConfiguration: RushConfiguration;\n  rushGlobalFolder: RushGlobalFolder;\n  isDebug: boolean;\n  terminal: ITerminal;\n  variant: string | undefined;\n  subspace: Subspace;\n}\n\nexport async function doBasicInstallAsync(options: IRunInstallOptions): Promise<void> {\n  const {\n    rushConfiguration,\n    rushGlobalFolder,\n    isDebug,\n    variant,\n    terminal,\n    beforeInstallAsync,\n    afterInstallAsync,\n    subspace\n  } = options;\n\n  VersionMismatchFinder.ensureConsistentVersions(rushConfiguration, terminal, {\n    variant,\n    subspace\n  });\n  SetupChecks.validate(rushConfiguration);\n\n  const purgeManager: typeof PurgeManager.prototype = new PurgeManager(rushConfiguration, rushGlobalFolder);\n\n  const installManager: BaseInstallManager = await InstallManagerFactory.getInstallManagerAsync(\n    rushConfiguration,\n    rushGlobalFolder,\n    purgeManager,\n    {\n      debug: isDebug,\n      allowShrinkwrapUpdates: false,\n      checkOnly: false,\n      bypassPolicy: false,\n      noLink: false,\n      fullUpgrade: false,\n      recheckShrinkwrap: false,\n      offline: false,\n      collectLogFile: false,\n      pnpmFilterArgumentValues: [],\n      selectedProjects: new Set(rushConfiguration.projects),\n      maxInstallAttempts: 1,\n      networkConcurrency: undefined,\n      subspace,\n      terminal,\n      variant,\n      afterInstallAsync,\n      beforeInstallAsync\n    }\n  );\n\n  try {\n    await installManager.doInstallAsync();\n  } finally {\n    await purgeManager.startDeleteAllAsync();\n  }\n}\n"]}