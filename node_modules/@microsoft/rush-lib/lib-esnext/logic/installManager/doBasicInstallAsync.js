// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { InstallManagerFactory } from '../InstallManagerFactory';
import { SetupChecks } from '../SetupChecks';
import { PurgeManager } from '../PurgeManager';
import { VersionMismatchFinder } from '../versionMismatch/VersionMismatchFinder';
export async function doBasicInstallAsync(options) {
    const { rushConfiguration, rushGlobalFolder, isDebug, variant, terminal, beforeInstallAsync, afterInstallAsync, subspace } = options;
    VersionMismatchFinder.ensureConsistentVersions(rushConfiguration, terminal, {
        variant,
        subspace
    });
    SetupChecks.validate(rushConfiguration);
    const purgeManager = new PurgeManager(rushConfiguration, rushGlobalFolder);
    const installManager = await InstallManagerFactory.getInstallManagerAsync(rushConfiguration, rushGlobalFolder, purgeManager, {
        debug: isDebug,
        allowShrinkwrapUpdates: false,
        checkOnly: false,
        bypassPolicy: false,
        noLink: false,
        fullUpgrade: false,
        recheckShrinkwrap: false,
        offline: false,
        collectLogFile: false,
        pnpmFilterArgumentValues: [],
        selectedProjects: new Set(rushConfiguration.projects),
        maxInstallAttempts: 1,
        networkConcurrency: undefined,
        subspace,
        terminal,
        variant,
        afterInstallAsync,
        beforeInstallAsync
    });
    try {
        await installManager.doInstallAsync();
    }
    finally {
        await purgeManager.startDeleteAllAsync();
    }
}
//# sourceMappingURL=doBasicInstallAsync.js.map