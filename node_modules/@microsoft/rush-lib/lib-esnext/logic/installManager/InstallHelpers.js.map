{"version":3,"file":"InstallHelpers.js","sourceRoot":"","sources":["../../../src/logic/installManager/InstallHelpers.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,EACL,aAAa,EACb,UAAU,EAEV,QAAQ,EACR,QAAQ,EACT,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAkB,MAAM,qBAAqB,CAAC;AAE/D,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAI5D,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AAGtD,OAAO,EAAE,KAAK,EAAE,MAAM,iCAAiC,CAAC;AAExD,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAcjC,MAAM,OAAO,cAAc;IAClB,MAAM,CAAC,yBAAyB,CACrC,iBAAoC,EACpC,QAAkB,EAClB,eAAoC,IAAI,GAAG,EAAkB,EAC7D,QAAmB;QAEnB,MAAM,iBAAiB,GAAuB;YAC5C,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,2CAA2C;YACxD,IAAI,EAAE,aAAa;YACnB,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,OAAO;SACjB,CAAC;QAEF,IAAI,iBAAiB,CAAC,MAAM,EAAE,CAAC;YAC7B,MAAM,WAAW,GACf,QAAQ,CAAC,cAAc,EAAE,IAAI,iBAAiB,CAAC,WAAW,CAAC;YAC7D,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;gBAC5B,iBAAiB,CAAC,IAAI,GAAG,EAAE,CAAC;YAC9B,CAAC;YAED,IAAI,WAAW,CAAC,eAAe,EAAE,CAAC;gBAChC,iBAAiB,CAAC,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,eAAe,CAAC;YACjE,CAAC;YAED,IAAI,WAAW,CAAC,uBAAuB,EAAE,CAAC;gBACxC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,uBAAuB,CAAC;YACjF,CAAC;YACD,IAAI,WAAW,CAAC,yBAAyB,EAAE,CAAC;gBAC1C,iBAAiB,CAAC,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,yBAAyB,CAAC;YACrF,CAAC;YAED,IAAI,WAAW,CAAC,4BAA4B,EAAE,CAAC;gBAC7C,iBAAiB,CAAC,IAAI,CAAC,sBAAsB,GAAG,WAAW,CAAC,4BAA4B,CAAC;YAC3F,CAAC;YAED,IAAI,WAAW,CAAC,iCAAiC,EAAE,CAAC;gBAClD,IACE,iBAAiB,CAAC,qBAAqB,CAAC,WAAW,KAAK,SAAS;oBACjE,MAAM,CAAC,EAAE,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,WAAW,EAAE,OAAO,CAAC,EACvE,CAAC;oBACD,QAAQ,CAAC,gBAAgB,CACvB,QAAQ,CAAC,MAAM,CACb,yBAAyB,iBAAiB,CAAC,qBAAqB,CAAC,WAAW,IAAI;wBAC9E,mEAAmE;wBACnE,GAAG,iBAAiB,CAAC,sBAAsB,IAAI,aAAa,CAAC,kBAAkB,IAAI;wBACnF,yCAAyC,CAC5C,CACF,CAAC;gBACJ,CAAC;gBAED,iBAAiB,CAAC,IAAI,CAAC,2BAA2B,GAAG,WAAW,CAAC,iCAAiC,CAAC;YACrG,CAAC;YAED,IAAI,WAAW,CAAC,+BAA+B,EAAE,CAAC;gBAChD,iBAAiB,CAAC,IAAI,CAAC,yBAAyB,GAAG,WAAW,CAAC,+BAA+B,CAAC;YACjG,CAAC;YAED,IAAI,WAAW,CAAC,yBAAyB,EAAE,CAAC;gBAC1C,iBAAiB,CAAC,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,yBAAyB,CAAC;YACrF,CAAC;YAED,IAAI,WAAW,CAAC,8BAA8B,EAAE,CAAC;gBAC/C,KAAK,CAAC,iBAAiB,EAAE,WAAW,CAAC,8BAA8B,CAAC,CAAC;YACvE,CAAC;QACH,CAAC;QAED,iEAAiE;QACjE,sDAAsD;QACtD,KAAK,MAAM,UAAU,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC;YAChE,iBAAiB,CAAC,YAAa,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC;QAC9E,CAAC;QAED,gDAAgD;QAChD,MAAM,yBAAyB,GAAW,IAAI,CAAC,IAAI,CACjD,QAAQ,CAAC,yBAAyB,EAAE,EACpC,aAAa,CAAC,WAAW,CAC1B,CAAC;QAEF,uFAAuF;QACvF,+BAA+B;QAC/B,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IACvF,CAAC;IAEM,MAAM,CAAC,4BAA4B,CACxC,iBAAoC,EACpC,UAEI,EAAE;QAEN,IAAI,wBAAwB,GAA0C,SAAS,CAAC;QAEhF,IAAI,iBAAiB,CAAC,cAAc,KAAK,KAAK,EAAE,CAAC;YAC/C,IAAI,iBAAiB,CAAC,UAAU,IAAI,iBAAiB,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC;gBACtF,wBAAwB,GAAG,iBAAiB,CAAC,UAAU,CAAC,oBAAoB,CAAC;YAC/E,CAAC;QACH,CAAC;aAAM,IAAI,iBAAiB,CAAC,MAAM,EAAE,CAAC;YACpC,IAAI,iBAAiB,CAAC,WAAW,IAAI,iBAAiB,CAAC,WAAW,CAAC,oBAAoB,EAAE,CAAC;gBACxF,wBAAwB,GAAG,iBAAiB,CAAC,WAAW,CAAC,oBAAoB,CAAC;YAChF,CAAC;QACH,CAAC;aAAM,IAAI,iBAAiB,CAAC,cAAc,KAAK,MAAM,EAAE,CAAC;YACvD,IAAI,iBAAiB,CAAC,WAAW,IAAI,iBAAiB,CAAC,WAAW,CAAC,oBAAoB,EAAE,CAAC;gBACxF,wBAAwB,GAAG,iBAAiB,CAAC,WAAW,CAAC,oBAAoB,CAAC;YAChF,CAAC;QACH,CAAC;QAED,OAAO,cAAc,CAAC,0BAA0B,CAAC,OAAO,CAAC,GAAG,EAAE,wBAAwB,EAAE,OAAO,CAAC,CAAC;IACnG,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAChD,iBAAoC,EACpC,gBAAkC,EAClC,kBAA0B,EAC1B,qBAA+B;QAE/B,IAAI,iCAA6D,CAAC;QAClE,IAAI,qBAAqB,EAAE,CAAC;YAC1B,iCAAiC,GAAG,GAAG,EAAE;gBACvC,UAAU;YACZ,CAAC,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,iCAAiC,GAAG,CAAC,OAAgB,EAAE,EAAE;gBACvD,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC,CAAC;QACJ,CAAC;QAED,qCAAqC;QACrC,MAAM,cAAc,GAAW,gBAAgB,CAAC,gBAAgB,CAAC;QAEjE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC;YACvC,iCAAiC,CAAC,WAAW,GAAG,cAAc,CAAC,CAAC;YAChE,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,cAAc,GAAuB,iBAAiB,CAAC,cAAc,CAAC;QAC5E,MAAM,qBAAqB,GAAW,iBAAiB,CAAC,yBAAyB,CAAC;QAElF,MAAM,wBAAwB,GAAW,GAAG,cAAc,IAAI,qBAAqB,EAAE,CAAC;QACtF,gDAAgD;QAChD,MAAM,wBAAwB,GAAW,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,wBAAwB,CAAC,CAAC;QAE7F,MAAM,oBAAoB,GAAoB,IAAI,eAAe,CAAC,wBAAwB,EAAE;YAC1F,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI;SAC5B,CAAC,CAAC;QAEH,iCAAiC,CAAC,8BAA8B,wBAAwB,EAAE,CAAC,CAAC;QAE5F,MAAM,IAAI,GAAa,MAAM,QAAQ,CAAC,YAAY,CAAC,cAAc,EAAE,wBAAwB,CAAC,CAAC;QAE7F,iCAAiC,CAAC,qBAAqB,wBAAwB,EAAE,CAAC,CAAC;QAEnF,IAAI,CAAC,CAAC,MAAM,oBAAoB,CAAC,YAAY,EAAE,CAAC,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3E,iCAAiC,CAC/B,QAAQ,CAAC,IAAI,CAAC,cAAc,cAAc,YAAY,qBAAqB,IAAI,CAAC,CACjF,CAAC;YAEF,sEAAsE;YACtE,MAAM,SAAS,CAAC,8BAA8B,CAAC;gBAC7C,SAAS,EAAE,wBAAwB;gBACnC,WAAW,EAAE,cAAc;gBAC3B,OAAO,EAAE,iBAAiB,CAAC,yBAAyB;gBACpD,gBAAgB,EAAE,GAAG,cAAc,gBAAgB;gBACnD,kBAAkB,EAAE,kBAAkB;gBACtC,wFAAwF;gBACxF,mFAAmF;gBACnF,mFAAmF;gBACnF,gFAAgF;gBAChF,qEAAqE;gBACrE,yEAAyE;gBACzE,sBAAsB,EAAE,iBAAiB,CAAC,sBAAsB;aACjE,CAAC,CAAC;YAEH,iCAAiC,CAC/B,0BAA0B,cAAc,YAAY,qBAAqB,EAAE,CAC5E,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,iCAAiC,CAC/B,SAAS,cAAc,YAAY,qBAAqB,OAAO,wBAAwB,EAAE,CAC1F,CAAC;QACJ,CAAC;QAED,MAAM,oBAAoB,CAAC,WAAW,EAAE,CAAC;QAEzC,mCAAmC;QACnC,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;QAE5D,8CAA8C;QAC9C,MAAM,6BAA6B,GAAW,IAAI,CAAC,IAAI,CACrD,iBAAiB,CAAC,gBAAgB,EAClC,GAAG,cAAc,QAAQ,CAC1B,CAAC;QAEF,iCAAiC,CAAC,iBAAiB,6BAA6B,GAAG,CAAC,CAAC;QACrF,iCAAiC,CAAC,UAAU,wBAAwB,GAAG,CAAC,CAAC;QAEzE,wFAAwF;QACxF,4FAA4F;QAC5F,IAAI,CAAC;YACH,UAAU,CAAC,YAAY,CAAC,6BAA6B,CAAC,CAAC;QACzD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAK,KAA+B,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;gBACvD,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;QAED,UAAU,CAAC,0BAA0B,CAAC;YACpC,cAAc,EAAE,wBAAwB;YACxC,WAAW,EAAE,6BAA6B;SAC3C,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,0CAA0C;IAClC,MAAM,CAAC,0BAA0B,CACvC,OAA0B,EAC1B,oBAAgD,EAChD,UAEI,EAAE;QAEN,MAAM,iBAAiB,GAAsB,OAAO,CAAC;QAErD,IAAI,oBAAoB,EAAE,CAAC;YACzB,wCAAwC;YACxC,KAAK,MAAM,MAAM,IAAI,oBAAoB,EAAE,CAAC;gBAC1C,IAAI,sBAAsB,GAAY,IAAI,CAAC;gBAC3C,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,qDAAqD,MAAM,EAAE,CAAC,CAAC;gBAE3E,IAAI,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;oBACnC,sBAAsB,GAAG,KAAK,CAAC;oBAC/B,sCAAsC;oBACtC,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;oBACrD,sCAAsC;oBACtC,OAAO,CAAC,GAAG,CAAC,WAAW,MAAM,EAAE,CAAC,CAAC;oBACjC,sCAAsC;oBACtC,OAAO,CAAC,GAAG,CAAC,qBAAqB,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;oBACpD,sCAAsC;oBACtC,OAAO,CAAC,GAAG,CACT,kBAAkB,aAAa,CAAC,gBAAgB,KAAK,oBAAoB,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAC1F,CAAC;oBAEF,IAAI,oBAAoB,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;wBAC1C,sBAAsB,GAAG,IAAI,CAAC;wBAC9B,sCAAsC;wBACtC,OAAO,CAAC,GAAG,CACT,6DAA6D,aAAa,CAAC,gBAAgB,GAAG,CAC/F,CAAC;oBACJ,CAAC;yBAAM,CAAC;wBACN,sCAAsC;wBACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,gEAAgE,CAAC,CAAC,CAAC;oBACjG,CAAC;gBACH,CAAC;gBAED,IAAI,sBAAsB,EAAE,CAAC;oBAC3B,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;wBAClB,sCAAsC;wBACtC,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC;wBACjE,sCAAsC;wBACtC,OAAO,CAAC,GAAG,CAAC,WAAW,MAAM,EAAE,CAAC,CAAC;wBACjC,sCAAsC;wBACtC,OAAO,CAAC,GAAG,CAAC,YAAY,oBAAoB,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;oBAChE,CAAC;oBACD,iBAAiB,CAAC,MAAM,CAAC,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;gBACjE,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,iBAAiB,CAAC;IAC3B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport {\n  FileConstants,\n  FileSystem,\n  type IPackageJson,\n  JsonFile,\n  LockFile\n} from '@rushstack/node-core-library';\nimport { Colorize, type ITerminal } from '@rushstack/terminal';\n\nimport { LastInstallFlag } from '../../api/LastInstallFlag';\nimport type { PackageManagerName } from '../../api/packageManager/PackageManager';\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushGlobalFolder } from '../../api/RushGlobalFolder';\nimport { Utilities } from '../../utilities/Utilities';\nimport type { IConfigurationEnvironment } from '../base/BasePackageManagerOptionsConfiguration';\nimport type { PnpmOptionsConfiguration } from '../pnpm/PnpmOptionsConfiguration';\nimport { merge } from '../../utilities/objectUtilities';\nimport type { Subspace } from '../../api/Subspace';\nimport { RushConstants } from '../RushConstants';\nimport * as semver from 'semver';\n\ninterface ICommonPackageJson extends IPackageJson {\n  pnpm?: {\n    overrides?: typeof PnpmOptionsConfiguration.prototype.globalOverrides;\n    packageExtensions?: typeof PnpmOptionsConfiguration.prototype.globalPackageExtensions;\n    peerDependencyRules?: typeof PnpmOptionsConfiguration.prototype.globalPeerDependencyRules;\n    neverBuiltDependencies?: typeof PnpmOptionsConfiguration.prototype.globalNeverBuiltDependencies;\n    ignoredOptionalDependencies?: typeof PnpmOptionsConfiguration.prototype.globalIgnoredOptionalDependencies;\n    allowedDeprecatedVersions?: typeof PnpmOptionsConfiguration.prototype.globalAllowedDeprecatedVersions;\n    patchedDependencies?: typeof PnpmOptionsConfiguration.prototype.globalPatchedDependencies;\n  };\n}\n\nexport class InstallHelpers {\n  public static generateCommonPackageJson(\n    rushConfiguration: RushConfiguration,\n    subspace: Subspace,\n    dependencies: Map<string, string> = new Map<string, string>(),\n    terminal: ITerminal\n  ): void {\n    const commonPackageJson: ICommonPackageJson = {\n      dependencies: {},\n      description: 'Temporary file generated by the Rush tool',\n      name: 'rush-common',\n      private: true,\n      version: '0.0.0'\n    };\n\n    if (rushConfiguration.isPnpm) {\n      const pnpmOptions: PnpmOptionsConfiguration =\n        subspace.getPnpmOptions() || rushConfiguration.pnpmOptions;\n      if (!commonPackageJson.pnpm) {\n        commonPackageJson.pnpm = {};\n      }\n\n      if (pnpmOptions.globalOverrides) {\n        commonPackageJson.pnpm.overrides = pnpmOptions.globalOverrides;\n      }\n\n      if (pnpmOptions.globalPackageExtensions) {\n        commonPackageJson.pnpm.packageExtensions = pnpmOptions.globalPackageExtensions;\n      }\n      if (pnpmOptions.globalPeerDependencyRules) {\n        commonPackageJson.pnpm.peerDependencyRules = pnpmOptions.globalPeerDependencyRules;\n      }\n\n      if (pnpmOptions.globalNeverBuiltDependencies) {\n        commonPackageJson.pnpm.neverBuiltDependencies = pnpmOptions.globalNeverBuiltDependencies;\n      }\n\n      if (pnpmOptions.globalIgnoredOptionalDependencies) {\n        if (\n          rushConfiguration.rushConfigurationJson.pnpmVersion !== undefined &&\n          semver.lt(rushConfiguration.rushConfigurationJson.pnpmVersion, '9.0.0')\n        ) {\n          terminal.writeWarningLine(\n            Colorize.yellow(\n              `Your version of pnpm (${rushConfiguration.rushConfigurationJson.pnpmVersion}) ` +\n                `doesn't support the \"globalIgnoredOptionalDependencies\" field in ` +\n                `${rushConfiguration.commonRushConfigFolder}/${RushConstants.pnpmConfigFilename}. ` +\n                'Remove this field or upgrade to pnpm 9.'\n            )\n          );\n        }\n\n        commonPackageJson.pnpm.ignoredOptionalDependencies = pnpmOptions.globalIgnoredOptionalDependencies;\n      }\n\n      if (pnpmOptions.globalAllowedDeprecatedVersions) {\n        commonPackageJson.pnpm.allowedDeprecatedVersions = pnpmOptions.globalAllowedDeprecatedVersions;\n      }\n\n      if (pnpmOptions.globalPatchedDependencies) {\n        commonPackageJson.pnpm.patchedDependencies = pnpmOptions.globalPatchedDependencies;\n      }\n\n      if (pnpmOptions.unsupportedPackageJsonSettings) {\n        merge(commonPackageJson, pnpmOptions.unsupportedPackageJsonSettings);\n      }\n    }\n\n    // Add any preferred versions to the top of the commonPackageJson\n    // do this in alphabetical order for simpler debugging\n    for (const dependency of Array.from(dependencies.keys()).sort()) {\n      commonPackageJson.dependencies![dependency] = dependencies.get(dependency)!;\n    }\n\n    // Example: \"C:\\MyRepo\\common\\temp\\package.json\"\n    const commonPackageJsonFilename: string = path.join(\n      subspace.getSubspaceTempFolderPath(),\n      FileConstants.PackageJson\n    );\n\n    // Don't update the file timestamp unless the content has changed, since \"rush install\"\n    // will consider this timestamp\n    JsonFile.save(commonPackageJson, commonPackageJsonFilename, { onlyIfChanged: true });\n  }\n\n  public static getPackageManagerEnvironment(\n    rushConfiguration: RushConfiguration,\n    options: {\n      debug?: boolean;\n    } = {}\n  ): NodeJS.ProcessEnv {\n    let configurationEnvironment: IConfigurationEnvironment | undefined = undefined;\n\n    if (rushConfiguration.packageManager === 'npm') {\n      if (rushConfiguration.npmOptions && rushConfiguration.npmOptions.environmentVariables) {\n        configurationEnvironment = rushConfiguration.npmOptions.environmentVariables;\n      }\n    } else if (rushConfiguration.isPnpm) {\n      if (rushConfiguration.pnpmOptions && rushConfiguration.pnpmOptions.environmentVariables) {\n        configurationEnvironment = rushConfiguration.pnpmOptions.environmentVariables;\n      }\n    } else if (rushConfiguration.packageManager === 'yarn') {\n      if (rushConfiguration.yarnOptions && rushConfiguration.yarnOptions.environmentVariables) {\n        configurationEnvironment = rushConfiguration.yarnOptions.environmentVariables;\n      }\n    }\n\n    return InstallHelpers._mergeEnvironmentVariables(process.env, configurationEnvironment, options);\n  }\n\n  /**\n   * If the \"(p)npm-local\" symlink hasn't been set up yet, this creates it, installing the\n   * specified (P)npm version in the user's home directory if needed.\n   */\n  public static async ensureLocalPackageManagerAsync(\n    rushConfiguration: RushConfiguration,\n    rushGlobalFolder: RushGlobalFolder,\n    maxInstallAttempts: number,\n    restrictConsoleOutput?: boolean\n  ): Promise<void> {\n    let logIfConsoleOutputIsNotRestricted: (message?: string) => void;\n    if (restrictConsoleOutput) {\n      logIfConsoleOutputIsNotRestricted = () => {\n        /* noop */\n      };\n    } else {\n      logIfConsoleOutputIsNotRestricted = (message?: string) => {\n        // eslint-disable-next-line no-console\n        console.log(message);\n      };\n    }\n\n    // Example: \"C:\\Users\\YourName\\.rush\"\n    const rushUserFolder: string = rushGlobalFolder.nodeSpecificPath;\n\n    if (!FileSystem.exists(rushUserFolder)) {\n      logIfConsoleOutputIsNotRestricted('Creating ' + rushUserFolder);\n      FileSystem.ensureFolder(rushUserFolder);\n    }\n\n    const packageManager: PackageManagerName = rushConfiguration.packageManager;\n    const packageManagerVersion: string = rushConfiguration.packageManagerToolVersion;\n\n    const packageManagerAndVersion: string = `${packageManager}-${packageManagerVersion}`;\n    // Example: \"C:\\Users\\YourName\\.rush\\pnpm-1.2.3\"\n    const packageManagerToolFolder: string = path.join(rushUserFolder, packageManagerAndVersion);\n\n    const packageManagerMarker: LastInstallFlag = new LastInstallFlag(packageManagerToolFolder, {\n      node: process.versions.node\n    });\n\n    logIfConsoleOutputIsNotRestricted(`Trying to acquire lock for ${packageManagerAndVersion}`);\n\n    const lock: LockFile = await LockFile.acquireAsync(rushUserFolder, packageManagerAndVersion);\n\n    logIfConsoleOutputIsNotRestricted(`Acquired lock for ${packageManagerAndVersion}`);\n\n    if (!(await packageManagerMarker.isValidAsync()) || lock.dirtyWhenAcquired) {\n      logIfConsoleOutputIsNotRestricted(\n        Colorize.bold(`Installing ${packageManager} version ${packageManagerVersion}\\n`)\n      );\n\n      // note that this will remove the last-install flag from the directory\n      await Utilities.installPackageInDirectoryAsync({\n        directory: packageManagerToolFolder,\n        packageName: packageManager,\n        version: rushConfiguration.packageManagerToolVersion,\n        tempPackageTitle: `${packageManager}-local-install`,\n        maxInstallAttempts: maxInstallAttempts,\n        // This is using a local configuration to install a package in a shared global location.\n        // Generally that's a bad practice, but in this case if we can successfully install\n        // the package at all, we can reasonably assume it's good for all the repositories.\n        // In particular, we'll assume that two different NPM registries cannot have two\n        // different implementations of the same version of the same package.\n        // This was needed for: https://github.com/microsoft/rushstack/issues/691\n        commonRushConfigFolder: rushConfiguration.commonRushConfigFolder\n      });\n\n      logIfConsoleOutputIsNotRestricted(\n        `Successfully installed ${packageManager} version ${packageManagerVersion}`\n      );\n    } else {\n      logIfConsoleOutputIsNotRestricted(\n        `Found ${packageManager} version ${packageManagerVersion} in ${packageManagerToolFolder}`\n      );\n    }\n\n    await packageManagerMarker.createAsync();\n\n    // Example: \"C:\\MyRepo\\common\\temp\"\n    FileSystem.ensureFolder(rushConfiguration.commonTempFolder);\n\n    // Example: \"C:\\MyRepo\\common\\temp\\pnpm-local\"\n    const localPackageManagerToolFolder: string = path.join(\n      rushConfiguration.commonTempFolder,\n      `${packageManager}-local`\n    );\n\n    logIfConsoleOutputIsNotRestricted(`\\nSymlinking \"${localPackageManagerToolFolder}\"`);\n    logIfConsoleOutputIsNotRestricted(`  --> \"${packageManagerToolFolder}\"`);\n\n    // We cannot use FileSystem.exists() to test the existence of a symlink, because it will\n    // return false for broken symlinks.  There is no way to test without catching an exception.\n    try {\n      FileSystem.deleteFolder(localPackageManagerToolFolder);\n    } catch (error) {\n      if ((error as NodeJS.ErrnoException).code !== 'ENOENT') {\n        throw error;\n      }\n    }\n\n    FileSystem.createSymbolicLinkJunction({\n      linkTargetPath: packageManagerToolFolder,\n      newLinkPath: localPackageManagerToolFolder\n    });\n\n    lock.release();\n  }\n\n  // Helper for getPackageManagerEnvironment\n  private static _mergeEnvironmentVariables(\n    baseEnv: NodeJS.ProcessEnv,\n    environmentVariables?: IConfigurationEnvironment,\n    options: {\n      debug?: boolean;\n    } = {}\n  ): NodeJS.ProcessEnv {\n    const packageManagerEnv: NodeJS.ProcessEnv = baseEnv;\n\n    if (environmentVariables) {\n      // eslint-disable-next-line guard-for-in\n      for (const envVar in environmentVariables) {\n        let setEnvironmentVariable: boolean = true;\n        // eslint-disable-next-line no-console\n        console.log(`\\nProcessing definition for environment variable: ${envVar}`);\n\n        if (baseEnv.hasOwnProperty(envVar)) {\n          setEnvironmentVariable = false;\n          // eslint-disable-next-line no-console\n          console.log(`Environment variable already defined:`);\n          // eslint-disable-next-line no-console\n          console.log(`  Name: ${envVar}`);\n          // eslint-disable-next-line no-console\n          console.log(`  Existing value: ${baseEnv[envVar]}`);\n          // eslint-disable-next-line no-console\n          console.log(\n            `  Value set in ${RushConstants.rushJsonFilename}: ${environmentVariables[envVar].value}`\n          );\n\n          if (environmentVariables[envVar].override) {\n            setEnvironmentVariable = true;\n            // eslint-disable-next-line no-console\n            console.log(\n              `Overriding the environment variable with the value set in ${RushConstants.rushJsonFilename}.`\n            );\n          } else {\n            // eslint-disable-next-line no-console\n            console.log(Colorize.yellow(`WARNING: Not overriding the value of the environment variable.`));\n          }\n        }\n\n        if (setEnvironmentVariable) {\n          if (options.debug) {\n            // eslint-disable-next-line no-console\n            console.log(`Setting environment variable for package manager.`);\n            // eslint-disable-next-line no-console\n            console.log(`  Name: ${envVar}`);\n            // eslint-disable-next-line no-console\n            console.log(`  Value: ${environmentVariables[envVar].value}`);\n          }\n          packageManagerEnv[envVar] = environmentVariables[envVar].value;\n        }\n      }\n    }\n\n    return packageManagerEnv;\n  }\n}\n"]}