{"version":3,"file":"PublishGit.js","sourceRoot":"","sources":["../../src/logic/PublishGit.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { PublishUtilities } from './PublishUtilities';\nimport { Utilities } from '../utilities/Utilities';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport type { Git } from './Git';\n\nconst DUMMY_BRANCH_NAME: string = '-branch-name-';\n\nexport class PublishGit {\n  private readonly _targetBranch: string | undefined;\n  private readonly _gitPath: string;\n  private readonly _gitTagSeparator: string;\n\n  public constructor(git: Git, targetBranch: string | undefined) {\n    this._targetBranch = targetBranch;\n    this._gitPath = git.getGitPathOrThrow();\n    this._gitTagSeparator = git.getTagSeparator();\n  }\n\n  public async checkoutAsync(branchName: string | undefined, createBranch: boolean = false): Promise<void> {\n    const params: string[] = ['checkout'];\n    if (createBranch) {\n      params.push('-b');\n    }\n\n    params.push(branchName || DUMMY_BRANCH_NAME);\n\n    await PublishUtilities.execCommandAsync(!!this._targetBranch, this._gitPath, params);\n  }\n\n  public async mergeAsync(branchName: string, verify: boolean = false): Promise<void> {\n    await PublishUtilities.execCommandAsync(!!this._targetBranch, this._gitPath, [\n      'merge',\n      branchName,\n      '--no-edit',\n      ...(verify ? [] : ['--no-verify'])\n    ]);\n  }\n\n  public async deleteBranchAsync(\n    branchName: string | undefined,\n    hasRemote: boolean = true,\n    verify: boolean = false\n  ): Promise<void> {\n    if (!branchName) {\n      branchName = DUMMY_BRANCH_NAME;\n    }\n\n    await PublishUtilities.execCommandAsync(!!this._targetBranch, this._gitPath, [\n      'branch',\n      '-d',\n      branchName\n    ]);\n    if (hasRemote) {\n      await PublishUtilities.execCommandAsync(!!this._targetBranch, this._gitPath, [\n        'push',\n        'origin',\n        '--delete',\n        branchName,\n        ...(verify ? [] : ['--no-verify'])\n      ]);\n    }\n  }\n\n  public async pullAsync(verify: boolean = false): Promise<void> {\n    const params: string[] = ['pull', 'origin'];\n    if (this._targetBranch) {\n      params.push(this._targetBranch);\n    }\n    if (!verify) {\n      params.push('--no-verify');\n    }\n\n    await PublishUtilities.execCommandAsync(!!this._targetBranch, this._gitPath, params);\n  }\n\n  public async fetchAsync(): Promise<void> {\n    await PublishUtilities.execCommandAsync(!!this._targetBranch, this._gitPath, ['fetch', 'origin']);\n  }\n\n  public async addChangesAsync(pathspec?: string, workingDirectory?: string): Promise<void> {\n    const files: string = pathspec ? pathspec : '.';\n    await PublishUtilities.execCommandAsync(\n      !!this._targetBranch,\n      this._gitPath,\n      ['add', files],\n      workingDirectory ? workingDirectory : process.cwd()\n    );\n  }\n\n  public async addTagAsync(\n    shouldExecute: boolean,\n    packageName: string,\n    packageVersion: string,\n    commitId: string | undefined,\n    preReleaseName?: string\n  ): Promise<void> {\n    // Tagging only happens if we're publishing to real NPM and committing to git.\n    const tagName: string = PublishUtilities.createTagname(\n      packageName,\n      packageVersion,\n      this._gitTagSeparator\n    );\n    await PublishUtilities.execCommandAsync(!!this._targetBranch && shouldExecute, this._gitPath, [\n      'tag',\n      '-a',\n      preReleaseName ? `${tagName}-${preReleaseName}` : tagName,\n      '-m',\n      preReleaseName\n        ? `${packageName} v${packageVersion}-${preReleaseName}`\n        : `${packageName} v${packageVersion}`,\n      ...(commitId ? [commitId] : [])\n    ]);\n  }\n\n  public async hasTagAsync(packageConfig: RushConfigurationProject): Promise<boolean> {\n    const tagName: string = PublishUtilities.createTagname(\n      packageConfig.packageName,\n      packageConfig.packageJson.version,\n      this._gitTagSeparator\n    );\n    const tagOutput: string = (\n      await Utilities.executeCommandAndCaptureOutputAsync(\n        this._gitPath,\n        ['tag', '-l', tagName],\n        packageConfig.projectFolder,\n        PublishUtilities.getEnvArgs(),\n        true\n      )\n    ).replace(/(\\r\\n|\\n|\\r)/gm, '');\n\n    return tagOutput === tagName;\n  }\n\n  public async commitAsync(commitMessage: string, verify: boolean = false): Promise<void> {\n    await PublishUtilities.execCommandAsync(!!this._targetBranch, this._gitPath, [\n      'commit',\n      '-m',\n      commitMessage,\n      ...(verify ? [] : ['--no-verify'])\n    ]);\n  }\n\n  public async pushAsync(branchName: string | undefined, verify: boolean = false): Promise<void> {\n    await PublishUtilities.execCommandAsync(\n      !!this._targetBranch,\n      this._gitPath,\n      // We append \"--no-verify\" to prevent Git hooks from running.  For example, people may\n      // want to invoke \"rush change -v\" as a pre-push hook.\n      [\n        'push',\n        'origin',\n        `HEAD:${branchName || DUMMY_BRANCH_NAME}`,\n        '--follow-tags',\n        '--verbose',\n        ...(verify ? [] : ['--no-verify'])\n      ]\n    );\n  }\n}\n"]}