{"version":3,"file":"ProjectImpactGraphGenerator.js","sourceRoot":"","sources":["../../src/logic/ProjectImpactGraphGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, Text, Async } from '@rushstack/node-core-library';\nimport yaml from 'js-yaml';\n\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport { Stopwatch } from '../utilities/Stopwatch';\nimport { RushConstants } from './RushConstants';\nimport { Colorize, type ITerminal } from '@rushstack/terminal';\n\n/**\n * Project property configuration\n */\nexport interface IProjectImpactGraphProjectConfiguration {\n  includedGlobs: string[];\n  excludedGlobs?: string[];\n  dependentProjects: string[];\n}\n\n/**\n * The schema of `project-impact-graph.yaml`\n */\nexport interface IProjectImpactGraphFile {\n  globalExcludedGlobs: string[];\n  projects: Record<string, IProjectImpactGraphProjectConfiguration>;\n}\n\n/**\n * Default global excluded globs\n * Only used if the `<repository_root>/.mergequeueignore` does not exist\n */\nconst DEFAULT_GLOBAL_EXCLUDED_GLOBS: string[] = ['common/autoinstallers/**'];\n\nasync function tryReadFileLinesAsync(filePath: string): Promise<string[] | undefined> {\n  let fileContents: string | undefined;\n  try {\n    fileContents = await FileSystem.readFileAsync(filePath);\n  } catch (error) {\n    if (!FileSystem.isNotExistError(error)) {\n      throw error;\n    }\n  }\n\n  if (fileContents) {\n    return Text.convertToLf(fileContents).split('\\n');\n  }\n}\n\nexport class ProjectImpactGraphGenerator {\n  private readonly _terminal: ITerminal;\n\n  /**\n   * The Rush configuration\n   */\n  private readonly _rushConfiguration: RushConfiguration;\n\n  /**\n   * Full path of repository root\n   */\n  private readonly _repositoryRoot: string;\n\n  /**\n   * Full path to `project-impact-graph.yaml`\n   */\n  private readonly _projectImpactGraphFilePath: string;\n\n  /**\n   * Get repositoryRoot and load projects within the rush.json\n   */\n  public constructor(terminal: ITerminal, rushConfiguration: RushConfiguration) {\n    this._terminal = terminal;\n    this._rushConfiguration = rushConfiguration;\n    const { rushJsonFolder } = rushConfiguration;\n    this._repositoryRoot = rushJsonFolder;\n    this._projectImpactGraphFilePath = `${rushJsonFolder}/${RushConstants.projectImpactGraphFilename}`;\n  }\n\n  /**\n   * Load global excluded globs\n   */\n  private async _loadGlobalExcludedGlobsAsync(): Promise<string[] | undefined> {\n    const filePath: string = `${this._repositoryRoot}/${RushConstants.mergeQueueIgnoreFileName}`;\n    return await tryReadFileLinesAsync(filePath);\n  }\n\n  /**\n   * Load project excluded globs\n   * @param projectRootRelativePath - project root relative path\n   */\n  private async _tryLoadProjectExcludedGlobsAsync(\n    projectRootRelativePath: string\n  ): Promise<string[] | undefined> {\n    const filePath: string = `${this._repositoryRoot}/${projectRootRelativePath}/${RushConstants.mergeQueueIgnoreFileName}`;\n\n    const globs: string[] | undefined = await tryReadFileLinesAsync(filePath);\n    if (globs) {\n      for (let i: number = 0; i < globs.length; i++) {\n        globs[i] = `${projectRootRelativePath}/${globs[i]}`;\n      }\n\n      return globs;\n    }\n  }\n\n  /**\n   * Core Logic: generate project-impact-graph.yaml\n   */\n  public async generateAsync(): Promise<void> {\n    const stopwatch: Stopwatch = Stopwatch.start();\n\n    const [globalExcludedGlobs = DEFAULT_GLOBAL_EXCLUDED_GLOBS, projectEntries] = await Promise.all([\n      this._loadGlobalExcludedGlobsAsync(),\n      Async.mapAsync<RushConfigurationProject, [string, IProjectImpactGraphProjectConfiguration]>(\n        this._rushConfiguration.projects,\n        async ({ packageName, consumingProjects, projectRelativeFolder }) => {\n          const dependentList: string[] = [packageName];\n          for (const consumingProject of consumingProjects) {\n            dependentList.push(consumingProject.packageName);\n          }\n\n          const projectImpactGraphProjectConfiguration: IProjectImpactGraphProjectConfiguration = {\n            includedGlobs: [`${projectRelativeFolder}/**`],\n            dependentProjects: dependentList.sort()\n          };\n\n          const projectExcludedGlobs: string[] | undefined =\n            await this._tryLoadProjectExcludedGlobsAsync(projectRelativeFolder);\n          if (projectExcludedGlobs) {\n            projectImpactGraphProjectConfiguration.excludedGlobs = projectExcludedGlobs;\n          }\n\n          return [packageName, projectImpactGraphProjectConfiguration];\n        },\n        { concurrency: 50 }\n      )\n    ]);\n\n    projectEntries.sort(([aName], [bName]) => aName.localeCompare(bName));\n    const projects: Record<string, IProjectImpactGraphProjectConfiguration> =\n      Object.fromEntries(projectEntries);\n    const content: IProjectImpactGraphFile = { globalExcludedGlobs, projects };\n    await FileSystem.writeFileAsync(this._projectImpactGraphFilePath, yaml.safeDump(content));\n\n    stopwatch.stop();\n    this._terminal.writeLine();\n    this._terminal.writeLine(\n      Colorize.green(`Generate project impact graph successfully. (${stopwatch.toString()})`)\n    );\n  }\n\n  public async validateAsync(): Promise<boolean> {\n    // TODO: More validation other than just existence\n    return await FileSystem.existsAsync(this._projectImpactGraphFilePath);\n  }\n}\n"]}