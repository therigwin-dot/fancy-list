{"version":3,"file":"RepoStateFile.js","sourceRoot":"","sources":["../../src/logic/RepoStateFile.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAG7F,OAAO,EAAE,kBAAkB,EAAE,MAAM,2BAA2B,CAAC;AAE/D,OAAO,UAAU,MAAM,mCAAmC,CAAC;AA2B3D;;;;;GAKG;AACH,MAAM,OAAO,aAAa;IAcxB,YAAoB,aAAyC,EAAE,OAAgB,EAAE,QAAgB;QAPzF,cAAS,GAAY,KAAK,CAAC;QAQjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,aAAa,EAAE,CAAC;YAClB,IAAI,CAAC,mBAAmB,GAAG,aAAa,CAAC,kBAAkB,CAAC;YAC5D,IAAI,CAAC,sBAAsB,GAAG,aAAa,CAAC,qBAAqB,CAAC;YAClE,IAAI,CAAC,oCAAoC,GAAG,aAAa,CAAC,mCAAmC,CAAC;QAChG,CAAC;IACH,CAAC;IAED;;OAEG;IACH,IAAW,kBAAkB;QAC3B,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,IAAW,qBAAqB;QAC9B,OAAO,IAAI,CAAC,sBAAsB,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,IAAW,mCAAmC;QAC5C,OAAO,IAAI,CAAC,oCAAoC,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,YAAY,CAAC,YAAoB;QAC7C,IAAI,YAAgC,CAAC;QACrC,IAAI,CAAC;YACH,YAAY,GAAG,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACnD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,KAAc,CAAC,EAAE,CAAC;gBAChD,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;QAED,IAAI,wBAAwB,GAAY,KAAK,CAAC;QAC9C,IAAI,aAAa,GAA+B,SAAS,CAAC;QAC1D,IAAI,YAAY,EAAE,CAAC;YACjB,IAAI,CAAC;gBACH,aAAa,GAAG,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YACrD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,mGAAmG;gBACnG,6FAA6F;gBAC7F,iDAAiD;gBACjD,KACE,IAAI,gBAAgB,GAAW,CAAC,EAChC,gBAAgB,GAAG,CAAC,CAAC,EACrB,gBAAgB,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,gBAAgB,GAAG,CAAC,CAAC,EACnE,CAAC;oBACD,IAAI,YAAY,CAAC,MAAM,CAAC,gBAAgB,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;wBAC/D,wBAAwB,GAAG,IAAI,CAAC;wBAChC,aAAa,GAAG;4BACd,qBAAqB,EAAE,SAAS;4BAChC,kBAAkB,EAAE,SAAS;yBAC9B,CAAC;wBACF,MAAM;oBACR,CAAC;gBACH,CAAC;YACH,CAAC;YAED,IAAI,aAAa,EAAE,CAAC;gBAClB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;QAED,OAAO,IAAI,aAAa,CAAC,aAAa,EAAE,CAAC,wBAAwB,EAAE,YAAY,CAAC,CAAC;IACnF,CAAC;IAED;;;;;;;;;OASG;IACI,YAAY,CACjB,iBAAoC,EACpC,QAA8B,EAC9B,OAAgB;QAEhB,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;YAC3B,QAAQ,GAAG,iBAAiB,CAAC,eAAe,CAAC;QAC/C,CAAC;QAED,iEAAiE;QACjE,MAAM,wBAAwB,GAC5B,iBAAiB,CAAC,MAAM;YACxB,iBAAiB,CAAC,WAAW;YAC7B,iBAAiB,CAAC,WAAW,CAAC,8BAA8B,CAAC;QAC/D,IAAI,wBAAwB,EAAE,CAAC;YAC7B,MAAM,kBAAkB,GAAmC,kBAAkB,CAAC,YAAY,CACxF,QAAQ,CAAC,8BAA8B,CAAC,OAAO,CAAC,CACjD,CAAC;YAEF,IAAI,kBAAkB,EAAE,CAAC;gBACvB,MAAM,kBAAkB,GAAW,kBAAkB,CAAC,iBAAiB,CACrE,iBAAiB,CAAC,wBAAwB,CAAC,aAAa,CACzD,CAAC;gBAEF,IAAI,IAAI,CAAC,mBAAmB,KAAK,kBAAkB,EAAE,CAAC;oBACpD,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;oBAC9C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACxB,CAAC;YACH,CAAC;QACH,CAAC;aAAM,IAAI,IAAI,CAAC,mBAAmB,KAAK,SAAS,EAAE,CAAC;YAClD,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;YACrC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACxB,CAAC;QAED,iFAAiF;QACjF,MAAM,aAAa,GACjB,iBAAiB,CAAC,WAAW,IAAI,iBAAiB,CAAC,WAAW,CAAC,aAAa,CAAC;QAC/E,IAAI,aAAa,EAAE,CAAC;YAClB,MAAM,cAAc,GAAgC,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YACxF,MAAM,qBAAqB,GAAW,cAAc,CAAC,wBAAwB,EAAE,CAAC;YAChF,IAAI,IAAI,CAAC,sBAAsB,KAAK,qBAAqB,EAAE,CAAC;gBAC1D,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;gBACpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACxB,CAAC;QACH,CAAC;aAAM,IAAI,IAAI,CAAC,sBAAsB,KAAK,SAAS,EAAE,CAAC;YACrD,IAAI,CAAC,sBAAsB,GAAG,SAAS,CAAC;YACxC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACxB,CAAC;QAED,IAAI,iBAAiB,CAAC,MAAM,EAAE,CAAC;YAC7B,MAAM,mCAAmC,GACvC,QAAQ,CAAC,sCAAsC,CAAC,OAAO,CAAC,CAAC;YAE3D,8GAA8G;YAC9G,6DAA6D;YAC7D,IACE,mCAAmC;gBACnC,mCAAmC,KAAK,IAAI,CAAC,oCAAoC,EACjF,CAAC;gBACD,IAAI,CAAC,oCAAoC,GAAG,mCAAmC,CAAC;gBAChF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACxB,CAAC;iBAAM,IAAI,CAAC,mCAAmC,IAAI,IAAI,CAAC,oCAAoC,EAAE,CAAC;gBAC7F,4GAA4G;gBAC5G,qDAAqD;gBACrD,qEAAqE;gBACrE,IAAI,CAAC,oCAAoC,GAAG,SAAS,CAAC;gBACtD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACxB,CAAC;QACH,CAAC;QAED,uEAAuE;QACvE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACK,eAAe;QACrB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,MAAM,OAAO,GACX,yFAAyF;gBACzF,GAAG,WAAW,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;YAC1C,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC7C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,UAAU;QAChB,2FAA2F;QAC3F,MAAM,aAAa,GAAmB,EAAE,CAAC;QACzC,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,aAAa,CAAC,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC9D,CAAC;QACD,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAChC,aAAa,CAAC,qBAAqB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QACpE,CAAC;QACD,IAAI,IAAI,CAAC,oCAAoC,EAAE,CAAC;YAC9C,aAAa,CAAC,mCAAmC,GAAG,IAAI,CAAC,oCAAoC,CAAC;QAChG,CAAC;QAED,OAAO,QAAQ,CAAC,SAAS,CAAC,aAAa,EAAE,EAAE,iBAAiB,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;IAClF,CAAC;;AAzNc,yBAAW,GAAe,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,AAAtD,CAAuD","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, JsonFile, JsonSchema, NewlineKind } from '@rushstack/node-core-library';\n\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport { PnpmShrinkwrapFile } from './pnpm/PnpmShrinkwrapFile';\nimport type { CommonVersionsConfiguration } from '../api/CommonVersionsConfiguration';\nimport schemaJson from '../schemas/repo-state.schema.json';\nimport type { Subspace } from '../api/Subspace';\n\n/**\n * This interface represents the raw repo-state.json file\n * Example:\n *  {\n *    \"pnpmShrinkwrapHash\": \"...\",\n *    \"preferredVersionsHash\": \"...\",\n *    \"packageJsonInjectedDependenciesHash\": \"...\"\n *  }\n */\ninterface IRepoStateJson {\n  /**\n   * A hash of the PNPM shrinkwrap file contents\n   */\n  pnpmShrinkwrapHash?: string;\n  /**\n   * A hash of the CommonVersionsConfiguration.preferredVersions field\n   */\n  preferredVersionsHash?: string;\n  /**\n   * A hash of the injected dependencies in related package.json\n   */\n  packageJsonInjectedDependenciesHash?: string;\n}\n\n/**\n * This file is used to track the state of various Rush-related features. It is generated\n * and updated by Rush.\n *\n * @public\n */\nexport class RepoStateFile {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromLoadedObject(schemaJson);\n\n  private _pnpmShrinkwrapHash: string | undefined;\n  private _preferredVersionsHash: string | undefined;\n  private _packageJsonInjectedDependenciesHash: string | undefined;\n  private _isValid: boolean;\n  private _modified: boolean = false;\n\n  /**\n   * Get the absolute file path of the repo-state.json file.\n   */\n  public readonly filePath: string;\n\n  private constructor(repoStateJson: IRepoStateJson | undefined, isValid: boolean, filePath: string) {\n    this.filePath = filePath;\n    this._isValid = isValid;\n\n    if (repoStateJson) {\n      this._pnpmShrinkwrapHash = repoStateJson.pnpmShrinkwrapHash;\n      this._preferredVersionsHash = repoStateJson.preferredVersionsHash;\n      this._packageJsonInjectedDependenciesHash = repoStateJson.packageJsonInjectedDependenciesHash;\n    }\n  }\n\n  /**\n   * The hash of the pnpm shrinkwrap file at the end of the last update.\n   */\n  public get pnpmShrinkwrapHash(): string | undefined {\n    return this._pnpmShrinkwrapHash;\n  }\n\n  /**\n   * The hash of all preferred versions at the end of the last update.\n   */\n  public get preferredVersionsHash(): string | undefined {\n    return this._preferredVersionsHash;\n  }\n\n  /**\n   * The hash of all preferred versions at the end of the last update.\n   */\n  public get packageJsonInjectedDependenciesHash(): string | undefined {\n    return this._packageJsonInjectedDependenciesHash;\n  }\n\n  /**\n   * If false, the repo-state.json file is not valid and its values cannot be relied upon\n   */\n  public get isValid(): boolean {\n    return this._isValid;\n  }\n\n  /**\n   * Loads the repo-state.json data from the specified file path.\n   * If the file has not been created yet, then an empty object is returned.\n   *\n   * @param jsonFilename - The path to the repo-state.json file.\n   */\n  public static loadFromFile(jsonFilename: string): RepoStateFile {\n    let fileContents: string | undefined;\n    try {\n      fileContents = FileSystem.readFile(jsonFilename);\n    } catch (error) {\n      if (!FileSystem.isNotExistError(error as Error)) {\n        throw error;\n      }\n    }\n\n    let foundMergeConflictMarker: boolean = false;\n    let repoStateJson: IRepoStateJson | undefined = undefined;\n    if (fileContents) {\n      try {\n        repoStateJson = JsonFile.parseString(fileContents);\n      } catch (error) {\n        // Look for a Git merge conflict marker. PNPM gracefully handles merge conflicts in pnpm-lock.yaml,\n        // so a user should be able to just run \"rush update\" if they get conflicts in pnpm-lock.yaml\n        // and repo-state.json and have Rush update both.\n        for (\n          let nextNewlineIndex: number = 0;\n          nextNewlineIndex > -1;\n          nextNewlineIndex = fileContents.indexOf('\\n', nextNewlineIndex + 1)\n        ) {\n          if (fileContents.substr(nextNewlineIndex + 1, 7) === '<<<<<<<') {\n            foundMergeConflictMarker = true;\n            repoStateJson = {\n              preferredVersionsHash: 'INVALID',\n              pnpmShrinkwrapHash: 'INVALID'\n            };\n            break;\n          }\n        }\n      }\n\n      if (repoStateJson) {\n        this._jsonSchema.validateObject(repoStateJson, jsonFilename);\n      }\n    }\n\n    return new RepoStateFile(repoStateJson, !foundMergeConflictMarker, jsonFilename);\n  }\n\n  /**\n   * Refresh the data contained in repo-state.json using the current state\n   * of the Rush repo, and save the file if changes were made.\n   *\n   * @param rushConfiguration - The Rush configuration for the repo.\n   * @param subspace - The subspace that repo-state.json was loaded from,\n   * or `undefined` for the default subspace.\n   *\n   * @returns true if the file was modified, otherwise false.\n   */\n  public refreshState(\n    rushConfiguration: RushConfiguration,\n    subspace: Subspace | undefined,\n    variant?: string\n  ): boolean {\n    if (subspace === undefined) {\n      subspace = rushConfiguration.defaultSubspace;\n    }\n\n    // Only support saving the pnpm shrinkwrap hash if it was enabled\n    const preventShrinkwrapChanges: boolean =\n      rushConfiguration.isPnpm &&\n      rushConfiguration.pnpmOptions &&\n      rushConfiguration.pnpmOptions.preventManualShrinkwrapChanges;\n    if (preventShrinkwrapChanges) {\n      const pnpmShrinkwrapFile: PnpmShrinkwrapFile | undefined = PnpmShrinkwrapFile.loadFromFile(\n        subspace.getCommittedShrinkwrapFilePath(variant)\n      );\n\n      if (pnpmShrinkwrapFile) {\n        const shrinkwrapFileHash: string = pnpmShrinkwrapFile.getShrinkwrapHash(\n          rushConfiguration.experimentsConfiguration.configuration\n        );\n\n        if (this._pnpmShrinkwrapHash !== shrinkwrapFileHash) {\n          this._pnpmShrinkwrapHash = shrinkwrapFileHash;\n          this._modified = true;\n        }\n      }\n    } else if (this._pnpmShrinkwrapHash !== undefined) {\n      this._pnpmShrinkwrapHash = undefined;\n      this._modified = true;\n    }\n\n    // Currently, only support saving the preferred versions hash if using workspaces\n    const useWorkspaces: boolean =\n      rushConfiguration.pnpmOptions && rushConfiguration.pnpmOptions.useWorkspaces;\n    if (useWorkspaces) {\n      const commonVersions: CommonVersionsConfiguration = subspace.getCommonVersions(variant);\n      const preferredVersionsHash: string = commonVersions.getPreferredVersionsHash();\n      if (this._preferredVersionsHash !== preferredVersionsHash) {\n        this._preferredVersionsHash = preferredVersionsHash;\n        this._modified = true;\n      }\n    } else if (this._preferredVersionsHash !== undefined) {\n      this._preferredVersionsHash = undefined;\n      this._modified = true;\n    }\n\n    if (rushConfiguration.isPnpm) {\n      const packageJsonInjectedDependenciesHash: string | undefined =\n        subspace.getPackageJsonInjectedDependenciesHash(variant);\n\n      // packageJsonInjectedDependenciesHash is undefined, means there is no injected dependencies for that subspace\n      // so we don't need to track the hash value for that subspace\n      if (\n        packageJsonInjectedDependenciesHash &&\n        packageJsonInjectedDependenciesHash !== this._packageJsonInjectedDependenciesHash\n      ) {\n        this._packageJsonInjectedDependenciesHash = packageJsonInjectedDependenciesHash;\n        this._modified = true;\n      } else if (!packageJsonInjectedDependenciesHash && this._packageJsonInjectedDependenciesHash) {\n        // if packageJsonInjectedDependenciesHash is undefined, but this._packageJsonInjectedDependenciesHash is not\n        // means users may turn off the injected installation\n        // so we will need to remove unused fields in repo-state.json as well\n        this._packageJsonInjectedDependenciesHash = undefined;\n        this._modified = true;\n      }\n    }\n\n    // Now that the file has been refreshed, we know its contents are valid\n    this._isValid = true;\n\n    return this._saveIfModified();\n  }\n\n  /**\n   * Writes the \"repo-state.json\" file to disk, using the filename that was passed to loadFromFile().\n   */\n  private _saveIfModified(): boolean {\n    if (this._modified) {\n      const content: string =\n        '// DO NOT MODIFY THIS FILE MANUALLY BUT DO COMMIT IT. It is generated and used by Rush.' +\n        `${NewlineKind.Lf}${this._serialize()}`;\n      FileSystem.writeFile(this.filePath, content);\n      this._modified = false;\n      return true;\n    }\n\n    return false;\n  }\n\n  private _serialize(): string {\n    // We need to set these one-by-one, since JsonFile.stringify does not like undefined values\n    const repoStateJson: IRepoStateJson = {};\n    if (this._pnpmShrinkwrapHash) {\n      repoStateJson.pnpmShrinkwrapHash = this._pnpmShrinkwrapHash;\n    }\n    if (this._preferredVersionsHash) {\n      repoStateJson.preferredVersionsHash = this._preferredVersionsHash;\n    }\n    if (this._packageJsonInjectedDependenciesHash) {\n      repoStateJson.packageJsonInjectedDependenciesHash = this._packageJsonInjectedDependenciesHash;\n    }\n\n    return JsonFile.stringify(repoStateJson, { newlineConversion: NewlineKind.Lf });\n  }\n}\n"]}