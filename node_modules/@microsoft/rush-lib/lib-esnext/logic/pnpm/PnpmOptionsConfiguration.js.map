{"version":3,"file":"PnpmOptionsConfiguration.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmOptionsConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { JsonFile, type JsonObject } from '@rushstack/node-core-library';\nimport { NonProjectConfigurationFile } from '@rushstack/heft-config-file';\nimport { ConsoleTerminalProvider, Terminal } from '@rushstack/terminal';\n\nimport {\n  type IPackageManagerOptionsJsonBase,\n  PackageManagerOptionsConfigurationBase\n} from '../base/BasePackageManagerOptionsConfiguration';\nimport { EnvironmentConfiguration } from '../../api/EnvironmentConfiguration';\nimport schemaJson from '../../schemas/pnpm-config.schema.json';\n\n/**\n * This represents the available PNPM store options\n * @public\n */\nexport type PnpmStoreLocation = 'local' | 'global';\n\n/**\n * @deprecated Use {@link PnpmStoreLocation} instead\n * @public\n */\nexport type PnpmStoreOptions = PnpmStoreLocation;\n\n/**\n * Possible values for the `resolutionMode` setting in Rush's pnpm-config.json file.\n * @remarks\n * These modes correspond to PNPM's `resolution-mode` values, which are documented here:\n * {@link https://pnpm.io/npmrc#resolution-mode}\n *\n * @public\n */\nexport type PnpmResolutionMode = 'highest' | 'time-based' | 'lowest-direct';\n\n/**\n * Possible values for the `pnpmLockfilePolicies` setting in Rush's pnpm-config.json file.\n * @public\n */\nexport interface IPnpmLockfilePolicies {\n  /**\n   * Forbid sha1 hashes in `pnpm-lock.yaml`\n   */\n  disallowInsecureSha1?: {\n    enabled: boolean;\n    exemptPackageVersions: Record<string, string[]>;\n  };\n}\n\n/**\n * @public\n */\nexport interface IPnpmPeerDependencyRules {\n  ignoreMissing?: string[];\n  allowAny?: string[];\n  allowedVersions?: Record<string, string>;\n}\n\n/**\n * @public\n */\nexport interface IPnpmPeerDependenciesMeta {\n  [packageName: string]: {\n    optional?: boolean;\n  };\n}\n\n/**\n * @public\n */\nexport interface IPnpmPackageExtension {\n  dependencies?: Record<string, string>;\n  optionalDependencies?: Record<string, string>;\n  peerDependencies?: Record<string, string>;\n  peerDependenciesMeta?: IPnpmPeerDependenciesMeta;\n}\n\n/**\n * Part of IRushConfigurationJson.\n * @internal\n */\nexport interface IPnpmOptionsJson extends IPackageManagerOptionsJsonBase {\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.pnpmStore}\n   */\n  pnpmStore?: PnpmStoreLocation;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.strictPeerDependencies}\n   */\n  strictPeerDependencies?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.preventManualShrinkwrapChanges}\n   */\n  preventManualShrinkwrapChanges?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.useWorkspaces}\n   */\n  useWorkspaces?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalOverrides}\n   */\n  globalOverrides?: Record<string, string>;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalPeerDependencyRules}\n   */\n  globalPeerDependencyRules?: IPnpmPeerDependencyRules;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalPackageExtensions}\n   */\n  globalPackageExtensions?: Record<string, IPnpmPackageExtension>;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalNeverBuiltDependencies}\n   */\n  globalNeverBuiltDependencies?: string[];\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalIgnoredOptionalDependencies}\n   */\n  globalIgnoredOptionalDependencies?: string[];\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalAllowedDeprecatedVersions}\n   */\n  globalAllowedDeprecatedVersions?: Record<string, string>;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalPatchedDependencies}\n   */\n  globalPatchedDependencies?: Record<string, string>;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.unsupportedPackageJsonSettings}\n   */\n  unsupportedPackageJsonSettings?: unknown;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.resolutionMode}\n   */\n  resolutionMode?: PnpmResolutionMode;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.autoInstallPeers}\n   */\n  autoInstallPeers?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.alwaysInjectDependenciesFromOtherSubspaces}\n   */\n  alwaysInjectDependenciesFromOtherSubspaces?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.alwaysFullInstall}\n   */\n  alwaysFullInstall?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.pnpmLockfilePolicies}\n   */\n  pnpmLockfilePolicies?: IPnpmLockfilePolicies;\n}\n\n/**\n * Options that are only used when the PNPM package manager is selected.\n * Use this class to load \"common/config/rush/pnpm-config.json\" file,\n * or, load json from \"pnpmOptions\" field in \"rush.json\" for legacy support.\n *\n * @remarks\n * It is valid to define these options in rush.json even if the PNPM package manager\n * is not being used.\n *\n * @public\n */\nexport class PnpmOptionsConfiguration extends PackageManagerOptionsConfigurationBase {\n  private readonly _json: JsonObject;\n  private _globalPatchedDependencies: Record<string, string> | undefined;\n\n  /**\n   * The method used to resolve the store used by PNPM.\n   *\n   * @remarks\n   * Available options:\n   *  - local: Use the standard Rush store path: common/temp/pnpm-store\n   *  - global: Use PNPM's global store path\n   */\n  public readonly pnpmStore: PnpmStoreLocation;\n\n  /**\n   * This setting determines how PNPM chooses version numbers during `rush update`.\n   *\n   * @remarks\n   * For example, suppose `lib-x@3.0.0` depends on `\"lib-y\": \"^1.2.3\"` whose latest major\n   * releases are `1.8.9` and `2.3.4`.  The resolution mode `lowest-direct` might choose\n   * `lib-y@1.2.3`, wheres `highest` will choose 1.8.9, and `time-based` will pick the\n   * highest compatible version at the time when `lib-x@3.0.0` itself was published (ensuring\n   * that the version could have been tested by the maintainer of \"lib-x\").  For local workspace\n   * projects, `time-based` instead works like `lowest-direct`, avoiding upgrades unless\n   * they are explicitly requested. Although `time-based` is the most robust option, it may be\n   * slightly slower with registries such as npmjs.com that have not implemented an optimization.\n   *\n   * IMPORTANT: Be aware that PNPM 8.0.0 initially defaulted to `lowest-direct` instead of\n   * `highest`, but PNPM reverted this decision in 8.6.12 because it caused confusion for users.\n   * Rush version 5.106.0 and newer avoids this confusion by consistently defaulting to\n   * `highest` when `resolutionMode` is not explicitly set in pnpm-config.json or .npmrc,\n   * regardless of your PNPM version.\n   *\n   * PNPM documentation: https://pnpm.io/npmrc#resolution-mode\n   *\n   * Possible values are: `highest`, `time-based`, and `lowest-direct`.\n   * The default is `highest`.\n   */\n  public readonly resolutionMode: PnpmResolutionMode | undefined;\n\n  /**\n   * The path for PNPM to use as the store directory.\n   *\n   * Will be overridden by environment variable RUSH_PNPM_STORE_PATH\n   */\n  public readonly pnpmStorePath: string;\n\n  /**\n   * If true, then Rush will add the \"--strict-peer-dependencies\" option when invoking PNPM.\n   *\n   * @remarks\n   * This causes \"rush install\" to fail if there are unsatisfied peer dependencies, which is\n   * an invalid state that can cause build failures or incompatible dependency versions.\n   * (For historical reasons, JavaScript package managers generally do not treat this invalid state\n   * as an error.)\n   *\n   * The default value is false.  (For now.)\n   */\n  public readonly strictPeerDependencies: boolean;\n\n  /**\n   * If true, then `rush install` will report an error if manual modifications\n   * were made to the PNPM shrinkwrap file without running `rush update` afterwards.\n   *\n   * @remarks\n   * This feature protects against accidental inconsistencies that may be introduced\n   * if the PNPM shrinkwrap file (`pnpm-lock.yaml`) is manually edited.  When this\n   * feature is enabled, `rush update` will write a hash of the shrinkwrap contents to repo-state.json,\n   * and then `rush update` and `rush install` will validate the hash.  Note that this does not prohibit\n   * manual modifications, but merely requires `rush update` be run\n   * afterwards, ensuring that PNPM can report or repair any potential inconsistencies.\n   *\n   * To temporarily disable this validation when invoking `rush install`, use the\n   * `--bypass-policy` command-line parameter.\n   *\n   * The default value is false.\n   */\n  public readonly preventManualShrinkwrapChanges: boolean;\n\n  /**\n   * If true, then Rush will use the workspaces feature to install and link packages when invoking PNPM.\n   *\n   * @remarks\n   * The default value is true.  (For now.)\n   */\n  public readonly useWorkspaces: boolean;\n\n  /**\n   * When true, any missing non-optional peer dependencies are automatically installed.\n   *\n   * @remarks\n   * The default value is same as PNPM default value.  (In PNPM 8.x, this value is true)\n   */\n  public readonly autoInstallPeers: boolean | undefined;\n\n  /**\n   * If true, then `rush update` add injected install options for all cross-subspace\n   * workspace dependencies, to avoid subspace doppelganger issue.\n   *\n   * Here, the injected install refers to PNPM's PNPM's \"injected dependencies\"\n   * feature. Learn more: https://pnpm.io/package_json#dependenciesmeta\n   *\n   * @remarks\n   * The default value is false.\n   */\n  public readonly alwaysInjectDependenciesFromOtherSubspaces: boolean | undefined;\n\n  /**\n   * The \"globalOverrides\" setting provides a simple mechanism for overriding version selections\n   * for all dependencies of all projects in the monorepo workspace.  The settings are copied\n   * into the `pnpm.overrides` field of the `common/temp/package.json` file that is generated\n   * by Rush during installation.\n   *\n   * Order of precedence: `.pnpmfile.cjs` has the highest precedence, followed by\n   * `unsupportedPackageJsonSettings`, `globalPeerDependencyRules`, `globalPackageExtensions`,\n   * and `globalOverrides` has lowest precedence.\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmoverrides\n   */\n  public readonly globalOverrides: Record<string, string> | undefined;\n\n  /**\n   * The `globalPeerDependencyRules` setting provides various settings for suppressing validation errors\n   * that are reported during installation with `strictPeerDependencies=true`.  The settings are copied\n   * into the `pnpm.peerDependencyRules` field of the `common/temp/package.json` file that is generated\n   * by Rush during installation.\n   *\n   * Order of precedence: `.pnpmfile.cjs` has the highest precedence, followed by\n   * `unsupportedPackageJsonSettings`, `globalPeerDependencyRules`, `globalPackageExtensions`,\n   * and `globalOverrides` has lowest precedence.\n   *\n   * https://pnpm.io/package_json#pnpmpeerdependencyrules\n   */\n  public readonly globalPeerDependencyRules: IPnpmPeerDependencyRules | undefined;\n\n  /**\n   * The `globalPackageExtension` setting provides a way to patch arbitrary package.json fields\n   * for any PNPM dependency of the monorepo.  The settings are copied into the `pnpm.packageExtensions`\n   * field of the `common/temp/package.json` file that is generated by Rush during installation.\n   * The `globalPackageExtension` setting has similar capabilities as `.pnpmfile.cjs` but without\n   * the downsides of an executable script (nondeterminism, unreliable caching, performance concerns).\n   *\n   * Order of precedence: `.pnpmfile.cjs` has the highest precedence, followed by\n   * `unsupportedPackageJsonSettings`, `globalPeerDependencyRules`, `globalPackageExtensions`,\n   * and `globalOverrides` has lowest precedence.\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmpackageextensions\n   */\n  public readonly globalPackageExtensions: Record<string, IPnpmPackageExtension> | undefined;\n\n  /**\n   * The `globalNeverBuiltDependencies` setting suppresses the `preinstall`, `install`, and `postinstall`\n   * lifecycle events for the specified NPM dependencies.  This is useful for scripts with poor practices\n   * such as downloading large binaries without retries or attempting to invoke OS tools such as\n   * a C++ compiler.  (PNPM's terminology refers to these lifecycle events as \"building\" a package;\n   * it has nothing to do with build system operations such as `rush build` or `rushx build`.)\n   * The settings are copied into the `pnpm.neverBuiltDependencies` field of the `common/temp/package.json`\n   * file that is generated by Rush during installation.\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmneverbuiltdependencies\n   */\n  public readonly globalNeverBuiltDependencies: string[] | undefined;\n\n  /**\n   * The ignoredOptionalDependencies setting allows you to exclude certain optional dependencies from being installed\n   * during the Rush installation process. This can be useful when optional dependencies are not required or are\n   * problematic in specific environments (e.g., dependencies with incompatible binaries or platform-specific requirements).\n   * The listed dependencies will be treated as though they are missing, even if other packages specify them as optional\n   * dependencies. The settings are copied into the pnpm.ignoredOptionalDependencies field of the common/temp/package.json\n   * file that is generated by Rush during installation.\n   *\n   * (SUPPORTED ONLY IN PNPM 9.0.0 AND NEWER)\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmignoredoptionaldependencies\n   */\n  public readonly globalIgnoredOptionalDependencies: string[] | undefined;\n\n  /**\n   * The `globalAllowedDeprecatedVersions` setting suppresses installation warnings for package\n   * versions that the NPM registry reports as being deprecated.  This is useful if the\n   * deprecated package is an indirect dependency of an external package that has not released a fix.\n   * The settings are copied into the `pnpm.allowedDeprecatedVersions` field of the `common/temp/package.json`\n   * file that is generated by Rush during installation.\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmalloweddeprecatedversions\n   *\n   * If you are working to eliminate a deprecated version, it's better to specify `allowedDeprecatedVersions`\n   * in the package.json file for individual Rush projects.\n   */\n  public readonly globalAllowedDeprecatedVersions: Record<string, string> | undefined;\n\n  /**\n   * (USE AT YOUR OWN RISK)  This is a free-form property bag that will be copied into\n   * the `common/temp/package.json` file that is generated by Rush during installation.\n   * This provides a way to experiment with new PNPM features.  These settings will override\n   * any other Rush configuration associated with a given JSON field except for `.pnpmfile.cjs`.\n   *\n   * USAGE OF THIS SETTING IS NOT SUPPORTED BY THE RUSH MAINTAINERS AND MAY CAUSE RUSH\n   * TO MALFUNCTION.  If you encounter a missing PNPM setting that you believe should\n   * be supported, please create a GitHub issue or PR.  Note that Rush does not aim to\n   * support every possible PNPM setting, but rather to promote a battle-tested installation\n   * strategy that is known to provide a good experience for large teams with lots of projects.\n   */\n  public readonly unsupportedPackageJsonSettings: unknown | undefined;\n\n  public readonly jsonFilename: string | undefined;\n\n  /**\n   * The `pnpmLockfilePolicies` setting defines the policies that govern the `pnpm-lock.yaml` file.\n   */\n  public readonly pnpmLockfilePolicies: IPnpmLockfilePolicies | undefined;\n\n  /**\n   * (EXPERIMENTAL) If \"true\", then filtered installs (\"rush install --to my-project\")\n   * will be disregarded, instead always performing a full installation of the lockfile.\n   * This setting is primarily useful with Rush subspaces which enable filtering across\n   * multiple lockfiles, if filtering may be inefficient or undesirable for certain lockfiles.\n   *\n   * The default value is false.\n   */\n  /*[LINE \"DEMO\"]*/\n  public readonly alwaysFullInstall: boolean | undefined;\n\n  /**\n   * (GENERATED BY RUSH-PNPM PATCH-COMMIT) When modifying this property, make sure you know what you are doing.\n   *\n   * The `globalPatchedDependencies` is added/updated automatically when you run pnpm patch-commit\n   * command. It is a dictionary where the key should be the package name and exact version. The value\n   * should be a relative path to a patch file.\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmpatcheddependencies\n   */\n  public get globalPatchedDependencies(): Record<string, string> | undefined {\n    return this._globalPatchedDependencies;\n  }\n\n  private constructor(json: IPnpmOptionsJson, commonTempFolder: string, jsonFilename?: string) {\n    super(json);\n    this._json = json;\n    this.jsonFilename = jsonFilename;\n    this.pnpmStore = json.pnpmStore || 'local';\n    if (EnvironmentConfiguration.pnpmStorePathOverride) {\n      this.pnpmStorePath = EnvironmentConfiguration.pnpmStorePathOverride;\n    } else if (this.pnpmStore === 'global') {\n      this.pnpmStorePath = '';\n    } else {\n      this.pnpmStorePath = `${commonTempFolder}/pnpm-store`;\n    }\n    this.strictPeerDependencies = !!json.strictPeerDependencies;\n    this.preventManualShrinkwrapChanges = !!json.preventManualShrinkwrapChanges;\n    this.useWorkspaces = !!json.useWorkspaces;\n\n    this.globalOverrides = json.globalOverrides;\n    this.globalPeerDependencyRules = json.globalPeerDependencyRules;\n    this.globalPackageExtensions = json.globalPackageExtensions;\n    this.globalNeverBuiltDependencies = json.globalNeverBuiltDependencies;\n    this.globalIgnoredOptionalDependencies = json.globalIgnoredOptionalDependencies;\n    this.globalAllowedDeprecatedVersions = json.globalAllowedDeprecatedVersions;\n    this.unsupportedPackageJsonSettings = json.unsupportedPackageJsonSettings;\n    this._globalPatchedDependencies = json.globalPatchedDependencies;\n    this.resolutionMode = json.resolutionMode;\n    this.autoInstallPeers = json.autoInstallPeers;\n    this.alwaysInjectDependenciesFromOtherSubspaces = json.alwaysInjectDependenciesFromOtherSubspaces;\n    this.alwaysFullInstall = json.alwaysFullInstall;\n    this.pnpmLockfilePolicies = json.pnpmLockfilePolicies;\n  }\n\n  /** @internal */\n  public static loadFromJsonFileOrThrow(\n    jsonFilename: string,\n    commonTempFolder: string\n  ): PnpmOptionsConfiguration {\n    // TODO: plumb through the terminal\n    const terminal: Terminal = new Terminal(new ConsoleTerminalProvider());\n\n    const pnpmOptionsConfigFile: NonProjectConfigurationFile<IPnpmOptionsJson> =\n      new NonProjectConfigurationFile({\n        jsonSchemaObject: schemaJson\n      });\n    const pnpmOptionJson: IPnpmOptionsJson = pnpmOptionsConfigFile.loadConfigurationFile(\n      terminal,\n      jsonFilename\n    );\n    return new PnpmOptionsConfiguration(pnpmOptionJson || {}, commonTempFolder, jsonFilename);\n  }\n\n  /** @internal */\n  public static loadFromJsonObject(\n    json: IPnpmOptionsJson,\n    commonTempFolder: string\n  ): PnpmOptionsConfiguration {\n    return new PnpmOptionsConfiguration(json, commonTempFolder);\n  }\n\n  /**\n   * Updates patchedDependencies field of the PNPM options in the common/config/rush/pnpm-config.json file.\n   */\n  public updateGlobalPatchedDependencies(patchedDependencies: Record<string, string> | undefined): void {\n    this._globalPatchedDependencies = patchedDependencies;\n    this._json.globalPatchedDependencies = patchedDependencies;\n    if (this.jsonFilename) {\n      JsonFile.save(this._json, this.jsonFilename, { updateExistingFile: true });\n    }\n  }\n}\n"]}