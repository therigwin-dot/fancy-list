{"version":3,"file":"PnpmShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmShrinkwrapFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport crypto from 'crypto';\n\nimport {\n  FileSystem,\n  AlreadyReportedError,\n  Import,\n  Path,\n  type IPackageJson,\n  InternalError\n} from '@rushstack/node-core-library';\nimport { Colorize, type ITerminal } from '@rushstack/terminal';\nimport * as dependencyPathLockfilePreV9 from '@pnpm/dependency-path-lockfile-pre-v9';\nimport * as dependencyPath from '@pnpm/dependency-path';\n\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\nimport { DependencySpecifier } from '../DependencySpecifier';\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { IShrinkwrapFilePolicyValidatorOptions } from '../policy/ShrinkwrapFilePolicy';\nimport { PNPM_SHRINKWRAP_YAML_FORMAT } from './PnpmYamlCommon';\nimport { RushConstants } from '../RushConstants';\nimport type { IExperimentsJson } from '../../api/ExperimentsConfiguration';\nimport { DependencyType, type PackageJsonDependency, PackageJsonEditor } from '../../api/PackageJsonEditor';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { PnpmfileConfiguration } from './PnpmfileConfiguration';\nimport { PnpmProjectShrinkwrapFile } from './PnpmProjectShrinkwrapFile';\nimport type { PackageManagerOptionsConfigurationBase } from '../base/BasePackageManagerOptionsConfiguration';\nimport { PnpmOptionsConfiguration } from './PnpmOptionsConfiguration';\nimport type { IPnpmfile, IPnpmfileContext } from './IPnpmfile';\nimport type { Subspace } from '../../api/Subspace';\nimport { CustomTipId, type CustomTipsConfiguration } from '../../api/CustomTipsConfiguration';\nimport type {\n  ProjectId,\n  Lockfile,\n  PackageSnapshot,\n  ProjectSnapshot,\n  LockfileFileV9,\n  ResolvedDependencies\n} from '@pnpm/lockfile.types';\nimport { convertLockfileV9ToLockfileObject } from './PnpmShrinkWrapFileConverters';\n\nconst yamlModule: typeof import('js-yaml') = Import.lazy('js-yaml', require);\n\nexport enum ShrinkwrapFileMajorVersion {\n  V6 = 6,\n  V9 = 9\n}\n\nexport interface IPeerDependenciesMetaYaml {\n  optional?: boolean;\n}\nexport interface IDependenciesMetaYaml {\n  injected?: boolean;\n}\n\nexport type IPnpmV7VersionSpecifier = string;\nexport interface IPnpmV8VersionSpecifier {\n  version: string;\n  specifier: string;\n}\nexport type IPnpmV9VersionSpecifier = string;\nexport type IPnpmVersionSpecifier =\n  | IPnpmV7VersionSpecifier\n  | IPnpmV8VersionSpecifier\n  | IPnpmV9VersionSpecifier;\n\nexport interface IPnpmShrinkwrapDependencyYaml extends Omit<PackageSnapshot, 'resolution'> {\n  resolution: {\n    /** The directory this package should clone, for injected dependencies */\n    directory?: string;\n    /** The hash of the tarball, to ensure archive integrity */\n    integrity?: string;\n    /** The name of the tarball, if this was from a TGZ file */\n    tarball?: string;\n  };\n}\n\nexport type IPnpmShrinkwrapImporterYaml = ProjectSnapshot;\n\nexport interface IPnpmShrinkwrapYaml extends Lockfile {\n  /**\n   * This interface represents the raw pnpm-lock.YAML file\n   * Example:\n   *  {\n   *    \"dependencies\": {\n   *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\n   *    },\n   *    \"packages\": {\n   *      \"file:projects/library1.tgz\": {\n   *        \"dependencies: {\n   *          \"markdown\": \"0.5.0\"\n   *        },\n   *        \"name\": \"@rush-temp/library1\",\n   *        \"resolution\": {\n   *          \"tarball\": \"file:projects/library1.tgz\"\n   *        },\n   *        \"version\": \"0.0.0\"\n   *      },\n   *      \"markdown/0.5.0\": {\n   *        \"resolution\": {\n   *          \"integrity\": \"sha1-KCBbVlqK51kt4gdGPWY33BgnIrI=\"\n   *        }\n   *      }\n   *    },\n   *    \"registry\": \"http://localhost:4873/\",\n   *    \"shrinkwrapVersion\": 3,\n   *    \"specifiers\": {\n   *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\n   *    }\n   *  }\n   */\n  /** The list of resolved version numbers for direct dependencies */\n  dependencies?: Record<string, string>;\n  /** The list of specifiers used to resolve direct dependency versions */\n  specifiers?: Record<string, string>;\n  /** URL of the registry which was used */\n  registry?: string;\n}\n\nexport interface ILoadFromFileOptions {\n  withCaching?: boolean;\n}\n\nexport function parsePnpm9DependencyKey(\n  dependencyName: string,\n  versionSpecifier: IPnpmVersionSpecifier\n): DependencySpecifier | undefined {\n  if (!versionSpecifier) {\n    return undefined;\n  }\n\n  const dependencyKey: string = normalizePnpmVersionSpecifier(versionSpecifier);\n\n  // Example: file:projects/project2\n  // Example: project-2@file:projects/project2\n  // Example: link:../projects/project1\n  if (/(file|link):/.test(dependencyKey)) {\n    // If it starts with an NPM scheme such as \"file:projects/my-app.tgz\", we don't support that\n    return undefined;\n  }\n\n  const { peersIndex } = dependencyPath.indexOfPeersSuffix(dependencyKey);\n  if (peersIndex !== -1) {\n    // Remove peer suffix\n    const key: string = dependencyKey.slice(0, peersIndex);\n\n    // Example: 7.26.0\n    if (semver.valid(key)) {\n      return new DependencySpecifier(dependencyName, key);\n    }\n  }\n\n  // Example: @babel/preset-env@7.26.0                                                          -> name=@babel/preset-env version=7.26.0\n  // Example: @babel/preset-env@7.26.0(peer@1.2.3)                                              -> name=@babel/preset-env version=7.26.0\n  // Example: https://github.com/jonschlinkert/pad-left/tarball/2.1.0                           -> name=undefined         version=undefined\n  // Example: pad-left@https://github.com/jonschlinkert/pad-left/tarball/2.1.0                  -> name=pad-left          nonSemverVersion=https://xxxx\n  // Example: pad-left@https://codeload.github.com/jonschlinkert/pad-left/tar.gz/7798d648225aa5 -> name=pad-left          nonSemverVersion=https://xxxx\n  const dependency: dependencyPath.DependencyPath = dependencyPath.parse(dependencyKey);\n\n  const name: string = dependency.name ?? dependencyName;\n  const version: string = dependency.version ?? dependency.nonSemverVersion ?? dependencyKey;\n\n  // Example: https://xxxx/pad-left/tarball/2.1.0\n  // Example: https://github.com/jonschlinkert/pad-left/tarball/2.1.0\n  // Example: https://codeload.github.com/jonschlinkert/pad-left/tar.gz/7798d648225aa5d879660a37c408ab4675b65ac7\n  if (/^https?:/.test(version)) {\n    return new DependencySpecifier(name, version);\n  }\n\n  // Is it an alias for a different package?\n  if (name === dependencyName) {\n    // No, it's a regular dependency\n    return new DependencySpecifier(name, version);\n  } else {\n    // If the parsed package name is different from the dependencyName, then this is an NPM package alias\n    return new DependencySpecifier(dependencyName, `npm:${name}@${version}`);\n  }\n}\n\n/**\n * Given an encoded \"dependency key\" from the PNPM shrinkwrap file, this parses it into an equivalent\n * DependencySpecifier.\n *\n * @returns a SemVer string, or undefined if the version specifier cannot be parsed\n */\nexport function parsePnpmDependencyKey(\n  dependencyName: string,\n  versionSpecifier: IPnpmVersionSpecifier\n): DependencySpecifier | undefined {\n  if (!versionSpecifier) {\n    return undefined;\n  }\n\n  const dependencyKey: string = normalizePnpmVersionSpecifier(versionSpecifier);\n\n  if (/^\\w+:/.test(dependencyKey)) {\n    // If it starts with an NPM scheme such as \"file:projects/my-app.tgz\", we don't support that\n    return undefined;\n  }\n\n  // The package name parsed from the dependency key, or dependencyName if it was omitted.\n  // Example: \"@scope/depame\"\n  let parsedPackageName: string;\n\n  // The trailing portion of the dependency key that includes the version and optional peer dependency path.\n  // Example: \"2.8.0/chai@3.5.0+sinon@1.17.7\"\n  let parsedInstallPath: string;\n\n  // Example: \"path.pkgs.visualstudio.com/@scope/depame/1.4.0\"  --> 0=\"@scope/depame\" 1=\"1.4.0\"\n  // Example: \"/isarray/2.0.1\"                                  --> 0=\"isarray\"       1=\"2.0.1\"\n  // Example: \"/sinon-chai/2.8.0/chai@3.5.0+sinon@1.17.7\"       --> 0=\"sinon-chai\"    1=\"2.8.0/chai@3.5.0+sinon@1.17.7\"\n  // Example: \"/typescript@5.1.6\"                               --> 0=typescript      1=\"5.1.6\"\n  // Example: 1.2.3_peer-dependency@.4.5.6                      --> no match\n  // Example: 1.2.3_@scope+peer-dependency@.4.5.6               --> no match\n  // Example: 1.2.3(peer-dependency@.4.5.6)                     --> no match\n  // Example: 1.2.3(@scope/peer-dependency@.4.5.6)              --> no match\n  const packageNameMatch: RegExpMatchArray | null = /^[^\\/(]*\\/((?:@[^\\/(]+\\/)?[^\\/(]+)[\\/@](.*)$/.exec(\n    dependencyKey\n  );\n  if (packageNameMatch) {\n    parsedPackageName = packageNameMatch[1];\n    parsedInstallPath = packageNameMatch[2];\n  } else {\n    parsedPackageName = dependencyName;\n\n    // Example: \"23.6.0_babel-core@6.26.3\"\n    // Example: \"23.6.0\"\n    parsedInstallPath = dependencyKey;\n  }\n\n  // The SemVer value\n  // Example: \"2.8.0\"\n  let parsedVersionPart: string;\n\n  // Example: \"23.6.0_babel-core@6.26.3\" --> \"23.6.0\"\n  // Example: \"2.8.0/chai@3.5.0+sinon@1.17.7\" --> \"2.8.0\"\n  // Example: \"0.53.1(@types/node@14.18.36)\" --> \"0.53.1\"\n  const versionMatch: RegExpMatchArray | null = /^([^\\(\\/_]+)[(\\/_]/.exec(parsedInstallPath);\n  if (versionMatch) {\n    parsedVersionPart = versionMatch[1];\n  } else {\n    // Example: \"2.8.0\"\n    parsedVersionPart = parsedInstallPath;\n  }\n\n  // By this point, we expect parsedVersionPart to be a valid SemVer range\n  if (!parsedVersionPart) {\n    return undefined;\n  }\n\n  if (!semver.valid(parsedVersionPart)) {\n    const urlRegex: RegExp =\n      /^(git@|@)?([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}(\\/|\\+)([^\\/\\\\]+\\/?)*([^\\/\\\\]+)$/i;\n    // Test for urls:\n    // Examples:\n    //     @github.com/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     github.com/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     github.com.au/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     bitbucket.com/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     bitbucket.com+abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     git@bitbucket.com+abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    //     bitbucket.co.in/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\n    if (urlRegex.test(dependencyKey)) {\n      const dependencySpecifier: DependencySpecifier = new DependencySpecifier(dependencyName, dependencyKey);\n      return dependencySpecifier;\n    } else {\n      return undefined;\n    }\n  }\n\n  // Is it an alias for a different package?\n  if (parsedPackageName === dependencyName) {\n    // No, it's a regular dependency\n    return new DependencySpecifier(parsedPackageName, parsedVersionPart);\n  } else {\n    // If the parsed package name is different from the dependencyName, then this is an NPM package alias\n    return new DependencySpecifier(dependencyName, `npm:${parsedPackageName}@${parsedVersionPart}`);\n  }\n}\n\nexport function normalizePnpmVersionSpecifier(versionSpecifier: IPnpmVersionSpecifier): string {\n  if (typeof versionSpecifier === 'string') {\n    return versionSpecifier;\n  } else {\n    return versionSpecifier.version;\n  }\n}\n\nexport class PnpmShrinkwrapFile extends BaseShrinkwrapFile {\n  // TODO: Implement cache eviction when a lockfile is copied back\n  private static _cacheByLockfilePath: Map<string, PnpmShrinkwrapFile | undefined> = new Map();\n\n  public readonly shrinkwrapFileMajorVersion: number;\n  public readonly isWorkspaceCompatible: boolean;\n  public readonly registry: string;\n  public readonly dependencies: ReadonlyMap<string, IPnpmVersionSpecifier>;\n  public readonly importers: ReadonlyMap<string, IPnpmShrinkwrapImporterYaml>;\n  public readonly specifiers: ReadonlyMap<string, string>;\n  public readonly packages: ReadonlyMap<string, IPnpmShrinkwrapDependencyYaml>;\n  public readonly overrides: ReadonlyMap<string, string>;\n  public readonly packageExtensionsChecksum: undefined | string;\n\n  private readonly _shrinkwrapJson: IPnpmShrinkwrapYaml;\n  private readonly _integrities: Map<string, Map<string, string>>;\n  private _pnpmfileConfiguration: PnpmfileConfiguration | undefined;\n\n  private constructor(shrinkwrapJson: IPnpmShrinkwrapYaml) {\n    super();\n    this._shrinkwrapJson = shrinkwrapJson;\n\n    // Normalize the data\n    const lockfileVersion: string | number | undefined = shrinkwrapJson.lockfileVersion;\n    if (typeof lockfileVersion === 'string') {\n      const isDotIncluded: boolean = lockfileVersion.includes('.');\n      this.shrinkwrapFileMajorVersion = parseInt(\n        lockfileVersion.substring(0, isDotIncluded ? lockfileVersion.indexOf('.') : undefined),\n        10\n      );\n    } else if (typeof lockfileVersion === 'number') {\n      this.shrinkwrapFileMajorVersion = Math.floor(lockfileVersion);\n    } else {\n      this.shrinkwrapFileMajorVersion = 0;\n    }\n\n    this.registry = shrinkwrapJson.registry || '';\n    this.dependencies = new Map(Object.entries(shrinkwrapJson.dependencies || {}));\n    this.importers = new Map(Object.entries(shrinkwrapJson.importers || {}));\n    this.specifiers = new Map(Object.entries(shrinkwrapJson.specifiers || {}));\n    this.packages = new Map(Object.entries(shrinkwrapJson.packages || {}));\n    this.overrides = new Map(Object.entries(shrinkwrapJson.overrides || {}));\n    this.packageExtensionsChecksum = shrinkwrapJson.packageExtensionsChecksum;\n\n    // Lockfile v9 always has \".\" in importers filed.\n    this.isWorkspaceCompatible =\n      this.shrinkwrapFileMajorVersion >= ShrinkwrapFileMajorVersion.V9\n        ? this.importers.size > 1\n        : this.importers.size > 0;\n\n    this._integrities = new Map();\n  }\n\n  public static getLockfileV9PackageId(name: string, version: string): string {\n    /**\n     * name@1.2.3                -> name@1.2.3\n     * name@1.2.3(peer)          -> name@1.2.3(peer)\n     * https://xxx/@a/b          -> name@https://xxx/@a/b\n     * file://xxx                -> name@file://xxx\n     * 1.2.3                     -> name@1.2.3\n     */\n\n    if (/https?:/.test(version)) {\n      return /@https?:/.test(version) ? version : `${name}@${version}`;\n    } else if (/file:/.test(version)) {\n      return /@file:/.test(version)? version : `${name}@${version}`;\n    }\n\n    return dependencyPath.removeSuffix(version).includes('@', 1) ? version : `${name}@${version}`;\n  }\n\n  public static loadFromFile(\n    shrinkwrapYamlFilePath: string,\n    { withCaching }: ILoadFromFileOptions = {}\n  ): PnpmShrinkwrapFile | undefined {\n    let loaded: PnpmShrinkwrapFile | undefined;\n    if (withCaching) {\n      loaded = PnpmShrinkwrapFile._cacheByLockfilePath.get(shrinkwrapYamlFilePath);\n    }\n\n    // TODO: Promisify this\n    loaded ??= (() => {\n      try {\n        const shrinkwrapContent: string = FileSystem.readFile(shrinkwrapYamlFilePath);\n        return PnpmShrinkwrapFile.loadFromString(shrinkwrapContent);\n      } catch (error) {\n        if (FileSystem.isNotExistError(error as Error)) {\n          return undefined; // file does not exist\n        }\n        throw new Error(`Error reading \"${shrinkwrapYamlFilePath}\":\\n  ${(error as Error).message}`);\n      }\n    })();\n\n    PnpmShrinkwrapFile._cacheByLockfilePath.set(shrinkwrapYamlFilePath, loaded);\n    return loaded;\n  }\n\n  public static loadFromString(shrinkwrapContent: string): PnpmShrinkwrapFile {\n    const shrinkwrapJson: IPnpmShrinkwrapYaml = yamlModule.safeLoad(shrinkwrapContent);\n    if ((shrinkwrapJson as LockfileFileV9).snapshots) {\n      const lockfile: IPnpmShrinkwrapYaml | null = convertLockfileV9ToLockfileObject(\n        shrinkwrapJson as LockfileFileV9\n      );\n      /**\n       * In Lockfile V9,\n       * 1. There is no top-level dependencies field, but it is a property of the importers field.\n       * 2. The version may is not equal to the key in the package field. Thus, it needs to be standardized in the form of `<name>:<version>`.\n       *\n       * importers:\n       *  .:\n       *    dependencies:\n       *      'project1':\n       *        specifier: file:./projects/project1\n       *        version: file:projects/project1\n       *\n       * packages:\n       *   project1@file:projects/project1:\n       *     resolution: {directory: projects/project1, type: directory}\n       */\n      const dependencies: ResolvedDependencies | undefined =\n        lockfile.importers['.' as ProjectId]?.dependencies;\n      if (dependencies) {\n        lockfile.dependencies = {};\n        for (const [name, versionSpecifier] of Object.entries(dependencies)) {\n          lockfile.dependencies[name] = PnpmShrinkwrapFile.getLockfileV9PackageId(name, versionSpecifier);\n        }\n      }\n      return new PnpmShrinkwrapFile(lockfile);\n    }\n\n    return new PnpmShrinkwrapFile(shrinkwrapJson);\n  }\n\n  public getShrinkwrapHash(experimentsConfig?: IExperimentsJson): string {\n    // The 'omitImportersFromPreventManualShrinkwrapChanges' experiment skips the 'importers' section\n    // when computing the hash, since the main concern is changes to the overall external dependency footprint\n    const { omitImportersFromPreventManualShrinkwrapChanges } = experimentsConfig || {};\n\n    const shrinkwrapContent: string = this._serializeInternal(\n      omitImportersFromPreventManualShrinkwrapChanges\n    );\n    return crypto.createHash('sha1').update(shrinkwrapContent).digest('hex');\n  }\n\n  /**\n   * Determine whether `pnpm-lock.yaml` contains insecure sha1 hashes.\n   * @internal\n   */\n  private _disallowInsecureSha1(\n    customTipsConfiguration: CustomTipsConfiguration,\n    exemptPackageVersions: Record<string, string[]>,\n    terminal: ITerminal,\n    subspaceName: string\n  ): boolean {\n    const exemptPackageList: Map<string, boolean> = new Map();\n    for (const [pkgName, versions] of Object.entries(exemptPackageVersions)) {\n      for (const version of versions) {\n        exemptPackageList.set(this._getPackageId(pkgName, version), true);\n      }\n    }\n\n    for (const [pkgName, { resolution }] of this.packages) {\n      if (\n        resolution?.integrity?.startsWith('sha1') &&\n        !exemptPackageList.has(this._parseDependencyPath(pkgName))\n      ) {\n        terminal.writeErrorLine(\n          'Error: An integrity field with \"sha1\" was detected in the pnpm-lock.yaml file located in subspace ' +\n            `${subspaceName}; this conflicts with the \"disallowInsecureSha1\" policy from pnpm-config.json.\\n`\n        );\n\n        customTipsConfiguration._showErrorTip(terminal, CustomTipId.TIP_RUSH_DISALLOW_INSECURE_SHA1);\n\n        return true; // Indicates an error was found\n      }\n    }\n    return false;\n  }\n\n  /** @override */\n  public validateShrinkwrapAfterUpdate(\n    rushConfiguration: RushConfiguration,\n    subspace: Subspace,\n    terminal: ITerminal\n  ): void {\n    const pnpmOptions: PnpmOptionsConfiguration = subspace.getPnpmOptions() || rushConfiguration.pnpmOptions;\n    const { pnpmLockfilePolicies } = pnpmOptions;\n\n    let invalidPoliciesCount: number = 0;\n\n    if (pnpmLockfilePolicies?.disallowInsecureSha1?.enabled) {\n      const isError: boolean = this._disallowInsecureSha1(\n        rushConfiguration.customTipsConfiguration,\n        pnpmLockfilePolicies.disallowInsecureSha1.exemptPackageVersions,\n        terminal,\n        subspace.subspaceName\n      );\n      if (isError) {\n        invalidPoliciesCount += 1;\n      }\n    }\n\n    if (invalidPoliciesCount > 0) {\n      throw new AlreadyReportedError();\n    }\n  }\n\n  /** @override */\n  public validate(\n    packageManagerOptionsConfig: PackageManagerOptionsConfigurationBase,\n    policyOptions: IShrinkwrapFilePolicyValidatorOptions,\n    experimentsConfig?: IExperimentsJson\n  ): void {\n    super.validate(packageManagerOptionsConfig, policyOptions);\n    if (!(packageManagerOptionsConfig instanceof PnpmOptionsConfiguration)) {\n      throw new Error('The provided package manager options are not valid for PNPM shrinkwrap files.');\n    }\n\n    if (!policyOptions.allowShrinkwrapUpdates) {\n      if (!policyOptions.repoState.isValid) {\n        // eslint-disable-next-line no-console\n        console.log(\n          Colorize.red(\n            `The ${RushConstants.repoStateFilename} file is invalid. There may be a merge conflict marker ` +\n              'in the file. You may need to run \"rush update\" to refresh its contents.'\n          ) + '\\n'\n        );\n        throw new AlreadyReportedError();\n      }\n\n      // Only check the hash if allowShrinkwrapUpdates is false. If true, the shrinkwrap file\n      // may have changed and the hash could be invalid.\n      if (packageManagerOptionsConfig.preventManualShrinkwrapChanges) {\n        if (!policyOptions.repoState.pnpmShrinkwrapHash) {\n          // eslint-disable-next-line no-console\n          console.log(\n            Colorize.red(\n              'The existing shrinkwrap file hash could not be found. You may need to run \"rush update\" to ' +\n                'populate the hash. See the \"preventManualShrinkwrapChanges\" setting documentation for details.'\n            ) + '\\n'\n          );\n          throw new AlreadyReportedError();\n        }\n\n        if (this.getShrinkwrapHash(experimentsConfig) !== policyOptions.repoState.pnpmShrinkwrapHash) {\n          // eslint-disable-next-line no-console\n          console.log(\n            Colorize.red(\n              'The shrinkwrap file hash does not match the expected hash. Please run \"rush update\" to ensure the ' +\n                'shrinkwrap file is up to date. See the \"preventManualShrinkwrapChanges\" setting documentation for ' +\n                'details.'\n            ) + '\\n'\n          );\n          throw new AlreadyReportedError();\n        }\n      }\n    }\n  }\n\n  /**\n   * This operation exactly mirrors the behavior of PNPM's own implementation:\n   * https://github.com/pnpm/pnpm/blob/73ebfc94e06d783449579cda0c30a40694d210e4/lockfile/lockfile-file/src/experiments/inlineSpecifiersLockfileConverters.ts#L162\n   */\n  private _convertLockfileV6DepPathToV5DepPath(newDepPath: string): string {\n    if (!newDepPath.includes('@', 2) || newDepPath.startsWith('file:')) return newDepPath;\n    const index: number = newDepPath.indexOf('@', newDepPath.indexOf('/@') + 2);\n    if (newDepPath.includes('(') && index > dependencyPathLockfilePreV9.indexOfPeersSuffix(newDepPath)) return newDepPath;\n    return `${newDepPath.substring(0, index)}/${newDepPath.substring(index + 1)}`;\n  }\n\n  /**\n   * Normalize dependency paths for PNPM shrinkwrap files.\n   * Example: \"/eslint-utils@3.0.0(eslint@8.23.1)\" --> \"/eslint-utils@3.0.0\"\n   * Example: \"/@typescript-eslint/experimental-utils/5.9.1_eslint@8.6.0+typescript@4.4.4\" --> \"/@typescript-eslint/experimental-utils/5.9.1\"\n   */\n  private _parseDependencyPath(packagePath: string): string {\n    let depPath: string = packagePath;\n    if (this.shrinkwrapFileMajorVersion >= 6) {\n      depPath = this._convertLockfileV6DepPathToV5DepPath(packagePath);\n    }\n    const pkgInfo: ReturnType<typeof dependencyPathLockfilePreV9.parse> = dependencyPathLockfilePreV9.parse(depPath);\n    return this._getPackageId(pkgInfo.name as string, pkgInfo.version as string);\n  }\n\n  /** @override */\n  public getTempProjectNames(): ReadonlyArray<string> {\n    return this._getTempProjectNames(this._shrinkwrapJson.dependencies || {});\n  }\n\n  /**\n   * Gets the path to the tarball file if the package is a tarball.\n   * Returns undefined if the package entry doesn't exist or the package isn't a tarball.\n   * Example of return value: file:projects/build-tools.tgz\n   */\n  public getTarballPath(packageName: string): string | undefined {\n    const dependency: IPnpmShrinkwrapDependencyYaml | undefined = this.packages.get(packageName);\n    return dependency?.resolution?.tarball;\n  }\n\n  public getTopLevelDependencyKey(dependencyName: string): IPnpmVersionSpecifier | undefined {\n    return this.dependencies.get(dependencyName);\n  }\n\n  /**\n   * Gets the version number from the list of top-level dependencies in the \"dependencies\" section\n   * of the shrinkwrap file. Sample return values:\n   *   '2.1.113'\n   *   '1.9.0-dev.27'\n   *   'file:projects/empty-webpart-project.tgz'\n   *   undefined\n   *\n   * @override\n   */\n  public getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined {\n    let value: IPnpmVersionSpecifier | undefined = this.dependencies.get(dependencyName);\n    if (value) {\n      value = normalizePnpmVersionSpecifier(value);\n\n      // Getting the top level dependency version from a PNPM lockfile version 5.x or 6.1\n      // --------------------------------------------------------------------------\n      //\n      // 1) Top-level tarball dependency entries in pnpm-lock.yaml look like in 5.x:\n      //    ```\n      //    '@rush-temp/sp-filepicker': 'file:projects/sp-filepicker.tgz_0ec79d3b08edd81ebf49cd19ca50b3f5'\n      //    ```\n      //    And in version 6.1, they look like:\n      //    ```\n      //    '@rush-temp/sp-filepicker':\n      //      specifier: file:./projects/generate-api-docs.tgz\n      //      version: file:projects/generate-api-docs.tgz\n      //    ```\n\n      //    Then, it would be defined below (version 5.x):\n      //    ```\n      //    'file:projects/sp-filepicker.tgz_0ec79d3b08edd81ebf49cd19ca50b3f5':\n      //      dependencies:\n      //       '@microsoft/load-themed-styles': 1.10.7\n      //       ...\n      //      resolution:\n      //       integrity: sha512-guuoFIc**==\n      //       tarball: 'file:projects/sp-filepicker.tgz'\n      //    ```\n      //    Or in version 6.1:\n      //    ```\n      //    file:projects/sp-filepicker.tgz:\n      //      resolution: {integrity: sha512-guuoFIc**==, tarball: file:projects/sp-filepicker.tgz}\n      //      name: '@rush-temp/sp-filepicker'\n      //      version: 0.0.0\n      //      dependencies:\n      //        '@microsoft/load-themed-styles': 1.10.7\n      //        ...\n      //      dev: false\n      //    ```\n\n      //    Here, we are interested in the part 'file:projects/sp-filepicker.tgz'. Splitting by underscores is not the\n      //    best way to get this because file names could have underscores in them. Instead, we could use the tarball\n      //    field in the resolution section.\n\n      // 2) Top-level non-tarball dependency entries in pnpm-lock.yaml would look like in 5.x:\n      //    ```\n      //    '@rushstack/set-webpack-public-path-plugin': 2.1.133\n      //    @microsoft/sp-build-node': 1.9.0-dev.27_typescript@2.9.2\n      //    ```\n      //    And in version 6.1, they look like:\n      //    ```\n      //    '@rushstack/set-webpack-public-path-plugin':\n      //      specifier: ^2.1.133\n      //      version: 2.1.133\n      //    '@microsoft/sp-build-node':\n      //      specifier: 1.9.0-dev.27\n      //      version: 1.9.0-dev.27(typescript@2.9.2)\n      //    ```\n\n      //    Here, we could either just split by underscores and take the first part (5.x) or use the specifier field\n      //    (6.1).\n\n      // The below code is also compatible with lockfile versions < 5.1\n\n      const dependency: IPnpmShrinkwrapDependencyYaml | undefined = this.packages.get(value);\n      if (dependency?.resolution?.tarball && value.startsWith(dependency.resolution.tarball)) {\n        return new DependencySpecifier(dependencyName, dependency.resolution.tarball);\n      }\n\n      if (this.shrinkwrapFileMajorVersion >= ShrinkwrapFileMajorVersion.V9) {\n        const { version, nonSemverVersion } = dependencyPath.parse(value);\n        value = version ?? nonSemverVersion ?? value;\n      } else {\n        let underscoreOrParenthesisIndex: number = value.indexOf('_');\n        if (underscoreOrParenthesisIndex < 0) {\n          underscoreOrParenthesisIndex = value.indexOf('(');\n        }\n\n        if (underscoreOrParenthesisIndex >= 0) {\n          value = value.substring(0, underscoreOrParenthesisIndex);\n        }\n      }\n\n      return new DependencySpecifier(dependencyName, value);\n    }\n    return undefined;\n  }\n\n  /**\n   * The PNPM shrinkwrap file has top-level dependencies on the temp projects like this (version 5.x):\n   *\n   * ```\n   * dependencies:\n   *   '@rush-temp/my-app': 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0'\n   * packages:\n   *   /@types/node/10.14.15:\n   *     dev: false\n   *   'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0':\n   *     dev: false\n   *     name: '@rush-temp/my-app'\n   *     version: 0.0.0\n   * ```\n   *\n   * or in version 6.1, like this:\n   * ```\n   * dependencies:\n   *  '@rush-temp/my-app':\n   *    specifier: file:./projects/my-app.tgz\n   *    version: file:projects/my-app.tgz\n   *  packages:\n   *    /@types/node@10.14.15:\n   *      resolution: {integrity: sha512-iAB+**==}\n   *      dev: false\n   *    file:projects/my-app.tgz\n   *      resolution: {integrity: sha512-guuoFIc**==, tarball: file:projects/sp-filepicker.tgz}\n   *      name: '@rush-temp/my-app'\n   *      version: 0.0.0\n   *      dependencies:\n   *        '@microsoft/load-themed-styles': 1.10.7\n   *        ...\n   *      dev: false\n   * ```\n   *\n   * We refer to 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0' or 'file:projects/my-app.tgz' as\n   * the temp project dependency key of the temp project '@rush-temp/my-app'.\n   */\n  public getTempProjectDependencyKey(tempProjectName: string): string | undefined {\n    const tempProjectDependencyKey: IPnpmVersionSpecifier | undefined =\n      this.dependencies.get(tempProjectName);\n    return tempProjectDependencyKey ? normalizePnpmVersionSpecifier(tempProjectDependencyKey) : undefined;\n  }\n\n  public getShrinkwrapEntryFromTempProjectDependencyKey(\n    tempProjectDependencyKey: string\n  ): IPnpmShrinkwrapDependencyYaml | undefined {\n    return this.packages.get(tempProjectDependencyKey);\n  }\n\n  public getShrinkwrapEntry(\n    name: string,\n    version: IPnpmVersionSpecifier\n  ): IPnpmShrinkwrapDependencyYaml | undefined {\n    const packageId: string = this._getPackageId(name, version);\n    return this.packages.get(packageId);\n  }\n\n  /**\n   * Serializes the PNPM Shrinkwrap file\n   *\n   * @override\n   */\n  protected serialize(): string {\n    return this._serializeInternal(false);\n  }\n\n  /**\n   * Gets the resolved version number of a dependency for a specific temp project.\n   * For PNPM, we can reuse the version that another project is using.\n   * Note that this function modifies the shrinkwrap data if tryReusingPackageVersionsFromShrinkwrap is set to true.\n   *\n   * @override\n   */\n  protected tryEnsureDependencyVersion(\n    dependencySpecifier: DependencySpecifier,\n    tempProjectName: string\n  ): DependencySpecifier | undefined {\n    // PNPM doesn't have the same advantage of NPM, where we can skip generate as long as the\n    // shrinkwrap file puts our dependency in either the top of the node_modules folder\n    // or underneath the package we are looking at.\n    // This is because the PNPM shrinkwrap file describes the exact links that need to be created\n    // to recreate the graph..\n    // Because of this, we actually need to check for a version that this package is directly\n    // linked to.\n\n    const packageName: string = dependencySpecifier.packageName;\n\n    const tempProjectDependencyKey: string | undefined = this.getTempProjectDependencyKey(tempProjectName);\n    if (!tempProjectDependencyKey) {\n      return undefined;\n    }\n\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined =\n      this._getPackageDescription(tempProjectDependencyKey);\n    if (\n      !packageDescription ||\n      !packageDescription.dependencies ||\n      !packageDescription.dependencies.hasOwnProperty(packageName)\n    ) {\n      return undefined;\n    }\n\n    const dependencyKey: IPnpmVersionSpecifier = packageDescription.dependencies[packageName];\n    return this._parsePnpmDependencyKey(packageName, dependencyKey);\n  }\n\n  /** @override */\n  public findOrphanedProjects(\n    rushConfiguration: RushConfiguration,\n    subspace: Subspace\n  ): ReadonlyArray<string> {\n    // The base shrinkwrap handles orphaned projects the same across all package managers,\n    // but this is only valid for non-workspace installs\n    if (!this.isWorkspaceCompatible) {\n      return super.findOrphanedProjects(rushConfiguration, subspace);\n    }\n\n    const orphanedProjectPaths: string[] = [];\n    for (const importerKey of this.getImporterKeys()) {\n      // PNPM importer keys are relative paths from the workspace root, which is the common temp folder\n      const rushProjectPath: string = path.resolve(subspace.getSubspaceTempFolderPath(), importerKey);\n      if (!rushConfiguration.tryGetProjectForPath(rushProjectPath)) {\n        orphanedProjectPaths.push(rushProjectPath);\n      }\n    }\n    return orphanedProjectPaths;\n  }\n\n  /** @override */\n  public getProjectShrinkwrap(project: RushConfigurationProject): PnpmProjectShrinkwrapFile {\n    return new PnpmProjectShrinkwrapFile(this, project);\n  }\n\n  public *getImporterKeys(): Iterable<string> {\n    // Filter out the root importer used for the generated package.json in the root\n    // of the install, since we do not use this.\n    for (const key of this.importers.keys()) {\n      if (key !== '.') {\n        yield key;\n      }\n    }\n  }\n\n  public getImporterKeyByPath(workspaceRoot: string, projectFolder: string): string {\n    return Path.convertToSlashes(path.relative(workspaceRoot, projectFolder));\n  }\n\n  public getImporter(importerKey: string): IPnpmShrinkwrapImporterYaml | undefined {\n    return this.importers.get(importerKey);\n  }\n\n  public getIntegrityForImporter(importerKey: string): Map<string, string> | undefined {\n    // This logic formerly lived in PnpmProjectShrinkwrapFile. Moving it here allows caching of the external\n    // dependency integrity relationships across projects\n    let integrityMap: Map<string, string> | undefined = this._integrities.get(importerKey);\n    if (!integrityMap) {\n      const importer: IPnpmShrinkwrapImporterYaml | undefined = this.getImporter(importerKey);\n      if (importer) {\n        integrityMap = new Map();\n        this._integrities.set(importerKey, integrityMap);\n\n        const sha256Digest: string = crypto\n          .createHash('sha256')\n          .update(JSON.stringify(importer))\n          .digest('base64');\n        const selfIntegrity: string = `${importerKey}:${sha256Digest}:`;\n        integrityMap.set(importerKey, selfIntegrity);\n\n        const { dependencies, devDependencies, optionalDependencies } = importer;\n\n        const externalFilter: (name: string, version: IPnpmVersionSpecifier) => boolean = (\n          name: string,\n          versionSpecifier: IPnpmVersionSpecifier\n        ): boolean => {\n          const version: string = normalizePnpmVersionSpecifier(versionSpecifier);\n          return !version.includes('link:');\n        };\n\n        if (dependencies) {\n          this._addIntegrities(integrityMap, dependencies, false, externalFilter);\n        }\n\n        if (devDependencies) {\n          this._addIntegrities(integrityMap, devDependencies, false, externalFilter);\n        }\n\n        if (optionalDependencies) {\n          this._addIntegrities(integrityMap, optionalDependencies, true, externalFilter);\n        }\n      }\n    }\n\n    return integrityMap;\n  }\n\n  /** @override */\n  public async isWorkspaceProjectModifiedAsync(\n    project: RushConfigurationProject,\n    subspace: Subspace,\n    variant: string | undefined\n  ): Promise<boolean> {\n    const importerKey: string = this.getImporterKeyByPath(\n      subspace.getSubspaceTempFolderPath(),\n      project.projectFolder\n    );\n\n    const importer: IPnpmShrinkwrapImporterYaml | undefined = this.getImporter(importerKey);\n    if (!importer) {\n      return true;\n    }\n\n    // First, let's transform the package.json using the pnpmfile\n    const packageJson: IPackageJson = project.packageJsonEditor.saveToObject();\n\n    // Initialize the pnpmfile if it doesn't exist\n    if (!this._pnpmfileConfiguration) {\n      this._pnpmfileConfiguration = await PnpmfileConfiguration.initializeAsync(\n        project.rushConfiguration,\n        subspace,\n        variant\n      );\n    }\n\n    let transformedPackageJson: IPackageJson = packageJson;\n\n    let subspacePnpmfile: IPnpmfile | undefined;\n    if (project.rushConfiguration.subspacesFeatureEnabled) {\n      // Get the pnpmfile\n      const subspacePnpmfilePath: string = path.join(\n        subspace.getSubspaceTempFolderPath(),\n        RushConstants.pnpmfileGlobalFilename\n      );\n\n      if (await FileSystem.existsAsync(subspacePnpmfilePath)) {\n        try {\n          subspacePnpmfile = require(subspacePnpmfilePath);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            // eslint-disable-next-line no-console\n            console.error(\n              Colorize.red(\n                `A syntax error in the ${RushConstants.pnpmfileV6Filename} at ${subspacePnpmfilePath}\\n`\n              )\n            );\n          } else {\n            // eslint-disable-next-line no-console\n            console.error(\n              Colorize.red(\n                `Error during pnpmfile execution. pnpmfile: \"${subspacePnpmfilePath}\". Error: \"${err.message}\".` +\n                  '\\n'\n              )\n            );\n          }\n        }\n      }\n\n      if (subspacePnpmfile) {\n        const individualContext: IPnpmfileContext = {\n          log: (message: string) => {\n            // eslint-disable-next-line no-console\n            console.log(message);\n          }\n        };\n        try {\n          transformedPackageJson =\n            subspacePnpmfile.hooks?.readPackage?.(transformedPackageJson, individualContext) ||\n            transformedPackageJson;\n        } catch (err) {\n          // eslint-disable-next-line no-console\n          console.error(\n            Colorize.red(\n              `Error during readPackage hook execution. pnpmfile: \"${subspacePnpmfilePath}\". Error: \"${err.message}\".` +\n                '\\n'\n            )\n          );\n        }\n      }\n    }\n\n    // Use a new PackageJsonEditor since it will classify each dependency type, making tracking the\n    // found versions much simpler.\n    const { dependencyList, devDependencyList, dependencyMetaList } = PackageJsonEditor.fromObject(\n      this._pnpmfileConfiguration.transform(transformedPackageJson),\n      project.packageJsonEditor.filePath\n    );\n\n    const allDependencies: PackageJsonDependency[] = [...dependencyList, ...devDependencyList];\n\n    if (this.shrinkwrapFileMajorVersion < 6) {\n      // PNPM <= v7\n\n      // Then get the unique package names and map them to package versions.\n      const dependencyVersions: Map<string, PackageJsonDependency> = new Map();\n      for (const packageDependency of allDependencies) {\n        // We will also filter out peer dependencies since these are not installed at development time.\n        if (packageDependency.dependencyType === DependencyType.Peer) {\n          continue;\n        }\n\n        const foundDependency: PackageJsonDependency | undefined = dependencyVersions.get(\n          packageDependency.name\n        );\n        if (!foundDependency) {\n          dependencyVersions.set(packageDependency.name, packageDependency);\n        } else {\n          // Shrinkwrap will prioritize optional dependencies, followed by regular dependencies, with dev being\n          // the least prioritized. We will only keep the most prioritized option.\n          // See: https://github.com/pnpm/pnpm/blob/main/packages/lockfile-utils/src/satisfiesPackageManifest.ts\n          switch (foundDependency.dependencyType) {\n            case DependencyType.Optional:\n              break;\n            case DependencyType.Regular:\n              if (packageDependency.dependencyType === DependencyType.Optional) {\n                dependencyVersions.set(packageDependency.name, packageDependency);\n              }\n              break;\n            case DependencyType.Dev:\n              dependencyVersions.set(packageDependency.name, packageDependency);\n              break;\n          }\n        }\n      }\n\n      // Then validate that the dependency fields are as expected in the shrinkwrap to avoid false-negatives\n      // when moving a package from one field to the other.\n      for (const { dependencyType, name } of dependencyVersions.values()) {\n        switch (dependencyType) {\n          case DependencyType.Optional:\n            if (!importer.optionalDependencies?.[name]) return true;\n            break;\n          case DependencyType.Regular:\n            if (!importer.dependencies?.[name]) return true;\n            break;\n          case DependencyType.Dev:\n            if (!importer.devDependencies?.[name]) return true;\n            break;\n        }\n      }\n\n      const specifiers: Record<string, IPnpmVersionSpecifier> | undefined = importer.specifiers;\n      if (!specifiers) {\n        throw new InternalError('Expected specifiers to be defined, but is expected in lockfile version 5');\n      }\n\n      // Then validate the length matches between the importer and the dependency list, since duplicates are\n      // a valid use-case. Importers will only take one of these values, so no need to do more work here.\n      if (dependencyVersions.size !== Object.keys(specifiers).length) {\n        return true;\n      }\n\n      // Finally, validate that all values in the importer are also present in the dependency list.\n      for (const [importerPackageName, importerVersionSpecifier] of Object.entries(specifiers)) {\n        const foundDependency: PackageJsonDependency | undefined =\n          dependencyVersions.get(importerPackageName);\n        if (!foundDependency) {\n          return true;\n        }\n        const resolvedVersion: string = this.overrides.get(importerPackageName) ?? foundDependency.version;\n        if (resolvedVersion !== importerVersionSpecifier) {\n          return true;\n        }\n      }\n    } else {\n      //  >= PNPM v8\n      const importerOptionalDependencies: Set<string> = new Set(\n        Object.keys(importer.optionalDependencies ?? {})\n      );\n      const importerDependencies: Set<string> = new Set(Object.keys(importer.dependencies ?? {}));\n      const importerDevDependencies: Set<string> = new Set(Object.keys(importer.devDependencies ?? {}));\n      const importerDependenciesMeta: Set<string> = new Set(Object.keys(importer.dependenciesMeta ?? {}));\n\n      for (const { dependencyType, name, version } of allDependencies) {\n        let isOptional: boolean = false;\n        let specifierFromLockfile: IPnpmVersionSpecifier | undefined;\n        let isDevDepFallThrough: boolean = false;\n        switch (dependencyType) {\n          case DependencyType.Optional: {\n            specifierFromLockfile = importer.optionalDependencies?.[name];\n            importerOptionalDependencies.delete(name);\n            break;\n          }\n\n          case DependencyType.Peer: {\n            // Peer dependencies of workspace projects may be installed as regular dependencies\n            isOptional = true; // fall through\n          }\n\n          case DependencyType.Dev: {\n            specifierFromLockfile = importer.devDependencies?.[name];\n            if (specifierFromLockfile) {\n              // If the dev dependency is not found, it may be installed as a regular dependency,\n              // so fall through\n              importerDevDependencies.delete(name);\n              break;\n            }\n            // If fall through, there is a chance the package declares an inconsistent version, ignore it.\n            isDevDepFallThrough = true;\n          }\n\n          // eslint-disable-next-line no-fallthrough\n          case DependencyType.Regular:\n            specifierFromLockfile = importer.dependencies?.[name];\n            importerDependencies.delete(name);\n            break;\n        }\n\n        if (!specifierFromLockfile) {\n          if (!isOptional) {\n            return true;\n          }\n        } else {\n          if (this.shrinkwrapFileMajorVersion >= ShrinkwrapFileMajorVersion.V9) {\n            // TODO: Emit an error message when someone tries to override a version of something in one of their\n            // local repo packages.\n            let resolvedVersion: string = this.overrides.get(name) ?? version;\n            // convert path in posix style, otherwise pnpm install will fail in subspace case\n            resolvedVersion = Path.convertToSlashes(resolvedVersion);\n            const specifier: string = importer.specifiers[name];\n            if (specifier !== resolvedVersion && !isDevDepFallThrough && !isOptional) {\n              return true;\n            }\n          } else {\n            if (typeof specifierFromLockfile === 'string') {\n              throw new Error(\n                `The PNPM lockfile is in an unexpected format. The \"${name}\" package is specified as ` +\n                  `\"${specifierFromLockfile}\" instead of an object.`\n              );\n            } else {\n              // TODO: Emit an error message when someone tries to override a version of something in one of their\n              // local repo packages.\n              let resolvedVersion: string = this.overrides.get(name) ?? version;\n              // convert path in posix style, otherwise pnpm install will fail in subspace case\n              resolvedVersion = Path.convertToSlashes(resolvedVersion);\n              if (specifierFromLockfile.specifier !== resolvedVersion && !isDevDepFallThrough && !isOptional) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      for (const { name, injected } of dependencyMetaList) {\n        if (importer.dependenciesMeta?.[name]?.injected === injected) {\n          importerDependenciesMeta.delete(name);\n        }\n      }\n\n      // Finally, validate that all values in the importer are also present in the dependency list.\n      if (\n        importerOptionalDependencies.size > 0 ||\n        importerDependencies.size > 0 ||\n        importerDevDependencies.size > 0 ||\n        importerDependenciesMeta.size > 0\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _getIntegrityForPackage(specifier: string, optional: boolean): Map<string, string> {\n    const integrities: Map<string, Map<string, string>> = this._integrities;\n\n    let integrityMap: Map<string, string> | undefined = integrities.get(specifier);\n    if (integrityMap) {\n      return integrityMap;\n    }\n\n    integrityMap = new Map();\n    integrities.set(specifier, integrityMap);\n\n    const shrinkwrapEntry: IPnpmShrinkwrapDependencyYaml | undefined = this.packages.get(specifier);\n    if (!shrinkwrapEntry) {\n      if (!optional) {\n        // This algorithm heeds to be robust against missing shrinkwrap entries, so we can't just throw\n        // Instead set it to a value which will not match any valid shrinkwrap record\n        integrityMap.set(specifier, 'Missing shrinkwrap entry!');\n      }\n\n      // Indicate an empty entry\n      return integrityMap;\n    }\n\n    let selfIntegrity: string | undefined = shrinkwrapEntry.resolution?.integrity;\n    if (!selfIntegrity) {\n      // git dependency specifiers do not have an integrity entry. Instead, they specify the tarball field.\n      // So instead, we will hash the contents of the dependency entry and use that as the integrity hash.\n      // Ex:\n      // github.com/chfritz/node-xmlrpc/948db2fbd0260e5d56ed5ba58df0f5b6599bbe38:\n      //   ...\n      //   resolution:\n      //     tarball: 'https://codeload.github.com/chfritz/node-xmlrpc/tar.gz/948db2fbd0260e5d56ed5ba58df0f5b6599bbe38'\n      const sha256Digest: string = crypto\n        .createHash('sha256')\n        .update(JSON.stringify(shrinkwrapEntry))\n        .digest('base64');\n      selfIntegrity = `${specifier}:${sha256Digest}:`;\n    }\n\n    integrityMap.set(specifier, selfIntegrity);\n    const { dependencies, optionalDependencies } = shrinkwrapEntry;\n\n    if (dependencies) {\n      this._addIntegrities(integrityMap, dependencies, false);\n    }\n\n    if (optionalDependencies) {\n      this._addIntegrities(integrityMap, optionalDependencies, true);\n    }\n\n    return integrityMap;\n  }\n\n  private _addIntegrities(\n    integrityMap: Map<string, string>,\n    collection: Record<string, IPnpmVersionSpecifier>,\n    optional: boolean,\n    filter?: (name: string, version: IPnpmVersionSpecifier) => boolean\n  ): void {\n    for (const [name, version] of Object.entries(collection)) {\n      if (filter && !filter(name, version)) {\n        continue;\n      }\n\n      const packageId: string = this._getPackageId(name, version);\n      if (integrityMap.has(packageId)) {\n        // The entry could already have been added as a nested dependency\n        continue;\n      }\n\n      const contribution: Map<string, string> = this._getIntegrityForPackage(packageId, optional);\n      for (const [dep, integrity] of contribution) {\n        integrityMap.set(dep, integrity);\n      }\n    }\n  }\n\n  /**\n   * Gets the package description for a tempProject from the shrinkwrap file.\n   */\n  private _getPackageDescription(\n    tempProjectDependencyKey: string\n  ): IPnpmShrinkwrapDependencyYaml | undefined {\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined =\n      this.packages.get(tempProjectDependencyKey);\n\n    return packageDescription && packageDescription.dependencies ? packageDescription : undefined;\n  }\n\n  private _getPackageId(name: string, versionSpecifier: IPnpmVersionSpecifier): string {\n    const version: string = normalizePnpmVersionSpecifier(versionSpecifier);\n    if (this.shrinkwrapFileMajorVersion >= ShrinkwrapFileMajorVersion.V9) {\n      return PnpmShrinkwrapFile.getLockfileV9PackageId(name, version);\n    } else if (this.shrinkwrapFileMajorVersion >= ShrinkwrapFileMajorVersion.V6) {\n      if (version.startsWith('@github')) {\n        // This is a github repo reference\n        return version;\n      } else {\n        return version.startsWith('/') ? version : `/${name}@${version}`;\n      }\n    } else {\n      // Version can sometimes be in the form of a path that's already in the /name/version format.\n      return version.indexOf('/') !== -1 ? version : `/${name}/${version}`;\n    }\n  }\n\n  private _parsePnpmDependencyKey(\n    dependencyName: string,\n    pnpmDependencyKey: IPnpmVersionSpecifier\n  ): DependencySpecifier | undefined {\n    if (pnpmDependencyKey) {\n      const result: DependencySpecifier | undefined =\n        this.shrinkwrapFileMajorVersion >= ShrinkwrapFileMajorVersion.V9\n          ? parsePnpm9DependencyKey(dependencyName, pnpmDependencyKey)\n          : parsePnpmDependencyKey(dependencyName, pnpmDependencyKey);\n\n      if (!result) {\n        throw new Error(\n          `Cannot parse PNPM shrinkwrap version specifier: \"${pnpmDependencyKey}\"` +\n            ` for \"${dependencyName}\"`\n        );\n      }\n\n      return result;\n    } else {\n      return undefined;\n    }\n  }\n\n  private _serializeInternal(omitImporters: boolean = false): string {\n    // Ensure that if any of the top-level properties are provided but empty are removed. We populate the object\n    // properties when we read the shrinkwrap but PNPM does not set these top-level properties unless they are present.\n    const shrinkwrapToSerialize: { [key: string]: unknown } = {};\n    for (const [key, value] of Object.entries(this._shrinkwrapJson)) {\n      if (omitImporters && key === 'importers') {\n        continue;\n      }\n\n      if (!value || typeof value !== 'object' || Object.keys(value).length > 0) {\n        shrinkwrapToSerialize[key] = value;\n      }\n    }\n\n    return yamlModule.safeDump(shrinkwrapToSerialize, PNPM_SHRINKWRAP_YAML_FORMAT);\n  }\n}\n"]}