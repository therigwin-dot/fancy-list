{"version":3,"file":"PnpmLinkManager.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmLinkManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport uriEncode from 'strict-uri-encode';\nimport pnpmLinkBins from '@pnpm/link-bins';\nimport * as semver from 'semver';\n\nimport {\n  AlreadyReportedError,\n  FileSystem,\n  FileConstants,\n  InternalError,\n  Path\n} from '@rushstack/node-core-library';\nimport { Colorize } from '@rushstack/terminal';\n\nimport { BaseLinkManager } from '../base/BaseLinkManager';\nimport { BasePackage } from '../base/BasePackage';\nimport { RushConstants } from '../RushConstants';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport {\n  PnpmShrinkwrapFile,\n  type IPnpmShrinkwrapDependencyYaml,\n  type IPnpmVersionSpecifier,\n  normalizePnpmVersionSpecifier\n} from './PnpmShrinkwrapFile';\n\n// special flag for debugging, will print extra diagnostic information,\n// but comes with performance cost\nconst DEBUG: boolean = false;\n\nexport class PnpmLinkManager extends BaseLinkManager {\n  private readonly _pnpmVersion: semver.SemVer = new semver.SemVer(\n    this._rushConfiguration.packageManagerToolVersion\n  );\n\n  /**\n   * @override\n   */\n  public async createSymlinksForProjectsAsync(force: boolean): Promise<void> {\n    const useWorkspaces: boolean =\n      this._rushConfiguration.pnpmOptions && this._rushConfiguration.pnpmOptions.useWorkspaces;\n    if (useWorkspaces) {\n      // eslint-disable-next-line no-console\n      console.log(\n        Colorize.red(\n          'Linking is not supported when using workspaces. Run \"rush install\" or \"rush update\" ' +\n            'to restore project node_modules folders.'\n        )\n      );\n      throw new AlreadyReportedError();\n    }\n\n    await super.createSymlinksForProjectsAsync(force);\n  }\n\n  protected async _linkProjectsAsync(): Promise<void> {\n    if (this._rushConfiguration.projects.length > 0) {\n      // Use shrinkwrap from temp as the committed shrinkwrap may not always be up to date\n      // See https://github.com/microsoft/rushstack/issues/1273#issuecomment-492779995\n      const pnpmShrinkwrapFile: PnpmShrinkwrapFile | undefined = PnpmShrinkwrapFile.loadFromFile(\n        this._rushConfiguration.defaultSubspace.getTempShrinkwrapFilename()\n      );\n\n      if (!pnpmShrinkwrapFile) {\n        throw new InternalError(\n          `Cannot load shrinkwrap at \"${this._rushConfiguration.defaultSubspace.getTempShrinkwrapFilename()}\"`\n        );\n      }\n\n      for (const rushProject of this._rushConfiguration.projects) {\n        await this._linkProjectAsync(rushProject, pnpmShrinkwrapFile);\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\n        Colorize.yellow(\n          `\\nWarning: Nothing to do. Please edit ${RushConstants.rushJsonFilename} and add at least one project` +\n            ' to the \"projects\" section.\\n'\n        )\n      );\n    }\n  }\n\n  /**\n   * This is called once for each local project from Rush.json.\n   * @param project             The local project that we will create symlinks for\n   * @param rushLinkJson        The common/temp/rush-link.json output file\n   */\n  private async _linkProjectAsync(\n    project: RushConfigurationProject,\n    pnpmShrinkwrapFile: PnpmShrinkwrapFile\n  ): Promise<void> {\n    // eslint-disable-next-line no-console\n    console.log(`\\nLINKING: ${project.packageName}`);\n\n    // first, read the temp package.json information\n    // Example: \"project1\"\n    const unscopedTempProjectName: string = this._rushConfiguration.packageNameParser.getUnscopedName(\n      project.tempProjectName\n    );\n\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\n    const extractedFolder: string = path.join(\n      this._rushConfiguration.commonTempFolder,\n      RushConstants.rushTempProjectsFolderName,\n      unscopedTempProjectName\n    );\n\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\\package.json\"\n    const packageJsonFilename: string = path.join(extractedFolder, FileConstants.PackageJson);\n\n    // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\\project1\"\n    const installFolderName: string = path.join(\n      this._rushConfiguration.commonTempFolder,\n      RushConstants.nodeModulesFolderName,\n      RushConstants.rushTempNpmScope,\n      unscopedTempProjectName\n    );\n\n    const commonPackage: BasePackage = BasePackage.createVirtualTempPackage(\n      packageJsonFilename,\n      installFolderName\n    );\n\n    const localPackage: BasePackage = BasePackage.createLinkedPackage(\n      project.packageName,\n      commonPackage.version,\n      project.projectFolder\n    );\n\n    // now that we have the temp package.json, we can go ahead and link up all the direct dependencies\n\n    // first, start with the rush dependencies, we just need to link to the project folder\n    for (const dependencyName of Object.keys(commonPackage.packageJson!.rushDependencies || {})) {\n      const matchedRushPackage: RushConfigurationProject | undefined =\n        this._rushConfiguration.getProjectByName(dependencyName);\n\n      if (matchedRushPackage) {\n        // We found a suitable match, so place a new local package that\n        // symlinks to the Rush project\n        const matchedVersion: string = matchedRushPackage.packageJsonEditor.version;\n\n        // e.g. \"C:\\my-repo\\project-a\\node_modules\\project-b\" if project-b is a rush dependency of project-a\n        const newLocalFolderPath: string = path.join(localPackage.folderPath, 'node_modules', dependencyName);\n\n        const newLocalPackage: BasePackage = BasePackage.createLinkedPackage(\n          dependencyName,\n          matchedVersion,\n          newLocalFolderPath\n        );\n\n        newLocalPackage.symlinkTargetFolderPath = matchedRushPackage.projectFolder;\n        localPackage.children.push(newLocalPackage);\n      } else {\n        throw new InternalError(\n          `Cannot find dependency \"${dependencyName}\" for \"${project.packageName}\" in the Rush configuration`\n        );\n      }\n    }\n\n    // Iterate through all the regular dependencies\n\n    // With npm, it's possible for two different projects to have dependencies on\n    // the same version of the same library, but end up with different implementations\n    // of that library, if the library is installed twice and with different secondary\n    // dependencies.The NpmLinkManager recursively links dependency folders to try to\n    // honor this. Since PNPM always uses the same physical folder to represent a given\n    // version of a library, we only need to link directly to the folder that PNPM has chosen,\n    // and it will have a consistent set of secondary dependencies.\n\n    // each of these dependencies should be linked in a special folder that pnpm\n    // creates for the installed version of each .TGZ package, all we need to do\n    // is re-use that symlink in order to get linked to whatever PNPM thought was\n    // appropriate. This folder is usually something like:\n    // C:\\{uri-encoded-path-to-tgz}\\node_modules\\{package-name}\n\n    // e.g.:\n    //   file:projects/bentleyjs-core.tgz\n    //   file:projects/build-tools.tgz_dc21d88642e18a947127a751e00b020a\n    //   file:projects/imodel-from-geojson.tgz_request@2.88.0\n    const tempProjectDependencyKey: string | undefined = pnpmShrinkwrapFile.getTempProjectDependencyKey(\n      project.tempProjectName\n    );\n\n    if (!tempProjectDependencyKey) {\n      throw new Error(`Cannot get dependency key for temp project: ${project.tempProjectName}`);\n    }\n    // e.g.: file:projects/project-name.tgz\n    const tarballEntry: string | undefined = pnpmShrinkwrapFile.getTarballPath(tempProjectDependencyKey);\n\n    if (!tarballEntry) {\n      throw new InternalError(`Cannot find tarball path for \"${project.tempProjectName}\" in shrinkwrap.`);\n    }\n\n    // e.g.: projects\\api-documenter.tgz\n    const relativePathToTgzFile: string | undefined = tarballEntry.slice(`file:`.length);\n\n    // e.g.: C:\\wbt\\common\\temp\\projects\\api-documenter.tgz\n    const absolutePathToTgzFile: string = path.resolve(\n      this._rushConfiguration.commonTempFolder,\n      relativePathToTgzFile\n    );\n\n    // The folder name in `.local` is constructed as:\n    //   UriEncode(absolutePathToTgzFile) + _suffix\n    //\n    // Note that _suffix is not encoded. The tarball attribute of the package 'file:projects/project-name.tgz_suffix'\n    // holds the tarball path 'file:projects/project-name.tgz', which can be used for the constructing the folder name.\n    //\n    // '_suffix' is extracted by stripping the tarball path from top level dependency value.\n    // tarball path = 'file:projects/project-name.tgz'\n    // top level dependency = 'file:projects/project-name.tgz_suffix'\n\n    // e.g.:\n    //   '' [empty string]\n    //   _@types+node@14.18.36\n    //   _jsdom@11.12.0\n    //   _2a665c89609864b4e75bc5365d7f8f56\n    //   (@types/node@14.18.36)\n    const folderNameSuffix: string =\n      tarballEntry && tarballEntry.length < tempProjectDependencyKey.length\n        ? tempProjectDependencyKey.slice(tarballEntry.length)\n        : '';\n\n    // e.g.: C:\\wbt\\common\\temp\\node_modules\\.local\\C%3A%2Fwbt%2Fcommon%2Ftemp%2Fprojects%2Fapi-documenter.tgz\\node_modules\n    const pathToLocalInstallation: string = await this._getPathToLocalInstallationAsync(\n      tarballEntry,\n      absolutePathToTgzFile,\n      folderNameSuffix,\n      tempProjectDependencyKey\n    );\n\n    const parentShrinkwrapEntry: IPnpmShrinkwrapDependencyYaml | undefined =\n      pnpmShrinkwrapFile.getShrinkwrapEntryFromTempProjectDependencyKey(tempProjectDependencyKey);\n    if (!parentShrinkwrapEntry) {\n      throw new InternalError(\n        `Cannot find shrinkwrap entry using dependency key for temp project: ${project.tempProjectName}`\n      );\n    }\n\n    for (const dependencyName of Object.keys(commonPackage.packageJson!.dependencies || {})) {\n      const newLocalPackage: BasePackage = this._createLocalPackageForDependency(\n        project,\n        parentShrinkwrapEntry,\n        localPackage,\n        pathToLocalInstallation,\n        dependencyName\n      )!;\n      localPackage.addChild(newLocalPackage);\n    }\n\n    // TODO: Rush does not currently handle optional dependencies of projects. This should be uncommented when\n    // support is added\n    // for (const dependencyName of Object.keys(commonPackage.packageJson!.optionalDependencies || {})) {\n    //   const newLocalPackage: BasePackage | undefined = this._createLocalPackageForDependency(\n    //     project,\n    //     parentShrinkwrapEntry,\n    //     localPackage,\n    //     pathToLocalInstallation,\n    //     dependencyName,\n    //     true); // isOptional\n    //   if (newLocalPackage) {\n    //     localPackage.addChild(newLocalPackage);\n    //   }\n    // }\n\n    if (DEBUG) {\n      localPackage.printTree();\n    }\n\n    await pnpmShrinkwrapFile.getProjectShrinkwrap(project)!.updateProjectShrinkwrapAsync();\n\n    PnpmLinkManager._createSymlinksForTopLevelProject(localPackage);\n\n    // Also symlink the \".bin\" folder\n    const projectFolder: string = path.join(localPackage.folderPath, 'node_modules');\n    const projectBinFolder: string = path.join(localPackage.folderPath, 'node_modules', '.bin');\n\n    await pnpmLinkBins(projectFolder, projectBinFolder, {\n      warn: (msg: string) => {\n        // eslint-disable-next-line no-console\n        console.warn(Colorize.yellow(msg));\n      }\n    });\n  }\n\n  private async _getPathToLocalInstallationAsync(\n    tarballEntry: string,\n    absolutePathToTgzFile: string,\n    folderSuffix: string,\n    tempProjectDependencyKey: string\n  ): Promise<string> {\n    if (this._pnpmVersion.major === 6) {\n      // PNPM 6 changed formatting to replace all ':' and '/' chars with '+'. Additionally, folder names > 120\n      // are trimmed and hashed. NOTE: PNPM internally uses fs.realpath.native, which will cause additional\n      // issues in environments that do not support long paths.\n      // See https://github.com/pnpm/pnpm/releases/tag/v6.0.0\n      // e.g.:\n      //   C++dev+imodeljs+imodeljs+common+temp+projects+presentation-integration-tests.tgz_jsdom@11.12.0\n      //   C++dev+imodeljs+imodeljs+common+temp+projects+presentation-integrat_089eb799caf0f998ab34e4e1e9254956\n      const specialCharRegex: RegExp = /\\/|:/g;\n      const escapedLocalPath: string = Path.convertToSlashes(absolutePathToTgzFile).replace(\n        specialCharRegex,\n        '+'\n      );\n      let folderName: string = `local+${escapedLocalPath}${folderSuffix}`;\n      if (folderName.length > 120) {\n        folderName = `${folderName.substring(0, 50)}_${crypto\n          .createHash('md5')\n          .update(folderName)\n          .digest('hex')}`;\n      }\n\n      return path.join(\n        this._rushConfiguration.commonTempFolder,\n        RushConstants.nodeModulesFolderName,\n        '.pnpm',\n        folderName,\n        RushConstants.nodeModulesFolderName\n      );\n    } else if (this._pnpmVersion.major >= 9) {\n      const { depPathToFilename } = await import('@pnpm/dependency-path');\n\n      // project@file+projects+presentation-integration-tests.tgz_jsdom@11.12.0\n      // The second parameter is max length of virtual store dir, default is 120 https://pnpm.io/next/npmrc#virtual-store-dir-max-length\n      // TODO Read virtual-store-dir-max-length from .npmrc\n      const folderName: string = depPathToFilename(tempProjectDependencyKey, 120);\n      return path.join(\n        this._rushConfiguration.commonTempFolder,\n        RushConstants.nodeModulesFolderName,\n        '.pnpm',\n        folderName,\n        RushConstants.nodeModulesFolderName\n      );\n    } else if (this._pnpmVersion.major >= 8) {\n      const { depPathToFilename } = await import('@pnpm/dependency-path-lockfile-pre-v9');\n      // PNPM 8 changed the local path format again and the hashing algorithm, and\n      // is now using the scoped '@pnpm/dependency-path' package\n      // See https://github.com/pnpm/pnpm/releases/tag/v8.0.0\n      // e.g.:\n      //   file+projects+presentation-integration-tests.tgz_jsdom@11.12.0\n      const folderName: string = depPathToFilename(`${tarballEntry}${folderSuffix}`);\n      return path.join(\n        this._rushConfiguration.commonTempFolder,\n        RushConstants.nodeModulesFolderName,\n        '.pnpm',\n        folderName,\n        RushConstants.nodeModulesFolderName\n      );\n    } else if (this._pnpmVersion.major >= 7) {\n      const { depPathToFilename } = await import('dependency-path');\n      // PNPM 7 changed the local path format again and the hashing algorithm\n      // See https://github.com/pnpm/pnpm/releases/tag/v7.0.0\n      // e.g.:\n      //   file+projects+presentation-integration-tests.tgz_jsdom@11.12.0\n      const escapedLocalPath: string = depPathToFilename(tarballEntry);\n      const folderName: string = `${escapedLocalPath}${folderSuffix}`;\n      return path.join(\n        this._rushConfiguration.commonTempFolder,\n        RushConstants.nodeModulesFolderName,\n        '.pnpm',\n        folderName,\n        RushConstants.nodeModulesFolderName\n      );\n    } else {\n      // e.g.:\n      //   C%3A%2Fwbt%2Fcommon%2Ftemp%2Fprojects%2Fapi-documenter.tgz\n      //   C%3A%2Fdev%2Fimodeljs%2Fimodeljs%2Fcommon%2Ftemp%2Fprojects%2Fpresentation-integration-tests.tgz_jsdom@11.12.0\n      //   C%3A%2Fdev%2Fimodeljs%2Fimodeljs%2Fcommon%2Ftemp%2Fprojects%2Fbuild-tools.tgz_2a665c89609864b4e75bc5365d7f8f56\n      const folderNameInLocalInstallationRoot: string =\n        uriEncode(Path.convertToSlashes(absolutePathToTgzFile)) + folderSuffix;\n\n      // See https://github.com/pnpm/pnpm/releases/tag/v4.0.0\n      return path.join(\n        this._rushConfiguration.commonTempFolder,\n        RushConstants.nodeModulesFolderName,\n        '.pnpm',\n        'local',\n        folderNameInLocalInstallationRoot,\n        RushConstants.nodeModulesFolderName\n      );\n    }\n  }\n  private _createLocalPackageForDependency(\n    project: RushConfigurationProject,\n    parentShrinkwrapEntry: IPnpmShrinkwrapDependencyYaml,\n    localPackage: BasePackage,\n    pathToLocalInstallation: string,\n    dependencyName: string,\n    isOptional: boolean = false\n  ): BasePackage | undefined {\n    // the dependency we are looking for should have already created a symlink here\n\n    // FYI dependencyName might contain an NPM scope, here it gets converted into a filesystem folder name\n    // e.g. if the dependency is supi:\n    // \"C:\\wbt\\common\\temp\\node_modules\\.local\\C%3A%2Fwbt%2Fcommon%2Ftemp%2Fprojects%2Fapi-documenter.tgz\\node_modules\\supi\"\n    const dependencyLocalInstallationSymlink: string = path.join(pathToLocalInstallation, dependencyName);\n\n    if (!FileSystem.exists(dependencyLocalInstallationSymlink)) {\n      // if this occurs, it is a bug in Rush algorithm or unexpected PNPM behavior\n      throw new InternalError(\n        `Cannot find installed dependency \"${dependencyName}\" in \"${pathToLocalInstallation}\"`\n      );\n    }\n\n    if (!FileSystem.getLinkStatistics(dependencyLocalInstallationSymlink).isSymbolicLink()) {\n      // if this occurs, it is a bug in Rush algorithm or unexpected PNPM behavior\n      throw new InternalError(\n        `Dependency \"${dependencyName}\" is not a symlink in \"${pathToLocalInstallation}`\n      );\n    }\n\n    // read the version number from the shrinkwrap entry and return if no version is specified\n    // and the dependency is optional\n    const versionSpecifier: IPnpmVersionSpecifier | undefined = isOptional\n      ? (parentShrinkwrapEntry.optionalDependencies || {})[dependencyName]\n      : (parentShrinkwrapEntry.dependencies || {})[dependencyName];\n    if (!versionSpecifier) {\n      if (!isOptional) {\n        throw new InternalError(\n          `Cannot find shrinkwrap entry dependency \"${dependencyName}\" for temp project: ` +\n            `${project.tempProjectName}`\n        );\n      }\n      return;\n    }\n\n    const newLocalFolderPath: string = path.join(localPackage.folderPath, 'node_modules', dependencyName);\n    const version: string = normalizePnpmVersionSpecifier(versionSpecifier);\n    const newLocalPackage: BasePackage = BasePackage.createLinkedPackage(\n      dependencyName,\n      version,\n      newLocalFolderPath\n    );\n\n    // The dependencyLocalInstallationSymlink is just a symlink to another folder. To reduce the number of filesystem\n    // reads that are needed, we will link to where that symlink pointed, rather than linking to a link.\n    newLocalPackage.symlinkTargetFolderPath = FileSystem.getRealPath(dependencyLocalInstallationSymlink);\n    return newLocalPackage;\n  }\n}\n"]}