{"version":3,"file":"YarnShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/yarn/YarnShrinkwrapFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\nimport {\n  FileSystem,\n  type IParsedPackageNameOrError,\n  InternalError,\n  Import\n} from '@rushstack/node-core-library';\nimport { RushConstants } from '../RushConstants';\nimport type { DependencySpecifier } from '../DependencySpecifier';\nimport { PackageNameParsers } from '../../api/PackageNameParsers';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport type { BaseProjectShrinkwrapFile } from '../base/BaseProjectShrinkwrapFile';\nimport type { Subspace } from '../../api/Subspace';\n\n/**\n * @yarnpkg/lockfile doesn't have types\n */\n// eslint-disable-next-line\ndeclare module YarnPkgLockfileTypes {\n  export class ParseResult {\n    public object: IYarnShrinkwrapJson;\n  }\n\n  export function parse(shrinkwrapJson: string): ParseResult;\n\n  export function stringify(shrinkwrap: IYarnShrinkwrapJson): string;\n}\nconst lockfileModule: typeof YarnPkgLockfileTypes = Import.lazy('@yarnpkg/lockfile', require);\n\n/**\n * Used with YarnShrinkwrapFile._encodePackageNameAndSemVer() and _decodePackageNameAndSemVer().\n */\ninterface IPackageNameAndSemVer {\n  packageName: string;\n  semVerRange: string;\n}\n\n/**\n * Part of IYarnShrinkwrapJson\n */\ninterface IYarnShrinkwrapEntry {\n  /**\n   * The specific version that was chosen for this entry (i.e. package name and SemVer range)/\n   *\n   */\n  version: string;\n\n  /**\n   * The source (e.g. registry tarball URL) of the package that was installed\n   * with the integrity hash as a suffix.\n   *\n   * Examples:\n   * https://registry.yarnpkg.com/@pnpm/types/-/types-1.7.0.tgz#9d66a8bed3fabcd80f288b3e7884b7418b05b5a9\n   * file:./projects/api-documenter.tgz#d95f9779aa45df3ef1bbd95dec324793540765ba\n   */\n  resolved: string;\n\n  /**\n   * Records the original (unsolved) \"dependencies\" from the package.json.\n   */\n  dependencies?: { [dependency: string]: string };\n\n  /**\n   * Records the original (unsolved) \"optionalDependencies\" from the package.json.\n   *\n   * NOTE: Interestingly \"peerDependencies\" are apparently not tracked by the shrinkwrap file.\n   * The \"devDependencies\" are not tracked either, because they are always indirect dependencies\n   * for the installation.\n   */\n  optionalDependencies?: { [dependency: string]: string };\n}\n\n/**\n * Used by YarnShrinkwrapFile to interpret the `@yarnpkg/lockfile` data structure.\n */\ninterface IYarnShrinkwrapJson {\n  /**\n   * Example keys:\n   * `js-tokens@^3.0.0 || ^4.0.0`\n   * `@rush-temp/api-extractor-test-03@file:./projects/api-extractor-test-03.tgz`\n   *\n   * The value records how the SemVer range was solved.\n   */\n  [packageNameAndSemVer: string]: IYarnShrinkwrapEntry;\n}\n\n/**\n * Support for consuming the \"yarn.lock\" file.\n *\n * Yarn refers to its shrinkwrap file as a \"lock file\", even though it has nothing to do\n * with file locking.  Apparently this was based on a convention of the Ruby bundler.\n * Since Rush has to work interchangeably with 3 different package managers, here we refer\n * generically to yarn.lock as a \"shrinkwrap file\".\n *\n * If Rush's Yarn support gains popularity, we will try to improve the wording of\n * logging messages to use terminology more consistent with Yarn's own documentation.\n */\nexport class YarnShrinkwrapFile extends BaseShrinkwrapFile {\n  public readonly isWorkspaceCompatible: boolean;\n\n  // Example inputs:\n  // \"js-tokens@^3.0.0 || ^4.0.0\"\n  // \"@rush-temp/api-extractor-test-03@file:./projects/api-extractor-test-03.tgz\"\n  private static _packageNameAndSemVerRegExp: RegExp = /^(@?[^@\\s]+)(?:@(.*))?$/;\n\n  private _shrinkwrapJson: IYarnShrinkwrapJson;\n  private _tempProjectNames: string[];\n\n  private constructor(shrinkwrapJson: IYarnShrinkwrapJson) {\n    super();\n    this._shrinkwrapJson = shrinkwrapJson;\n    this._tempProjectNames = [];\n\n    const seenEntries: Set<string> = new Set();\n\n    for (const key of Object.keys(this._shrinkwrapJson)) {\n      // Example key:\n      const packageNameAndSemVer: IPackageNameAndSemVer = YarnShrinkwrapFile._decodePackageNameAndSemVer(key);\n\n      // If it starts with @rush-temp, then include it:\n      if (\n        PackageNameParsers.permissive.getScope(packageNameAndSemVer.packageName) ===\n        RushConstants.rushTempNpmScope\n      ) {\n        if (!/^file:/i.test(packageNameAndSemVer.semVerRange)) {\n          // Sanity check to make sure this is a real package.\n          // (Nobody should ever have an actual dependency on an \"@rush-temp/\" package.\n          throw new Error(\n            'Unexpected package/semver expression found in the Yarn shrinkwrap file (yarn.lock): ' +\n              JSON.stringify(key)\n          );\n        }\n\n        if (!seenEntries.add(packageNameAndSemVer.packageName)) {\n          // Sanity check -- this should never happen\n          throw new Error(\n            'Duplicate @rush-temp package found in the Yarn shrinkwrap file (yarn.lock): ' +\n              JSON.stringify(key)\n          );\n        }\n\n        this._tempProjectNames.push(packageNameAndSemVer.packageName);\n\n        const entry: IYarnShrinkwrapEntry = this._shrinkwrapJson[key];\n\n        // Yarn fails installation if the integrity hash does not match a \"file://\" reference to a tarball.\n        // This is incorrect:  Normally a mismatched integrity hash does indicate a corrupted download,\n        // since an NPM registry normally guarantees that a specific version number cannot be republished\n        // with different content.  But this is NOT true for a \"file://\" reference, and there are valid\n        // reasons why someone would update the file.  (PNPM handles this correctly, by simply reinstalling\n        // the tarball if its hash has changed.)\n        //\n        // As a workaround, we can simply remove the hashes from the shrinkwrap file.  We will convert this:\n        //   \"file:./projects/my-project.tgz#80cefe05fd715e65219d1ed481209dc4023408aa\"\n        // ..to this:\n        //   \"file:./projects/my-project.tgz\"\n        const indexOfHash: number = entry.resolved.indexOf('#');\n        if (indexOfHash >= 0) {\n          entry.resolved = entry.resolved.substring(0, indexOfHash);\n        }\n      }\n    }\n\n    this._tempProjectNames.sort(); // make the result deterministic\n\n    // We don't support Yarn workspaces yet\n    this.isWorkspaceCompatible = false;\n  }\n\n  public static loadFromFile(shrinkwrapFilename: string): YarnShrinkwrapFile | undefined {\n    try {\n      const shrinkwrapContent: string = FileSystem.readFile(shrinkwrapFilename);\n      return YarnShrinkwrapFile.loadFromString(shrinkwrapContent);\n    } catch (error) {\n      if (FileSystem.isNotExistError(error as Error)) {\n        return undefined; // file does not exist\n      }\n      throw new Error(`Error reading \"${shrinkwrapFilename}\":\\n  ${(error as Error).message}`);\n    }\n  }\n\n  public static loadFromString(shrinkwrapContent: string): YarnShrinkwrapFile {\n    const shrinkwrapJson: YarnPkgLockfileTypes.ParseResult = lockfileModule.parse(shrinkwrapContent);\n    return new YarnShrinkwrapFile(shrinkwrapJson.object);\n  }\n\n  /**\n   * The `@yarnpkg/lockfile` API only partially deserializes its data, and expects the caller\n   * to parse the yarn.lock lookup keys (sometimes called a \"pattern\").\n   *\n   * Example input:  \"js-tokens@^3.0.0 || ^4.0.0\"\n   * Example output: { packageName: \"js-tokens\", semVerRange: \"^3.0.0 || ^4.0.0\" }\n   */\n  private static _decodePackageNameAndSemVer(packageNameAndSemVer: string): IPackageNameAndSemVer {\n    const result: RegExpExecArray | null =\n      YarnShrinkwrapFile._packageNameAndSemVerRegExp.exec(packageNameAndSemVer);\n    if (!result) {\n      // Sanity check -- this should never happen\n      throw new Error(\n        'Unable to parse package/semver expression in the Yarn shrinkwrap file (yarn.lock): ' +\n          JSON.stringify(packageNameAndSemVer)\n      );\n    }\n\n    const packageName: string = result[1] || '';\n    const parsedPackageName: IParsedPackageNameOrError = PackageNameParsers.permissive.tryParse(packageName);\n    if (parsedPackageName.error) {\n      // Sanity check -- this should never happen\n      throw new Error(\n        'Invalid package name the Yarn shrinkwrap file (yarn.lock): ' +\n          JSON.stringify(packageNameAndSemVer) +\n          '\\n' +\n          parsedPackageName.error\n      );\n    }\n\n    return {\n      packageName,\n      semVerRange: result[2] || ''\n    };\n  }\n\n  /**\n   * This is the inverse of _decodePackageNameAndSemVer():\n   * Given an IPackageNameAndSemVer object, recreate the yarn.lock lookup key\n   * (sometimes called a \"pattern\").\n   */\n  private static _encodePackageNameAndSemVer(packageNameAndSemVer: IPackageNameAndSemVer): string {\n    return packageNameAndSemVer.packageName + '@' + packageNameAndSemVer.semVerRange;\n  }\n\n  /** @override */\n  public getTempProjectNames(): ReadonlyArray<string> {\n    return this._tempProjectNames;\n  }\n\n  /** @override */\n  public hasCompatibleTopLevelDependency(dependencySpecifier: DependencySpecifier): boolean {\n    // It seems like we should normalize the key somehow, but Yarn apparently does not\n    // do any normalization.\n    const key: string = YarnShrinkwrapFile._encodePackageNameAndSemVer({\n      packageName: dependencySpecifier.packageName,\n      semVerRange: dependencySpecifier.versionSpecifier\n    });\n\n    // Check whether this exact key appears in the shrinkwrap file\n    return Object.hasOwnProperty.call(this._shrinkwrapJson, key);\n  }\n\n  /** @override */\n  public tryEnsureCompatibleDependency(\n    dependencySpecifier: DependencySpecifier,\n    tempProjectName: string\n  ): boolean {\n    return this.hasCompatibleTopLevelDependency(dependencySpecifier);\n  }\n\n  /** @override */\n  protected serialize(): string {\n    return lockfileModule.stringify(this._shrinkwrapJson);\n  }\n\n  /** @override */\n  protected getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined {\n    throw new InternalError('Not implemented');\n  }\n\n  /** @override */\n  protected tryEnsureDependencyVersion(\n    dependencySpecifier: DependencySpecifier,\n    tempProjectName: string\n  ): DependencySpecifier | undefined {\n    throw new InternalError('Not implemented');\n  }\n\n  /** @override */\n  public getProjectShrinkwrap(\n    project: RushConfigurationProject\n  ): BaseProjectShrinkwrapFile<YarnShrinkwrapFile> | undefined {\n    return undefined;\n  }\n\n  /** @override */\n  public async isWorkspaceProjectModifiedAsync(\n    project: RushConfigurationProject,\n    subspace: Subspace\n  ): Promise<boolean> {\n    throw new InternalError('Not implemented');\n  }\n}\n"]}