{"version":3,"file":"GitEmailPolicy.js","sourceRoot":"","sources":["../../../src/logic/policy/GitEmailPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AlreadyReportedError } from '@rushstack/node-core-library';\nimport { Colorize } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport { Utilities } from '../../utilities/Utilities';\nimport { Git } from '../Git';\nimport { RushConstants } from '../RushConstants';\nimport type { IPolicyValidatorOptions } from './PolicyValidator';\n\nexport async function validateAsync(\n  rushConfiguration: RushConfiguration,\n  options: IPolicyValidatorOptions\n): Promise<void> {\n  const git: Git = new Git(rushConfiguration);\n\n  if (!git.isGitPresent()) {\n    // If Git isn't installed, or this Rush project is not under a Git working folder,\n    // then we don't care about the Git email\n    // eslint-disable-next-line no-console\n    console.log(\n      Colorize.cyan('Ignoring Git validation because the Git binary was not found in the shell path.') + '\\n'\n    );\n    return;\n  }\n\n  if (!git.isPathUnderGitWorkingTree()) {\n    // If Git isn't installed, or this Rush project is not under a Git working folder,\n    // then we don't care about the Git email\n    // eslint-disable-next-line no-console\n    console.log(Colorize.cyan('Ignoring Git validation because this is not a Git working folder.') + '\\n');\n    return;\n  }\n\n  let userEmail: string | undefined = await git.tryGetGitEmailAsync();\n  // If there isn't a Git policy, then we don't care whether the person configured\n  // a Git email address at all.\n  if (rushConfiguration.gitAllowedEmailRegExps.length === 0) {\n    if (userEmail === undefined) {\n      return;\n    }\n\n    // Otherwise, if an email *is* configured at all, then we still perform the basic\n    // sanity checks (e.g. no spaces in the address).\n  }\n\n  try {\n    userEmail = git.validateGitEmail(userEmail);\n\n    // sanity check; a valid email should not contain any whitespace\n    // if this fails, then we have another issue to report\n    if (!userEmail.match(/^\\S+$/g)) {\n      // eslint-disable-next-line no-console\n      console.log(\n        [\n          Colorize.red('Your Git email address is invalid: ' + JSON.stringify(userEmail)),\n          '',\n          `To configure your Git email address, try something like this:`,\n          '',\n          ...getEmailExampleLines(rushConfiguration),\n          ''\n        ].join('\\n')\n      );\n      throw new AlreadyReportedError();\n    }\n  } catch (e) {\n    if (e instanceof AlreadyReportedError) {\n      let errorMessage: string = 'Aborting, so you can go fix your settings.';\n      if (options.bypassPolicyAllowed) {\n        errorMessage += ` (Or use \"${RushConstants.bypassPolicyFlagLongName}\" to skip.)`;\n      }\n\n      // eslint-disable-next-line no-console\n      console.log(Colorize.red(errorMessage));\n      throw e;\n    } else {\n      throw e;\n    }\n  }\n\n  if (rushConfiguration.gitAllowedEmailRegExps.length === 0) {\n    // If there is no policy, then we're good\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log('Checking Git policy for this repository.\\n');\n\n  // If there is a policy, at least one of the RegExp's must match\n  for (const pattern of rushConfiguration.gitAllowedEmailRegExps) {\n    const regex: RegExp = new RegExp(`^${pattern}$`, 'i');\n    if (userEmail.match(regex)) {\n      return;\n    }\n  }\n\n  // Show the user's name as well.\n  // Ex. \"Example Name <name@example.com>\"\n  let fancyEmail: string = Colorize.cyan(userEmail);\n  try {\n    const userName: string = (\n      await Utilities.executeCommandAndCaptureOutputAsync(git.gitPath!, ['config', 'user.name'], '.')\n    ).trim();\n    if (userName) {\n      fancyEmail = `${userName} <${fancyEmail}>`;\n    }\n  } catch (e) {\n    // but if it fails, this isn't critical, so don't bother them about it\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(\n    [\n      'Hey there!  To keep things tidy, this repo asks you to submit your Git commits using an email like ' +\n        (rushConfiguration.gitAllowedEmailRegExps.length > 1 ? 'one of these patterns:' : 'this pattern:'),\n      '',\n      ...rushConfiguration.gitAllowedEmailRegExps.map((pattern) => '    ' + Colorize.cyan(pattern)),\n      '',\n      '...but yours is configured like this:',\n      '',\n      `    ${fancyEmail}`,\n      '',\n      'To fix it, you can use commands like this:',\n      '',\n      ...getEmailExampleLines(rushConfiguration),\n      ''\n    ].join('\\n')\n  );\n\n  let errorMessage: string = 'Aborting, so you can go fix your settings.';\n  if (options.bypassPolicyAllowed) {\n    errorMessage += ` (Or use \"${RushConstants.bypassPolicyFlagLongName}\" to skip.)`;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(Colorize.red(errorMessage));\n  throw new AlreadyReportedError();\n}\n\nexport function getEmailExampleLines(rushConfiguration: RushConfiguration): string[] {\n  return [\n    Colorize.cyan('    git config --local user.name \"Example Name\"'),\n    Colorize.cyan(\n      `    git config --local user.email \"${rushConfiguration.gitSampleEmail || 'name@example.com'}\"`\n    )\n  ];\n}\n"]}