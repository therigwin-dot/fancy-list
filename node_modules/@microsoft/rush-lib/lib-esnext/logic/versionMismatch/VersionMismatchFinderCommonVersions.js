// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { RushConstants } from '../RushConstants';
import { PackageJsonDependency, DependencyType } from '../../api/PackageJsonEditor';
import { VersionMismatchFinderEntity } from './VersionMismatchFinderEntity';
export class VersionMismatchFinderCommonVersions extends VersionMismatchFinderEntity {
    constructor(commonVersionsConfiguration) {
        super({
            friendlyName: `preferred versions from ${RushConstants.commonVersionsFilename}`,
            decoupledLocalDependencies: new Set()
        });
        this._fileManager = commonVersionsConfiguration;
    }
    get filePath() {
        return this._fileManager.filePath;
    }
    get allDependencies() {
        const dependencies = [];
        this._fileManager.getAllPreferredVersions().forEach((version, dependencyName) => {
            dependencies.push(this._getPackageJsonDependency(dependencyName, version));
        });
        return dependencies;
    }
    tryGetDependency(packageName) {
        const version = this._fileManager.getAllPreferredVersions().get(packageName);
        if (!version) {
            return undefined;
        }
        else {
            return this._getPackageJsonDependency(packageName, version);
        }
    }
    tryGetDevDependency(packageName) {
        return undefined; // common-versions.json doesn't have a distinction between dev and non-dev dependencies
    }
    addOrUpdateDependency(packageName, newVersion, dependencyType) {
        if (dependencyType !== DependencyType.Regular) {
            throw new Error(`${RushConstants.commonVersionsFilename} only accepts "${DependencyType.Regular}" dependencies`);
        }
        this._fileManager.preferredVersions.set(packageName, newVersion);
    }
    removeDependency(packageName) {
        throw new Error('Not supported.');
    }
    saveIfModified() {
        return this._fileManager.save();
    }
    _getPackageJsonDependency(dependencyName, version) {
        return new PackageJsonDependency(dependencyName, version, DependencyType.Regular, () => this.addOrUpdateDependency(dependencyName, version, DependencyType.Regular));
    }
}
//# sourceMappingURL=VersionMismatchFinderCommonVersions.js.map