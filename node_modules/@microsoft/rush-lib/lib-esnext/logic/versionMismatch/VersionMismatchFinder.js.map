{"version":3,"file":"VersionMismatchFinder.js","sourceRoot":"","sources":["../../../src/logic/versionMismatch/VersionMismatchFinder.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,EAAE,QAAQ,EAAkB,MAAM,qBAAqB,CAAC;AAG/D,OAAO,EAA8B,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAGzF,OAAO,EAAE,4BAA4B,EAAE,MAAM,gCAAgC,CAAC;AAC9E,OAAO,EAAE,mCAAmC,EAAE,MAAM,uCAAuC,CAAC;AAC5F,OAAO,EAAE,WAAW,EAAE,MAAM,mCAAmC,CAAC;AAGhE,MAAM,iCAAiC,GAAW,CAAC,CAAC;AA+BpD,MAAM,OAAO,qBAAqB;IAYhC,YACE,QAAuC,EACvC,0BAA+D;QAE/D,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAsD,CAAC;QACjF,IAAI,CAAC,0BAA0B,GAAG,0BAA0B,IAAI,IAAI,GAAG,EAAiC,CAAC;QACzG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAEM,MAAM,CAAC,SAAS,CACrB,iBAAoC,EACpC,QAAmB,EACnB,OAAgD;QAEhD,MAAM,EACJ,OAAO,EACP,QAAQ,GAAG,iBAAiB,CAAC,eAAe,EAC5C,WAAW,EACX,4BAA4B,EAC7B,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;QAElB,qBAAqB,CAAC,6BAA6B,CAAC,iBAAiB,EAAE;YACrE,OAAO;YACP,QAAQ;YACR,WAAW;YACX,4BAA4B;YAC5B,QAAQ;YACR,kBAAkB,EAAE,IAAI;SACzB,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,wBAAwB,CACpC,iBAAoC,EACpC,QAAmB,EACnB,OAA+D;QAE/D,MAAM,EAAE,OAAO,EAAE,QAAQ,GAAG,iBAAiB,CAAC,eAAe,EAAE,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;QAEhF,qBAAqB,CAAC,6BAA6B,CAAC,iBAAiB,EAAE;YACrE,QAAQ;YACR,OAAO;YACP,QAAQ;YACR,kBAAkB,EAAE,KAAK;YACzB,4BAA4B,EAAE,IAAI;SACnC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,aAAa,CACzB,iBAAoC,EACpC,OAAuC;QAEvC,MAAM,EAAE,QAAQ,GAAG,iBAAiB,CAAC,eAAe,EAAE,OAAO,EAAE,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;QAChF,MAAM,cAAc,GAAgC,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAExF,MAAM,QAAQ,GAAkC,EAAE,CAAC;QAEnD,4GAA4G;QAC5G,sFAAsF;QACtF,QAAQ,CAAC,IAAI,CAAC,IAAI,mCAAmC,CAAC,cAAc,CAAC,CAAC,CAAC;QAEvE,sEAAsE;QACtE,KAAK,MAAM,OAAO,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC;YAC7C,QAAQ,CAAC,IAAI,CAAC,IAAI,4BAA4B,CAAC,OAAO,CAAC,CAAC,CAAC;QAC3D,CAAC;QAED,OAAO,IAAI,qBAAqB,CAAC,QAAQ,EAAE,cAAc,CAAC,0BAA0B,CAAC,CAAC;IACxF,CAAC;IAEO,MAAM,CAAC,6BAA6B,CAC1C,iBAAoC,EACpC,OAOC;QAED,MAAM,EAAE,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,QAAQ,EAAE,4BAA4B,EAAE,QAAQ,EAAE,GAClG,OAAO,CAAC;QACV,IAAI,QAAQ,CAAC,8BAA8B,CAAC,OAAO,CAAC,IAAI,kBAAkB,EAAE,CAAC;YAC3E,MAAM,cAAc,GAA0B,qBAAqB,CAAC,aAAa,CAC/E,iBAAiB,EACjB,OAAO,CACR,CAAC;YAEF,IAAI,WAAW,EAAE,CAAC;gBAChB,cAAc,CAAC,WAAW,EAAE,CAAC;YAC/B,CAAC;iBAAM,CAAC;gBACN,cAAc,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBAEnD,IAAI,cAAc,CAAC,kBAAkB,GAAG,CAAC,EAAE,CAAC;oBAC1C,sCAAsC;oBACtC,OAAO,CAAC,GAAG,CACT,QAAQ,CAAC,GAAG,CACV,SAAS,cAAc,CAAC,kBAAkB,8BACxC,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,YAAY,EAAC,CAAC,CAAC,gBAAgB,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,YAAY,EAAE,CAAC,CAAC,CAAC,EACtE,EAAE,CACH,CACF,CAAC;oBACF,iBAAiB,CAAC,uBAAuB,CAAC,aAAa,CACrD,QAAQ,EACR,WAAW,CAAC,8BAA8B,CAC3C,CAAC;oBACF,IAAI,CAAC,kBAAkB,IAAI,4BAA4B,EAAE,CAAC;wBACxD,yGAAyG;wBACzG,sCAAsC;wBACtC,OAAO,CAAC,GAAG,CACT,qGAAqG,CACtG,CAAC;oBACJ,CAAC;oBAED,MAAM,IAAI,oBAAoB,EAAE,CAAC;gBACnC,CAAC;qBAAM,CAAC;oBACN,IAAI,kBAAkB,EAAE,CAAC;wBACvB,sCAAsC;wBACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;oBACrE,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAW,kBAAkB;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IAC/B,CAAC;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;IAEM,qBAAqB,CAAC,QAAgB;QAC3C,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACpG,CAAC;IAEM,sBAAsB,CAC3B,QAAgB,EAChB,OAAe;QAEf,MAAM,iBAAiB,GACrB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvB,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,MAAM,iBAAiB,GAA8C,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACpG,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAEM,WAAW;QAChB,MAAM,oBAAoB,GAA0B,EAAE,CAAC;QAEvD,IAAI,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,CAAC,UAAkB,EAAE,EAAE;YAClD,MAAM,8BAA8B,GAAiC,EAAE,CAAC;YACxE,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAE,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,EAAE;gBAClE,MAAM,QAAQ,GAAa,EAAE,CAAC;gBAC9B,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,OAAO,CAAE,CAAC,OAAO,CAAC,CAAC,OAAoC,EAAE,EAAE;oBACjG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;gBACtC,CAAC,CAAC,CAAC;gBACH,MAAM,yBAAyB,GAA+B;oBAC5D,OAAO,EAAE,OAAO;oBAChB,QAAQ,EAAE,QAAQ;iBACnB,CAAC;gBACF,8BAA8B,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC;YACH,MAAM,kBAAkB,GAAwB;gBAC9C,cAAc,EAAE,UAAU;gBAC1B,QAAQ,EAAE,8BAA8B;aACzC,CAAC;YACF,oBAAoB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,MAAM,MAAM,GAA0B;YACpC,kBAAkB,EAAE,oBAAoB;SACzC,CAAC;QAEF,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,+BAAwC,KAAK;QACxD,0FAA0F;QAC1F,IAAI,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,CAAC,UAAkB,EAAE,EAAE;YAClD,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAE,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,EAAE;gBAClE,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC;gBAC5B,MAAM,mBAAmB,GAAkC,IAAI,CAAC,sBAAsB,CACpF,UAAU,EACV,OAAO,CACP,CAAC;gBAEH,IAAI,aAAa,GAAW,4BAA4B;oBACtD,CAAC,CAAC,iCAAiC;oBACnC,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC;gBAC/B,IAAI,eAAe,GAAW,mBAAmB,CAAC,MAAM,CAAC;gBACzD,KAAK,MAAM,EAAE,YAAY,EAAE,IAAI,mBAAmB,EAAE,CAAC;oBACnD,IAAI,aAAa,EAAE,KAAK,CAAC,EAAE,CAAC;wBAC1B,MAAM;oBACR,CAAC;oBAED,eAAe,EAAE,CAAC;oBAElB,sCAAsC;oBACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,YAAY,EAAE,CAAC,CAAC;gBACtC,CAAC;gBAED,IAAI,eAAe,GAAG,CAAC,EAAE,CAAC;oBACxB,sCAAsC;oBACtC,OAAO,CAAC,GAAG,CAAC,WAAW,eAAe,UAAU,CAAC,CAAC;gBACpD,CAAC;YACH,CAAC,CAAC,CAAC;YACH,sCAAsC;YACtC,OAAO,CAAC,GAAG,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAoC,EAAE,EAAE;YAC9D,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;gBAC3B,mFAAmF;gBACnF,8EAA8E;gBAC9E,mFAAmF;gBACnF,8FAA8F;gBAC9F,mFAAmF;gBACnF,yFAAyF;gBACzF,4BAA4B;gBAC5B,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,UAAiC,EAAE,EAAE;oBACpE,IAAI,UAAU,CAAC,cAAc,KAAK,cAAc,CAAC,IAAI,EAAE,CAAC;wBACtD,MAAM,OAAO,GAAW,UAAU,CAAC,OAAQ,CAAC;wBAE5C,MAAM,QAAQ,GAAY,OAAO,CAAC,0BAA0B,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBAElF,IAAI,IAAI,CAAC,4BAA4B,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC;4BAChE,OAAO;wBACT,CAAC;wBAED,MAAM,IAAI,GAAW,UAAU,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;wBAErE,IAAI,kBAAkB,GACpB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC7B,IAAI,CAAC,kBAAkB,EAAE,CAAC;4BACxB,IAAI,CAAC,WAAW,CAAC,GAAG,CAClB,IAAI,EACJ,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAyC,CAAC,CACxE,CAAC;wBACJ,CAAC;wBAED,MAAM,SAAS,GAA8C,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;wBAC7F,IAAI,CAAC,SAAS,EAAE,CAAC;4BACf,kBAAkB,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC7C,CAAC;6BAAM,CAAC;4BACN,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC1B,CAAC;oBACH,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAsD,EAAE,OAAe,EAAE,EAAE;YACnG,IAAI,UAAU,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC;gBACzB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACnC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,4BAA4B,CAAC,UAAkB,EAAE,OAAe;QACtE,MAAM,mBAAmB,GACvB,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAClD,OAAO,OAAO,CAAC,mBAAmB,IAAI,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnF,CAAC;IAED,8DAA8D;IACtD,QAAQ,CAAC,QAAsC;QACrD,MAAM,IAAI,GAAa,EAAE,CAAC;QAC1B,IAAI,QAAQ,EAAE,CAAC;YACb,8DAA8D;YAC9D,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,GAAW,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AlreadyReportedError } from '@rushstack/node-core-library';\nimport { Colorize, type ITerminal } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport { type PackageJsonDependency, DependencyType } from '../../api/PackageJsonEditor';\nimport type { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\nimport type { VersionMismatchFinderEntity } from './VersionMismatchFinderEntity';\nimport { VersionMismatchFinderProject } from './VersionMismatchFinderProject';\nimport { VersionMismatchFinderCommonVersions } from './VersionMismatchFinderCommonVersions';\nimport { CustomTipId } from '../../api/CustomTipsConfiguration';\nimport type { Subspace } from '../../api/Subspace';\n\nconst TRUNCATE_AFTER_PACKAGE_NAME_COUNT: number = 5;\n\nexport interface IVersionMismatchFinderOptions {\n  subspace?: Subspace;\n  variant: string | undefined;\n}\n\nexport interface IVersionMismatchFinderRushCheckOptions extends IVersionMismatchFinderOptions {\n  printAsJson?: boolean | undefined;\n  truncateLongPackageNameLists?: boolean | undefined;\n}\n\nexport interface IVersionMismatchFinderEnsureConsistentVersionsOptions\n  extends IVersionMismatchFinderOptions {}\n\nexport interface IVersionMismatchFinderGetMismatchesOptions extends IVersionMismatchFinderOptions {}\n\nexport interface IMismatchDependency {\n  dependencyName: string;\n  versions: IMismatchDependencyVersion[];\n}\n\nexport interface IMismatchDependencyVersion {\n  version: string;\n  projects: string[];\n}\n\nexport interface IMismatchDependencies {\n  mismatchedVersions: IMismatchDependency[];\n}\n\nexport class VersionMismatchFinder {\n  /* store it like this:\n   * {\n   *   \"@types/node\": {\n   *     \"1.0.0\": [ '@ms/rush' ]\n   *   }\n   * }\n   */\n  private _allowedAlternativeVersion: Map<string, ReadonlyArray<string>>;\n  private _mismatches: Map<string, Map<string, VersionMismatchFinderEntity[]>>;\n  private _projects: VersionMismatchFinderEntity[];\n\n  public constructor(\n    projects: VersionMismatchFinderEntity[],\n    allowedAlternativeVersions?: Map<string, ReadonlyArray<string>>\n  ) {\n    this._projects = projects;\n    this._mismatches = new Map<string, Map<string, VersionMismatchFinderEntity[]>>();\n    this._allowedAlternativeVersion = allowedAlternativeVersions || new Map<string, ReadonlyArray<string>>();\n    this._analyze();\n  }\n\n  public static rushCheck(\n    rushConfiguration: RushConfiguration,\n    terminal: ITerminal,\n    options?: IVersionMismatchFinderRushCheckOptions\n  ): void {\n    const {\n      variant,\n      subspace = rushConfiguration.defaultSubspace,\n      printAsJson,\n      truncateLongPackageNameLists\n    } = options ?? {};\n\n    VersionMismatchFinder._checkForInconsistentVersions(rushConfiguration, {\n      variant,\n      subspace,\n      printAsJson,\n      truncateLongPackageNameLists,\n      terminal,\n      isRushCheckCommand: true\n    });\n  }\n\n  public static ensureConsistentVersions(\n    rushConfiguration: RushConfiguration,\n    terminal: ITerminal,\n    options?: IVersionMismatchFinderEnsureConsistentVersionsOptions\n  ): void {\n    const { variant, subspace = rushConfiguration.defaultSubspace } = options ?? {};\n\n    VersionMismatchFinder._checkForInconsistentVersions(rushConfiguration, {\n      subspace,\n      variant,\n      terminal,\n      isRushCheckCommand: false,\n      truncateLongPackageNameLists: true\n    });\n  }\n\n  /**\n   * Populates a version mismatch finder object given a Rush Configuration.\n   * Intentionally considers preferred versions.\n   */\n  public static getMismatches(\n    rushConfiguration: RushConfiguration,\n    options?: IVersionMismatchFinderOptions\n  ): VersionMismatchFinder {\n    const { subspace = rushConfiguration.defaultSubspace, variant } = options ?? {};\n    const commonVersions: CommonVersionsConfiguration = subspace.getCommonVersions(variant);\n\n    const projects: VersionMismatchFinderEntity[] = [];\n\n    // Create an object for the purposes of reporting conflicts with preferredVersions from common-versions.json\n    // Make sure this one is first so it doesn't get truncated when a long list is printed\n    projects.push(new VersionMismatchFinderCommonVersions(commonVersions));\n\n    // If subspace is specified, only go through projects in that subspace\n    for (const project of subspace.getProjects()) {\n      projects.push(new VersionMismatchFinderProject(project));\n    }\n\n    return new VersionMismatchFinder(projects, commonVersions.allowedAlternativeVersions);\n  }\n\n  private static _checkForInconsistentVersions(\n    rushConfiguration: RushConfiguration,\n    options: {\n      isRushCheckCommand: boolean;\n      subspace: Subspace;\n      variant: string | undefined;\n      printAsJson?: boolean | undefined;\n      terminal: ITerminal;\n      truncateLongPackageNameLists?: boolean | undefined;\n    }\n  ): void {\n    const { variant, isRushCheckCommand, printAsJson, subspace, truncateLongPackageNameLists, terminal } =\n      options;\n    if (subspace.shouldEnsureConsistentVersions(variant) || isRushCheckCommand) {\n      const mismatchFinder: VersionMismatchFinder = VersionMismatchFinder.getMismatches(\n        rushConfiguration,\n        options\n      );\n\n      if (printAsJson) {\n        mismatchFinder.printAsJson();\n      } else {\n        mismatchFinder.print(truncateLongPackageNameLists);\n\n        if (mismatchFinder.numberOfMismatches > 0) {\n          // eslint-disable-next-line no-console\n          console.log(\n            Colorize.red(\n              `Found ${mismatchFinder.numberOfMismatches} mis-matching dependencies ${\n                subspace?.subspaceName ? `in subspace: ${subspace?.subspaceName}` : ''\n              }`\n            )\n          );\n          rushConfiguration.customTipsConfiguration._showErrorTip(\n            terminal,\n            CustomTipId.TIP_RUSH_INCONSISTENT_VERSIONS\n          );\n          if (!isRushCheckCommand && truncateLongPackageNameLists) {\n            // There isn't a --verbose flag in `rush install`/`rush update`, so a long list will always be truncated.\n            // eslint-disable-next-line no-console\n            console.log(\n              'For more detailed reporting about these version mismatches, use the \"rush check --verbose\" command.'\n            );\n          }\n\n          throw new AlreadyReportedError();\n        } else {\n          if (isRushCheckCommand) {\n            // eslint-disable-next-line no-console\n            console.log(Colorize.green(`Found no mis-matching dependencies!`));\n          }\n        }\n      }\n    }\n  }\n\n  public get mismatches(): ReadonlyMap<string, ReadonlyMap<string, readonly VersionMismatchFinderEntity[]>> {\n    return this._mismatches;\n  }\n\n  public get numberOfMismatches(): number {\n    return this._mismatches.size;\n  }\n\n  public getMismatches(): string[] {\n    return this._getKeys(this._mismatches);\n  }\n\n  public getVersionsOfMismatch(mismatch: string): string[] | undefined {\n    return this._mismatches.has(mismatch) ? this._getKeys(this._mismatches.get(mismatch)) : undefined;\n  }\n\n  public getConsumersOfMismatch(\n    mismatch: string,\n    version: string\n  ): VersionMismatchFinderEntity[] | undefined {\n    const mismatchedPackage: Map<string, VersionMismatchFinderEntity[]> | undefined =\n      this._mismatches.get(mismatch);\n    if (!mismatchedPackage) {\n      return undefined;\n    }\n\n    const mismatchedVersion: VersionMismatchFinderEntity[] | undefined = mismatchedPackage.get(version);\n    return mismatchedVersion;\n  }\n\n  public printAsJson(): void {\n    const mismatchDependencies: IMismatchDependency[] = [];\n\n    this.getMismatches().forEach((dependency: string) => {\n      const mismatchDependencyVersionArray: IMismatchDependencyVersion[] = [];\n      this.getVersionsOfMismatch(dependency)!.forEach((version: string) => {\n        const projects: string[] = [];\n        this.getConsumersOfMismatch(dependency, version)!.forEach((project: VersionMismatchFinderEntity) => {\n          projects.push(project.friendlyName);\n        });\n        const mismatchDependencyVersion: IMismatchDependencyVersion = {\n          version: version,\n          projects: projects\n        };\n        mismatchDependencyVersionArray.push(mismatchDependencyVersion);\n      });\n      const mismatchDependency: IMismatchDependency = {\n        dependencyName: dependency,\n        versions: mismatchDependencyVersionArray\n      };\n      mismatchDependencies.push(mismatchDependency);\n    });\n\n    const output: IMismatchDependencies = {\n      mismatchedVersions: mismatchDependencies\n    };\n\n    // eslint-disable-next-line no-console\n    console.log(JSON.stringify(output, undefined, 2));\n  }\n\n  public print(truncateLongPackageNameLists: boolean = false): void {\n    // Iterate over the list. For any dependency with mismatching versions, print the projects\n    this.getMismatches().forEach((dependency: string) => {\n      // eslint-disable-next-line no-console\n      console.log(Colorize.yellow(dependency));\n      this.getVersionsOfMismatch(dependency)!.forEach((version: string) => {\n        // eslint-disable-next-line no-console\n        console.log(`  ${version}`);\n        const consumersOfMismatch: VersionMismatchFinderEntity[] = this.getConsumersOfMismatch(\n          dependency,\n          version\n        )!;\n\n        let numberToPrint: number = truncateLongPackageNameLists\n          ? TRUNCATE_AFTER_PACKAGE_NAME_COUNT\n          : consumersOfMismatch.length;\n        let numberRemaining: number = consumersOfMismatch.length;\n        for (const { friendlyName } of consumersOfMismatch) {\n          if (numberToPrint-- === 0) {\n            break;\n          }\n\n          numberRemaining--;\n\n          // eslint-disable-next-line no-console\n          console.log(`   - ${friendlyName}`);\n        }\n\n        if (numberRemaining > 0) {\n          // eslint-disable-next-line no-console\n          console.log(`   (and ${numberRemaining} others)`);\n        }\n      });\n      // eslint-disable-next-line no-console\n      console.log();\n    });\n  }\n\n  private _analyze(): void {\n    this._projects.forEach((project: VersionMismatchFinderEntity) => {\n      if (!project.skipRushCheck) {\n        // NOTE: We do not consider peer dependencies here.  The purpose of \"rush check\" is\n        // mainly to avoid side-by-side duplicates in the node_modules folder, whereas\n        // peer dependencies are just a compatibility statement that will be satisfied by a\n        // regular dependency.  (It might be useful for Rush to help people keep their peer dependency\n        // patterns consistent, but on the other hand different projects may have different\n        // levels of compatibility -- we should wait for someone to actually request this feature\n        // before we get into that.)\n        project.allDependencies.forEach((dependency: PackageJsonDependency) => {\n          if (dependency.dependencyType !== DependencyType.Peer) {\n            const version: string = dependency.version!;\n\n            const isCyclic: boolean = project.decoupledLocalDependencies.has(dependency.name);\n\n            if (this._isVersionAllowedAlternative(dependency.name, version)) {\n              return;\n            }\n\n            const name: string = dependency.name + (isCyclic ? ' (cyclic)' : '');\n\n            let dependencyVersions: Map<string, VersionMismatchFinderEntity[]> | undefined =\n              this._mismatches.get(name);\n            if (!dependencyVersions) {\n              this._mismatches.set(\n                name,\n                (dependencyVersions = new Map<string, VersionMismatchFinderEntity[]>())\n              );\n            }\n\n            const consumers: VersionMismatchFinderEntity[] | undefined = dependencyVersions.get(version);\n            if (!consumers) {\n              dependencyVersions.set(version, [project]);\n            } else {\n              consumers.push(project);\n            }\n          }\n        });\n      }\n    });\n\n    this._mismatches.forEach((mismatches: Map<string, VersionMismatchFinderEntity[]>, project: string) => {\n      if (mismatches.size <= 1) {\n        this._mismatches.delete(project);\n      }\n    });\n  }\n\n  private _isVersionAllowedAlternative(dependency: string, version: string): boolean {\n    const allowedAlternatives: ReadonlyArray<string> | undefined =\n      this._allowedAlternativeVersion.get(dependency);\n    return Boolean(allowedAlternatives && allowedAlternatives.indexOf(version) > -1);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _getKeys(iterable: Map<string, any> | undefined): string[] {\n    const keys: string[] = [];\n    if (iterable) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iterable.forEach((value: any, key: string) => {\n        keys.push(key);\n      });\n    }\n    return keys;\n  }\n}\n"]}