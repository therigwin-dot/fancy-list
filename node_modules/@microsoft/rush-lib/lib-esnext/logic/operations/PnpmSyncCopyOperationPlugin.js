// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { Async, FileSystem } from '@rushstack/node-core-library';
import { pnpmSyncCopyAsync } from 'pnpm-sync-lib';
import { OperationStatus } from './OperationStatus';
import { PnpmSyncUtilities } from '../../utilities/PnpmSyncUtilities';
const PLUGIN_NAME = 'PnpmSyncCopyOperationPlugin';
export class PnpmSyncCopyOperationPlugin {
    constructor(terminal) {
        this._terminal = terminal;
    }
    apply(hooks) {
        hooks.afterExecuteOperation.tapPromise(PLUGIN_NAME, async (runnerContext) => {
            const record = runnerContext;
            const { status, operation: { associatedProject: project } } = record;
            //skip if the phase is skipped or no operation
            if (status === OperationStatus.Skipped ||
                status === OperationStatus.NoOp ||
                status === OperationStatus.Failure) {
                return;
            }
            if (project) {
                const pnpmSyncJsonPath = `${project.projectFolder}/node_modules/.pnpm-sync.json`;
                if (await FileSystem.exists(pnpmSyncJsonPath)) {
                    const { PackageExtractor } = await import(
                    /* webpackChunkName: 'PackageExtractor' */
                    '@rushstack/package-extractor');
                    await pnpmSyncCopyAsync({
                        pnpmSyncJsonPath,
                        ensureFolderAsync: FileSystem.ensureFolderAsync,
                        forEachAsyncWithConcurrency: Async.forEachAsync,
                        getPackageIncludedFiles: PackageExtractor.getPackageIncludedFilesAsync,
                        logMessageCallback: (logMessageOptions) => PnpmSyncUtilities.processLogMessage(logMessageOptions, this._terminal)
                    });
                }
            }
        });
    }
}
//# sourceMappingURL=PnpmSyncCopyOperationPlugin.js.map