{"version":3,"file":"OperationResultSummarizerPlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/OperationResultSummarizerPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { InternalError } from '@rushstack/node-core-library';\nimport { Colorize, type ITerminal } from '@rushstack/terminal';\n\nimport type {\n  ICreateOperationsContext,\n  IPhasedCommandPlugin,\n  PhasedCommandHooks\n} from '../../pluginFramework/PhasedCommandHooks';\nimport type { IExecutionResult, IOperationExecutionResult } from './IOperationExecutionResult';\nimport type { Operation } from './Operation';\nimport { OperationStatus } from './OperationStatus';\n\nconst PLUGIN_NAME: 'OperationResultSummarizerPlugin' = 'OperationResultSummarizerPlugin';\n\n/**\n * Format \"======\" lines for a shell window with classic 80 columns\n */\nconst ASCII_HEADER_WIDTH: number = 79;\n\ntype IOperationAndResult = [Operation, IOperationExecutionResult];\ntype IOperationsByStatus = Map<OperationStatus, IOperationAndResult[]>;\n\n/**\n * Phased command plugin that emits a summary of build results to the console.\n */\nexport class OperationResultSummarizerPlugin implements IPhasedCommandPlugin {\n  private readonly _terminal: ITerminal;\n\n  public constructor(terminal: ITerminal) {\n    this._terminal = terminal;\n  }\n\n  public apply(hooks: PhasedCommandHooks): void {\n    hooks.afterExecuteOperations.tap(\n      PLUGIN_NAME,\n      (result: IExecutionResult, context: ICreateOperationsContext): void => {\n        _printOperationStatus(this._terminal, result);\n      }\n    );\n  }\n}\n\n/**\n * Prints out a report of the status of each project\n * @internal\n */\nexport function _printOperationStatus(terminal: ITerminal, result: IExecutionResult): void {\n  const { operationResults } = result;\n\n  const operationsByStatus: IOperationsByStatus = new Map();\n  for (const record of operationResults) {\n    if (record[1].silent) {\n      // Don't report silenced operations\n      continue;\n    }\n\n    const { status } = record[1];\n    switch (status) {\n      // These are the sections that we will report below\n      case OperationStatus.Skipped:\n      case OperationStatus.FromCache:\n      case OperationStatus.Success:\n      case OperationStatus.SuccessWithWarning:\n      case OperationStatus.Blocked:\n      case OperationStatus.Failure:\n      case OperationStatus.NoOp:\n        break;\n      default:\n        // This should never happen\n        throw new InternalError(`Unexpected operation status: ${status}`);\n    }\n\n    const collection: IOperationAndResult[] | undefined = operationsByStatus.get(status);\n    if (collection) {\n      collection.push(record);\n    } else {\n      operationsByStatus.set(status, [record]);\n    }\n  }\n\n  // Skip a few lines before we start the summary\n  terminal.writeLine('\\n\\n');\n\n  // These are ordered so that the most interesting statuses appear last:\n  writeCondensedSummary(\n    terminal,\n    OperationStatus.Skipped,\n    operationsByStatus,\n    Colorize.green,\n    'These operations were already up to date:'\n  );\n\n  writeCondensedSummary(\n    terminal,\n    OperationStatus.NoOp,\n    operationsByStatus,\n    Colorize.gray,\n    'These operations did not define any work:'\n  );\n\n  writeCondensedSummary(\n    terminal,\n    OperationStatus.FromCache,\n    operationsByStatus,\n    Colorize.green,\n    'These operations were restored from the build cache:'\n  );\n\n  writeCondensedSummary(\n    terminal,\n    OperationStatus.Success,\n    operationsByStatus,\n    Colorize.green,\n    'These operations completed successfully:'\n  );\n\n  writeDetailedSummary(\n    terminal,\n    OperationStatus.SuccessWithWarning,\n    operationsByStatus,\n    Colorize.yellow,\n    'WARNING'\n  );\n\n  writeCondensedSummary(\n    terminal,\n    OperationStatus.Blocked,\n    operationsByStatus,\n    Colorize.white,\n    'These operations were blocked by dependencies that failed:'\n  );\n\n  writeDetailedSummary(terminal, OperationStatus.Failure, operationsByStatus, Colorize.red);\n\n  terminal.writeLine('');\n\n  switch (result.status) {\n    case OperationStatus.Failure:\n      terminal.writeErrorLine('Operations failed.\\n');\n      break;\n    case OperationStatus.SuccessWithWarning:\n      terminal.writeWarningLine('Operations succeeded with warnings.\\n');\n      break;\n  }\n}\n\nfunction writeCondensedSummary(\n  terminal: ITerminal,\n  status: OperationStatus,\n  operationsByStatus: IOperationsByStatus,\n  headingColor: (text: string) => string,\n  preamble: string\n): void {\n  // Example:\n  //\n  // ==[ BLOCKED: 4 projects ]==============================================================\n  //\n  // These projects were blocked by dependencies that failed:\n  //   @scope/name\n  //   e\n  //   k\n  const operations: IOperationAndResult[] | undefined = operationsByStatus.get(status);\n  if (!operations || operations.length === 0) {\n    return;\n  }\n\n  writeSummaryHeader(terminal, status, operations, headingColor);\n  terminal.writeLine(preamble);\n\n  let longestTaskName: number = 0;\n  for (const [operation] of operations) {\n    const nameLength: number = (operation.name || '').length;\n    if (nameLength > longestTaskName) {\n      longestTaskName = nameLength;\n    }\n  }\n\n  for (const [operation, operationResult] of operations) {\n    if (\n      operationResult.stopwatch.duration !== 0 &&\n      operation.runner!.reportTiming &&\n      operationResult.status !== OperationStatus.Skipped\n    ) {\n      const time: string = operationResult.stopwatch.toString();\n      const padding: string = ' '.repeat(longestTaskName - (operation.name || '').length);\n      terminal.writeLine(`  ${operation.name}${padding}    ${time}`);\n    } else {\n      terminal.writeLine(`  ${operation.name}`);\n    }\n  }\n  terminal.writeLine('');\n}\n\nfunction writeDetailedSummary(\n  terminal: ITerminal,\n  status: OperationStatus,\n  operationsByStatus: IOperationsByStatus,\n  headingColor: (text: string) => string,\n  shortStatusName?: string\n): void {\n  // Example:\n  //\n  // ==[ SUCCESS WITH WARNINGS: 2 projects ]================================\n  //\n  // --[ WARNINGS: f ]------------------------------------[ 5.07 seconds ]--\n  //\n  // [eslint] Warning: src/logic/operations/OperationsExecutionManager.ts:393:3 ...\n\n  const operations: IOperationAndResult[] | undefined = operationsByStatus.get(status);\n  if (!operations || operations.length === 0) {\n    return;\n  }\n\n  writeSummaryHeader(terminal, status, operations, headingColor);\n\n  if (shortStatusName === undefined) {\n    shortStatusName = status;\n  }\n\n  for (const [operation, operationResult] of operations) {\n    // Format a header like this\n    //\n    // --[ WARNINGS: f ]------------------------------------[ 5.07 seconds ]--\n\n    // leftPart: \"--[ WARNINGS: f \"\n    const subheadingText: string = `${shortStatusName}: ${operation.name}`;\n\n    const leftPartLength: number = 4 + subheadingText.length + 1;\n\n    // rightPart: \" 5.07 seconds ]--\"\n    const time: string = operationResult.stopwatch.toString();\n    const rightPartLength: number = 1 + time.length + 1 + 3;\n\n    // middlePart: \"]----------------------[\"\n    const twoBracketsLength: 2 = 2;\n    const middlePartLengthMinusTwoBrackets: number = Math.max(\n      ASCII_HEADER_WIDTH - (leftPartLength + rightPartLength + twoBracketsLength),\n      0\n    );\n\n    terminal.writeLine(\n      `${Colorize.gray('--[')} ${headingColor(subheadingText)} ${Colorize.gray(\n        `]${'-'.repeat(middlePartLengthMinusTwoBrackets)}[`\n      )} ${Colorize.white(time)} ${Colorize.gray(']--')}\\n`\n    );\n\n    const details: string = operationResult.stdioSummarizer.getReport();\n    if (details) {\n      // Don't write a newline, because the report will always end with a newline\n      terminal.write(details);\n    }\n\n    terminal.writeLine('');\n  }\n}\n\nfunction writeSummaryHeader(\n  terminal: ITerminal,\n  status: OperationStatus,\n  operations: ReadonlyArray<unknown>,\n  headingColor: (text: string) => string\n): void {\n  // Format a header like this\n  //\n  // ==[ FAILED: 2 operations ]================================================\n\n  // \"2 operations\"\n  const projectsText: string = `${operations.length}${\n    operations.length === 1 ? ' operation' : ' operations'\n  }`;\n  const headingText: string = `${status}: ${projectsText}`;\n\n  // leftPart: \"==[ FAILED: 2 operations \"\n  const leftPartLength: number = 3 + 1 + headingText.length + 1;\n\n  const rightPartLengthMinusBracket: number = Math.max(ASCII_HEADER_WIDTH - (leftPartLength + 1), 0);\n\n  // rightPart: \"]======================\"\n\n  terminal.writeLine(\n    `${Colorize.gray('==[')} ${headingColor(headingText)} ${Colorize.gray(\n      `]${'='.repeat(rightPartLengthMinusBracket)}`\n    )}\\n`\n  );\n}\n"]}