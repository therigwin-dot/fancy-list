{"version":3,"file":"ConsoleTimelinePlugin.js","sourceRoot":"","sources":["../../../src/logic/operations/ConsoleTimelinePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ITerminal } from '@rushstack/terminal';\nimport { Colorize, PrintUtilities } from '@rushstack/terminal';\n\nimport type { IPhase } from '../../api/CommandLineConfiguration';\nimport type {\n  ICreateOperationsContext,\n  IPhasedCommandPlugin,\n  PhasedCommandHooks\n} from '../../pluginFramework/PhasedCommandHooks';\nimport type { IExecutionResult } from './IOperationExecutionResult';\nimport { OperationStatus } from './OperationStatus';\nimport type { CobuildConfiguration } from '../../api/CobuildConfiguration';\n\nconst PLUGIN_NAME: 'ConsoleTimelinePlugin' = 'ConsoleTimelinePlugin';\n\n/* Sample output:\n==============================================================================================================================\n          @rushstack/tree-pattern (build) ###########-------------------------------------------------------------------- 3.3s\n          @rushstack/eslint-patch (build) ########----------------------------------------------------------------------- 2.2s\n           @rushstack/eslint-patch (test) -------%----------------------------------------------------------------------- 0.0s\n@rushstack/eslint-plugin-security (build) ----------########################--------------------------------------------- 6.8s\n@rushstack/eslint-plugin-packlets (build) ----------############################----------------------------------------- 8.1s\n         @rushstack/eslint-plugin (build) ----------##############################--------------------------------------- 8.7s\n           @rushstack/tree-pattern (test) ----------#####---------------------------------------------------------------- 1.2s\n @rushstack/eslint-plugin-security (test) ---------------------------------############---------------------------------- 3.3s\n @rushstack/eslint-plugin-packlets (test) -------------------------------------#####------------------------------------- 1.1s\n         @rushstack/eslint-config (build) ---------------------------------------%--------------------------------------- 0.0s\n          @rushstack/eslint-plugin (test) ---------------------------------------#############--------------------------- 3.8s\n          @rushstack/eslint-config (test) ---------------------------------------%--------------------------------------- 0.0s\n     @rushstack/node-core-library (build) ---------------------------------------################################-------- 9.5s\n      @rushstack/node-core-library (test) ----------------------------------------------------------------------######### 2.2s\n==============================================================================================================================\nLEGEND:                                                                                                      Total Work: 50.3s\n  [#] Success  [!] Failed/warnings  [%] Skipped/cached/no-op                                                 Wall Clock: 23.7s\n                                                                                                       Max Parallelism Used: 5\n                                                                                                     Avg Parallelism Used: 2.1\nBY PHASE:\n      _phase:build 38.6s\n       _phase:test 11.7s\n*/\n\n/**\n * Phased command plugin that emits a timeline to the console.\n */\nexport class ConsoleTimelinePlugin implements IPhasedCommandPlugin {\n  private readonly _terminal: ITerminal;\n\n  public constructor(terminal: ITerminal) {\n    this._terminal = terminal;\n  }\n\n  public apply(hooks: PhasedCommandHooks): void {\n    hooks.afterExecuteOperations.tap(\n      PLUGIN_NAME,\n      (result: IExecutionResult, context: ICreateOperationsContext): void => {\n        _printTimeline({\n          terminal: this._terminal,\n          result,\n          cobuildConfiguration: context.cobuildConfiguration\n        });\n      }\n    );\n  }\n}\n\n/**\n * Timeline - a wider column width for printing the timeline summary\n */\nconst TIMELINE_WIDTH: number = 109;\n\n/**\n * Timeline - symbols representing each operation status\n */\nconst TIMELINE_CHART_SYMBOLS: Record<OperationStatus, string> = {\n  [OperationStatus.Waiting]: '?',\n  [OperationStatus.Ready]: '?',\n  [OperationStatus.Queued]: '?',\n  [OperationStatus.Executing]: '?',\n  [OperationStatus.Success]: '#',\n  [OperationStatus.SuccessWithWarning]: '!',\n  [OperationStatus.Failure]: '!',\n  [OperationStatus.Blocked]: '.',\n  [OperationStatus.Skipped]: '%',\n  [OperationStatus.FromCache]: '%',\n  [OperationStatus.NoOp]: '%'\n};\n\nconst COBUILD_REPORTABLE_STATUSES: Set<OperationStatus> = new Set([\n  OperationStatus.Success,\n  OperationStatus.SuccessWithWarning,\n  OperationStatus.Failure,\n  OperationStatus.Blocked\n]);\n\n/**\n * Timeline - colorizer for each operation status\n */\nconst TIMELINE_CHART_COLORIZER: Record<OperationStatus, (string: string) => string> = {\n  [OperationStatus.Waiting]: Colorize.yellow,\n  [OperationStatus.Ready]: Colorize.yellow,\n  [OperationStatus.Queued]: Colorize.yellow,\n  [OperationStatus.Executing]: Colorize.yellow,\n  [OperationStatus.Success]: Colorize.green,\n  [OperationStatus.SuccessWithWarning]: Colorize.yellow,\n  [OperationStatus.Failure]: Colorize.red,\n  [OperationStatus.Blocked]: Colorize.red,\n  [OperationStatus.Skipped]: Colorize.green,\n  [OperationStatus.FromCache]: Colorize.green,\n  [OperationStatus.NoOp]: Colorize.gray\n};\n\ninterface ITimelineRecord {\n  startTime: number;\n  endTime: number;\n  durationString: string;\n  name: string;\n  status: OperationStatus;\n  isExecuteByOtherCobuildRunner: boolean;\n}\n\n/**\n * @internal\n */\nexport interface IPrintTimelineParameters {\n  terminal: ITerminal;\n  result: IExecutionResult;\n  cobuildConfiguration: CobuildConfiguration | undefined;\n}\n\n/**\n * Print a more detailed timeline and analysis of CPU usage for the build.\n * @internal\n */\nexport function _printTimeline({ terminal, result, cobuildConfiguration }: IPrintTimelineParameters): void {\n  //\n  // Gather the operation records we'll be displaying. Do some inline max()\n  // finding to reduce the number of times we need to loop through operations.\n  //\n\n  const durationByPhase: Map<IPhase, number> = new Map();\n\n  const data: ITimelineRecord[] = [];\n  let longestNameLength: number = 0;\n  let longestDurationLength: number = 0;\n  let allStart: number = Infinity;\n  let allEnd: number = -Infinity;\n  let workDuration: number = 0;\n\n  for (const [operation, operationResult] of result.operationResults) {\n    if (operationResult.silent) {\n      continue;\n    }\n\n    const { stopwatch } = operationResult;\n\n    const { startTime, endTime } = stopwatch;\n\n    if (startTime && endTime) {\n      const nameLength: number = operation.name?.length || 0;\n      if (nameLength > longestNameLength) {\n        longestNameLength = nameLength;\n      }\n\n      const { duration } = stopwatch;\n      const durationString: string = duration.toFixed(1);\n      const durationLength: number = durationString.length;\n      if (durationLength > longestDurationLength) {\n        longestDurationLength = durationLength;\n      }\n\n      if (endTime > allEnd) {\n        allEnd = endTime;\n      }\n      if (startTime < allStart) {\n        allStart = startTime;\n      }\n      workDuration += duration;\n\n      const { associatedPhase } = operation;\n\n      if (associatedPhase) {\n        durationByPhase.set(associatedPhase, (durationByPhase.get(associatedPhase) || 0) + duration);\n      }\n\n      data.push({\n        startTime,\n        endTime,\n        durationString,\n        name: operation.name!,\n        status: operationResult.status,\n        isExecuteByOtherCobuildRunner:\n          !!operationResult.cobuildRunnerId &&\n          operationResult.cobuildRunnerId !== cobuildConfiguration?.cobuildRunnerId\n      });\n    }\n  }\n\n  data.sort((a, b) => a.startTime - b.startTime);\n\n  //\n  // Determine timing for all tasks (wall clock and execution times)\n  //\n\n  const allDuration: number = allEnd - allStart;\n  const allDurationSeconds: number = allDuration / 1000;\n\n  //\n  // Do some calculations to determine what size timeline chart we need.\n  //\n\n  const maxWidth: number = PrintUtilities.getConsoleWidth() || TIMELINE_WIDTH;\n  const chartWidth: number = maxWidth - longestNameLength - longestDurationLength - 4;\n  //\n  // Loop through all operations, assembling some statistics about operations and\n  // phases, if applicable.\n  //\n\n  const busyCpus: number[] = [];\n  function getOpenCPU(time: number): number {\n    const len: number = busyCpus.length;\n    for (let i: number = 0; i < len; i++) {\n      if (busyCpus[i] <= time) {\n        return i;\n      }\n    }\n    return len;\n  }\n\n  // Start with a newline\n  terminal.writeLine('');\n  terminal.writeLine('='.repeat(maxWidth));\n\n  let hasCobuildSymbol: boolean = false;\n\n  function getChartSymbol(record: ITimelineRecord): string {\n    const { isExecuteByOtherCobuildRunner, status } = record;\n    if (isExecuteByOtherCobuildRunner && COBUILD_REPORTABLE_STATUSES.has(status)) {\n      hasCobuildSymbol = true;\n      return 'C';\n    }\n    return TIMELINE_CHART_SYMBOLS[status];\n  }\n\n  for (const record of data) {\n    const { startTime, endTime, durationString, name, status } = record;\n    // Track busy CPUs\n    const openCpu: number = getOpenCPU(startTime);\n    busyCpus[openCpu] = endTime;\n\n    // Build timeline chart\n    const startIdx: number = Math.floor(((startTime - allStart) * chartWidth) / allDuration);\n    const endIdx: number = Math.floor(((endTime - allStart) * chartWidth) / allDuration);\n    const length: number = endIdx - startIdx + 1;\n\n    const chart: string =\n      Colorize.gray('-'.repeat(startIdx)) +\n      TIMELINE_CHART_COLORIZER[status](getChartSymbol(record).repeat(length)) +\n      Colorize.gray('-'.repeat(chartWidth - endIdx));\n    terminal.writeLine(\n      `${Colorize.cyan(name.padStart(longestNameLength))} ${chart} ${Colorize.white(\n        durationString.padStart(longestDurationLength) + 's'\n      )}`\n    );\n  }\n\n  terminal.writeLine('='.repeat(maxWidth));\n\n  //\n  // Format legend and summary areas\n  //\n\n  const usedCpus: number = busyCpus.length;\n\n  const legend: string[] = [\n    'LEGEND:',\n    '  [#] Success  [!] Failed/warnings  [%] Skipped/cached/no-op',\n    '',\n    ''\n  ];\n  if (hasCobuildSymbol) {\n    legend[2] = '  [C] Cobuild';\n  }\n\n  const summary: string[] = [\n    `Total Work: ${workDuration.toFixed(1)}s`,\n    `Wall Clock: ${allDurationSeconds.toFixed(1)}s`,\n    `Max Parallelism Used: ${usedCpus}`,\n    `Avg Parallelism Used: ${(workDuration / allDurationSeconds).toFixed(1)}`\n  ];\n\n  terminal.writeLine(legend[0] + summary[0].padStart(maxWidth - legend[0].length));\n  terminal.writeLine(legend[1] + summary[1].padStart(maxWidth - legend[1].length));\n  terminal.writeLine(legend[2] + summary[2].padStart(maxWidth - legend[2].length));\n  terminal.writeLine(legend[3] + summary[3].padStart(maxWidth - legend[3].length));\n\n  //\n  // Include time-by-phase, if phases are enabled\n  //\n\n  if (durationByPhase.size > 0) {\n    terminal.writeLine('BY PHASE:');\n\n    let maxPhaseName: number = 16;\n    for (const phase of durationByPhase.keys()) {\n      const len: number = phase.name.length;\n      if (len > maxPhaseName) {\n        maxPhaseName = len;\n      }\n    }\n\n    for (const [phase, duration] of durationByPhase.entries()) {\n      terminal.writeLine(`  ${Colorize.cyan(phase.name.padStart(maxPhaseName))} ${duration.toFixed(1)}s`);\n    }\n  }\n\n  terminal.writeLine('');\n}\n"]}