{"version":3,"file":"AsyncOperationQueue.js","sourceRoot":"","sources":["../../../src/logic/operations/AsyncOperationQueue.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAG3D,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD;;;;;;;;GAQG;AACH,MAAM,OAAO,mBAAmB;IAU9B;;;;;;OAMG;IACH,YAAmB,UAA8C,EAAE,MAA8B;QAC/F,IAAI,CAAC,MAAM,GAAG,sBAAsB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACzD,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,EAA4B,CAAC;IAClE,CAAC;IAED;;;OAGG;IACI,IAAI;QACT,MAAM,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC;QAErD,MAAM,OAAO,GAAsD,IAAI,OAAO,CAC5E,CAAC,OAAmE,EAAE,EAAE;YACtE,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,MAAgC;QAC9C,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEtC,4CAA4C;QAC5C,IAAI,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO,EAAE,CAAC;YAC3F,0DAA0D;YAC1D,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;gBACpC,wEAAwE;gBACxE,IACE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC;oBAChC,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC;oBAC5B,IAAI,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO,EACvC,CAAC;oBACD,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC;gBACtC,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,KAAK,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC7D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,gBAAgB;QACrB,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC;QAEpE,oFAAoF;QACpF,KAAK,IAAI,CAAC,GAAW,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,gBAAgB,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAClF,MAAM,MAAM,GAA6B,KAAK,CAAC,CAAC,CAAC,CAAC;YAElD,IACE,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO;gBACzC,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO;gBACzC,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO;gBACzC,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,kBAAkB;gBACpD,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,SAAS;gBAC3C,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,IAAI;gBACtC,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO,EACzC,CAAC;gBACD,0CAA0C;gBAC1C,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrB,CAAC;iBAAM,IAAI,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,SAAS,EAAE,CAAC;gBACnG,wCAAwC;gBACxC,kBAAkB;YACpB,CAAC;iBAAM,IAAI,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,OAAO,EAAE,CAAC;gBACrD,iDAAiD;gBACjD,kBAAkB;gBAClB,SAAS;YACX,CAAC;iBAAM,IAAI,MAAM,CAAC,MAAM,KAAK,eAAe,CAAC,KAAK,EAAE,CAAC;gBACnD,eAAe;gBACf,MAAM,IAAI,KAAK,CAAC,sBAAsB,MAAM,CAAC,MAAM,2BAA2B,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;YAC/F,CAAC;iBAAM,CAAC;gBACN,0DAA0D;gBAC1D,8EAA8E;gBAC9E,MAAM,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;gBACvC,gBAAgB,CAAC,KAAK,EAAG,CAAC;oBACxB,KAAK,EAAE,MAAM;oBACb,IAAI,EAAE,KAAK;iBACZ,CAAC,CAAC;YACL,CAAC;YACD,uCAAuC;QACzC,CAAC;QAED,kGAAkG;QAClG,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,KAAK,MAAM,oBAAoB,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC9D,oBAAoB,CAAC;oBACnB,KAAK,EAAE,SAAS;oBAChB,IAAI,EAAE,IAAI;iBACX,CAAC,CAAC;YACL,CAAC;YACD,OAAO;QACT,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAYD;;GAEG;AACH,SAAS,sBAAsB,CAC7B,UAA8C,EAC9C,MAA8B;IAE9B,mEAAmE;IACnE,MAAM,KAAK,GAA+B,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAEjE,kDAAkD;IAClD,MAAM,kBAAkB,GAAkC,IAAI,GAAG,EAAE,CAAC;IACpE,KAAK,MAAM,SAAS,IAAI,KAAK,EAAE,CAAC;QAC9B,2BAA2B,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;IAC7D,CAAC;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC5B,CAAC;AAED;;;GAGG;AACH,SAAS,2BAA2B,CAClC,SAAmC,EACnC,eAA8C;IAE9C,IAAI,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;QACnC,MAAM,IAAI,KAAK,CACb,0CAA0C;YACxC,CAAC,GAAG,eAAe,EAAE,SAAS,CAAC;iBAC5B,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;iBACtC,OAAO,EAAE;iBACT,IAAI,CAAC,SAAS,CAAC;YAClB,6DAA6D,aAAa,CAAC,gBAAgB,GAAG,CACjG,CAAC;IACJ,CAAC;IAED,IAAI,EAAE,kBAAkB,EAAE,GAAG,SAAS,CAAC;IAEvC,IAAI,kBAAkB,KAAK,SAAS,EAAE,CAAC;QACrC,gCAAgC;QAChC,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,kBAAkB,GAAG,CAAC,CAAC;IACvB,IAAI,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QAC7B,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC/B,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAC,SAAS,EAAE,CAAC;YAC3C,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAC3B,kBAAkB,EAClB,2BAA2B,CAAC,QAAQ,EAAE,eAAe,CAAC,CACvD,CAAC;QACJ,CAAC;QACD,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IACD,sDAAsD;IACtD,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,GAAG,SAAS,CAAC,MAAM,CAAC;IAErE,gGAAgG;IAChG,mFAAmF;IAEnF,OAAO,kBAAkB,CAAC;AAC5B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { OperationExecutionRecord } from './OperationExecutionRecord';\nimport { OperationStatus } from './OperationStatus';\nimport { RushConstants } from '../RushConstants';\n\n/**\n * Implementation of the async iteration protocol for a collection of IOperation objects.\n * The async iterator will wait for an operation to be ready for execution, or terminate if there are no more operations.\n *\n * @remarks\n * If the caller does not update dependencies prior to invoking `next()` on the iterator again,\n * it must manually invoke `assignOperations()` after performing the updates, otherwise iterators will\n * stall until another operations completes.\n */\nexport class AsyncOperationQueue\n  implements AsyncIterable<OperationExecutionRecord>, AsyncIterator<OperationExecutionRecord>\n{\n  private readonly _queue: OperationExecutionRecord[];\n  private readonly _pendingIterators: ((result: IteratorResult<OperationExecutionRecord>) => void)[];\n  private readonly _totalOperations: number;\n  private readonly _completedOperations: Set<OperationExecutionRecord>;\n\n  private _isDone: boolean;\n\n  /**\n   * @param operations - The set of operations to be executed\n   * @param sortFn - A function that sorts operations in reverse priority order:\n   *   - Returning a positive value indicates that `a` should execute before `b`.\n   *   - Returning a negative value indicates that `b` should execute before `a`.\n   *   - Returning 0 indicates no preference.\n   */\n  public constructor(operations: Iterable<OperationExecutionRecord>, sortFn: IOperationSortFunction) {\n    this._queue = computeTopologyAndSort(operations, sortFn);\n    this._pendingIterators = [];\n    this._totalOperations = this._queue.length;\n    this._isDone = false;\n    this._completedOperations = new Set<OperationExecutionRecord>();\n  }\n\n  /**\n   * For use with `for await (const operation of taskQueue)`\n   * @see {AsyncIterator}\n   */\n  public next(): Promise<IteratorResult<OperationExecutionRecord>> {\n    const { _pendingIterators: waitingIterators } = this;\n\n    const promise: Promise<IteratorResult<OperationExecutionRecord>> = new Promise(\n      (resolve: (result: IteratorResult<OperationExecutionRecord>) => void) => {\n        waitingIterators.push(resolve);\n      }\n    );\n\n    this.assignOperations();\n\n    return promise;\n  }\n\n  /**\n   * Set a callback to be invoked when one operation is completed.\n   * If all operations are completed, set the queue to done, resolve all pending iterators in next cycle.\n   */\n  public complete(record: OperationExecutionRecord): void {\n    this._completedOperations.add(record);\n\n    // Apply status changes to direct dependents\n    if (record.status !== OperationStatus.Failure && record.status !== OperationStatus.Blocked) {\n      // Only do so if the operation did not fail or get blocked\n      for (const item of record.consumers) {\n        // Remove this operation from the dependencies, to unblock the scheduler\n        if (\n          item.dependencies.delete(record) &&\n          item.dependencies.size === 0 &&\n          item.status === OperationStatus.Waiting\n        ) {\n          item.status = OperationStatus.Ready;\n        }\n      }\n    }\n\n    this.assignOperations();\n\n    if (this._completedOperations.size === this._totalOperations) {\n      this._isDone = true;\n    }\n  }\n\n  /**\n   * Routes ready operations with 0 dependencies to waiting iterators. Normally invoked as part of `next()`, but\n   * if the caller does not update operation dependencies prior to calling `next()`, may need to be invoked manually.\n   */\n  public assignOperations(): void {\n    const { _queue: queue, _pendingIterators: waitingIterators } = this;\n\n    // By iterating in reverse order we do less array shuffling when removing operations\n    for (let i: number = queue.length - 1; waitingIterators.length > 0 && i >= 0; i--) {\n      const record: OperationExecutionRecord = queue[i];\n\n      if (\n        record.status === OperationStatus.Blocked ||\n        record.status === OperationStatus.Skipped ||\n        record.status === OperationStatus.Success ||\n        record.status === OperationStatus.SuccessWithWarning ||\n        record.status === OperationStatus.FromCache ||\n        record.status === OperationStatus.NoOp ||\n        record.status === OperationStatus.Failure\n      ) {\n        // It shouldn't be on the queue, remove it\n        queue.splice(i, 1);\n      } else if (record.status === OperationStatus.Queued || record.status === OperationStatus.Executing) {\n        // This operation is currently executing\n        // next one plz :)\n      } else if (record.status === OperationStatus.Waiting) {\n        // This operation is not yet ready to be executed\n        // next one plz :)\n        continue;\n      } else if (record.status !== OperationStatus.Ready) {\n        // Sanity check\n        throw new Error(`Unexpected status \"${record.status}\" for queued operation: ${record.name}`);\n      } else {\n        // This task is ready to process, hand it to the iterator.\n        // Needs to have queue semantics, otherwise tools that iterate it get confused\n        record.status = OperationStatus.Queued;\n        waitingIterators.shift()!({\n          value: record,\n          done: false\n        });\n      }\n      // Otherwise operation is still waiting\n    }\n\n    // Since items only get removed from the queue when they have a final status, this should be safe.\n    if (queue.length === 0) {\n      this._isDone = true;\n    }\n\n    if (this._isDone) {\n      for (const resolveAsyncIterator of waitingIterators.splice(0)) {\n        resolveAsyncIterator({\n          value: undefined,\n          done: true\n        });\n      }\n      return;\n    }\n  }\n\n  /**\n   * Returns this queue as an async iterator, such that multiple functions iterating this object concurrently\n   * receive distinct iteration results.\n   */\n  public [Symbol.asyncIterator](): AsyncIterator<OperationExecutionRecord> {\n    return this;\n  }\n}\n\nexport interface IOperationSortFunction {\n  /**\n   * A function that sorts operations in reverse priority order:\n   * Returning a positive value indicates that `a` should execute before `b`.\n   * Returning a negative value indicates that `b` should execute before `a`.\n   * Returning 0 indicates no preference.\n   */\n  (a: OperationExecutionRecord, b: OperationExecutionRecord): number;\n}\n\n/**\n * Performs a depth-first search to topologically sort the operations, subject to override via sortFn\n */\nfunction computeTopologyAndSort(\n  operations: Iterable<OperationExecutionRecord>,\n  sortFn: IOperationSortFunction\n): OperationExecutionRecord[] {\n  // Clone the set of operations as an array, so that we can sort it.\n  const queue: OperationExecutionRecord[] = Array.from(operations);\n\n  // Create a collection for detecting visited nodes\n  const cycleDetectorStack: Set<OperationExecutionRecord> = new Set();\n  for (const operation of queue) {\n    calculateCriticalPathLength(operation, cycleDetectorStack);\n  }\n\n  return queue.sort(sortFn);\n}\n\n/**\n * Perform a depth-first search to find critical path length.\n * Cycle detection comes at minimal additional cost.\n */\nfunction calculateCriticalPathLength(\n  operation: OperationExecutionRecord,\n  dependencyChain: Set<OperationExecutionRecord>\n): number {\n  if (dependencyChain.has(operation)) {\n    throw new Error(\n      'A cyclic dependency was encountered:\\n  ' +\n        [...dependencyChain, operation]\n          .map((visitedTask) => visitedTask.name)\n          .reverse()\n          .join('\\n  -> ') +\n        `\\nConsider using the decoupledLocalDependencies option in ${RushConstants.rushJsonFilename}.`\n    );\n  }\n\n  let { criticalPathLength } = operation;\n\n  if (criticalPathLength !== undefined) {\n    // This has been visited already\n    return criticalPathLength;\n  }\n\n  criticalPathLength = 0;\n  if (operation.consumers.size) {\n    dependencyChain.add(operation);\n    for (const consumer of operation.consumers) {\n      criticalPathLength = Math.max(\n        criticalPathLength,\n        calculateCriticalPathLength(consumer, dependencyChain)\n      );\n    }\n    dependencyChain.delete(operation);\n  }\n  // Include the contribution from the current operation\n  operation.criticalPathLength = criticalPathLength + operation.weight;\n\n  // Directly writing operations to an output collection here would yield a topological sorted set\n  // However, we want a bit more fine-tuning of the output than just the raw topology\n\n  return criticalPathLength;\n}\n"]}