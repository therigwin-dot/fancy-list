// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
import { FileSystem, InternalError, JsonFile } from '@rushstack/node-core-library';
/**
 * A helper class for managing the state file of a operation.
 *
 * @internal
 */
export class OperationStateFile {
    constructor(options) {
        const { projectFolder, metadataFolder } = options;
        this.relativeFilepath = `${metadataFolder}/${OperationStateFile.filename}`;
        this.filepath = `${projectFolder}/${this.relativeFilepath}`;
    }
    get state() {
        return this._state;
    }
    async writeAsync(json) {
        await JsonFile.saveAsync(json, this.filepath, { ensureFolderExists: true, ignoreUndefinedValues: true });
        this._state = json;
    }
    async tryRestoreAsync() {
        try {
            this._state = await JsonFile.loadAsync(this.filepath);
        }
        catch (error) {
            if (FileSystem.isNotExistError(error)) {
                this._state = undefined;
            }
            else {
                // This should not happen
                throw new InternalError(error);
            }
        }
        return this._state;
    }
}
OperationStateFile.filename = 'state.json';
//# sourceMappingURL=OperationStateFile.js.map