{"version":3,"file":"ProjectLogWritable.js","sourceRoot":"","sources":["../../../src/logic/operations/ProjectLogWritable.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, FileWriter, InternalError, NewlineKind } from '@rushstack/node-core-library';\nimport {\n  SplitterTransform,\n  TerminalChunkKind,\n  TerminalWritable,\n  TextRewriterTransform,\n  type ITerminalChunk\n} from '@rushstack/terminal';\n\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { PackageNameParsers } from '../../api/PackageNameParsers';\nimport { RushConstants } from '../RushConstants';\n\nexport interface IProjectLogWritableOptions {\n  logFilePaths: ILogFilePaths;\n  enableChunkedOutput?: boolean;\n}\n\nexport interface ILogFileNames {\n  textFileName: string;\n  jsonlFileName: string;\n  errorFileName: string;\n}\n\n/**\n * Information about the log files for an operation.\n *\n * @alpha\n */\nexport interface ILogFilePaths {\n  /**\n   * The absolute path to the folder containing the text log files.\n   * Provided as a convenience since it is an intermediary value of producing the text log file path.\n   */\n  textFolder: string;\n  /**\n   * The absolute path to the folder containing the JSONL log files.\n   * Provided as a convenience since it is an intermediary value of producing the jsonl log file path.\n   */\n  jsonlFolder: string;\n\n  /**\n   * The absolute path to the merged (interleaved stdout and stderr) text log.\n   * ANSI escape codes have been stripped.\n   */\n  text: string;\n  /**\n   * The absolute path to the stderr text log.\n   * ANSI escape codes have been stripped.\n   */\n  error: string;\n  /**\n   * The absolute path to the JSONL log. ANSI escape codes are left intact to be able to reproduce the console output.\n   */\n  jsonl: string;\n}\n\nexport interface IGetLogFilePathsOptions {\n  project: Pick<RushConfigurationProject, 'projectFolder' | 'packageName'>;\n  logFilenameIdentifier: string;\n}\n\nconst LOG_CHUNKS_FOLDER_RELATIVE_PATH: string = `${RushConstants.projectRushFolderName}/${RushConstants.rushTempFolderName}/chunked-rush-logs`;\n\n/**\n * A terminal stream that writes all log chunks to a JSONL format so they can be faithfully reconstructed\n *  during build cache restores. This is used for adding warning + error messages in cobuilds where the original\n *  logs cannot be completely restored from the existing `all.log` and `error.log` files.\n *\n * Example output:\n * libraries/rush-lib/.rush/temp/operations/rush-lib._phase_build.chunks.jsonl\n * ```\n * {\"kind\":\"O\",\"text\":\"Invoking: heft run --only build -- --clean \\n\"}\n * {\"kind\":\"O\",\"text\":\" ---- build started ---- \\n\"}\n * {\"kind\":\"O\",\"text\":\"[build:clean] Deleted 0 files and 5 folders\\n\"}\n * {\"kind\":\"O\",\"text\":\"[build:typescript] Using TypeScript version 5.4.2\\n\"}\n * {\"kind\":\"O\",\"text\":\"[build:lint] Using ESLint version 8.57.0\\n\"}\n * {\"kind\":\"E\",\"text\":\"[build:lint] Warning: libraries/rush-lib/src/logic/operations/LogChunksWritable.ts:15:7 - (@typescript-eslint/typedef) Expected test to have a type annotation.\\n\"}\n * {\"kind\":\"E\",\"text\":\"[build:lint] Warning: libraries/rush-lib/src/logic/operations/LogChunksWritable.ts:15:7 - (@typescript-eslint/no-unused-vars) 'test' is assigned a value but never used.\\n\"}\n * {\"kind\":\"O\",\"text\":\"[build:typescript] Copied 1138 folders or files and linked 0 files\\n\"}\n * {\"kind\":\"O\",\"text\":\"[build:webpack] Using Webpack version 5.82.1\\n\"}\n * {\"kind\":\"O\",\"text\":\"[build:webpack] Running Webpack compilation\\n\"}\n * {\"kind\":\"O\",\"text\":\"[build:api-extractor] Using API Extractor version 7.43.1\\n\"}\n * {\"kind\":\"O\",\"text\":\"[build:api-extractor] Analysis will use the bundled TypeScript version 5.4.2\\n\"}\n * {\"kind\":\"O\",\"text\":\"[build:copy-mock-flush-telemetry-plugin] Copied 1260 folders or files and linked 5 files\\n\"}\n * {\"kind\":\"O\",\"text\":\" ---- build finished (6.856s) ---- \\n\"}\n * {\"kind\":\"O\",\"text\":\"-------------------- Finished (6.858s) --------------------\\n\"}\n * ```\n */\nexport class JsonLFileWritable extends TerminalWritable {\n  public readonly logPath: string;\n\n  private _writer: FileWriter | undefined;\n\n  public constructor(logPath: string) {\n    super();\n\n    this.logPath = logPath;\n\n    this._writer = FileWriter.open(logPath);\n  }\n\n  // Override writeChunk function to throw custom error\n  public writeChunk(chunk: ITerminalChunk): void {\n    if (!this._writer) {\n      throw new InternalError(`Log writer was closed for ${this.logPath}`);\n    }\n    // Stderr can always get written to a error log writer\n    super.writeChunk(chunk);\n  }\n\n  protected onWriteChunk(chunk: ITerminalChunk): void {\n    if (!this._writer) {\n      throw new InternalError(`Log writer was closed for ${this.logPath}`);\n    }\n    this._writer.write(JSON.stringify(chunk) + '\\n');\n  }\n\n  protected onClose(): void {\n    if (this._writer) {\n      try {\n        this._writer.close();\n      } catch (error) {\n        throw new InternalError('Failed to close file handle for ' + this._writer.filePath);\n      }\n      this._writer = undefined;\n    }\n  }\n}\n\n/**\n * A terminal stream that writes two text log files: one with interleaved stdout and stderr, and one with just stderr.\n */\nexport class SplitLogFileWritable extends TerminalWritable {\n  public readonly logPath: string;\n  public readonly errorLogPath: string;\n\n  private _logWriter: FileWriter | undefined = undefined;\n  private _errorLogWriter: FileWriter | undefined = undefined;\n\n  public constructor(logPath: string, errorLogPath: string) {\n    super();\n\n    this.logPath = logPath;\n    this.errorLogPath = errorLogPath;\n\n    this._logWriter = FileWriter.open(logPath);\n    this._errorLogWriter = undefined;\n  }\n\n  // Override writeChunk function to throw custom error\n  public writeChunk(chunk: ITerminalChunk): void {\n    if (!this._logWriter) {\n      throw new InternalError(`Log writer was closed for ${this.logPath}`);\n    }\n    // Stderr can always get written to a error log writer\n    super.writeChunk(chunk);\n  }\n\n  protected onWriteChunk(chunk: ITerminalChunk): void {\n    if (!this._logWriter) {\n      throw new InternalError('Output file was closed');\n    }\n    // Both stderr and stdout get written to *.<phaseName>.log\n    this._logWriter.write(chunk.text);\n\n    if (chunk.kind === TerminalChunkKind.Stderr) {\n      // Only stderr gets written to *.<phaseName>.error.log\n      if (!this._errorLogWriter) {\n        this._errorLogWriter = FileWriter.open(this.errorLogPath);\n      }\n      this._errorLogWriter.write(chunk.text);\n    }\n  }\n\n  protected onClose(): void {\n    if (this._logWriter) {\n      try {\n        this._logWriter.close();\n      } catch (error) {\n        throw new InternalError('Failed to close file handle for ' + this._logWriter.filePath);\n      }\n      this._logWriter = undefined;\n    }\n\n    if (this._errorLogWriter) {\n      try {\n        this._errorLogWriter.close();\n      } catch (error) {\n        throw new InternalError('Failed to close file handle for ' + this._errorLogWriter.filePath);\n      }\n      this._errorLogWriter = undefined;\n    }\n  }\n}\n\n/**\n * Initializes the project log files for a project. Produces a combined log file, an error log file, and optionally a\n * chunks file that can be used to reconstrct the original console output.\n * @param options - The options to initialize the project log files.\n * @returns The terminal writable stream that will write to the log files.\n */\nexport async function initializeProjectLogFilesAsync(\n  options: IProjectLogWritableOptions\n): Promise<TerminalWritable> {\n  const { logFilePaths, enableChunkedOutput = false } = options;\n\n  const {\n    textFolder: logFolderPath,\n    jsonlFolder: jsonlFolderPath,\n    text: logPath,\n    error: errorLogPath,\n    jsonl: jsonlPath\n  } = logFilePaths;\n  await Promise.all([\n    FileSystem.ensureFolderAsync(logFolderPath),\n    enableChunkedOutput && FileSystem.ensureFolderAsync(jsonlFolderPath),\n    FileSystem.deleteFileAsync(logPath),\n    FileSystem.deleteFileAsync(errorLogPath),\n    FileSystem.deleteFileAsync(jsonlPath)\n  ]);\n\n  const splitLog: TerminalWritable = new TextRewriterTransform({\n    destination: new SplitLogFileWritable(logPath, errorLogPath),\n    removeColors: true,\n    normalizeNewlines: NewlineKind.OsDefault\n  });\n\n  if (enableChunkedOutput) {\n    const chunksFile: JsonLFileWritable = new JsonLFileWritable(jsonlPath);\n    const splitter: SplitterTransform = new SplitterTransform({\n      destinations: [splitLog, chunksFile]\n    });\n    return splitter;\n  }\n\n  return splitLog;\n}\n\n/**\n * @internal\n *\n * @param packageName - The raw package name\n * @param logFilenameIdentifier - The identifier to append to the log file name (typically the phase name)\n * @returns The base names of the log files\n */\nexport function getLogfileBaseNames(packageName: string, logFilenameIdentifier: string): ILogFileNames {\n  const unscopedProjectName: string = PackageNameParsers.permissive.getUnscopedName(packageName);\n  const logFileBaseName: string = `${unscopedProjectName}.${logFilenameIdentifier}`;\n\n  return {\n    textFileName: `${logFileBaseName}.log`,\n    jsonlFileName: `${logFileBaseName}.chunks.jsonl`,\n    errorFileName: `${logFileBaseName}.error.log`\n  };\n}\n\n/**\n * @internal\n *\n * @param projectFolder - The absolute path of the project folder\n * @returns The absolute paths of the log folders for regular and chunked logs\n */\nexport function getProjectLogFolders(\n  projectFolder: string\n): Pick<ILogFilePaths, 'textFolder' | 'jsonlFolder'> {\n  const textFolder: string = `${projectFolder}/${RushConstants.rushLogsFolderName}`;\n  const jsonlFolder: string = `${projectFolder}/${LOG_CHUNKS_FOLDER_RELATIVE_PATH}`;\n\n  return { textFolder, jsonlFolder };\n}\n\n/**\n * @internal\n *\n * @param options - The options to get the log file paths\n * @returns All information about log file paths for the project and log identifier\n */\nexport function getProjectLogFilePaths(options: IGetLogFilePathsOptions): ILogFilePaths {\n  const {\n    project: { projectFolder, packageName },\n    logFilenameIdentifier\n  } = options;\n\n  const { textFolder, jsonlFolder } = getProjectLogFolders(projectFolder);\n  const {\n    textFileName: textLog,\n    jsonlFileName: jsonlLog,\n    errorFileName: errorLog\n  } = getLogfileBaseNames(packageName, logFilenameIdentifier);\n\n  const textPath: string = `${textFolder}/${textLog}`;\n  const errorPath: string = `${textFolder}/${errorLog}`;\n  const jsonlPath: string = `${jsonlFolder}/${jsonlLog}`;\n\n  return {\n    textFolder,\n    jsonlFolder,\n\n    text: textPath,\n    error: errorPath,\n    jsonl: jsonlPath\n  };\n}\n"]}