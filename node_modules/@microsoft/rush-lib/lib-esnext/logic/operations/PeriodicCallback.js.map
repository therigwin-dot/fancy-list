{"version":3,"file":"PeriodicCallback.js","sourceRoot":"","sources":["../../../src/logic/operations/PeriodicCallback.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAQ3D;;;;GAIG;AACH,MAAM,OAAO,gBAAgB;IAM3B,YAAmB,OAAiC;QAClD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC1B,CAAC;IAEM,WAAW,CAAC,QAAqB;QACtC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;QACnE,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK;QACV,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjC,OAAO;QACT,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,GAAG,EAAE;YAClC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;QACpD,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACrB,CAAC;IAEM,IAAI;QACT,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAChC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;YAC7B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAC1B,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nexport type ICallbackFn = () => Promise<void> | void;\n\nexport interface IPeriodicCallbackOptions {\n  interval: number;\n}\n\n/**\n * A help class to run callbacks in a loop with a specified interval.\n *\n * @beta\n */\nexport class PeriodicCallback {\n  private _callbacks: ICallbackFn[];\n  private _interval: number;\n  private _intervalId: NodeJS.Timeout | undefined;\n  private _isRunning: boolean;\n\n  public constructor(options: IPeriodicCallbackOptions) {\n    this._callbacks = [];\n    this._interval = options.interval;\n    this._isRunning = false;\n  }\n\n  public addCallback(callback: ICallbackFn): void {\n    if (this._isRunning) {\n      throw new Error('Can not add callback while watcher is running');\n    }\n    this._callbacks.push(callback);\n  }\n\n  public start(): void {\n    if (this._intervalId) {\n      throw new Error('Watcher already started');\n    }\n    if (this._callbacks.length === 0) {\n      return;\n    }\n    this._isRunning = true;\n    this._intervalId = setInterval(() => {\n      this._callbacks.forEach((callback) => callback());\n    }, this._interval);\n  }\n\n  public stop(): void {\n    if (this._intervalId) {\n      clearInterval(this._intervalId);\n      this._intervalId = undefined;\n      this._isRunning = false;\n    }\n  }\n}\n"]}