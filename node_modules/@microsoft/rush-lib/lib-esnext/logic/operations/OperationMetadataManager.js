// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
import * as fs from 'fs';
import { Async, FileSystem } from '@rushstack/node-core-library';
import { TerminalChunkKind, TerminalProviderSeverity } from '@rushstack/terminal';
import { OperationStateFile } from './OperationStateFile';
import { RushConstants } from '../RushConstants';
/**
 * A helper class for managing the meta files of a operation.
 *
 * @internal
 */
export class OperationMetadataManager {
    constructor(options) {
        const { rushProject, operation: { logFilenameIdentifier } } = options;
        const { projectFolder } = rushProject;
        this.logFilenameIdentifier = logFilenameIdentifier;
        const metadataFolderPath = `${RushConstants.projectRushFolderName}/${RushConstants.rushTempFolderName}/operation/${logFilenameIdentifier}`;
        this.stateFile = new OperationStateFile({
            projectFolder: projectFolder,
            metadataFolder: metadataFolderPath
        });
        this._metadataFolderPath = metadataFolderPath;
        this._logPath = `${projectFolder}/${metadataFolderPath}/all.log`;
        this._errorLogPath = `${projectFolder}/${metadataFolderPath}/error.log`;
        this._logChunksPath = `${projectFolder}/${metadataFolderPath}/log-chunks.jsonl`;
    }
    /**
     * Returns the relative paths of the metadata files to project folder.
     *
     * Example: `.rush/temp/operation/_phase_build/state.json`
     * Example: `.rush/temp/operation/_phase_build/all.log`
     * Example: `.rush/temp/operation/_phase_build/error.log`
     */
    get metadataFolderPath() {
        return this._metadataFolderPath;
    }
    async saveAsync({ durationInSeconds, cobuildContextId, cobuildRunnerId, logPath, errorLogPath, logChunksPath }) {
        const state = {
            nonCachedDurationMs: durationInSeconds * 1000,
            cobuildContextId,
            cobuildRunnerId
        };
        await this.stateFile.writeAsync(state);
        const copyFileOptions = [
            {
                sourcePath: logPath,
                destinationPath: this._logPath
            },
            {
                sourcePath: errorLogPath,
                destinationPath: this._errorLogPath
            },
            {
                sourcePath: logChunksPath,
                destinationPath: this._logChunksPath
            }
        ];
        // Try to copy log files
        await Async.forEachAsync(copyFileOptions, async (options) => {
            try {
                await FileSystem.copyFileAsync(options);
            }
            catch (e) {
                if (!FileSystem.isNotExistError(e)) {
                    throw e;
                }
            }
        });
    }
    async tryRestoreAsync({ terminal, terminalProvider, errorLogPath }) {
        await this.stateFile.tryRestoreAsync();
        try {
            const rawLogChunks = await FileSystem.readFileAsync(this._logChunksPath);
            const chunks = [];
            for (const chunk of rawLogChunks.split('\n')) {
                if (chunk) {
                    chunks.push(JSON.parse(chunk));
                }
            }
            for (const { kind, text } of chunks) {
                if (kind === TerminalChunkKind.Stderr) {
                    terminalProvider.write(text, TerminalProviderSeverity.error);
                }
                else {
                    terminalProvider.write(text, TerminalProviderSeverity.log);
                }
            }
        }
        catch (e) {
            if (FileSystem.isNotExistError(e)) {
                // Log chunks file doesn't exist, try to restore log file
                await restoreFromLogFile(terminal, this._logPath);
            }
            else {
                throw e;
            }
        }
        // Try to restore cached error log as error log file
        try {
            await FileSystem.copyFileAsync({
                sourcePath: this._errorLogPath,
                destinationPath: errorLogPath
            });
        }
        catch (e) {
            if (!FileSystem.isNotExistError(e)) {
                throw e;
            }
        }
    }
}
async function restoreFromLogFile(terminal, path) {
    var _a, e_1, _b, _c;
    let logReadStream;
    try {
        logReadStream = fs.createReadStream(path, {
            encoding: 'utf-8'
        });
        try {
            for (var _d = true, logReadStream_1 = __asyncValues(logReadStream), logReadStream_1_1; logReadStream_1_1 = await logReadStream_1.next(), _a = logReadStream_1_1.done, !_a; _d = true) {
                _c = logReadStream_1_1.value;
                _d = false;
                const data = _c;
                terminal.write(data);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = logReadStream_1.return)) await _b.call(logReadStream_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    catch (logReadStreamError) {
        if (!FileSystem.isNotExistError(logReadStreamError)) {
            throw logReadStreamError;
        }
    }
    finally {
        // Close the read stream
        logReadStream === null || logReadStream === void 0 ? void 0 : logReadStream.close();
    }
}
//# sourceMappingURL=OperationMetadataManager.js.map