{"version":3,"file":"BaseProjectShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/base/BaseProjectShrinkwrapFile.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAGpE,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAGjD;;;;GAIG;AACH,MAAM,OAAgB,yBAAyB;IAS7C,YAAmB,cAA+B,EAAE,OAAiC;QACnF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE/F,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,OAAiC;QACvF,MAAM,yBAAyB,GAAW,yBAAyB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QACnG,MAAM,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,yBAAyB,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;IACxF,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,qBAAqB,CAAC,OAAiC;QACnE,OAAO,GAAG,OAAO,CAAC,qBAAqB,IAAI,aAAa,CAAC,yBAAyB,EAAE,CAAC;IACvF,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,mBAAmB;QAC9B,MAAM,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC,CAAC;IAChG,CAAC;CAQF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, JsonFile } from '@rushstack/node-core-library';\n\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { RushConstants } from '../RushConstants';\nimport type { BaseShrinkwrapFile } from './BaseShrinkwrapFile';\n\n/**\n * This class handles creating the project/.rush/temp/shrinkwrap-deps.json file\n * which tracks the direct and indirect dependencies that a project consumes. This is used\n * to better determine which projects should be rebuilt when dependencies are updated.\n */\nexport abstract class BaseProjectShrinkwrapFile<TShrinkwrapFile extends BaseShrinkwrapFile> {\n  public readonly projectShrinkwrapFilePath: string;\n  protected readonly project: RushConfigurationProject;\n\n  /**\n   * The shrinkwrap file that the project shrinkwrap file is based off of.\n   */\n  protected readonly shrinkwrapFile: TShrinkwrapFile;\n\n  public constructor(shrinkwrapFile: TShrinkwrapFile, project: RushConfigurationProject) {\n    this.project = project;\n    this.projectShrinkwrapFilePath = BaseProjectShrinkwrapFile.getFilePathForProject(this.project);\n\n    this.shrinkwrapFile = shrinkwrapFile;\n  }\n\n  /**\n   * Save an empty project shrinkwrap file. This is used in repos with no dependencies.\n   */\n  public static async saveEmptyProjectShrinkwrapFileAsync(project: RushConfigurationProject): Promise<void> {\n    const projectShrinkwrapFilePath: string = BaseProjectShrinkwrapFile.getFilePathForProject(project);\n    await JsonFile.saveAsync({}, projectShrinkwrapFilePath, { ensureFolderExists: true });\n  }\n\n  /**\n   * Get the fully-qualified path to the <project>/.rush/temp/shrinkwrap-deps.json\n   * for the specified project.\n   */\n  public static getFilePathForProject(project: RushConfigurationProject): string {\n    return `${project.projectRushTempFolder}/${RushConstants.projectShrinkwrapFilename}`;\n  }\n\n  /**\n   * If the <project>/.rush/temp/shrinkwrap-deps.json file exists, delete it. Otherwise, do nothing.\n   */\n  public async deleteIfExistsAsync(): Promise<void> {\n    await FileSystem.deleteFileAsync(this.projectShrinkwrapFilePath, { throwIfNotExists: false });\n  }\n\n  /**\n   * Generate and write the project shrinkwrap file to <project>/.rush/temp/shrinkwrap-deps.json.\n   *\n   * @virtual\n   */\n  public abstract updateProjectShrinkwrapAsync(): Promise<void>;\n}\n"]}