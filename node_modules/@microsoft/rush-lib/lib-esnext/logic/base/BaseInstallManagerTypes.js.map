{"version":3,"file":"BaseInstallManagerTypes.js","sourceRoot":"","sources":["../../../src/logic/base/BaseInstallManagerTypes.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ITerminal } from '@rushstack/terminal';\nimport type { Subspace } from '../../api/Subspace';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\n\nexport interface IInstallManagerOptions {\n  /**\n   * Whether the global \"--debug\" flag was specified.\n   */\n  debug: boolean;\n\n  /**\n   * Whether or not Rush will automatically update the shrinkwrap file.\n   * True for \"rush update\", false for \"rush install\".\n   */\n  allowShrinkwrapUpdates: boolean;\n\n  /**\n   * Whether to check the validation before install only, without actually installing anything.\n   */\n  checkOnly: boolean;\n\n  /**\n   * Whether to only run resolutions. Only supported for PNPM.\n   */\n  resolutionOnly?: boolean;\n\n  /**\n   * Whether a \"--bypass-policy\" flag can be specified.\n   */\n  bypassPolicyAllowed?: boolean;\n\n  /**\n   * Whether to skip policy checks.\n   */\n  bypassPolicy: boolean;\n\n  /**\n   * Whether to skip linking, i.e. require \"rush link\" to be done manually later.\n   */\n  noLink: boolean;\n\n  /**\n   * Whether to delete the shrinkwrap file before installation, i.e. so that all dependencies\n   * will be upgraded to the latest SemVer-compatible version.\n   */\n  fullUpgrade: boolean;\n\n  /**\n   * If set, only update the shrinkwrap file; do not create node_modules.\n   */\n  onlyShrinkwrap?: boolean;\n\n  /**\n   * Whether to force an update to the shrinkwrap file even if it appears to be unnecessary.\n   * Normally Rush uses heuristics to determine when \"pnpm install\" can be skipped,\n   * but sometimes the heuristics can be inaccurate due to external influences\n   * (pnpmfile.js script logic, registry changes, etc).\n   */\n  recheckShrinkwrap: boolean;\n\n  /**\n   * Do not attempt to access the network. Report an error if the required dependencies\n   * cannot be obtained from the local cache.\n   */\n  offline: boolean;\n\n  /**\n   * The value of the \"--network-concurrency\" command-line parameter, which\n   * is a diagnostic option used to troubleshoot network failures.\n   *\n   * Currently only supported for PNPM.\n   */\n  networkConcurrency: number | undefined;\n\n  /**\n   * Whether or not to collect verbose logs from the package manager.\n   * If specified when using PNPM, the logs will be in /common/temp/pnpm.log\n   */\n  collectLogFile: boolean;\n\n  /**\n   * The variant to consider when performing installations and validating shrinkwrap updates.\n   */\n  variant: string | undefined;\n\n  /**\n   * Retry the install the specified number of times\n   */\n  maxInstallAttempts: number;\n\n  /**\n   * An array of `--filter` argument values. For example, if the array is [\"a\", \"b\"] then Rush would invoke\n   * `pnpm install --filter a --filter b` which restricts the install/update to dependencies of\n   * workspace projects \"a\" and \"b\". If the array is empty, then an unfiltered install\n   * is performed. Filtered installs have some limitations such as less comprehensive version analysis.\n   *\n   * @remarks\n   * Note that PNPM may arbitrarily ignore `--filter` (producing an unfiltered install) in certain situations,\n   * for example when `config.dedupe-peer-dependents=true` with PNPM 8.  Rush tries to circumvent this, under the\n   * assumption that a user who invokes a filtered install cares more about lockfile stability than duplication.\n   */\n  pnpmFilterArgumentValues: string[];\n\n  /**\n   * The set of projects for which installation should be performed.\n   */\n  selectedProjects: Set<RushConfigurationProject>;\n\n  /**\n   * Callback to invoke between preparing the common/temp folder and running installation.\n   */\n  beforeInstallAsync?: (subspace: Subspace) => Promise<void>;\n\n  /**\n   * Callback to invoke after a successful installation.\n   */\n  afterInstallAsync?: (subspace: Subspace) => Promise<void>;\n\n  /**\n   * The specific subspace to install.\n   */\n  subspace: Subspace;\n\n  /**\n   * The terminal where output should be printed.\n   */\n  terminal: ITerminal;\n}\n"]}