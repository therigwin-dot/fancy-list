{"version":3,"file":"PackageJsonUpdater.js","sourceRoot":"","sources":["../../src/logic/PackageJsonUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as semver from 'semver';\nimport type * as NpmCheck from 'npm-check';\nimport { ConsoleTerminalProvider, Terminal, type ITerminalProvider, Colorize } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport type { BaseInstallManager } from './base/BaseInstallManager';\nimport type { IInstallManagerOptions } from './base/BaseInstallManagerTypes';\nimport { InstallManagerFactory } from './InstallManagerFactory';\nimport { VersionMismatchFinder } from './versionMismatch/VersionMismatchFinder';\nimport { PurgeManager } from './PurgeManager';\nimport { Utilities } from '../utilities/Utilities';\nimport { DependencyType, type PackageJsonDependency } from '../api/PackageJsonEditor';\nimport type { RushGlobalFolder } from '../api/RushGlobalFolder';\nimport type { RushConfigurationProject } from '../api/RushConfigurationProject';\nimport type { VersionMismatchFinderEntity } from './versionMismatch/VersionMismatchFinderEntity';\nimport { VersionMismatchFinderProject } from './versionMismatch/VersionMismatchFinderProject';\nimport { RushConstants } from './RushConstants';\nimport { InstallHelpers } from './installManager/InstallHelpers';\nimport type { DependencyAnalyzer, IDependencyAnalysis } from './DependencyAnalyzer';\nimport {\n  type IPackageForRushAdd,\n  type IPackageJsonUpdaterRushAddOptions,\n  type IPackageJsonUpdaterRushBaseUpdateOptions,\n  type IPackageJsonUpdaterRushRemoveOptions,\n  SemVerStyle\n} from './PackageJsonUpdaterTypes';\nimport type { Subspace } from '../api/Subspace';\n\n/**\n * Options for adding a dependency to a particular project.\n */\nexport interface IPackageJsonUpdaterRushUpgradeOptions {\n  /**\n   * The projects whose package.jsons should get updated\n   */\n  projects: RushConfigurationProject[];\n  /**\n   * The dependencies to be added.\n   */\n  packagesToAdd: NpmCheck.INpmCheckPackage[];\n  /**\n   * If specified, other packages that use this dependency will also have their package.json's updated.\n   */\n  updateOtherPackages: boolean;\n  /**\n   * If specified, \"rush update\" will not be run after updating the package.json file(s).\n   */\n  skipUpdate: boolean;\n  /**\n   * If specified, \"rush update\" will be run in debug mode.\n   */\n  debugInstall: boolean;\n  /**\n   * The variant to consider when performing installations and validating shrinkwrap updates.\n   */\n  variant: string | undefined;\n}\n\n/**\n * Configuration options for adding or updating a dependency in single project\n * or removing a dependency from a particular project\n */\nexport interface IBaseUpdateProjectOptions {\n  /**\n   * The project which will have its package.json updated\n   */\n  project: VersionMismatchFinderEntity;\n  /**\n   * Map of packages to update\n   * Its key is the name of the dependency to be added or updated in the project\n   * Its value is the new SemVer specifier that should be added to the project's package.json\n   * If trying to remove this packages, value can be empty string\n   */\n  dependenciesToAddOrUpdateOrRemove: Record<string, string>;\n}\n\n/**\n * Configuration options for adding or updating a dependency in a single project\n */\nexport interface IUpdateProjectOptions extends IBaseUpdateProjectOptions {\n  /**\n   * The type of dependency that should be updated. If left empty, this will be auto-detected.\n   * If it cannot be auto-detected an exception will be thrown.\n   */\n  dependencyType?: DependencyType;\n}\n/**\n * Configuration options for removing dependencies from a single project\n */\nexport interface IRemoveProjectOptions extends IBaseUpdateProjectOptions {}\n\n/**\n * A helper class for managing the dependencies of various package.json files.\n * @internal\n */\nexport class PackageJsonUpdater {\n  private _rushConfiguration: RushConfiguration;\n  private _rushGlobalFolder: RushGlobalFolder;\n\n  private readonly _terminalProvider: ITerminalProvider;\n  private readonly _terminal: Terminal;\n\n  public constructor(rushConfiguration: RushConfiguration, rushGlobalFolder: RushGlobalFolder) {\n    this._rushConfiguration = rushConfiguration;\n    this._rushGlobalFolder = rushGlobalFolder;\n\n    this._terminalProvider = new ConsoleTerminalProvider();\n    this._terminal = new Terminal(this._terminalProvider);\n  }\n\n  /**\n   * Upgrade dependencies to a particular project, or across specified projects. This is the core business logic for\n   * \"rush upgrade-interactive\".\n   */\n  public async doRushUpgradeAsync(options: IPackageJsonUpdaterRushUpgradeOptions): Promise<void> {\n    const { projects, packagesToAdd, updateOtherPackages, skipUpdate, debugInstall, variant } = options;\n    const { DependencyAnalyzer } = await import(\n      /* webpackChunkName: 'DependencyAnalyzer' */\n      './DependencyAnalyzer'\n    );\n    const dependencyAnalyzer: DependencyAnalyzer = DependencyAnalyzer.forRushConfiguration(\n      this._rushConfiguration\n    );\n    const {\n      allVersionsByPackageName,\n      implicitlyPreferredVersionByPackageName,\n      commonVersionsConfiguration\n    }: IDependencyAnalysis = dependencyAnalyzer.getAnalysis(undefined, variant, false);\n\n    const dependenciesToUpdate: Record<string, string> = {};\n    const devDependenciesToUpdate: Record<string, string> = {};\n    const peerDependenciesToUpdate: Record<string, string> = {};\n\n    for (const {\n      moduleName,\n      latest: latestVersion,\n      packageJson,\n      devDependency,\n      peerDependency\n    } of packagesToAdd) {\n      const inferredRangeStyle: SemVerStyle = this._cheaplyDetectSemVerRangeStyle(packageJson);\n      const implicitlyPreferredVersion: string | undefined =\n        implicitlyPreferredVersionByPackageName.get(moduleName);\n\n      const explicitlyPreferredVersion: string | undefined =\n        commonVersionsConfiguration.preferredVersions.get(moduleName);\n\n      const version: string = await this._getNormalizedVersionSpecAsync(\n        projects,\n        moduleName,\n        latestVersion,\n        implicitlyPreferredVersion,\n        explicitlyPreferredVersion,\n        inferredRangeStyle,\n        commonVersionsConfiguration.ensureConsistentVersions\n      );\n\n      if (devDependency) {\n        devDependenciesToUpdate[moduleName] = version;\n      } else if (peerDependency) {\n        peerDependenciesToUpdate[moduleName] = version;\n      } else {\n        dependenciesToUpdate[moduleName] = version;\n      }\n\n      this._terminal.writeLine(\n        Colorize.green(`Updating projects to use `) + moduleName + '@' + Colorize.cyan(version)\n      );\n      this._terminal.writeLine();\n\n      const existingSpecifiedVersions: Set<string> | undefined = allVersionsByPackageName.get(moduleName);\n      if (\n        existingSpecifiedVersions &&\n        !existingSpecifiedVersions.has(version) &&\n        commonVersionsConfiguration.ensureConsistentVersions &&\n        !updateOtherPackages\n      ) {\n        // There are existing versions, and the version we're going to use is not one of them, and this repo\n        // requires consistent versions, and we aren't going to update other packages, so we can't proceed.\n\n        const existingVersionList: string = Array.from(existingSpecifiedVersions).join(', ');\n        throw new Error(\n          `Adding '${moduleName}@${version}' ` +\n            `causes mismatched dependencies. Use the \"--make-consistent\" flag to update other packages to use ` +\n            `this version, or try specify one of the existing versions (${existingVersionList}).`\n        );\n      }\n    }\n\n    const allPackageUpdates: Map<string, VersionMismatchFinderEntity> = new Map();\n    const allDependenciesToUpdate: [string, string][] = [\n      ...Object.entries(dependenciesToUpdate),\n      ...Object.entries(devDependenciesToUpdate),\n      ...Object.entries(peerDependenciesToUpdate)\n    ];\n\n    for (const project of projects) {\n      const mismatchFinderProject: VersionMismatchFinderProject = new VersionMismatchFinderProject(project);\n\n      const currentProjectDepUpdate: IUpdateProjectOptions = {\n        project: mismatchFinderProject,\n        dependenciesToAddOrUpdateOrRemove: dependenciesToUpdate,\n        dependencyType: DependencyType.Regular\n      };\n\n      const currentProjectDevDepUpdate: IUpdateProjectOptions = {\n        project: mismatchFinderProject,\n        dependenciesToAddOrUpdateOrRemove: devDependenciesToUpdate,\n        dependencyType: DependencyType.Dev\n      };\n\n      allPackageUpdates.set(mismatchFinderProject.filePath, mismatchFinderProject);\n\n      this.updateProject(currentProjectDepUpdate);\n      this.updateProject(currentProjectDevDepUpdate);\n    }\n\n    if (updateOtherPackages) {\n      const mismatchFinder: VersionMismatchFinder = VersionMismatchFinder.getMismatches(\n        this._rushConfiguration,\n        options\n      );\n      for (const update of this._getUpdates(mismatchFinder, allDependenciesToUpdate)) {\n        this.updateProject(update);\n        allPackageUpdates.set(update.project.filePath, update.project);\n      }\n    }\n\n    for (const [filePath, project] of allPackageUpdates) {\n      if (project.saveIfModified()) {\n        this._terminal.writeLine(Colorize.green('Wrote ') + filePath);\n      }\n    }\n\n    if (!skipUpdate) {\n      if (this._rushConfiguration.subspacesFeatureEnabled) {\n        const subspaceSet: ReadonlySet<Subspace> = this._rushConfiguration.getSubspacesForProjects(\n          options.projects\n        );\n        for (const subspace of subspaceSet) {\n          await this._doUpdateAsync(debugInstall, subspace, variant);\n        }\n      } else {\n        await this._doUpdateAsync(debugInstall, this._rushConfiguration.defaultSubspace, variant);\n      }\n    }\n  }\n\n  public async doRushUpdateAsync(options: IPackageJsonUpdaterRushBaseUpdateOptions): Promise<void> {\n    let allPackageUpdates: IUpdateProjectOptions[] = [];\n    if (options.actionName === 'add') {\n      allPackageUpdates = await this._doRushAddAsync(options as IPackageJsonUpdaterRushAddOptions);\n    } else if (options.actionName === 'remove') {\n      allPackageUpdates = await this._doRushRemoveAsync(options as IPackageJsonUpdaterRushRemoveOptions);\n    } else {\n      throw new Error('only accept \"rush add\" or \"rush remove\"');\n    }\n    const { skipUpdate, debugInstall, variant } = options;\n    for (const { project } of allPackageUpdates) {\n      if (project.saveIfModified()) {\n        this._terminal.writeLine(Colorize.green('Wrote'), project.filePath);\n      }\n    }\n\n    if (!skipUpdate) {\n      if (this._rushConfiguration.subspacesFeatureEnabled) {\n        const subspaceSet: ReadonlySet<Subspace> = this._rushConfiguration.getSubspacesForProjects(\n          options.projects\n        );\n        for (const subspace of subspaceSet) {\n          await this._doUpdateAsync(debugInstall, subspace, variant);\n        }\n      } else {\n        await this._doUpdateAsync(debugInstall, this._rushConfiguration.defaultSubspace, variant);\n      }\n    }\n  }\n\n  private async _doUpdateAsync(\n    debugInstall: boolean,\n    subspace: Subspace,\n    variant: string | undefined\n  ): Promise<void> {\n    this._terminal.writeLine();\n    this._terminal.writeLine(Colorize.green('Running \"rush update\"'));\n    this._terminal.writeLine();\n\n    const purgeManager: PurgeManager = new PurgeManager(this._rushConfiguration, this._rushGlobalFolder);\n    const installManagerOptions: IInstallManagerOptions = {\n      debug: debugInstall,\n      allowShrinkwrapUpdates: true,\n      bypassPolicy: false,\n      noLink: false,\n      fullUpgrade: false,\n      recheckShrinkwrap: false,\n      networkConcurrency: undefined,\n      offline: false,\n      collectLogFile: false,\n      variant,\n      maxInstallAttempts: RushConstants.defaultMaxInstallAttempts,\n      pnpmFilterArgumentValues: [],\n      selectedProjects: new Set(this._rushConfiguration.projects),\n      checkOnly: false,\n      subspace: subspace,\n      terminal: this._terminal\n    };\n\n    const installManager: BaseInstallManager = await InstallManagerFactory.getInstallManagerAsync(\n      this._rushConfiguration,\n      this._rushGlobalFolder,\n      purgeManager,\n      installManagerOptions\n    );\n    try {\n      await installManager.doInstallAsync();\n    } finally {\n      await purgeManager.startDeleteAllAsync();\n    }\n  }\n\n  /**\n   * Adds a dependency to a particular project. The core business logic for \"rush add\".\n   */\n  private async _doRushAddAsync(\n    options: IPackageJsonUpdaterRushAddOptions\n  ): Promise<IUpdateProjectOptions[]> {\n    const { projects } = options;\n\n    const { DependencyAnalyzer } = await import(\n      /* webpackChunkName: 'DependencyAnalyzer' */\n      './DependencyAnalyzer'\n    );\n    const dependencyAnalyzer: DependencyAnalyzer = DependencyAnalyzer.forRushConfiguration(\n      this._rushConfiguration\n    );\n\n    const allPackageUpdates: IUpdateProjectOptions[] = [];\n    const subspaceSet: ReadonlySet<Subspace> = this._rushConfiguration.getSubspacesForProjects(projects);\n    for (const subspace of subspaceSet) {\n      // Projects for this subspace\n      allPackageUpdates.push(...(await this._updateProjectsAsync(subspace, dependencyAnalyzer, options)));\n    }\n\n    return allPackageUpdates;\n  }\n\n  private async _updateProjectsAsync(\n    subspace: Subspace,\n    dependencyAnalyzer: DependencyAnalyzer,\n    options: IPackageJsonUpdaterRushAddOptions\n  ): Promise<IUpdateProjectOptions[]> {\n    const { projects, packagesToUpdate, devDependency, peerDependency, updateOtherPackages, variant } =\n      options;\n\n    // Get projects for this subspace\n    const subspaceProjects: RushConfigurationProject[] = projects.filter(\n      (project) => project.subspace === subspace\n    );\n\n    const {\n      allVersionsByPackageName,\n      implicitlyPreferredVersionByPackageName,\n      commonVersionsConfiguration\n    }: IDependencyAnalysis = dependencyAnalyzer.getAnalysis(subspace, variant, options.actionName === 'add');\n\n    this._terminal.writeLine();\n    const dependenciesToAddOrUpdate: Record<string, string> = {};\n    for (const { packageName, version: initialVersion, rangeStyle } of packagesToUpdate) {\n      const implicitlyPreferredVersion: string | undefined =\n        implicitlyPreferredVersionByPackageName.get(packageName);\n\n      const explicitlyPreferredVersion: string | undefined =\n        commonVersionsConfiguration.preferredVersions.get(packageName);\n\n      const version: string = await this._getNormalizedVersionSpecAsync(\n        subspaceProjects,\n        packageName,\n        initialVersion,\n        implicitlyPreferredVersion,\n        explicitlyPreferredVersion,\n        rangeStyle,\n        commonVersionsConfiguration.ensureConsistentVersions\n      );\n\n      dependenciesToAddOrUpdate[packageName] = version;\n      this._terminal.writeLine(\n        Colorize.green('Updating projects to use '),\n        `${packageName}@`,\n        Colorize.cyan(version)\n      );\n      this._terminal.writeLine();\n\n      const existingSpecifiedVersions: Set<string> | undefined = allVersionsByPackageName.get(packageName);\n      if (\n        existingSpecifiedVersions &&\n        !existingSpecifiedVersions.has(version) &&\n        commonVersionsConfiguration.ensureConsistentVersions &&\n        !updateOtherPackages\n      ) {\n        // There are existing versions, and the version we're going to use is not one of them, and this repo\n        // requires consistent versions, and we aren't going to update other packages, so we can't proceed.\n\n        const existingVersionList: string = Array.from(existingSpecifiedVersions).join(', ');\n        throw new Error(\n          `Adding '${packageName}@${version}' ` +\n            `causes mismatched dependencies. Use the \"--make-consistent\" flag to update other packages to use ` +\n            `this version, or try specify one of the existing versions (${existingVersionList}).`\n        );\n      }\n    }\n\n    const allPackageUpdates: IUpdateProjectOptions[] = [];\n\n    for (const project of subspaceProjects) {\n      const currentProjectUpdate: IUpdateProjectOptions = {\n        project: new VersionMismatchFinderProject(project),\n        dependenciesToAddOrUpdateOrRemove: dependenciesToAddOrUpdate,\n        dependencyType: devDependency ? DependencyType.Dev : peerDependency ? DependencyType.Peer : undefined\n      };\n      this.updateProject(currentProjectUpdate);\n\n      let otherPackageUpdates: IUpdateProjectOptions[] = [];\n\n      // we need to do a mismatch check\n      if (updateOtherPackages) {\n        const mismatchFinder: VersionMismatchFinder = VersionMismatchFinder.getMismatches(\n          this._rushConfiguration,\n          {\n            subspace,\n            variant\n          }\n        );\n        otherPackageUpdates = this._getUpdates(mismatchFinder, Object.entries(dependenciesToAddOrUpdate));\n      }\n\n      this.updateProjects(otherPackageUpdates);\n\n      allPackageUpdates.push(currentProjectUpdate, ...otherPackageUpdates);\n    }\n\n    return allPackageUpdates;\n  }\n\n  private _getUpdates(\n    mismatchFinder: VersionMismatchFinder,\n    dependenciesToUpdate: Iterable<[string, string]>\n  ): IUpdateProjectOptions[] {\n    const result: IUpdateProjectOptions[] = [];\n\n    const { mismatches } = mismatchFinder;\n\n    for (const [packageName, version] of dependenciesToUpdate) {\n      const projectsByVersion: ReadonlyMap<string, Iterable<VersionMismatchFinderEntity>> | undefined =\n        mismatches.get(packageName);\n      if (projectsByVersion) {\n        for (const consumers of projectsByVersion.values()) {\n          for (const consumer of consumers) {\n            result.push({\n              project: consumer,\n              dependenciesToAddOrUpdateOrRemove: {\n                [packageName]: version\n              }\n            });\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Remove a dependency from a particular project. The core business logic for \"rush remove\".\n   */\n  private async _doRushRemoveAsync(\n    options: IPackageJsonUpdaterRushRemoveOptions\n  ): Promise<IRemoveProjectOptions[]> {\n    const { projects, packagesToUpdate } = options;\n\n    this._terminal.writeLine();\n    const dependenciesToRemove: Record<string, string> = {};\n\n    const allPackageUpdates: IRemoveProjectOptions[] = [];\n\n    for (const project of projects) {\n      for (const { packageName } of packagesToUpdate) {\n        dependenciesToRemove[packageName] = '';\n      }\n\n      const currentProjectUpdate: IRemoveProjectOptions = {\n        project: new VersionMismatchFinderProject(project),\n        dependenciesToAddOrUpdateOrRemove: dependenciesToRemove\n      };\n      this.removePackageFromProject(currentProjectUpdate);\n\n      allPackageUpdates.push(currentProjectUpdate);\n    }\n\n    return allPackageUpdates;\n  }\n\n  /**\n   * Updates several projects' package.json files\n   */\n  public updateProjects(projectUpdates: IUpdateProjectOptions[]): void {\n    for (const update of projectUpdates) {\n      this.updateProject(update);\n    }\n  }\n\n  /**\n   * Updates a single project's package.json file\n   */\n  public updateProject(options: IUpdateProjectOptions): void {\n    let { dependencyType } = options;\n    const { project, dependenciesToAddOrUpdateOrRemove } = options;\n\n    for (const [packageName, newVersion] of Object.entries(dependenciesToAddOrUpdateOrRemove)) {\n      const oldDependency: PackageJsonDependency | undefined = project.tryGetDependency(packageName);\n      const oldDevDependency: PackageJsonDependency | undefined = project.tryGetDevDependency(packageName);\n\n      const oldDependencyType: DependencyType | undefined = oldDevDependency\n        ? oldDevDependency.dependencyType\n        : oldDependency\n          ? oldDependency.dependencyType\n          : undefined;\n\n      dependencyType = dependencyType || oldDependencyType || DependencyType.Regular;\n\n      project.addOrUpdateDependency(packageName, newVersion, dependencyType!);\n    }\n  }\n\n  public removePackageFromProject(options: IRemoveProjectOptions): void {\n    const { project, dependenciesToAddOrUpdateOrRemove } = options;\n\n    for (const packageName of Object.keys(dependenciesToAddOrUpdateOrRemove)) {\n      const packageJsonDependencies: (PackageJsonDependency | undefined)[] = [\n        project.tryGetDependency(packageName),\n        project.tryGetDevDependency(packageName)\n      ];\n      for (const packageJsonDependency of packageJsonDependencies) {\n        if (!packageJsonDependency) {\n          continue;\n        }\n        project.removeDependency(packageName, packageJsonDependency.dependencyType);\n      }\n    }\n  }\n\n  /**\n   * Selects an appropriate version number for a particular package, given an optional initial SemVer spec.\n   * If ensureConsistentVersions, tries to pick a version that will be consistent.\n   * Otherwise, will choose the latest semver matching the initialSpec and append the proper range style.\n   * @param projects - the projects which will have their package.json's updated\n   * @param packageName - the name of the package to be used\n   * @param initialSpec - a semver pattern that should be used to find the latest version matching the spec\n   * @param implicitlyPreferredVersion - the implicitly preferred (aka common/primary) version of the package in use\n   * @param rangeStyle - if this version is selected by querying registry, then this range specifier is prepended to\n   *   the selected version.\n   */\n  private async _getNormalizedVersionSpecAsync(\n    projects: RushConfigurationProject[],\n    packageName: string,\n    initialSpec: string | undefined,\n    implicitlyPreferredVersion: string | undefined,\n    explicitlyPreferredVersion: string | undefined,\n    rangeStyle: SemVerStyle,\n    ensureConsistentVersions: boolean | undefined\n  ): Promise<string> {\n    this._terminal.writeLine(Colorize.gray(`Determining new version for dependency: ${packageName}`));\n    if (initialSpec) {\n      this._terminal.writeLine(`Specified version selector: ${Colorize.cyan(initialSpec)}`);\n    } else {\n      this._terminal.writeLine(\n        `No version selector was specified, so the version will be determined automatically.`\n      );\n    }\n    this._terminal.writeLine();\n\n    // if ensureConsistentVersions => reuse the pinned version\n    // else, query the registry and use the latest that satisfies semver spec\n    if (initialSpec) {\n      if (initialSpec === implicitlyPreferredVersion) {\n        this._terminal.writeLine(\n          Colorize.green('Assigning \"') +\n            Colorize.cyan(initialSpec) +\n            Colorize.green(\n              `\" for \"${packageName}\" because it matches what other projects are using in this repo.`\n            )\n        );\n        return initialSpec;\n      }\n\n      if (initialSpec === explicitlyPreferredVersion) {\n        this._terminal.writeLine(\n          Colorize.green('Assigning \"') +\n            Colorize.cyan(initialSpec) +\n            Colorize.green(\n              `\" for \"${packageName}\" because it is the preferred version listed in ${RushConstants.commonVersionsFilename}.`\n            )\n        );\n        return initialSpec;\n      }\n    }\n\n    if (ensureConsistentVersions && !initialSpec) {\n      if (implicitlyPreferredVersion) {\n        this._terminal.writeLine(\n          `Assigning the version \"${Colorize.cyan(implicitlyPreferredVersion)}\" for \"${packageName}\" ` +\n            'because it is already used by other projects in this repo.'\n        );\n        return implicitlyPreferredVersion;\n      }\n\n      if (explicitlyPreferredVersion) {\n        this._terminal.writeLine(\n          `Assigning the version \"${Colorize.cyan(explicitlyPreferredVersion)}\" for \"${packageName}\" ` +\n            `because it is the preferred version listed in ${RushConstants.commonVersionsFilename}.`\n        );\n        return explicitlyPreferredVersion;\n      }\n    }\n\n    await InstallHelpers.ensureLocalPackageManagerAsync(\n      this._rushConfiguration,\n      this._rushGlobalFolder,\n      RushConstants.defaultMaxInstallAttempts\n    );\n\n    const useWorkspaces: boolean = !!(\n      this._rushConfiguration.pnpmOptions && this._rushConfiguration.pnpmOptions.useWorkspaces\n    );\n    const workspacePrefix: string = 'workspace:';\n\n    // Trim 'workspace:' notation from the spec, since we're going to be tweaking the range\n    if (useWorkspaces && initialSpec && initialSpec.startsWith(workspacePrefix)) {\n      initialSpec = initialSpec.substring(workspacePrefix.length).trim();\n    }\n\n    // determine if the package is a project in the local repository and if the version exists\n    const localProject: RushConfigurationProject | undefined = this._tryGetLocalProject(\n      packageName,\n      projects\n    );\n\n    let selectedVersion: string | undefined;\n    let selectedVersionPrefix: string = '';\n\n    if (initialSpec && initialSpec !== 'latest') {\n      this._terminal.writeLine(Colorize.gray('Finding versions that satisfy the selector: ') + initialSpec);\n      this._terminal.writeLine();\n\n      if (localProject !== undefined) {\n        const version: string = localProject.packageJson.version;\n        if (semver.satisfies(version, initialSpec)) {\n          // For workspaces, assume that specifying the exact version means you always want to consume\n          // the local project. Otherwise, use the exact local package version\n          if (useWorkspaces) {\n            selectedVersion = initialSpec === version ? '*' : initialSpec;\n            selectedVersionPrefix = workspacePrefix;\n          } else {\n            selectedVersion = version;\n          }\n        } else {\n          throw new Error(\n            `The dependency being added (\"${packageName}\") is a project in the local Rush repository, ` +\n              `but the version specifier provided (${initialSpec}) does not match the local project's version ` +\n              `(${version}). Correct the version specifier, omit a version specifier, or include \"${packageName}\" as a ` +\n              `cyclicDependencyProject if it is intended for \"${packageName}\" to come from an external feed and not ` +\n              'from the local Rush repository.'\n          );\n        }\n      } else {\n        this._terminal.writeLine(`Querying registry for all versions of \"${packageName}\"...`);\n\n        let commandArgs: string[];\n        if (this._rushConfiguration.packageManager === 'yarn') {\n          commandArgs = ['info', packageName, 'versions', '--json'];\n        } else {\n          commandArgs = ['view', packageName, 'versions', '--json'];\n        }\n\n        const allVersions: string = await Utilities.executeCommandAndCaptureOutputAsync(\n          this._rushConfiguration.packageManagerToolFilename,\n          commandArgs,\n          this._rushConfiguration.commonTempFolder\n        );\n\n        let versionList: string[];\n        if (this._rushConfiguration.packageManager === 'yarn') {\n          versionList = JSON.parse(allVersions).data;\n        } else {\n          versionList = JSON.parse(allVersions);\n        }\n\n        this._terminal.writeLine(Colorize.gray(`Found ${versionList.length} available versions.`));\n\n        for (const version of versionList) {\n          if (semver.satisfies(version, initialSpec)) {\n            selectedVersion = initialSpec;\n            this._terminal.writeLine(\n              `Found a version that satisfies ${initialSpec}: ${Colorize.cyan(version)}`\n            );\n            break;\n          }\n        }\n\n        if (!selectedVersion) {\n          throw new Error(\n            `Unable to find a version of \"${packageName}\" that satisfies` +\n              ` the version specifier \"${initialSpec}\"`\n          );\n        }\n      }\n    } else {\n      if (localProject !== undefined) {\n        // For workspaces, assume that no specified version range means you always want to consume\n        // the local project. Otherwise, use the exact local package version\n        if (useWorkspaces) {\n          selectedVersion = '*';\n          selectedVersionPrefix = workspacePrefix;\n        } else {\n          selectedVersion = localProject.packageJson.version;\n        }\n      } else {\n        if (!this._rushConfiguration.ensureConsistentVersions) {\n          this._terminal.writeLine(\n            Colorize.gray(\n              `The \"ensureConsistentVersions\" policy is NOT active, so we will assign the latest version.`\n            )\n          );\n          this._terminal.writeLine();\n        }\n\n        this._terminal.writeLine(`Querying NPM registry for latest version of \"${packageName}\"...`);\n\n        let commandArgs: string[];\n        if (this._rushConfiguration.packageManager === 'yarn') {\n          commandArgs = ['info', packageName, 'dist-tags.latest', '--silent'];\n        } else {\n          commandArgs = ['view', `${packageName}@latest`, 'version'];\n        }\n\n        selectedVersion = (\n          await Utilities.executeCommandAndCaptureOutputAsync(\n            this._rushConfiguration.packageManagerToolFilename,\n            commandArgs,\n            this._rushConfiguration.commonTempFolder\n          )\n        ).trim();\n      }\n\n      this._terminal.writeLine();\n\n      this._terminal.writeLine(`Found latest version: ${Colorize.cyan(selectedVersion)}`);\n    }\n\n    this._terminal.writeLine();\n\n    let reasonForModification: string = '';\n    if (selectedVersion !== '*') {\n      switch (rangeStyle) {\n        case SemVerStyle.Caret: {\n          selectedVersionPrefix += '^';\n          reasonForModification = ' because the \"--caret\" flag was specified';\n          break;\n        }\n\n        case SemVerStyle.Exact: {\n          reasonForModification = ' because the \"--exact\" flag was specified';\n          break;\n        }\n\n        case SemVerStyle.Tilde: {\n          selectedVersionPrefix += '~';\n          break;\n        }\n\n        case SemVerStyle.Passthrough: {\n          break;\n        }\n\n        default: {\n          throw new Error(`Unexpected SemVerStyle ${rangeStyle}.`);\n        }\n      }\n    }\n\n    const normalizedVersion: string = selectedVersionPrefix + selectedVersion;\n    this._terminal.writeLine(\n      Colorize.gray(`Assigning version \"${normalizedVersion}\" for \"${packageName}\"${reasonForModification}.`)\n    );\n    return normalizedVersion;\n  }\n\n  private _collectAllDownstreamDependencies(\n    project: RushConfigurationProject\n  ): Set<RushConfigurationProject> {\n    const allProjectDownstreamDependencies: Set<RushConfigurationProject> =\n      new Set<RushConfigurationProject>();\n\n    const collectDependencies: (rushProject: RushConfigurationProject) => void = (\n      rushProject: RushConfigurationProject\n    ) => {\n      for (const downstreamDependencyProject of rushProject.downstreamDependencyProjects) {\n        const foundProject: RushConfigurationProject | undefined =\n          this._rushConfiguration.projectsByName.get(downstreamDependencyProject);\n\n        if (!foundProject) {\n          continue;\n        }\n\n        if (foundProject.decoupledLocalDependencies.has(rushProject.packageName)) {\n          continue;\n        }\n\n        if (!allProjectDownstreamDependencies.has(foundProject)) {\n          allProjectDownstreamDependencies.add(foundProject);\n          collectDependencies(foundProject);\n        }\n      }\n    };\n\n    collectDependencies(project);\n    return allProjectDownstreamDependencies;\n  }\n\n  /**\n   * Given a package name, this function returns a {@see RushConfigurationProject} if the package is a project\n   * in the local Rush repo and is not marked as cyclic for any of the projects.\n   *\n   * @remarks\n   * This function throws an error if adding the discovered local project as a dependency\n   * would create a dependency cycle, or if it would be added to multiple projects.\n   */\n  private _tryGetLocalProject(\n    packageName: string,\n    projects: RushConfigurationProject[]\n  ): RushConfigurationProject | undefined {\n    const foundProject: RushConfigurationProject | undefined =\n      this._rushConfiguration.projectsByName.get(packageName);\n\n    if (foundProject === undefined) {\n      return undefined;\n    }\n\n    if (projects.length > 1) {\n      throw new Error(\n        `\"rush add\" does not support adding a local project as a dependency to multiple projects at once.`\n      );\n    }\n\n    const project: RushConfigurationProject = projects[0];\n\n    if (project.decoupledLocalDependencies.has(foundProject.packageName)) {\n      return undefined;\n    }\n\n    // Are we attempting to add this project to itself?\n    if (project === foundProject) {\n      throw new Error(\n        'Unable to add a project as a dependency of itself unless the dependency is listed as a cyclic dependency ' +\n          `in ${RushConstants.rushJsonFilename}. This command attempted to add \"${foundProject.packageName}\" ` +\n          `as a dependency of itself.`\n      );\n    }\n\n    // Are we attempting to create a cycle?\n    const downstreamDependencies: Set<RushConfigurationProject> =\n      this._collectAllDownstreamDependencies(project);\n    if (downstreamDependencies.has(foundProject)) {\n      throw new Error(\n        `Adding \"${foundProject.packageName}\" as a direct or indirect dependency of ` +\n          `\"${project.packageName}\" would create a dependency cycle.`\n      );\n    }\n\n    return foundProject;\n  }\n\n  private _cheaplyDetectSemVerRangeStyle(version: string): SemVerStyle {\n    // create a swtich statement to detect the first character of the version string and determine the range style\n    // TODO: This is a temporary solution until we have a better way to detect more complext range styles\n    // TODO: Should we handle/care about peerDependencies?\n    switch (version[0]) {\n      case '~':\n        return SemVerStyle.Tilde;\n      case '^':\n        return SemVerStyle.Caret;\n      default:\n        this._terminal.writeLine(\n          `No SemVer range detected for version: ${version}. The exact version will be set in package.json.`\n        );\n        return SemVerStyle.Exact;\n    }\n  }\n\n  private _normalizeDepsToUpgrade(deps: NpmCheck.INpmCheckPackage[]): IPackageForRushAdd[] {\n    return deps.map((dep) => {\n      return {\n        packageName: dep.moduleName,\n        version: dep.latest,\n        rangeStyle: this._cheaplyDetectSemVerRangeStyle(dep.packageJson)\n      };\n    });\n  }\n}\n"]}