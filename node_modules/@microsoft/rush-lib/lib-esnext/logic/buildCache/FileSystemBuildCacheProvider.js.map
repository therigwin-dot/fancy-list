{"version":3,"file":"FileSystemBuildCacheProvider.js","sourceRoot":"","sources":["../../../src/logic/buildCache/FileSystemBuildCacheProvider.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAqB1D,MAAM,+BAA+B,GAAW,aAAa,CAAC;AAE9D;;;;GAIG;AACH,MAAM,OAAO,4BAA4B;IAGvC,YAAmB,OAA6C;QAC9D,IAAI,CAAC,gBAAgB;YACnB,OAAO,CAAC,qBAAqB,CAAC,gBAAgB;gBAC9C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,+BAA+B,CAAC,CAAC;IAC3F,CAAC;IAED;;OAEG;IACI,iBAAiB,CAAC,OAAe;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,6BAA6B,CACxC,QAAmB,EACnB,OAAe;QAEf,MAAM,kBAAkB,GAAW,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACnE,IAAI,MAAM,UAAU,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACrD,OAAO,kBAAkB,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,OAAO,SAAS,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,2BAA2B,CACtC,QAAmB,EACnB,OAAe,EACf,WAAmB;QAEnB,MAAM,kBAAkB,GAAW,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,UAAU,CAAC,cAAc,CAAC,kBAAkB,EAAE,WAAW,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/F,QAAQ,CAAC,gBAAgB,CAAC,yBAAyB,kBAAkB,IAAI,CAAC,CAAC;QAC3E,OAAO,kBAAkB,CAAC;IAC5B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { FileSystem } from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\n\nimport type { RushConfiguration } from '../../api/RushConfiguration';\nimport type { RushUserConfiguration } from '../../api/RushUserConfiguration';\n\n/**\n * Options for creating a file system build cache provider.\n * @beta\n */\nexport interface IFileSystemBuildCacheProviderOptions {\n  /**\n   * The workspace Rush configuration\n   */\n  rushConfiguration: RushConfiguration;\n  /**\n   * The user Rush configuration\n   */\n  rushUserConfiguration: RushUserConfiguration;\n}\n\nconst DEFAULT_BUILD_CACHE_FOLDER_NAME: string = 'build-cache';\n\n/**\n * A build cache provider using the local file system.\n * Required by all cloud cache providers.\n * @beta\n */\nexport class FileSystemBuildCacheProvider {\n  private readonly _cacheFolderPath: string;\n\n  public constructor(options: IFileSystemBuildCacheProviderOptions) {\n    this._cacheFolderPath =\n      options.rushUserConfiguration.buildCacheFolder ||\n      path.join(options.rushConfiguration.commonTempFolder, DEFAULT_BUILD_CACHE_FOLDER_NAME);\n  }\n\n  /**\n   * Returns the absolute disk path for the specified cache id.\n   */\n  public getCacheEntryPath(cacheId: string): string {\n    return path.join(this._cacheFolderPath, cacheId);\n  }\n\n  /**\n   * Validates that the specified cache id exists on disk, and returns the path if it does.\n   */\n  public async tryGetCacheEntryPathByIdAsync(\n    terminal: ITerminal,\n    cacheId: string\n  ): Promise<string | undefined> {\n    const cacheEntryFilePath: string = this.getCacheEntryPath(cacheId);\n    if (await FileSystem.existsAsync(cacheEntryFilePath)) {\n      return cacheEntryFilePath;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Writes the specified buffer to the corresponding file system path for the cache id.\n   */\n  public async trySetCacheEntryBufferAsync(\n    terminal: ITerminal,\n    cacheId: string,\n    entryBuffer: Buffer\n  ): Promise<string> {\n    const cacheEntryFilePath: string = this.getCacheEntryPath(cacheId);\n    await FileSystem.writeFileAsync(cacheEntryFilePath, entryBuffer, { ensureFolderExists: true });\n    terminal.writeVerboseLine(`Wrote cache entry to \"${cacheEntryFilePath}\".`);\n    return cacheEntryFilePath;\n  }\n}\n"]}