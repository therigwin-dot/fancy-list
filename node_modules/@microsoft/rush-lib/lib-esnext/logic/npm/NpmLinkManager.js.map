{"version":3,"file":"NpmLinkManager.js","sourceRoot":"","sources":["../../../src/logic/npm/NpmLinkManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport * as tar from 'tar';\nimport readPackageTree from 'read-package-tree';\nimport { FileSystem, FileConstants, LegacyAdapters } from '@rushstack/node-core-library';\nimport { Colorize } from '@rushstack/terminal';\n\nimport { RushConstants } from '../RushConstants';\nimport type { RushConfigurationProject } from '../../api/RushConfigurationProject';\nimport { Utilities } from '../../utilities/Utilities';\nimport { NpmPackage, type IResolveOrCreateResult, PackageDependencyKind } from './NpmPackage';\nimport { PackageLookup } from '../PackageLookup';\nimport { BaseLinkManager, SymlinkKind } from '../base/BaseLinkManager';\n\ninterface IQueueItem {\n  // A project from somewhere under \"common/temp/node_modules\"\n  commonPackage: NpmPackage;\n\n  // A symlinked virtual package that we will create somewhere under \"this-project/node_modules\"\n  localPackage: NpmPackage;\n\n  // If we encounter a dependency listed in decoupledLocalDependencies, this will be set to the root\n  // of the localPackage subtree where we will stop creating local links.\n  cyclicSubtreeRoot: NpmPackage | undefined;\n}\n\nexport class NpmLinkManager extends BaseLinkManager {\n  protected async _linkProjectsAsync(): Promise<void> {\n    const npmPackage: readPackageTree.Node = await LegacyAdapters.convertCallbackToPromise<\n      readPackageTree.Node,\n      Error,\n      string\n    >(readPackageTree, this._rushConfiguration.commonTempFolder);\n\n    const commonRootPackage: NpmPackage = NpmPackage.createFromNpm(npmPackage);\n\n    const commonPackageLookup: PackageLookup = new PackageLookup();\n    commonPackageLookup.loadTree(commonRootPackage);\n\n    for (const rushProject of this._rushConfiguration.projects) {\n      // eslint-disable-next-line no-console\n      console.log(`\\nLINKING: ${rushProject.packageName}`);\n      this._linkProject(rushProject, commonRootPackage, commonPackageLookup);\n    }\n  }\n\n  /**\n   * This is called once for each local project from Rush.json.\n   * @param project             The local project that we will create symlinks for\n   * @param commonRootPackage   The common/temp/package.json package\n   * @param commonPackageLookup A dictionary for finding packages under common/temp/node_modules\n   */\n  private _linkProject(\n    project: RushConfigurationProject,\n    commonRootPackage: NpmPackage,\n    commonPackageLookup: PackageLookup\n  ): void {\n    let commonProjectPackage: NpmPackage | undefined = commonRootPackage.getChildByName(\n      project.tempProjectName\n    ) as NpmPackage;\n    if (!commonProjectPackage) {\n      // Normally we would expect the temp project to have been installed into the common\\node_modules\n      // folder.  However, if it was recently added, \"rush install\" doesn't technically require\n      // this, as long as its dependencies can be found at the root of the NPM shrinkwrap file.\n      // This avoids the need to run \"rush generate\" unnecessarily.\n\n      // Example: \"project1\"\n      const unscopedTempProjectName: string = this._rushConfiguration.packageNameParser.getUnscopedName(\n        project.tempProjectName\n      );\n\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\n      const extractedFolder: string = path.join(\n        this._rushConfiguration.commonTempFolder,\n        RushConstants.rushTempProjectsFolderName,\n        unscopedTempProjectName\n      );\n\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1.tgz\"\n      const tarballFile: string = path.join(\n        this._rushConfiguration.commonTempFolder,\n        RushConstants.rushTempProjectsFolderName,\n        unscopedTempProjectName + '.tgz'\n      );\n\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\\package.json\"\n      const packageJsonFilename: string = path.join(extractedFolder, 'package', FileConstants.PackageJson);\n\n      Utilities.createFolderWithRetry(extractedFolder);\n      tar.extract({\n        cwd: extractedFolder,\n        file: tarballFile,\n        sync: true\n      });\n\n      // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\\project1\"\n      const installFolderName: string = path.join(\n        this._rushConfiguration.commonTempFolder,\n        RushConstants.nodeModulesFolderName,\n        RushConstants.rushTempNpmScope,\n        unscopedTempProjectName\n      );\n\n      commonProjectPackage = NpmPackage.createVirtualTempPackage(packageJsonFilename, installFolderName);\n\n      // remove the extracted tarball contents\n      FileSystem.deleteFile(packageJsonFilename);\n      FileSystem.deleteFile(extractedFolder);\n\n      commonRootPackage.addChild(commonProjectPackage);\n    }\n\n    // TODO: Validate that the project's package.json still matches the common folder\n    const localProjectPackage: NpmPackage = NpmPackage.createLinkedNpmPackage(\n      project.packageJsonEditor.name,\n      commonProjectPackage.version,\n      commonProjectPackage.dependencies,\n      project.projectFolder\n    );\n\n    const queue: IQueueItem[] = [];\n    queue.push({\n      commonPackage: commonProjectPackage,\n      localPackage: localProjectPackage,\n      cyclicSubtreeRoot: undefined\n    });\n\n    for (;;) {\n      const queueItem: IQueueItem | undefined = queue.shift();\n      if (!queueItem) {\n        break;\n      }\n\n      // A project from somewhere under \"common/temp/node_modules\"\n      const commonPackage: NpmPackage = queueItem.commonPackage;\n\n      // A symlinked virtual package somewhere under \"this-project/node_modules\",\n      // where \"this-project\" corresponds to the \"project\" parameter for linkProject().\n      const localPackage: NpmPackage = queueItem.localPackage;\n\n      // If we encounter a dependency listed in decoupledLocalDependencies, this will be set to the root\n      // of the localPackage subtree where we will stop creating local links.\n      const cyclicSubtreeRoot: NpmPackage | undefined = queueItem.cyclicSubtreeRoot;\n\n      // NOTE: It's important that this traversal follows the dependencies in the Common folder,\n      // because for Rush projects this will be the union of\n      // devDependencies / dependencies / optionalDependencies.\n      for (const dependency of commonPackage.dependencies) {\n        let startingCyclicSubtree: boolean = false;\n\n        // Should this be a \"local link\" to a top-level Rush project (i.e. versus a regular link\n        // into the Common folder)?\n        const matchedRushPackage: RushConfigurationProject | undefined =\n          this._rushConfiguration.getProjectByName(dependency.name);\n\n        if (matchedRushPackage) {\n          const matchedVersion: string = matchedRushPackage.packageJsonEditor.version;\n\n          // The dependency name matches an Rush project, but are there any other reasons not\n          // to create a local link?\n          if (cyclicSubtreeRoot) {\n            // DO NOT create a local link, because this is part of an existing\n            // decoupledLocalDependencies subtree\n          } else if (project.decoupledLocalDependencies.has(dependency.name)) {\n            // DO NOT create a local link, because we are starting a new\n            // decoupledLocalDependencies subtree\n            startingCyclicSubtree = true;\n          } else if (\n            dependency.kind !== PackageDependencyKind.LocalLink &&\n            !semver.satisfies(matchedVersion, dependency.versionRange)\n          ) {\n            // DO NOT create a local link, because the local project's version isn't SemVer compatible.\n\n            // (Note that in order to make version bumping work as expected, we ignore SemVer for\n            // immediate dependencies of top-level projects, indicated by PackageDependencyKind.LocalLink.\n            // Is this wise?)\n\n            // eslint-disable-next-line no-console\n            console.log(\n              Colorize.yellow(\n                `Rush will not locally link ${dependency.name} for ${localPackage.name}` +\n                  ` because the requested version \"${dependency.versionRange}\" is incompatible` +\n                  ` with the local version ${matchedVersion}`\n              )\n            );\n          } else {\n            // Yes, it is compatible, so create a symlink to the Rush project.\n            // Is the dependency already resolved?\n            const resolution: IResolveOrCreateResult = localPackage.resolveOrCreate(dependency.name);\n\n            if (!resolution.found || resolution.found.version !== matchedVersion) {\n              // We did not find a suitable match, so place a new local package that\n              // symlinks to the Rush project\n              const newLocalFolderPath: string = path.join(\n                resolution.parentForCreate!.folderPath,\n                'node_modules',\n                dependency.name\n              );\n\n              const newLocalPackage: NpmPackage = NpmPackage.createLinkedNpmPackage(\n                dependency.name,\n                matchedVersion,\n                // Since matchingRushProject does not have a parent, its dependencies are\n                // guaranteed to be already fully resolved inside its node_modules folder.\n                [],\n                newLocalFolderPath\n              );\n\n              newLocalPackage.symlinkTargetFolderPath = matchedRushPackage.projectFolder;\n\n              resolution.parentForCreate!.addChild(newLocalPackage);\n\n              // (There are no dependencies, so we do not need to push it onto the queue.)\n            }\n\n            continue;\n          }\n        }\n\n        // We can't symlink to an Rush project, so instead we will symlink to a folder\n        // under the \"Common\" folder\n        const commonDependencyPackage: NpmPackage | undefined = commonPackage.resolve(dependency.name);\n        if (commonDependencyPackage) {\n          // This is the version that was chosen when \"npm install\" ran in the common folder\n          const effectiveDependencyVersion: string | undefined = commonDependencyPackage.version;\n\n          // Is the dependency already resolved?\n          let resolution: IResolveOrCreateResult;\n          if (!cyclicSubtreeRoot || !matchedRushPackage) {\n            // Perform normal module resolution.\n            resolution = localPackage.resolveOrCreate(dependency.name);\n          } else {\n            // We are inside a decoupledLocalDependencies subtree (i.e. cyclicSubtreeRoot != undefined),\n            // and the dependency is a local project (i.e. matchedRushPackage != undefined), so\n            // we use a special module resolution strategy that places everything under the\n            // cyclicSubtreeRoot.\n            resolution = localPackage.resolveOrCreate(dependency.name, cyclicSubtreeRoot);\n          }\n\n          if (!resolution.found || resolution.found.version !== effectiveDependencyVersion) {\n            // We did not find a suitable match, so place a new local package\n\n            const newLocalFolderPath: string = path.join(\n              resolution.parentForCreate!.folderPath,\n              'node_modules',\n              commonDependencyPackage.name\n            );\n\n            const newLocalPackage: NpmPackage = NpmPackage.createLinkedNpmPackage(\n              commonDependencyPackage.name,\n              commonDependencyPackage.version,\n              commonDependencyPackage.dependencies,\n              newLocalFolderPath\n            );\n\n            const commonPackageFromLookup: NpmPackage | undefined = commonPackageLookup.getPackage(\n              newLocalPackage.nameAndVersion\n            ) as NpmPackage;\n            if (!commonPackageFromLookup) {\n              throw new Error(\n                `The ${localPackage.name}@${localPackage.version} package was not found` +\n                  ` in the common folder`\n              );\n            }\n            newLocalPackage.symlinkTargetFolderPath = commonPackageFromLookup.folderPath;\n\n            let newCyclicSubtreeRoot: NpmPackage | undefined = cyclicSubtreeRoot;\n            if (startingCyclicSubtree) {\n              // If we are starting a new subtree, then newLocalPackage will be its root\n              // NOTE: cyclicSubtreeRoot is guaranteed to be undefined here, since we never start\n              // a new tree inside an existing tree\n              newCyclicSubtreeRoot = newLocalPackage;\n            }\n\n            resolution.parentForCreate!.addChild(newLocalPackage);\n            queue.push({\n              commonPackage: commonDependencyPackage,\n              localPackage: newLocalPackage,\n              cyclicSubtreeRoot: newCyclicSubtreeRoot\n            });\n          }\n        } else {\n          if (dependency.kind !== PackageDependencyKind.Optional) {\n            throw new Error(\n              `The dependency \"${dependency.name}\" needed by \"${localPackage.name}\"` +\n                ` was not found in the common folder -- do you need to run \"rush install\"?`\n            );\n          } else {\n            // eslint-disable-next-line no-console\n            console.log('Skipping optional dependency: ' + dependency.name);\n          }\n        }\n      }\n    }\n\n    // When debugging, you can uncomment this line to dump the data structure\n    // to the console:\n    // localProjectPackage.printTree();\n\n    NpmLinkManager._createSymlinksForTopLevelProject(localProjectPackage);\n\n    // Also symlink the \".bin\" folder\n    if (localProjectPackage.children.length > 0) {\n      const commonBinFolder: string = path.join(\n        this._rushConfiguration.commonTempFolder,\n        'node_modules',\n        '.bin'\n      );\n      const projectBinFolder: string = path.join(localProjectPackage.folderPath, 'node_modules', '.bin');\n\n      if (FileSystem.exists(commonBinFolder)) {\n        NpmLinkManager._createSymlink({\n          linkTargetPath: commonBinFolder,\n          newLinkPath: projectBinFolder,\n          symlinkKind: SymlinkKind.Directory\n        });\n      }\n    }\n  }\n}\n"]}