{"version":3,"file":"NodeJsCompatibility.js","sourceRoot":"","sources":["../../src/logic/NodeJsCompatibility.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as semver from 'semver';\nimport { Colorize } from '@rushstack/terminal';\n\n// Minimize dependencies to avoid compatibility errors that might be encountered before\n// NodeJsCompatibility.terminateIfVersionIsTooOld() gets to run.\nimport type { RushConfiguration } from '../api/RushConfiguration';\nimport { RushConstants } from './RushConstants';\n\n/**\n * This constant is the major version of the next LTS node Node.js release. This constant should be updated when\n * a new LTS version is added to Rush's support matrix.\n *\n * LTS schedule: https://nodejs.org/en/about/releases/\n * LTS versions: https://nodejs.org/en/download/releases/\n */\nconst UPCOMING_NODE_LTS_VERSION: number = 22;\nconst nodeVersion: string = process.versions.node;\nconst nodeMajorVersion: number = semver.major(nodeVersion);\n\nexport interface IWarnAboutVersionTooNewOptions {\n  isRushLib: boolean;\n\n  /**\n   * The CLI front-end does an early check for NodeJsCompatibility.warnAboutVersionTooNew(),\n   * so this flag is used to avoid reporting the same message twice.  Note that the definition\n   * of \"too new\" may differ between the globally installed \"@microsoft/rush\" front end\n   * versus the \"@microsoft/rush-lib\" loaded by the version selector.\n   */\n  alreadyReportedNodeTooNewError: boolean;\n}\n\nexport interface IWarnAboutCompatibilityIssuesOptions extends IWarnAboutVersionTooNewOptions {\n  rushConfiguration: RushConfiguration | undefined;\n}\n\n/**\n * This class provides useful functions for warning if the current Node.js runtime isn't supported.\n *\n * @internal\n */\nexport class NodeJsCompatibility {\n  /**\n   * This reports if the Node.js version is known to have serious incompatibilities.  In that situation, the user\n   * should downgrade Rush to an older release that supported their Node.js version.\n   */\n  public static reportAncientIncompatibleVersion(): boolean {\n    // IMPORTANT: If this test fails, the Rush CLI front-end process will terminate with an error.\n    // Only increment it when our code base is known to use newer features (e.g. \"async\"/\"await\") that\n    // have no hope of working with older Node.js.\n    if (semver.satisfies(nodeVersion, '<14.18.0')) {\n      // eslint-disable-next-line no-console\n      console.error(\n        Colorize.red(\n          `Your version of Node.js (${nodeVersion}) is very old and incompatible with Rush. ` +\n            `Please upgrade to the latest Long-Term Support (LTS) version.\\n`\n        )\n      );\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Detect whether the Node.js version is \"supported\" by the Rush maintainers.  We generally\n   * only support versions that were \"Long Term Support\" (LTS) at the time when Rush was published.\n   *\n   * This is a warning only -- the user is free to ignore it and use Rush anyway.\n   */\n  public static warnAboutCompatibilityIssues(options: IWarnAboutCompatibilityIssuesOptions): boolean {\n    // Only show the first warning\n    return (\n      NodeJsCompatibility.reportAncientIncompatibleVersion() ||\n      NodeJsCompatibility.warnAboutVersionTooNew(options) ||\n      NodeJsCompatibility._warnAboutOddNumberedVersion() ||\n      NodeJsCompatibility._warnAboutNonLtsVersion(options.rushConfiguration)\n    );\n  }\n\n  /**\n   * Warn about a Node.js version that has not been tested yet with Rush.\n   */\n  public static warnAboutVersionTooNew(options: IWarnAboutVersionTooNewOptions): boolean {\n    if (nodeMajorVersion >= UPCOMING_NODE_LTS_VERSION + 1) {\n      if (!options.alreadyReportedNodeTooNewError) {\n        // We are on a much newer release than we have tested and support\n        if (options.isRushLib) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            Colorize.yellow(\n              `Your version of Node.js (${nodeVersion}) has not been tested with this release ` +\n                `of the Rush engine. Please consider upgrading the \"rushVersion\" setting in ${RushConstants.rushJsonFilename}, ` +\n                `or downgrading Node.js.\\n`\n            )\n          );\n        } else {\n          // eslint-disable-next-line no-console\n          console.warn(\n            Colorize.yellow(\n              `Your version of Node.js (${nodeVersion}) has not been tested with this release ` +\n                `of Rush. Please consider installing a newer version of the \"@microsoft/rush\" ` +\n                `package, or downgrading Node.js.\\n`\n            )\n          );\n        }\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _warnAboutNonLtsVersion(rushConfiguration: RushConfiguration | undefined): boolean {\n    if (rushConfiguration && !rushConfiguration.suppressNodeLtsWarning && !NodeJsCompatibility.isLtsVersion) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        Colorize.yellow(\n          `Your version of Node.js (${nodeVersion}) is not a Long-Term Support (LTS) release. ` +\n            'These versions frequently have bugs. Please consider installing a stable release.\\n'\n        )\n      );\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static _warnAboutOddNumberedVersion(): boolean {\n    if (NodeJsCompatibility.isOddNumberedVersion) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        Colorize.yellow(\n          `Your version of Node.js (${nodeVersion}) is an odd-numbered release. ` +\n            `These releases frequently have bugs. Please consider installing a Long Term Support (LTS) ` +\n            `version instead.\\n`\n        )\n      );\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public static get isLtsVersion(): boolean {\n    return !!process.release.lts;\n  }\n\n  public static get isOddNumberedVersion(): boolean {\n    return nodeMajorVersion % 2 !== 0;\n  }\n}\n"]}