{"version":3,"file":"CollatedTerminalProvider.js","sourceRoot":"","sources":["../../src/utilities/CollatedTerminalProvider.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;AAG3D,OAAO,EAA0B,wBAAwB,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAM1G,MAAM,OAAO,wBAAwB;IASnC,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,YACE,gBAAkC,EAClC,OAAmD;QAjB7C,eAAU,GAAY,KAAK,CAAC;QAC5B,iBAAY,GAAY,KAAK,CAAC;QAC9B,kBAAa,GAAY,KAAK,CAAC;QAEvB,kBAAa,GAAY,IAAI,CAAC;QAC9B,iBAAY,GAAW,IAAI,CAAC;QAc1C,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,CAAA,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,IAAY,EAAE,QAAkC;QAC3D,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,wBAAwB,CAAC,GAAG,CAAC;YAClC,KAAK,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC;gBACtC,+EAA+E;gBAC/E,6EAA6E;gBAC7E,wFAAwF;gBACxF,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC;gBAClF,MAAM;YACR,CAAC;YAED,KAAK,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC;gBACpC,6EAA6E;gBAC7E,sCAAsC;gBACtC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;oBACvB,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC;gBACpF,CAAC;gBACD,MAAM;YACR,CAAC;YAED,KAAK,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC;gBAClF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,MAAM;YACR,CAAC;YAED,KAAK,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC;gBACtC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC;gBAClF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,MAAM;YACR,CAAC;YAED,OAAO,CAAC,CAAC,CAAC;gBACR,MAAM,IAAI,KAAK,CAAC,wBAAwB,QAAQ,EAAE,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { CollatedTerminal } from '@rushstack/stream-collator';\nimport { type ITerminalProvider, TerminalProviderSeverity, TerminalChunkKind } from '@rushstack/terminal';\n\nexport interface ICollatedTerminalProviderOptions {\n  debugEnabled: boolean;\n}\n\nexport class CollatedTerminalProvider implements ITerminalProvider {\n  private readonly _collatedTerminal: CollatedTerminal;\n  private _hasErrors: boolean = false;\n  private _hasWarnings: boolean = false;\n  private _debugEnabled: boolean = false;\n\n  public readonly supportsColor: boolean = true;\n  public readonly eolCharacter: string = '\\n';\n\n  public get hasErrors(): boolean {\n    return this._hasErrors;\n  }\n\n  public get hasWarnings(): boolean {\n    return this._hasWarnings;\n  }\n\n  public constructor(\n    collatedTerminal: CollatedTerminal,\n    options?: Partial<ICollatedTerminalProviderOptions>\n  ) {\n    this._collatedTerminal = collatedTerminal;\n    this._debugEnabled = !!options?.debugEnabled;\n  }\n\n  public write(data: string, severity: TerminalProviderSeverity): void {\n    switch (severity) {\n      case TerminalProviderSeverity.log:\n      case TerminalProviderSeverity.verbose: {\n        // Unlike the basic ConsoleTerminalProvider, verbose messages are always passed\n        // to stdout -- by convention the user-controlled build script output is sent\n        // to verbose, and will be routed to a variety of other providers in the ProjectBuilder.\n        this._collatedTerminal.writeChunk({ text: data, kind: TerminalChunkKind.Stdout });\n        break;\n      }\n\n      case TerminalProviderSeverity.debug: {\n        // Similar to the basic ConsoleTerminalProvider, debug messages are discarded\n        // unless they are explicitly enabled.\n        if (this._debugEnabled) {\n          this._collatedTerminal.writeChunk({ text: data, kind: TerminalChunkKind.Stdout });\n        }\n        break;\n      }\n\n      case TerminalProviderSeverity.error: {\n        this._collatedTerminal.writeChunk({ text: data, kind: TerminalChunkKind.Stderr });\n        this._hasErrors = true;\n        break;\n      }\n\n      case TerminalProviderSeverity.warning: {\n        this._collatedTerminal.writeChunk({ text: data, kind: TerminalChunkKind.Stderr });\n        this._hasWarnings = true;\n        break;\n      }\n\n      default: {\n        throw new Error(`Unexpected severity: ${severity}`);\n      }\n    }\n  }\n}\n"]}