{"version":3,"file":"PnpmSyncUtilities.js","sourceRoot":"","sources":["../../src/utilities/PnpmSyncUtilities.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AlreadyReportedError } from '@rushstack/node-core-library';\nimport { Colorize, type ITerminal } from '@rushstack/terminal';\nimport {\n  type ILogMessageCallbackOptions,\n  LogMessageIdentifier,\n  type LogMessageDetails,\n  LogMessageKind\n} from 'pnpm-sync-lib';\n\nexport class PnpmSyncUtilities {\n  private static _addLinePrefix(message: string): string {\n    return message\n      .split('\\n')\n      .map((x) => (x.trim() ? Colorize.cyan(`pnpm-sync: `) + x : x))\n      .join('\\n');\n  }\n\n  public static processLogMessage(options: ILogMessageCallbackOptions, terminal: ITerminal): void {\n    const message: string = options.message;\n    const details: LogMessageDetails = options.details;\n\n    // Special formatting for interested messages\n    switch (details.messageIdentifier) {\n      case LogMessageIdentifier.PREPARE_FINISHING:\n        terminal.writeVerboseLine(\n          PnpmSyncUtilities._addLinePrefix(\n            `Regenerated .pnpm-sync.json in ${Math.round(details.executionTimeInMs)} ms`\n          )\n        );\n        return;\n\n      case LogMessageIdentifier.COPY_FINISHING:\n        {\n          const customMessage: string =\n            `Synced ${details.fileCount} ` +\n            (details.fileCount === 1 ? 'file' : 'files') +\n            ` in ${Math.round(details.executionTimeInMs)} ms`;\n\n          terminal.writeVerboseLine(PnpmSyncUtilities._addLinePrefix(customMessage));\n        }\n        return;\n\n      case LogMessageIdentifier.PREPARE_REPLACING_FILE:\n        {\n          const customMessage: string =\n            `Expecting .pnpm-sync.json version ${details.expectedVersion}, ` +\n            `but found version ${details.actualVersion}`;\n\n          terminal.writeVerboseLine(PnpmSyncUtilities._addLinePrefix(message));\n          terminal.writeVerboseLine(PnpmSyncUtilities._addLinePrefix(customMessage));\n        }\n        return;\n\n      case LogMessageIdentifier.COPY_ERROR_INCOMPATIBLE_SYNC_FILE: {\n        terminal.writeErrorLine(\n          PnpmSyncUtilities._addLinePrefix(\n            `The workspace was installed using an incompatible version of pnpm-sync.\\n` +\n              `Please run \"rush install\" or \"rush update\" again.`\n          )\n        );\n\n        terminal.writeLine(\n          PnpmSyncUtilities._addLinePrefix(\n            `Expecting .pnpm-sync.json version ${details.expectedVersion}, ` +\n              `but found version ${details.actualVersion}\\n` +\n              `Affected folder: ${details.pnpmSyncJsonPath}`\n          )\n        );\n        throw new AlreadyReportedError();\n      }\n    }\n\n    // Default handling for other messages\n    switch (options.messageKind) {\n      case LogMessageKind.ERROR:\n        terminal.writeErrorLine(Colorize.red('ERROR: pnpm-sync: ' + message));\n        throw new AlreadyReportedError();\n\n      case LogMessageKind.WARNING:\n        terminal.writeWarningLine(Colorize.yellow('pnpm-sync: ' + message));\n        return;\n\n      case LogMessageKind.INFO:\n      case LogMessageKind.VERBOSE:\n        terminal.writeDebugLine(PnpmSyncUtilities._addLinePrefix(message));\n        return;\n    }\n  }\n}\n"]}