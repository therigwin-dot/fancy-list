"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestUtilities = exports.NonProjectConfigurationFile = exports.ProjectConfigurationFile = exports.ConfigurationFile = exports.PathResolutionMethod = exports.InheritanceType = exports.ConfigurationFileBase = void 0;
/**
 * A library for loading config files for use with the
 * {@link https://rushstack.io/pages/heft/overview/ | Heft} build system.
 *
 * @packageDocumentation
 */
var ConfigurationFileBase_1 = require("./ConfigurationFileBase");
Object.defineProperty(exports, "ConfigurationFileBase", { enumerable: true, get: function () { return ConfigurationFileBase_1.ConfigurationFileBase; } });
Object.defineProperty(exports, "InheritanceType", { enumerable: true, get: function () { return ConfigurationFileBase_1.InheritanceType; } });
Object.defineProperty(exports, "PathResolutionMethod", { enumerable: true, get: function () { return ConfigurationFileBase_1.PathResolutionMethod; } });
const ProjectConfigurationFile_1 = require("./ProjectConfigurationFile");
/**
 * @deprecated Use {@link ProjectConfigurationFile} instead.
 * @beta
 */
exports.ConfigurationFile = ProjectConfigurationFile_1.ProjectConfigurationFile;
var ProjectConfigurationFile_2 = require("./ProjectConfigurationFile");
Object.defineProperty(exports, "ProjectConfigurationFile", { enumerable: true, get: function () { return ProjectConfigurationFile_2.ProjectConfigurationFile; } });
var NonProjectConfigurationFile_1 = require("./NonProjectConfigurationFile");
Object.defineProperty(exports, "NonProjectConfigurationFile", { enumerable: true, get: function () { return NonProjectConfigurationFile_1.NonProjectConfigurationFile; } });
exports.TestUtilities = __importStar(require("./TestUtilities"));
//# sourceMappingURL=index.js.map