"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeferredAadTokenProvider = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var SPHttpBaseStrings_resx_1 = tslib_1.__importDefault(require("../SPHttpBaseStrings.resx"));
var AadConstants_1 = tslib_1.__importDefault(require("./AadConstants"));
var AadFlights_1 = require("./AadFlights");
var AadKillSwitches_1 = require("./AadKillSwitches");
var ITokenProvider_1 = require("./ITokenProvider");
/**
 * Class that extends on the Error class and adds an extra member variable
 * @internal
 */
var DetailedError = /** @class */ (function (_super) {
    tslib_1.__extends(DetailedError, _super);
    function DetailedError(errorMessage, code) {
        var _this = _super.call(this, errorMessage) || this;
        _this.code = code;
        return _this;
    }
    return DetailedError;
}(Error));
/**
 * This class allows a developer to obtain OAuth2 tokens from Azure AD.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @privateRemarks
 * AadTokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 *
 * @public
 * @sealed
 */
var DeferredAadTokenProvider = /** @class */ (function () {
    /**
     * @internal
     */
    function DeferredAadTokenProvider(tokenAcquisitionEvent, beforeRedirectEvent, popupEvent, configuration, oboConfiguration, _oboFirstPartyTokenCallback, _oboThirdPartyTokenCallback) {
        this._oboFirstPartyTokenCallback = _oboFirstPartyTokenCallback;
        this._oboThirdPartyTokenCallback = _oboThirdPartyTokenCallback;
        sp_core_library_1.Validate.isNonemptyString(configuration.aadInstanceUrl, 'aadInstanceUrl');
        sp_core_library_1.Validate.isNonemptyString(configuration.aadTenantId, 'aadTenantId');
        sp_core_library_1.Validate.isNonemptyString(configuration.redirectUri, 'redirectUri');
        if ((0, AadKillSwitches_1.isOnlyEnsureServicePrincipalIdOnTokenFetchKSActivated)()) {
            // When making first party SPFx app requests we can create an AADTokenProvider without a value in the configuration and then call getTokenInternal on it
            // This will fail the request even though the 1p request should succeed.
            sp_core_library_1.Validate.isNonemptyString(configuration.servicePrincipalId, 'servicePrincipalId');
        }
        this._defaultConfiguration = configuration;
        this._oboConfiguration = oboConfiguration;
        this._tokenAcquisitionEvent = tokenAcquisitionEvent;
        this.onBeforeRedirectEvent = beforeRedirectEvent;
        this.popupEvent = popupEvent;
        this._failedTokenRequests = new Map();
    }
    DeferredAadTokenProvider.prototype.getToken = function (resourceEndpoint, optionsOrUseCachedToken) {
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        var options = optionsOrUseCachedToken && typeof optionsOrUseCachedToken === 'object'
            ? optionsOrUseCachedToken
            : {
                useCachedToken: optionsOrUseCachedToken,
                authenticationScheme: ITokenProvider_1.IAuthenticationScheme.BEARER
            };
        if (this._defaultConfiguration.servicePrincipalId === sp_core_library_1.Guid.empty.toString()) {
            return Promise.reject(new Error(SPHttpBaseStrings_resx_1.default.servicePrincipalNotAvaliableError));
        }
        return this._getTokenInternal(resourceEndpoint, this._defaultConfiguration, options);
    };
    DeferredAadTokenProvider.prototype._getTokenData = function (resourceEndpoint, optionsOrUseCachedToken, skipLogging) {
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        if (skipLogging === void 0) { skipLogging = false; }
        var options = optionsOrUseCachedToken && typeof optionsOrUseCachedToken === 'object'
            ? optionsOrUseCachedToken
            : {
                useCachedToken: optionsOrUseCachedToken,
                skipLoggingAndDisableRedirects: skipLogging,
                claims: undefined,
                authenticationScheme: ITokenProvider_1.IAuthenticationScheme.BEARER
            };
        return this._getTokenDataInternal(resourceEndpoint, this._defaultConfiguration, options);
    };
    DeferredAadTokenProvider.prototype._getTokenInternal = function (resourceEndpoint, configuration, optionsOrUseCachedToken) {
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        return this._getTokenDataInternal(resourceEndpoint, configuration, optionsOrUseCachedToken).then(function (tokenData) { return tokenData.accessToken; });
    };
    /**
     * This methods ensures that the aad token provider is in a good state.  Depending on the token
     * provider being used it can mean different things or do nothing.  For example, MSAL V3 will
     * request a token and ensure that it has a valid refresh token.
     *
     * @internal
     */
    DeferredAadTokenProvider.prototype._ensureState = function () {
        if (this._shouldEnsureRefreshToken()) {
            return this._getMsalBrowserTokenProvider(this._defaultConfiguration).then(function (tokenProvider) {
                return tokenProvider._ensureState();
            });
        }
        else {
            return Promise.resolve();
        }
    };
    /**
     * @internal
     */
    DeferredAadTokenProvider.prototype._getToken = function (tokenProvider, resourceEndpoint, options) {
        return tokenProvider.getToken(resourceEndpoint, options);
    };
    /**
     * Ensures proper monitoring is set up for token acquisition
     *
     * @internal
     */
    DeferredAadTokenProvider.prototype._ensureTelemetry = function () {
        if (this._shouldUseMsalBrowserTokenProvider(this._defaultConfiguration)) {
            return this._getMsalBrowserTokenProvider(this._defaultConfiguration).then(function (tokenProvider) {
                return tokenProvider._ensureTelemetry();
            });
        }
        return Promise.resolve();
    };
    DeferredAadTokenProvider.prototype._shouldEnsureRefreshToken = function () {
        // We don't want to ensure the refresh token when running in tab or teams or sharepoint mobile app.
        if (!(0, AadKillSwitches_1.isEnsureRefreshTokenKSActivated)() &&
            this._shouldUseMsalBrowserTokenProvider(this._defaultConfiguration)) {
            if (window.sessionStorage.getItem('_isRunningTABTest') === 'true' ||
                sp_core_library_1._BrowserUtilities.isTeamsHosted() ||
                sp_core_library_1._BrowserUtilities.isWebViewHosted()) {
                return false;
            }
            return true;
        }
        return false;
    };
    DeferredAadTokenProvider.prototype._addFailedRequest = function (resourceEndpoint) {
        if (!(0, AadKillSwitches_1.isSkipKnownErroneousResourcesActivated)()) {
            this._failedTokenRequests.set(resourceEndpoint, new Date(Date.now()));
        }
    };
    DeferredAadTokenProvider.prototype._getTokenDataInternal = function (resourceEndpoint, configuration, optionsOrUseCachedToken) {
        var _this = this;
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        var options = optionsOrUseCachedToken && typeof optionsOrUseCachedToken === 'object'
            ? optionsOrUseCachedToken
            : {
                useCachedToken: optionsOrUseCachedToken,
                authenticationScheme: ITokenProvider_1.IAuthenticationScheme.BEARER
            };
        var acquireTokenQosMonitor = new sp_diagnostics_1._QosMonitor('AadTokenProvider.GetAppTokenTimePerf');
        if (!this._shouldTokenBeRequested(resourceEndpoint)) {
            acquireTokenQosMonitor.writeExpectedFailure('Token already requested and failed');
            throw new DetailedError('Token request previously failed', 'TokenRequestPreviouslyFailed');
        }
        var getTokenDataPromise;
        var tokenProviderConfig = configuration || this._defaultConfiguration;
        var isOboForV3 = false;
        var v3OboQos = undefined;
        if (this._shouldUseOboTokenExchange(tokenProviderConfig) && this._oboConfiguration) {
            isOboForV3 =
                (0, AadFlights_1.isMsalBrowserV3FlightEnabled)() &&
                    !this._isFirstParty(tokenProviderConfig.servicePrincipalId) &&
                    !sp_core_library_1._BrowserUtilities.isTeamsHosted() &&
                    !this._isInIsolatedDomain();
            if (isOboForV3) {
                v3OboQos = new sp_diagnostics_1._QosMonitor('MsalBrowserV3TokenProvider.OboFallback');
            }
            // OBO Token Exchange is only supported for 3rd Parties. Using the default configuration will
            // prevent this code path from running for 1st party requests
            getTokenDataPromise = this._getOboTokenProvider(tokenProviderConfig, this._oboConfiguration, this._oboFirstPartyTokenCallback, this._oboThirdPartyTokenCallback)
                .then(function (tokenProvider) { return tokenProvider.getToken(resourceEndpoint, options); })
                .then(function (token) {
                return { accessToken: token, expiresOn: null, fromCache: false };
            })
                .catch(function (error) {
                if (isOboForV3) {
                    v3OboQos === null || v3OboQos === void 0 ? void 0 : v3OboQos.writeUnexpectedFailure(error);
                    throw error;
                }
                else {
                    throw error;
                }
            });
            // Always use MSAL.  When graduating this killswitch remove the chunks implicitTokenProvider, MSALImplicit
            // and Msal/Current
        }
        else {
            getTokenDataPromise = this._getMsalBrowserTokenProvider(tokenProviderConfig).then(function (tokenProvider) {
                return tokenProvider.getTokenData(resourceEndpoint, options);
            });
        }
        return getTokenDataPromise
            .then(function (token) {
            var isInternal = tokenProviderConfig.servicePrincipalId === AadConstants_1.default.PRE_AUTHORIZED_APP_PRINCIPAL_ID;
            var extraData = {
                isInternal: isInternal
            };
            // We can only log the endpoint if first party to avoid privacy issues
            if (isInternal) {
                extraData.name = resourceEndpoint;
            }
            acquireTokenQosMonitor.writeSuccess(extraData);
            if (isOboForV3) {
                v3OboQos === null || v3OboQos === void 0 ? void 0 : v3OboQos.writeSuccess(extraData);
            }
            return token;
        })
            .catch(function (error) {
            acquireTokenQosMonitor.writeUnexpectedFailure(/* tagNameSuffix */ undefined, error);
            _this._addFailedRequest(resourceEndpoint);
            throw error;
        });
    };
    DeferredAadTokenProvider.prototype._shouldTokenBeRequested = function (resourceEndpoint) {
        if (!(0, AadKillSwitches_1.isSkipKnownErroneousResourcesActivated)()) {
            var previousFetchTime = this._failedTokenRequests.get(resourceEndpoint);
            if (previousFetchTime) {
                // 300000 is 5 minutes in milliseconds
                return Date.now() - previousFetchTime.getTime() > 300000;
            }
        }
        return true;
    };
    Object.defineProperty(DeferredAadTokenProvider.prototype, "tokenAcquisitionEvent", {
        /**
         * Notifies the developer when Token Acquisition requires user action.
         * @eventproperty
         */
        get: function () {
            return this._tokenAcquisitionEvent;
        },
        enumerable: false,
        configurable: true
    });
    DeferredAadTokenProvider.prototype._shouldUseNestedAppAuth = function (tokenProviderConfig) {
        // TODO: We need to also enable this for other metaOS hubs.
        var isTeamsAndNaaIsEnabled = (0, AadFlights_1.isNaaFlightEnabled)() && sp_core_library_1._BrowserUtilities.isTeamsHosted();
        var isSharePointMobile = !(0, AadKillSwitches_1.isUseUpdatedBrowserUtilitiesSPMobileCheckKSActivated)()
            ? sp_core_library_1._BrowserUtilities.isSharePointMobileHosted()
            : sp_core_library_1._BrowserUtilities.isMobileWebView();
        var isViaConnectionsMobile = !(0, AadKillSwitches_1.isUseUpdatedBrowserUtilitiesVCMCheckKSActivated)()
            ? sp_core_library_1._BrowserUtilities.isVivaConnectionsMobileHosted()
            : sp_core_library_1._BrowserUtilities.isMEEBridgeApplicationHosted();
        var isMobileAndNaaIsEnabled = window.nestedAppAuthBridge &&
            (((0, AadFlights_1.isNaaFlightEnabledForSharePointMobile)() && isSharePointMobile) ||
                ((0, AadFlights_1.isNaaFlightEnabledForVCM)() && isViaConnectionsMobile));
        if ((isTeamsAndNaaIsEnabled || isMobileAndNaaIsEnabled) &&
            tokenProviderConfig.isNaaSupported &&
            ((0, AadFlights_1.isUseMsalV3For3pRequestsEnabled)() ||
                tokenProviderConfig.servicePrincipalId === AadConstants_1.default.PRE_AUTHORIZED_APP_PRINCIPAL_ID)) {
            return true;
        }
        return false;
    };
    /**
     * Given a token provider configuration, this method returns true if MsalBrowserTokenV3Provider should be
     * used. MsalBrowserTokenV3Provider should be used when:
     *   - Either A first party client ID is requesting a token or third party client ID for which reply uri has been updated.
     */
    DeferredAadTokenProvider.prototype._shouldUseMsalBrowserTokenProvider = function (configuration) {
        if ((0, AadFlights_1.isMsalBrowserV3FlightEnabled)()) {
            var isReplyUriUpdated = this._defaultConfiguration.thirdPartyReplyUrisUpdated
                ? this._defaultConfiguration.thirdPartyReplyUrisUpdated
                : false;
            var useMsalBrowser = this._isFirstParty(configuration.servicePrincipalId) || isReplyUriUpdated;
            return useMsalBrowser;
        }
        else {
            return false;
        }
    };
    DeferredAadTokenProvider.prototype._getAdalAuthContextManager = function (configuration) {
        if (!this._authContextManager) {
            this._authContextManager = Promise.resolve().then(function () { return tslib_1.__importStar(require('./chunks/adalAuthContextManager/AdalAuthContextManager' /* webpackChunkName: 'adalauthcontext' */)); }).then(function (adalAuthContextManagerModule) { return new adalAuthContextManagerModule.AdalAuthContextManager(); });
        }
        return this._authContextManager;
    };
    DeferredAadTokenProvider.prototype._getMsalBrowserCurrentTokenProvider = function (configuration) {
        var _this = this;
        return Promise.resolve().then(function () { return tslib_1.__importStar(require('./chunks/msalBrowser/MsalBrowserTokenProvider' /* webpackChunkName: 'msalBrowser' */)); }).then(function (msalBrowserTokenProviderModule) {
            if (_this._isFirstParty(configuration.servicePrincipalId)) {
                if (!_this._firstPartyMsalBrowserTokenProvider) {
                    _this._firstPartyMsalBrowserTokenProvider =
                        new msalBrowserTokenProviderModule.MsalBrowserTokenProvider(configuration);
                }
                return _this._firstPartyMsalBrowserTokenProvider;
            }
            else {
                if (!_this._thirdPartyMsalBrowserTokenProvider) {
                    _this._thirdPartyMsalBrowserTokenProvider =
                        new msalBrowserTokenProviderModule.MsalBrowserTokenProvider(configuration);
                }
                return _this._thirdPartyMsalBrowserTokenProvider;
            }
        });
    };
    DeferredAadTokenProvider.prototype._getMsalBrowserLegacyTokenProvider = function (configuration) {
        var _this = this;
        return Promise.resolve().then(function () { return tslib_1.__importStar(require('./chunks/msalLegacy/MsalBrowserTokenProvider' /* webpackChunkName: 'msalLegacyBrowser' */)); }).then(function (msalBrowserTokenProviderModule) {
            if (_this._isFirstParty(configuration.servicePrincipalId)) {
                if (!_this._firstPartyMsalBrowserTokenProvider) {
                    _this._firstPartyMsalBrowserTokenProvider =
                        new msalBrowserTokenProviderModule.MsalBrowserTokenProvider(configuration);
                }
                return _this._firstPartyMsalBrowserTokenProvider;
            }
            else {
                if (!_this._thirdPartyMsalBrowserTokenProvider) {
                    _this._thirdPartyMsalBrowserTokenProvider =
                        new msalBrowserTokenProviderModule.MsalBrowserTokenProvider(configuration);
                }
                return _this._thirdPartyMsalBrowserTokenProvider;
            }
        });
    };
    DeferredAadTokenProvider.prototype._getMsalBrowserTokenProvider = function (configuration) {
        if ((0, AadFlights_1.isUpgradeMsalVersionEnabled)() || configuration.isPairwiseBrokerEnabled) {
            return this._getMsalBrowserCurrentTokenProvider(configuration);
        }
        else {
            return this._getMsalBrowserLegacyTokenProvider(configuration);
        }
    };
    DeferredAadTokenProvider.prototype._getOboTokenProvider = function (configuration, oboConfiguration, oboFirstPartyTokenCallback, oboThirdPartyTokenCallback) {
        var _this = this;
        return this._getAdalAuthContextManager(configuration).then(function (adalAuthContextManager) {
            if (_this._isFirstParty(configuration.servicePrincipalId)) {
                if (!_this._firstPartyOboTokenProvider) {
                    _this._firstPartyOboTokenProvider = adalAuthContextManager.getOboTokenProvider(configuration, oboConfiguration, oboFirstPartyTokenCallback, oboThirdPartyTokenCallback);
                }
                return _this._firstPartyOboTokenProvider;
            }
            else {
                if (!_this._thirdPartyOboTokenProvider) {
                    _this._thirdPartyOboTokenProvider = adalAuthContextManager.getOboTokenProvider(configuration, oboConfiguration, oboFirstPartyTokenCallback, oboThirdPartyTokenCallback);
                }
                return _this._thirdPartyOboTokenProvider;
            }
        });
    };
    DeferredAadTokenProvider.prototype._isFirstParty = function (clientId) {
        return (clientId === AadConstants_1.default.PRE_AUTHORIZED_APP_PRINCIPAL_ID ||
            clientId === AadConstants_1.default.ODC_AAD_APP_PRINCIPAL_ID ||
            (!(0, AadKillSwitches_1.isTenantAdminAppFirtPartyKSActivated)() && clientId === AadConstants_1.default.SPO_FIRST_PARTY_APP_HELPER_ID));
    };
    DeferredAadTokenProvider.prototype._isInIsolatedDomain = function () {
        var firstDomainSegment = window.location.hostname.split('.')[0];
        var isolatedAppIndex = firstDomainSegment.lastIndexOf('-app');
        var isIsolated = false;
        if (isolatedAppIndex > -1) {
            var isolatedGuid = firstDomainSegment.substring(isolatedAppIndex);
            if (isolatedGuid.length > 32) {
                isIsolated = !!sp_core_library_1.Guid.tryParse(isolatedGuid.substring(isolatedGuid.length - 32));
            }
        }
        return isIsolated;
    };
    /**
     * Check for determining if the OBO Token Exchange API should be used in the current environment.
     */
    DeferredAadTokenProvider.prototype._shouldUseOboTokenExchange = function (tokenProviderConfig) {
        if (this._shouldUseNestedAppAuth(tokenProviderConfig)) {
            return false;
        }
        if (!(0, AadKillSwitches_1.isAlwaysInitOboConfigKSActive)()) {
            return (!!this._oboConfiguration &&
                (((0, AadFlights_1.isMsalBrowserV3FlightEnabled)() &&
                    !this._isFirstParty(tokenProviderConfig.servicePrincipalId) &&
                    !sp_core_library_1._BrowserUtilities.isTeamsHosted() &&
                    !this._isInIsolatedDomain()) ||
                    (((0, AadFlights_1.isOBOForAllTeamsScenariosEnabled)() && sp_core_library_1._BrowserUtilities.isTeamsHosted()) ||
                        (!(0, AadKillSwitches_1.useOBOInWebForSecureBrokerKSActivated)() && sp_core_library_1._BrowserUtilities.isUsingSecureBroker())
                        ? sp_core_library_1._BrowserUtilities.isTeamsHosted()
                        : sp_core_library_1._BrowserUtilities.isWebViewHosted()) ||
                    ((0, AadFlights_1.isSafariAuthPatchEnbled)() && /.*AppleWebKit.*Safari/.test(navigator.userAgent))));
        }
        if ((0, AadKillSwitches_1.isTeamsBrowserHostedKSActive)()) {
            return !!this._oboConfiguration;
        }
        else {
            return (((((0, AadFlights_1.isOBOForAllTeamsScenariosEnabled)() && sp_core_library_1._BrowserUtilities.isTeamsHosted()) ||
                (!(0, AadKillSwitches_1.useOBOInWebForSecureBrokerKSActivated)() && sp_core_library_1._BrowserUtilities.isUsingSecureBroker())
                ? sp_core_library_1._BrowserUtilities.isTeamsHosted()
                : sp_core_library_1._BrowserUtilities.isWebViewHosted()) ||
                ((0, AadFlights_1.isSafariAuthPatchEnbled)() && /.*AppleWebKit.*Safari/.test(navigator.userAgent))) &&
                !!this._oboConfiguration);
        }
    };
    return DeferredAadTokenProvider;
}());
exports.DeferredAadTokenProvider = DeferredAadTokenProvider;
//# sourceMappingURL=DeferredAadTokenProvider.js.map