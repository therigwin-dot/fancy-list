"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PopupEventArgs = exports.TokenAcquisitionEventArgs = exports.BeforeRedirectEventArgs = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var AadKillSwitches_1 = require("./AadKillSwitches");
var DeferredAadTokenProvider_1 = require("./DeferredAadTokenProvider");
/**
 * Arguments for before redirecting for a full page authentication
 *
 * @public
 */
var BeforeRedirectEventArgs = /** @class */ (function (_super) {
    tslib_1.__extends(BeforeRedirectEventArgs, _super);
    function BeforeRedirectEventArgs(redirectUrl, cancel, configuration) {
        if (configuration === void 0) { configuration = undefined; }
        var _this = _super.call(this) || this;
        _this.configuration = configuration;
        _this.redirectUrl = redirectUrl;
        _this.cancel = cancel;
        return _this;
    }
    return BeforeRedirectEventArgs;
}(sp_core_library_1.SPEventArgs));
exports.BeforeRedirectEventArgs = BeforeRedirectEventArgs;
/**
 * Arguments for a token acquisition failure event.
 *
 * @public
 */
var TokenAcquisitionEventArgs = /** @class */ (function (_super) {
    tslib_1.__extends(TokenAcquisitionEventArgs, _super);
    function TokenAcquisitionEventArgs(message, redirectUrl) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.redirectUrl = redirectUrl;
        return _this;
    }
    return TokenAcquisitionEventArgs;
}(sp_core_library_1.SPEventArgs));
exports.TokenAcquisitionEventArgs = TokenAcquisitionEventArgs;
/**
 * Arguments for a popup event if interaction is required during the login flow.
 *
 * @public
 */
var PopupEventArgs = /** @class */ (function (_super) {
    tslib_1.__extends(PopupEventArgs, _super);
    function PopupEventArgs(cancel, requestPopup, showPopup) {
        var _this = _super.call(this) || this;
        _this.cancel = cancel;
        _this.requestPopup = requestPopup;
        _this.showPopup = showPopup;
        return _this;
    }
    return PopupEventArgs;
}(sp_core_library_1.SPEventArgs));
exports.PopupEventArgs = PopupEventArgs;
var LAST_ENSURE_STATE_REDIRECT_TIME_STORAGE_KEY = 'lastEnsureStateRedirectTime';
var LOCAL_STORAGE_TEST_STRING = 'lsTest';
var TICKS_IN_5_DAYS = 5 * 24 * 60 * 60 * 1000;
/**
 * This class allows a developer to obtain OAuth2 tokens from Azure AD.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @privateRemarks
 * AadTokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 *
 * @public
 * @sealed
 */
var AadTokenProvider = /** @class */ (function () {
    /**
     * @internal
     */
    function AadTokenProvider(configuration, oboConfiguration) {
        this._aadConfiguration = configuration;
        this._oboConfiguration = oboConfiguration;
        this._tokenAcquisitionEvent = new sp_core_library_1.SPEvent(AadTokenProvider._tokenAcquisitionEventId);
        this.onBeforeRedirectEvent = new sp_core_library_1.SPEvent(AadTokenProvider._onBeforeRedirectEventId);
        this.popupEvent = new sp_core_library_1.SPEvent(AadTokenProvider._popupEventId);
    }
    AadTokenProvider._getLastEnsureStateRedirectTime = function () {
        var ensureState;
        if (AadTokenProvider._isUsingLocalStorage()) {
            ensureState = Number(localStorage.getItem(LAST_ENSURE_STATE_REDIRECT_TIME_STORAGE_KEY));
        }
        else {
            ensureState = Number(sessionStorage.getItem(LAST_ENSURE_STATE_REDIRECT_TIME_STORAGE_KEY));
        }
        return isNaN(ensureState) ? 0 : ensureState;
    };
    AadTokenProvider._setLastEnsureStateRedirectTime = function () {
        if (AadTokenProvider._isUsingLocalStorage()) {
            localStorage.setItem(LAST_ENSURE_STATE_REDIRECT_TIME_STORAGE_KEY, Date.now().toString());
        }
        else {
            sessionStorage.setItem(LAST_ENSURE_STATE_REDIRECT_TIME_STORAGE_KEY, Date.now().toString());
        }
    };
    AadTokenProvider._isUsingLocalStorage = function () {
        try {
            if (localStorage) {
                localStorage.setItem(LOCAL_STORAGE_TEST_STRING, LOCAL_STORAGE_TEST_STRING);
                localStorage.removeItem(LOCAL_STORAGE_TEST_STRING);
                return true;
            }
        }
        catch (_a) {
            // Do nothing, it just means local storage is not available
        }
        return false;
    };
    AadTokenProvider.prototype.getToken = function (resourceEndpoint, optionsOrUseCachedToken) {
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        var options = optionsOrUseCachedToken && typeof optionsOrUseCachedToken === 'object'
            ? optionsOrUseCachedToken
            : {
                useCachedToken: optionsOrUseCachedToken
            };
        var tokenProvider = this._getAadTokenProvider();
        return tokenProvider.getToken(resourceEndpoint, options).then(function (response) {
            return response;
        });
    };
    /**
     * This method sets the value in the default config for supports nested app auth set
     *
     * @internal
     */
    AadTokenProvider.prototype._setSupportsNestedAppAuth = function (isNAASupported) {
        this._aadConfiguration.isNaaSupported = isNAASupported;
    };
    /**
     * This will call the oauth token provider that is being used and give it a change to ensure
     * its state.
     *
     * @internal
     */
    AadTokenProvider.prototype._ensureState = function () {
        var _this = this;
        var _a;
        if ((0, AadKillSwitches_1.isEnsureStateOnNAAKSActivated)() || !((_a = this._aadConfiguration) === null || _a === void 0 ? void 0 : _a.isNaaSupported)) {
            return this._ensureTelemetry().then(function () {
                if (Date.now() - TICKS_IN_5_DAYS > AadTokenProvider._getLastEnsureStateRedirectTime()) {
                    // We only want to ensure state once per day.  We don't want to get into a loop where ensuring state
                    // triggers a redirect over and over.  If the full page redirect is not successful we don't want to try
                    // it again and potentially block the user
                    var observer_1 = {
                        instanceId: 'AadTokenProvider',
                        componentId: 'AadTokenProvider',
                        isDisposed: false,
                        dispose: function () {
                            // Nothing.
                        }
                    };
                    var redirectHandler_1 = function () {
                        AadTokenProvider._setLastEnsureStateRedirectTime();
                        _this.onBeforeRedirectEvent.remove(observer_1, redirectHandler_1);
                    };
                    _this.onBeforeRedirectEvent.add(observer_1, redirectHandler_1);
                    var tokenProvider = _this._getAadTokenProvider();
                    return tokenProvider._ensureState().then(function () {
                        _this.onBeforeRedirectEvent.remove(observer_1, redirectHandler_1);
                    });
                }
                else {
                    return Promise.resolve();
                }
            });
        }
        else {
            return Promise.resolve();
        }
    };
    /**
     * @internal
     */
    AadTokenProvider.prototype._getTokenInternal = function (resourceEndpoint, configuration, optionsOrUseCachedToken) {
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        var options = optionsOrUseCachedToken && typeof optionsOrUseCachedToken === 'object'
            ? optionsOrUseCachedToken
            : {
                useCachedToken: optionsOrUseCachedToken
            };
        var tokenProvider = this._getAadTokenProvider();
        return tokenProvider._getTokenInternal(resourceEndpoint, configuration, options).then(function (response) {
            return response;
        });
    };
    /**
     *
     * @internal
     */
    AadTokenProvider.prototype._getTokenData = function (resourceEndpoint, optionsOrUseCachedToken) {
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        var options = optionsOrUseCachedToken && typeof optionsOrUseCachedToken === 'object'
            ? optionsOrUseCachedToken
            : {
                useCachedToken: optionsOrUseCachedToken,
                skipLoggingAndDisableRedirects: true,
                claims: undefined
            };
        var tokenProvider = this._getAadTokenProvider();
        return tokenProvider._getTokenData(resourceEndpoint, options);
    };
    Object.defineProperty(AadTokenProvider.prototype, "tokenAcquisitionEvent", {
        /**
         * Notifies the developer when Token Acquisition requires user action.
         *
         * @eventproperty
         */
        get: function () {
            return this._tokenAcquisitionEvent;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Ensures proper monitoring is set up for token acquisition
     *
     * @internal
     */
    AadTokenProvider.prototype._ensureTelemetry = function () {
        var tokenProvider = this._getAadTokenProvider();
        return tokenProvider._ensureTelemetry();
    };
    AadTokenProvider.prototype._getAadTokenProvider = function () {
        if (!this._aadTokenProvider) {
            var aadTokenProvider = new DeferredAadTokenProvider_1.DeferredAadTokenProvider(this._tokenAcquisitionEvent, this.onBeforeRedirectEvent, this.popupEvent, this._aadConfiguration, this._oboConfiguration, this._oboFirstPartyTokenCallback, this._oboThirdPartyTokenCallback);
            this._tokenAcquisitionEvent = aadTokenProvider.tokenAcquisitionEvent;
            this._aadTokenProvider = aadTokenProvider;
        }
        return this._aadTokenProvider;
    };
    /**
     * Token Acquisition Event String
     *
     * @internal
     */
    AadTokenProvider._tokenAcquisitionEventId = 'tokenAcquisitionFailure';
    /**
     * Auth redirect Event String
     *
     * @internal
     */
    AadTokenProvider._onBeforeRedirectEventId = 'onBeforeAuthRedirect';
    /**
     * Popup Event String
     *
     * @internal
     */
    AadTokenProvider._popupEventId = 'authPopup';
    return AadTokenProvider;
}());
exports.default = AadTokenProvider;
//# sourceMappingURL=AadTokenProvider.js.map