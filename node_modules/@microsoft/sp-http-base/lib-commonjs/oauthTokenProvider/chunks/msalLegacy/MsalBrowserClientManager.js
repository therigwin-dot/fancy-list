"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsalBrowserClientManager = void 0;
var msal_legacy_1 = require("@azure/msal-legacy");
var MsalUtilities_1 = require("./MsalUtilities");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var AadFlights_1 = require("../../AadFlights");
var AadKillSwitches_1 = require("../../AadKillSwitches");
/**
 * This class manages Msal Browser client instances and provides the caller with a client to use.
 *
 * MSAL.js team strongly encourages us to have a 1:1 relationship between client IDs and Msal Browser clients
 * for performance and reliability reasons.
 * This class will ensure that there is only 1 Msal Browser client per client ID.
 *
 * MsalBrowserClientManager also ensures that all Msal Browser clients have invoked handleRedirectPromise()
 * and waited for the result.
 */
var MsalBrowserClientManager = /** @class */ (function () {
    function MsalBrowserClientManager() {
    }
    /**
     * This method registers a new Msal Browser client. Calling this method tells MsalBrowserClientManager
     * that you will soon request a client with the same authority, client ID, and redirect URI.
     *
     * Registering before requesting a client is optional, you may instead directly call getMsalBrowserClient().
     * By registering early (e.g., during the constructor of MsalBrowserTokenProvider), handleRedirectPromise()
     * will have time to resolve before the client is needed for a request
     *
     * @param authority - URL of AAD auth server.
     * @param clientId - AAD issued client ID that tokens are being requested for.
     * @param redirectUri - URL the user will be redirected to after calling any redirect methods.
     */
    MsalBrowserClientManager.registerMsalBrowserClient = function (authority, clientId, redirectUri, isNaaSupported, isPairwiseBrokerEnabled) {
        var _this = this;
        var clientIdIndex = MsalBrowserClientManager._getClientIdIndex(clientId, isNaaSupported, isPairwiseBrokerEnabled);
        if (!this._isClientIndexRegistered(clientIdIndex)) {
            if (isNaaSupported) {
                MsalBrowserClientManager._msalBrowserClients.set(clientIdIndex, this._createMsalBrowserNextClient(authority, clientId, redirectUri));
            }
            else if (isPairwiseBrokerEnabled) {
                throw new Error('PWB not supported on legacy app');
            }
            else {
                MsalBrowserClientManager._msalBrowserClients.set(clientIdIndex, new Promise(function (resolve) {
                    var msalBrowserClient = _this._createMsalBrowserClient(authority, clientId, redirectUri);
                    return msalBrowserClient
                        .initialize()
                        .then(function () {
                        return msalBrowserClient
                            .handleRedirectPromise()
                            .then(function () {
                            resolve(msalBrowserClient);
                        })
                            .catch(function (error) {
                            var handleRedirectPromiseQos = new sp_diagnostics_1._QosMonitor('MsalBrowserV3ClientManager._handleRedirectPromise');
                            handleRedirectPromiseQos.writeUnexpectedFailure(error.errorCode, error);
                            if (!(0, AadKillSwitches_1.isRemoveFloatingPromisesKSActivated)()) {
                                throw error;
                            }
                        });
                    })
                        .catch(function (error) {
                        var initializePromiseQos = new sp_diagnostics_1._QosMonitor('MsalBrowserV3ClientManager._initializePromise');
                        initializePromiseQos.writeUnexpectedFailure(error.errorCode, error);
                        if (!(0, AadKillSwitches_1.isRemoveFloatingPromisesKSActivated)()) {
                            throw error;
                        }
                    });
                }));
            }
        }
    };
    /**
     * This method returns an initialized Msal Browser client that has also invoked and fulfilled the
     * handleRedirectPromise() call. If the requested Msal Browser client does not exist, this method
     * will create and return it.
     *
     * @param authority - URL of AAD auth server.
     * @param clientId - AAD issued client ID that tokens are being requested for.
     * @param redirectUri - URL the user will be redirected to after calling any redirect methods.
     * @returns A promise containing an initialized Msal Browser client.
     */
    MsalBrowserClientManager.getMsalBrowserClient = function (authority, clientId, redirectUri, isNaaSupported, isPairwiseBrokerEnabled) {
        var clientIdIndex = MsalBrowserClientManager._getClientIdIndex(clientId, isNaaSupported, isPairwiseBrokerEnabled);
        if (!this._isClientIndexRegistered(clientIdIndex)) {
            this.registerMsalBrowserClient(authority, clientId, redirectUri, isNaaSupported, isPairwiseBrokerEnabled);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return MsalBrowserClientManager._msalBrowserClients.get(clientIdIndex);
    };
    MsalBrowserClientManager._isClientIndexRegistered = function (clientIdIndex) {
        return MsalBrowserClientManager._msalBrowserClients.has(clientIdIndex);
    };
    MsalBrowserClientManager._getClientIdIndex = function (clientId, isNaaSupported, isPairwiseBrokerEnabled) {
        if (!(0, AadKillSwitches_1.isUseClientIndexKSActivated)()) {
            if (isNaaSupported) {
                return clientId + MsalBrowserClientManager._NAA_CLIENT_SUFFIX;
            }
            else if (isPairwiseBrokerEnabled) {
                return clientId + MsalBrowserClientManager._PAIRWISEBROKER_CLIENT_SUFFIX;
            }
            else {
                return clientId;
            }
        }
        else {
            return clientId;
        }
    };
    /**
     * Creates and returns a PublicClientApplication with a custom configuration.
     * PublicClientApplication is the object used for interacting with the MSAL library,
     * AKA MSAL client.
     *
     * Options:
     *   - authority: URL of AAD auth server.
     *   - clientId: AAD issued client ID that tokens are being requested for.
     *   - navigateToLoginRequestUrl: Whether or not to navigate to the original request URL after
     *                                the auth server navigates to the redirect URL.
     *   - redirectUri: URL the user will be redirected to after calling any redirect methods.
     *   - loadFrameTimeout: Timeout for waiting for a response hash in an iFrame.
     *   - navigateFrameWait: Maximum time MSAL will wait for a frame to load.
     *   - loggerOptions: Configuration for MSAL logging. See below for details.
     *
     * Logging:
     *   - MSAL can enable logging to the console for debugging purposes.
     *   - To enable logging, use the query string parameter 'msalLogging=true'.
     *   - To disable logging, use the query string parameter 'msalLogging=false'.
     *   - Logs are printed in the format "[sp-http][msal.js]: LOG_MESSAGE"
     *
     * @returns An initialized PublicClientApplication.
     */
    MsalBrowserClientManager._createMsalBrowserClient = function (authority, clientId, redirectUri) {
        var configuration = this._getMsalBrowserConfiguration(authority, clientId, redirectUri, false);
        return new msal_legacy_1.PublicClientApplication(configuration);
    };
    MsalBrowserClientManager._createMsalBrowserNextClient = function (authority, clientId, redirectUri) {
        var configuration = this._getMsalBrowserConfiguration(authority, clientId, redirectUri, true);
        return (0, msal_legacy_1.createNestablePublicClientApplication)(configuration);
    };
    MsalBrowserClientManager._getMsalBrowserConfiguration = function (authority, clientId, redirectUri, isNaaSupported) {
        var configuration = {
            auth: {
                authority: authority,
                clientId: clientId,
                navigateToLoginRequestUrl: true,
                redirectUri: redirectUri,
                supportsNestedAppAuth: isNaaSupported
            },
            system: {
                loadFrameTimeout: 10000,
                navigateFrameWait: 0
            },
            cache: {
                claimsBasedCachingEnabled: true
            }
        };
        if ((0, AadFlights_1.isUseLocalStorageInMsalV3Enabled)() &&
            MsalBrowserClientManager._isLocalStorageAvailable() &&
            configuration.cache) {
            configuration.cache.cacheLocation = 'localStorage';
        }
        if ((0, MsalUtilities_1.shouldPrintMsalLogsToConsole)() && configuration.system) {
            configuration.system.loggerOptions = {
                loggerCallback: function (logLevel, message, containsPii) {
                    // eslint-disable-next-line no-console
                    console.log("[sp-http][msal-browser.js][LogLevel:".concat(logLevel, "]: ").concat(message));
                },
                piiLoggingEnabled: true,
                logLevel: msal_legacy_1.LogLevel.Verbose
            };
        }
        return configuration;
    };
    MsalBrowserClientManager._isLocalStorageAvailable = function () {
        try {
            if (localStorage) {
                localStorage.setItem(MsalBrowserClientManager._LOCAL_STORAGE_TEST_STRING, MsalBrowserClientManager._LOCAL_STORAGE_TEST_STRING);
                localStorage.removeItem(MsalBrowserClientManager._LOCAL_STORAGE_TEST_STRING);
                return true;
            }
        }
        catch (_a) {
            // Do nothing, it just means local storage is not available
        }
        return false;
    };
    MsalBrowserClientManager._msalBrowserClients = new Map();
    MsalBrowserClientManager._LOCAL_STORAGE_TEST_STRING = 'lsTest';
    MsalBrowserClientManager._NAA_CLIENT_SUFFIX = 'naa';
    MsalBrowserClientManager._PAIRWISEBROKER_CLIENT_SUFFIX = 'pwb';
    return MsalBrowserClientManager;
}());
exports.MsalBrowserClientManager = MsalBrowserClientManager;
//# sourceMappingURL=MsalBrowserClientManager.js.map