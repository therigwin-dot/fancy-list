"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsEnvironmentManager = void 0;
var sp_core_library_1 = require("@microsoft/sp-core-library");
/**
 * Wrap a Teams SDK function in a Promise. When the callback is invoked,
 * the promise will resolve to the callback arguments.
 * Needed, because we want a guarantee that the execution has finished and the callback func has been called.
 *
 * @param f - Teams SDK function.
 * @returns A promise resolving to the callback arguments.
 */
function promisify(f) {
    return new Promise(function (resolve, reject) {
        try {
            // resolve the promise when the callback is invoked to the callback arguments
            f(function (t) { return resolve(t); });
        }
        catch (e) {
            reject(e);
        }
    });
}
/**
 * Get and store teams context.
 * @internal
 */
var TeamsEnvironmentManager = /** @class */ (function () {
    function TeamsEnvironmentManager() {
    }
    // set teamsContext
    TeamsEnvironmentManager.initialize = function () {
        if (!sp_core_library_1._BrowserUtilities.isTeamsHosted() || TeamsEnvironmentManager._teamsContext) {
            return Promise.resolve();
        }
        if (TeamsEnvironmentManager.sdkProvider) {
            return Promise.resolve();
        }
        var teamsPromise = Promise.resolve().then(function () { return __importStar(require(
        /* webpackChunkName: 'spfx-core-teamsenv-teamsJs-v2' */ '@microsoft/teams-js-v2')); });
        return teamsPromise.then(function (teamsJS) {
            teamsJS.initialize();
            return promisify(teamsJS.getContext).then(function (context) {
                TeamsEnvironmentManager._teamsContext = context;
                TeamsEnvironmentManager._teamsJs = teamsJS;
            });
        });
    };
    TeamsEnvironmentManager.getTeamsSDK = function () {
        if (TeamsEnvironmentManager.sdkProvider) {
            return TeamsEnvironmentManager.sdkProvider;
        }
        return Promise.resolve({});
    };
    TeamsEnvironmentManager.getTeamsContext = function () {
        return TeamsEnvironmentManager._teamsContext;
    };
    TeamsEnvironmentManager.getTeamsJs = function () {
        return TeamsEnvironmentManager._teamsJs;
    };
    return TeamsEnvironmentManager;
}());
exports.TeamsEnvironmentManager = TeamsEnvironmentManager;
//# sourceMappingURL=TeamsEnvironmentManager.js.map