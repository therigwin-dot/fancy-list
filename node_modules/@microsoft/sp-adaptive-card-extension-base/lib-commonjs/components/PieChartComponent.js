"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._preProcessPieChartParameters = exports._pieConfigurationToParameters = void 0;
var tslib_1 = require("tslib");
var DataVisualizationComponent_1 = require("./DataVisualizationComponent");
/**
 * Convert pie chart configuration to data visualization parameters.
 *
 * @internal
 */
function _pieConfigurationToParameters(configuration) {
    return configuration;
}
exports._pieConfigurationToParameters = _pieConfigurationToParameters;
/**
 * Function to calculate the metadata properties for the pie chart based on card layout.
 */
function _getPieChartProperties(cardSize, position, isPartialHeightCard) {
    if (position === 'fixed') {
        return {
            pieChartSize: 'fixed',
            maxCategories: 8,
            maxLabels: 4
        };
    }
    else if (isPartialHeightCard) {
        return {
            pieChartSize: 'partial',
            maxCategories: 6,
            maxLabels: 2
        };
    }
    else if (cardSize === 'Medium') {
        return {
            pieChartSize: 'medium',
            maxCategories: 6,
            maxLabels: 2
        };
    }
    else {
        return {
            pieChartSize: 'full',
            maxCategories: 10,
            maxLabels: 6
        };
    }
}
function _limitPieDataByMaxCategories(series, maxCategories) {
    if (series.data.length <= maxCategories) {
        return series;
    }
    var limitedData = series.data.slice(0, maxCategories - 1);
    var others = {
        x: 'Others',
        y: series.data.slice(maxCategories - 1).reduce(function (sum, dataPoint) { return sum + dataPoint.y; }, 0),
        color: '#EDEDED',
        showLabel: false
    };
    return tslib_1.__assign(tslib_1.__assign({}, series), { data: tslib_1.__spreadArray(tslib_1.__spreadArray([], limitedData, true), [others], false) });
}
function _createDataLabels(series, pieChartSize, maxLabels, showLabelValue) {
    var sumY = series.data.reduce(function (sum, dataPoint) { return sum + dataPoint.y; }, 0);
    var labelsCount = 0;
    var dataPointsWithLabels = series.data.map(function (dataPoint) {
        if (labelsCount < maxLabels && dataPoint.showLabel === showLabelValue) {
            labelsCount++;
            return tslib_1.__assign(tslib_1.__assign({}, dataPoint), { _dataLabel: pieChartSize === 'fixed' || pieChartSize === 'medium'
                    ? "".concat(((dataPoint.y / sumY) * 100).toFixed(0), "%")
                    : "".concat(dataPoint.x.substring(0, 3), ":").concat(((dataPoint.y / sumY) * 100).toFixed(0), "%") });
        }
        return dataPoint;
    });
    return tslib_1.__assign(tslib_1.__assign({}, series), { data: dataPointsWithLabels });
}
function _handleDataLabels(series, maxLabels, pieChartSize) {
    if (series.data.some(function (dataPoint) { return dataPoint.showLabel; })) {
        // Create data labels where showLabel is true
        return _createDataLabels(series, pieChartSize, maxLabels, true);
    }
    else {
        // Else treat undefined showLabel as true and create corresponding data labels
        return _createDataLabels(series, pieChartSize, maxLabels, undefined);
    }
}
/* Internal function to pre-process required metadata for rendering Pie chart */
function _preProcessPieChartParameters(parameters, hasHeader, hasDescription, hasFooter, cardSize) {
    var position = (0, DataVisualizationComponent_1._getDataVisualizationComponentPosition)(hasHeader, hasDescription, hasFooter);
    var isPartialHeightCard = position === 'body' && (hasHeader || hasDescription || hasFooter);
    var pieProperties = _getPieChartProperties(cardSize, position, isPartialHeightCard);
    var updatedSeries = parameters.series.map(function (series) {
        // Sort series by descending order of y value
        var sortedSeries = tslib_1.__assign(tslib_1.__assign({}, series), { data: tslib_1.__spreadArray([], series.data, true).sort(function (a, b) { return b.y - a.y; }).map(function (item) { return (tslib_1.__assign({}, item)); }) });
        // Limit series by number of categories if exceeding maxCategories. Display excess as Others.
        var limitedSeries = _limitPieDataByMaxCategories(sortedSeries, pieProperties.maxCategories);
        // Handle data labels based on the showLabel property.
        return _handleDataLabels(limitedSeries, pieProperties.maxLabels, pieProperties.pieChartSize);
    });
    return tslib_1.__assign(tslib_1.__assign({}, parameters), { series: [updatedSeries[0]], _metadata: {
            position: (0, DataVisualizationComponent_1._getDataVisualizationComponentPosition)(hasHeader, hasDescription, hasFooter),
            pieChartSize: pieProperties.pieChartSize
        } });
}
exports._preProcessPieChartParameters = _preProcessPieChartParameters;
//# sourceMappingURL=PieChartComponent.js.map