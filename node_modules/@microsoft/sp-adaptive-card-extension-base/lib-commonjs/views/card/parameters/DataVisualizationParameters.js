"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._dataVisualizationCardViewParametersProcessor = exports.BarChartCardView = exports.PieChartCardView = exports.LineChartCardView = void 0;
var tslib_1 = require("tslib");
var LineChartComponent_1 = require("../../../components/LineChartComponent");
var CardViewParametersProcessors_1 = require("./CardViewParametersProcessors");
var TextComponent_1 = require("../../../components/TextComponent");
var CardBarComponent_1 = require("../../../components/CardBarComponent");
var GenericTemplates_1 = require("./GenericTemplates");
var PieChartComponent_1 = require("../../../components/PieChartComponent");
var BarChartComponent_1 = require("../../../components/BarChartComponent");
var BarChartComponent_2 = require("../../../components/BarChartComponent");
/**
 * Helper method to create a line chart card view
 *
 * @param configuration - line chart card view configuration.
 * @returns - line chart card view parameters.
 *
 * @public
 */
function LineChartCardView(configuration) {
    return _DataVisualizationCardView(configuration, (LineChartComponent_1._lineConfigurationToParameters));
}
exports.LineChartCardView = LineChartCardView;
/**
 * Helper method to create a pie chart card view
 *
 * @param configuration - pie chart card view configuration.
 * @returns - pie chart card view parameters.
 *
 * @public
 */
function PieChartCardView(configuration) {
    return _DataVisualizationCardView(configuration, PieChartComponent_1._pieConfigurationToParameters);
}
exports.PieChartCardView = PieChartCardView;
/**
 * Helper method to create a bar chart card view.
 *
 * @param configuration - bar chart card view configuration.
 * @returns - bar chart card view parameters.
 *
 * @public
 */
function BarChartCardView(configuration) {
    return _DataVisualizationCardView(configuration, BarChartComponent_1._barConfigurationToParameters);
}
exports.BarChartCardView = BarChartCardView;
/**
 * Helper method to create a card view
 *
 * @param configuration - card view configuration.
 * @returns - card view parameters.
 *
 * @internal
 */
function _DataVisualizationCardView(configuration, componentConfigurationToParameters) {
    var cardBar = configuration.cardBar, header = configuration.header, body = configuration.body, footer = configuration.footer;
    var bodyParameters;
    if (!Array.isArray(body)) {
        bodyParameters = [componentConfigurationToParameters(body)];
    }
    else if (body.length === 1) {
        bodyParameters = [componentConfigurationToParameters(body[0])];
    }
    else {
        bodyParameters = [(0, TextComponent_1._textConfigurationToParameters)(body[0]), componentConfigurationToParameters(body[1])];
    }
    return {
        cardViewType: 'dataVisualization',
        image: undefined,
        cardBar: [(0, CardBarComponent_1._cardViewBarConfigurationToParameters)(cardBar)],
        header: header && [(0, TextComponent_1._textConfigurationToParameters)(header)],
        body: bodyParameters,
        footer: footer && (0, GenericTemplates_1._footerConfigurationToFooterParameters)(footer)
    };
}
/**
 * @internal
 */
function _dataVisualizationComponentProcessor(parameters, hasHeader, hasDescription, hasFooter, cardSize) {
    switch (parameters.dataVisualizationKind) {
        case 'line':
            return (0, LineChartComponent_1._preProcessLineChartParameters)(parameters, hasHeader, hasDescription, hasFooter, cardSize);
        case 'pie':
            return (0, PieChartComponent_1._preProcessPieChartParameters)(parameters, hasHeader, hasDescription, hasFooter, cardSize);
        case 'bar':
            return (0, BarChartComponent_2._preProcessBarChartParameters)(parameters, hasHeader, hasDescription, hasFooter, cardSize);
        default:
            return parameters;
    }
}
/**
 * @internal
 */
var _dataVisualizationCardViewParametersProcessor = function (cardViewParameters, context) {
    var params = tslib_1.__assign({}, cardViewParameters);
    if (context.cardSize === 'Medium') {
        params.header = undefined;
        params.footer = undefined;
        if (params.body.length === 2) {
            params.body = [params.body[1]];
        }
    }
    var header = params.header, body = params.body, footer = params.footer;
    var hasHeader = !!(header === null || header === void 0 ? void 0 : header.length);
    var hasDescription = params.body.length === 2;
    var hasFooter = !!(footer === null || footer === void 0 ? void 0 : footer.length);
    if (body.length === 1) {
        params.body = [
            _dataVisualizationComponentProcessor(body[0], hasHeader, hasDescription, hasFooter, context.cardSize)
        ];
    }
    else {
        params.body = [
            body[0],
            _dataVisualizationComponentProcessor(body[1], hasHeader, hasDescription, hasFooter, context.cardSize)
        ];
    }
    return params;
};
exports._dataVisualizationCardViewParametersProcessor = _dataVisualizationCardViewParametersProcessor;
CardViewParametersProcessors_1.CardViewParametersProcessors.register('dataVisualization', exports._dataVisualizationCardViewParametersProcessor);
//# sourceMappingURL=DataVisualizationParameters.js.map