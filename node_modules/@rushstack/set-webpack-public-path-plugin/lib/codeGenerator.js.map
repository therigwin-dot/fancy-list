{"version":3,"file":"codeGenerator.js","sourceRoot":"","sources":["../src/codeGenerator.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAyB3D,oDAgDC;AA/DD,MAAM,QAAQ,GAAW,YAAY,CAAC;AAEtC,SAAS,SAAS,CAAC,KAAe,EAAE,UAAmB;IACrD,OAAO,KAAK;SACT,GAAG,CAAC,CAAC,IAAY,EAAE,EAAE;QACpB,IAAI,IAAI,EAAE,CAAC;YACT,OAAO,GAAG,UAAU,IAAI,EAAE,GAAG,IAAI,EAAE,CAAC;QACtC,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC;SACV,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC/B,CAAC;AAED,SAAgB,oBAAoB,CAAC,EACnC,SAAS,EACT,aAAa,EACb,qBAAqB,EACrB,yBAAyB,EACzB,oBAAoB,EACpB,UAAU,EACO;IACjB,IAAI,KAAK,GAAa,EAAE,CAAC;IACzB,KAAK,GAAG,CAAC,wDAAwD,CAAC,CAAC;IAEnE,MAAM,0BAA0B,GAAW,IAAI,SAAS,IAAI,CAAC;IAC7D,MAAM,YAAY,GAAuB,aAAa,CAAC;IACvD,IAAI,aAAa,EAAE,CAAC;QAClB,KAAK,CAAC,IAAI,CACR,GAAG;YACD,uBAAuB,YAAY,uBAAuB,YAAY,MAAM,0BAA0B,GAAG;SAC1G,CACF,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,0BAA0B,GAAG,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,IAAI,CACR,GAAG;QACD,OAAO,QAAQ,GAAG;QAClB,EAAE;QACF,kCAAkC;QAClC,8CAA8C;QAC9C,gCAAgC;QAChC,gDAAgD;QAChD,sCAAsC;QACtC,SAAS,QAAQ,kDAAkD;QACnE,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;QAClD,OAAO;QACP,KAAK;QACL,GAAG;QACH,EAAE;KACH,CACF,CAAC;IAEF,IAAI,oBAAoB,EAAE,CAAC;QACzB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,QAAQ,KAAK,EAAE,KAAK,oBAAoB,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAC7F,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,GAAG,yBAAyB,MAAM,QAAQ,GAAG,CAAC,CAAC;IAE1D,OAAO,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AACtC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ISetWebpackPublicPathOptions } from './SetPublicPathPlugin';\n\nexport interface IInternalOptions extends ISetWebpackPublicPathOptions {\n  webpackPublicPathVariable: string;\n  regexName: string;\n  linePrefix?: string;\n}\n\nconst VAR_NAME: string = 'publicPath';\n\nfunction joinLines(lines: string[], linePrefix?: string): string {\n  return lines\n    .map((line: string) => {\n      if (line) {\n        return `${linePrefix || ''}${line}`;\n      } else {\n        return line;\n      }\n    })\n    .join('\\n')\n    .replace(/\\n\\n+/g, '\\n\\n');\n}\n\nexport function getSetPublicPathCode({\n  regexName,\n  regexVariable,\n  preferLastFoundScript,\n  webpackPublicPathVariable,\n  getPostProcessScript,\n  linePrefix\n}: IInternalOptions): string {\n  let lines: string[] = [];\n  lines = [`var scripts = document.getElementsByTagName('script');`];\n\n  const regexInitializationSnippet: string = `/${regexName}/i`;\n  const regexVarName: string | undefined = regexVariable;\n  if (regexVariable) {\n    lines.push(\n      ...[\n        `var regex = (typeof ${regexVarName} !== 'undefined') ? ${regexVarName} : ${regexInitializationSnippet};`\n      ]\n    );\n  } else {\n    lines.push(...[`var regex = ${regexInitializationSnippet};`]);\n  }\n\n  lines.push(\n    ...[\n      `var ${VAR_NAME};`,\n      '',\n      'if (scripts && scripts.length) {',\n      '  for (var i = 0; i < scripts.length; i++) {',\n      '    if (!scripts[i]) continue;',\n      `    var path = scripts[i].getAttribute('src');`,\n      '    if (path && path.match(regex)) {',\n      `      ${VAR_NAME} = path.substring(0, path.lastIndexOf('/') + 1);`,\n      ...(preferLastFoundScript ? [] : ['      break;']),\n      '    }',\n      '  }',\n      '}',\n      ''\n    ]\n  );\n\n  if (getPostProcessScript) {\n    lines.push(...['', `if (${VAR_NAME}) {`, `  ${getPostProcessScript(VAR_NAME)};`, '}', '']);\n  }\n\n  lines.push(`${webpackPublicPathVariable} = ${VAR_NAME};`);\n\n  return joinLines(lines, linePrefix);\n}\n"]}