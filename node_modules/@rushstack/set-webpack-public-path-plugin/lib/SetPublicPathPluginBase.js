"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetPublicPathPluginBase = void 0;
const webpack_plugin_utilities_1 = require("@rushstack/webpack-plugin-utilities");
const node_core_library_1 = require("@rushstack/node-core-library");
/**
 * @public
 */
class SetPublicPathPluginBase {
    constructor(pluginName) {
        this._pluginName = pluginName;
    }
    apply(compiler) {
        if (!webpack_plugin_utilities_1.VersionDetection.isWebpack5(compiler)) {
            const thisPackageJson = node_core_library_1.PackageJsonLookup.loadOwnPackageJson(__dirname);
            throw new Error(`The ${this.constructor.name} plugin requires Webpack 5. Use major version 4 of ` +
                `${thisPackageJson.name} for Webpack 4 support.`);
        }
        const thisWebpack = compiler.webpack;
        const initialOutputPublicPathSetting = compiler.options.output.publicPath;
        compiler.hooks.thisCompilation.tap(this._pluginName, (compilation) => {
            if (initialOutputPublicPathSetting) {
                compilation.warnings.push(new compiler.webpack.WebpackError(`The "output.publicPath" option is set in the Webpack configuration. The ${this.constructor.name} ` +
                    'plugin may produce unexpected results. It is recommended that the "output.publicPath" configuration option ' +
                    'be unset when using this plugin.'));
            }
            else {
                compilation.hooks.runtimeRequirementInTree.for(thisWebpack.RuntimeGlobals.publicPath).intercept({
                    name: this._pluginName,
                    register: (tap) => {
                        if (tap.name === 'RuntimePlugin') {
                            // Disable the default public path runtime plugin
                            return {
                                ...tap,
                                fn: () => {
                                    /* noop */
                                }
                            };
                        }
                        else {
                            return tap;
                        }
                    }
                });
            }
            this._applyCompilation(thisWebpack, compilation);
        });
    }
}
exports.SetPublicPathPluginBase = SetPublicPathPluginBase;
//# sourceMappingURL=SetPublicPathPluginBase.js.map