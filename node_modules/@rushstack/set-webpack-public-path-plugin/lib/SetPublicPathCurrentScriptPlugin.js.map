{"version":3,"file":"SetPublicPathCurrentScriptPlugin.js","sourceRoot":"","sources":["../src/SetPublicPathCurrentScriptPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type webpack from 'webpack';\nimport { SetPublicPathPluginBase } from './SetPublicPathPluginBase';\n\nconst PLUGIN_NAME: string = 'set-webpack-public-path-current-script-plugin';\n\nconst CURRENT_SCRIPT_VARIABLE_NAME: string = '__RUSHSTACK_CURRENT_SCRIPT__';\nconst PUBLIC_PATH_VARIABLE_NAME: string = '_publicPath';\n\ntype JavascriptModulesPluginHooks = ReturnType<\n  typeof webpack.javascript.JavascriptModulesPlugin.getCompilationHooks\n>;\ntype CodeGenerationResults = Parameters<\n  Parameters<JavascriptModulesPluginHooks['render']['tap']>[1]\n>[1]['codeGenerationResults'];\n\n/**\n * This simple plugin wraps the webpack bundle in an IIFE that sets a the `document.currentScript` value to a variable\n * that is then used to populate the `__webpack_public_path__` variable.\n *\n * @public\n */\nexport class SetPublicPathCurrentScriptPlugin extends SetPublicPathPluginBase {\n  public constructor() {\n    super(PLUGIN_NAME);\n  }\n\n  protected _applyCompilation(thisWebpack: typeof webpack, compilation: webpack.Compilation): void {\n    const outputLibraryType: string | undefined = compilation.options.output.library?.type;\n\n    class SetPublicPathRuntimeModule extends thisWebpack.RuntimeModule {\n      public constructor() {\n        super('publicPath', thisWebpack.RuntimeModule.STAGE_BASIC);\n      }\n\n      public generate(): string {\n        return [\n          `var ${PUBLIC_PATH_VARIABLE_NAME} = ${CURRENT_SCRIPT_VARIABLE_NAME} ? ${CURRENT_SCRIPT_VARIABLE_NAME}.src : '';`,\n          `${thisWebpack.RuntimeGlobals.publicPath} = ${PUBLIC_PATH_VARIABLE_NAME}.slice(0, ${PUBLIC_PATH_VARIABLE_NAME}.lastIndexOf('/') + 1);`\n        ].join('\\n');\n      }\n    }\n\n    const runtimeModule: SetPublicPathRuntimeModule = new SetPublicPathRuntimeModule();\n\n    function appliesToChunk(chunk: webpack.Chunk, codeGenerationResults: CodeGenerationResults): boolean {\n      return chunk.hasRuntime() && codeGenerationResults.has(runtimeModule, chunk.runtime);\n    }\n\n    compilation.hooks.runtimeRequirementInTree\n      .for(thisWebpack.RuntimeGlobals.publicPath)\n      .tap(PLUGIN_NAME, (chunk: webpack.Chunk, set: Set<string>) => {\n        compilation.addRuntimeModule(chunk, runtimeModule);\n      });\n\n    const javascriptModulesPluginHooks: JavascriptModulesPluginHooks =\n      thisWebpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n\n    javascriptModulesPluginHooks.render.tap(\n      { name: PLUGIN_NAME, stage: Number.MAX_SAFE_INTEGER },\n      (source, { codeGenerationResults, chunk }) => {\n        if (appliesToChunk(chunk, codeGenerationResults)) {\n          return new thisWebpack.sources.ConcatSource(\n            `(()=>{ var ${CURRENT_SCRIPT_VARIABLE_NAME} = document.currentScript; `,\n            source,\n            '})();'\n          );\n        } else {\n          return source;\n        }\n      }\n    );\n\n    javascriptModulesPluginHooks.chunkHash.tap(PLUGIN_NAME, (chunk, hash, { codeGenerationResults }) => {\n      hash.update(PLUGIN_NAME);\n      if (appliesToChunk(chunk, codeGenerationResults)) {\n        hash.update('set-public-path');\n      }\n    });\n\n    compilation.hooks.afterSeal.tap(PLUGIN_NAME, () => {\n      let hasProblematicLibraryType: boolean = false;\n      switch (outputLibraryType) {\n        case 'var':\n        case 'module':\n          hasProblematicLibraryType = true;\n          break;\n      }\n\n      if (hasProblematicLibraryType) {\n        const codeGenerationResults: CodeGenerationResults = compilation.codeGenerationResults;\n        let appliesToAnyChunk: boolean = false;\n        for (const chunk of compilation.chunks) {\n          if (appliesToChunk(chunk, codeGenerationResults)) {\n            appliesToAnyChunk = true;\n            break;\n          }\n        }\n\n        if (appliesToAnyChunk) {\n          compilation.errors.push(\n            new thisWebpack.WebpackError(\n              `The \"${outputLibraryType}\" output.library.type is not supported by the ${SetPublicPathCurrentScriptPlugin.name}` +\n                ' plugin. Including this plugin with produce unexpected or invalid results.'\n            )\n          );\n        }\n      }\n    });\n  }\n}\n"]}