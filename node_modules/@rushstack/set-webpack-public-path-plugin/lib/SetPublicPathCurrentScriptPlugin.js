"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetPublicPathCurrentScriptPlugin = void 0;
const SetPublicPathPluginBase_1 = require("./SetPublicPathPluginBase");
const PLUGIN_NAME = 'set-webpack-public-path-current-script-plugin';
const CURRENT_SCRIPT_VARIABLE_NAME = '__RUSHSTACK_CURRENT_SCRIPT__';
const PUBLIC_PATH_VARIABLE_NAME = '_publicPath';
/**
 * This simple plugin wraps the webpack bundle in an IIFE that sets a the `document.currentScript` value to a variable
 * that is then used to populate the `__webpack_public_path__` variable.
 *
 * @public
 */
class SetPublicPathCurrentScriptPlugin extends SetPublicPathPluginBase_1.SetPublicPathPluginBase {
    constructor() {
        super(PLUGIN_NAME);
    }
    _applyCompilation(thisWebpack, compilation) {
        var _a;
        const outputLibraryType = (_a = compilation.options.output.library) === null || _a === void 0 ? void 0 : _a.type;
        class SetPublicPathRuntimeModule extends thisWebpack.RuntimeModule {
            constructor() {
                super('publicPath', thisWebpack.RuntimeModule.STAGE_BASIC);
            }
            generate() {
                return [
                    `var ${PUBLIC_PATH_VARIABLE_NAME} = ${CURRENT_SCRIPT_VARIABLE_NAME} ? ${CURRENT_SCRIPT_VARIABLE_NAME}.src : '';`,
                    `${thisWebpack.RuntimeGlobals.publicPath} = ${PUBLIC_PATH_VARIABLE_NAME}.slice(0, ${PUBLIC_PATH_VARIABLE_NAME}.lastIndexOf('/') + 1);`
                ].join('\n');
            }
        }
        const runtimeModule = new SetPublicPathRuntimeModule();
        function appliesToChunk(chunk, codeGenerationResults) {
            return chunk.hasRuntime() && codeGenerationResults.has(runtimeModule, chunk.runtime);
        }
        compilation.hooks.runtimeRequirementInTree
            .for(thisWebpack.RuntimeGlobals.publicPath)
            .tap(PLUGIN_NAME, (chunk, set) => {
            compilation.addRuntimeModule(chunk, runtimeModule);
        });
        const javascriptModulesPluginHooks = thisWebpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);
        javascriptModulesPluginHooks.render.tap({ name: PLUGIN_NAME, stage: Number.MAX_SAFE_INTEGER }, (source, { codeGenerationResults, chunk }) => {
            if (appliesToChunk(chunk, codeGenerationResults)) {
                return new thisWebpack.sources.ConcatSource(`(()=>{ var ${CURRENT_SCRIPT_VARIABLE_NAME} = document.currentScript; `, source, '})();');
            }
            else {
                return source;
            }
        });
        javascriptModulesPluginHooks.chunkHash.tap(PLUGIN_NAME, (chunk, hash, { codeGenerationResults }) => {
            hash.update(PLUGIN_NAME);
            if (appliesToChunk(chunk, codeGenerationResults)) {
                hash.update('set-public-path');
            }
        });
        compilation.hooks.afterSeal.tap(PLUGIN_NAME, () => {
            let hasProblematicLibraryType = false;
            switch (outputLibraryType) {
                case 'var':
                case 'module':
                    hasProblematicLibraryType = true;
                    break;
            }
            if (hasProblematicLibraryType) {
                const codeGenerationResults = compilation.codeGenerationResults;
                let appliesToAnyChunk = false;
                for (const chunk of compilation.chunks) {
                    if (appliesToChunk(chunk, codeGenerationResults)) {
                        appliesToAnyChunk = true;
                        break;
                    }
                }
                if (appliesToAnyChunk) {
                    compilation.errors.push(new thisWebpack.WebpackError(`The "${outputLibraryType}" output.library.type is not supported by the ${SetPublicPathCurrentScriptPlugin.name}` +
                        ' plugin. Including this plugin with produce unexpected or invalid results.'));
                }
            }
        });
    }
}
exports.SetPublicPathCurrentScriptPlugin = SetPublicPathCurrentScriptPlugin;
//# sourceMappingURL=SetPublicPathCurrentScriptPlugin.js.map