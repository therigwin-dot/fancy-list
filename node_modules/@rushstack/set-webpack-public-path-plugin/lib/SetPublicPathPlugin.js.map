{"version":3,"file":"SetPublicPathPlugin.js","sourceRoot":"","sources":["../src/SetPublicPathPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { Text } from '@rushstack/node-core-library';\n\nimport type webpack from 'webpack';\n\nimport { type IInternalOptions, getSetPublicPathCode } from './codeGenerator';\nimport { SetPublicPathPluginBase } from './SetPublicPathPluginBase';\n\n/**\n * The base options for setting the webpack public path at runtime.\n *\n * @public\n */\nexport interface ISetWebpackPublicPathOptions {\n  /**\n   * Check for a variable with this name on the page and use its value as a regular expression against script paths to\n   *  the bundle's script. If a value foo is passed into regexVariable, the produced bundle will look for a variable\n   *  called foo during initialization, and if a foo variable is found, use its value as a regular expression to detect\n   *  the bundle's script.\n   *\n   * See the README for more information.\n   */\n  regexVariable?: string;\n\n  /**\n   * A function that returns a snippet of code that manipulates the variable with the name that's specified in the\n   *  parameter. If this parameter isn't provided, no post-processing code is included. The variable must be modified\n   *  in-place - the processed value should not be returned.\n   *\n   * See the README for more information.\n   */\n  getPostProcessScript?: (varName: string) => string;\n\n  /**\n   * If true, find the last script matching the regexVariable (if it is set). If false, find the first matching script.\n   * This can be useful if there are multiple scripts loaded in the DOM that match the regexVariable.\n   */\n  preferLastFoundScript?: boolean;\n}\n\n/**\n * @public\n */\nexport interface IScriptNameAssetNameOptions {\n  /**\n   * If set to true, use the webpack generated asset's name. This option is not compatible with\n   * andy other scriptName options.\n   */\n  useAssetName: true;\n}\n\n/**\n * @public\n */\nexport interface IScriptNameRegexOptions {\n  /**\n   * A regular expression expressed as a string to be applied to all script paths on the page.\n   */\n  name: string;\n\n  /**\n   * If true, the name property is tokenized.\n   *\n   * See the README for more information.\n   */\n  isTokenized?: boolean;\n}\n\n/**\n * @public\n */\nexport type IScriptNameOptions = IScriptNameAssetNameOptions | IScriptNameRegexOptions;\n\ntype IScriptNameInternalOptions =\n  | (IScriptNameAssetNameOptions & { [key in keyof IScriptNameRegexOptions]?: never })\n  | (IScriptNameRegexOptions & { [key in keyof IScriptNameAssetNameOptions]?: never });\n\n/**\n * Options for the set-webpack-public-path plugin.\n *\n * @public\n */\nexport interface ISetWebpackPublicPathPluginOptions extends ISetWebpackPublicPathOptions {\n  /**\n   * An object that describes how the public path should be discovered.\n   */\n  scriptName: IScriptNameOptions;\n}\n\nconst SHOULD_REPLACE_ASSET_NAME_TOKEN: unique symbol = Symbol(\n  'set-public-path-plugin-should-replace-asset-name'\n);\n\ninterface IExtendedChunk extends webpack.Chunk {\n  [SHOULD_REPLACE_ASSET_NAME_TOKEN]?: boolean;\n}\n\nconst PLUGIN_NAME: string = 'set-webpack-public-path';\n\nconst ASSET_NAME_TOKEN: string = '-ASSET-NAME-c0ef4f86-b570-44d3-b210-4428c5b7825c';\n\n/**\n * This simple plugin sets the __webpack_public_path__ variable to a value specified in the arguments.\n *\n * @public\n */\nexport class SetPublicPathPlugin extends SetPublicPathPluginBase {\n  public readonly options: ISetWebpackPublicPathPluginOptions;\n\n  public constructor(options: ISetWebpackPublicPathPluginOptions) {\n    super(PLUGIN_NAME);\n    this.options = options;\n\n    const scriptNameOptions: IScriptNameInternalOptions = options.scriptName;\n    if (scriptNameOptions.useAssetName && scriptNameOptions.name) {\n      throw new Error('scriptName.userAssetName and scriptName.name must not be used together');\n    } else if (scriptNameOptions.isTokenized && !scriptNameOptions.name) {\n      throw new Error('scriptName.isTokenized is only valid if scriptName.name is set');\n    }\n  }\n\n  protected _applyCompilation(thisWebpack: typeof webpack, compilation: webpack.Compilation): void {\n    class SetPublicPathRuntimeModule extends thisWebpack.RuntimeModule {\n      private readonly _pluginOptions: ISetWebpackPublicPathPluginOptions;\n\n      public constructor(pluginOptions: ISetWebpackPublicPathPluginOptions) {\n        super('publicPath', thisWebpack.RuntimeModule.STAGE_BASIC);\n        this._pluginOptions = pluginOptions;\n      }\n\n      public generate(): string {\n        const {\n          name: regexpName,\n          isTokenized: regexpIsTokenized,\n          useAssetName\n        } = this._pluginOptions.scriptName as IScriptNameInternalOptions;\n\n        const { chunk } = this;\n        if (!chunk) {\n          throw new Error(`Chunk is not defined`);\n        }\n\n        let regexName: string;\n        if (regexpName) {\n          regexName = regexpName;\n          if (regexpIsTokenized) {\n            regexName = regexName\n              .replace(/\\[name\\]/g, Text.escapeRegExp(`${chunk.name}`))\n              .replace(/\\[hash\\]/g, chunk.renderedHash || '');\n          }\n        } else if (useAssetName) {\n          (chunk as IExtendedChunk)[SHOULD_REPLACE_ASSET_NAME_TOKEN] = true;\n\n          regexName = ASSET_NAME_TOKEN;\n        } else {\n          throw new Error('scriptName.name or scriptName.useAssetName must be set');\n        }\n\n        const moduleOptions: IInternalOptions = {\n          webpackPublicPathVariable: thisWebpack.RuntimeGlobals.publicPath,\n          regexName,\n          ...this._pluginOptions\n        };\n\n        return getSetPublicPathCode(moduleOptions);\n      }\n    }\n\n    compilation.hooks.runtimeRequirementInTree\n      .for(thisWebpack.RuntimeGlobals.publicPath)\n      .tap(PLUGIN_NAME, (chunk: webpack.Chunk, set: Set<string>) => {\n        compilation.addRuntimeModule(chunk, new SetPublicPathRuntimeModule(this.options));\n      });\n\n    compilation.hooks.processAssets.tap(PLUGIN_NAME, (assets) => {\n      for (const chunkGroup of compilation.chunkGroups) {\n        for (const chunk of chunkGroup.chunks) {\n          if ((chunk as IExtendedChunk)[SHOULD_REPLACE_ASSET_NAME_TOKEN]) {\n            for (const assetFilename of chunk.files) {\n              let escapedAssetFilename: string;\n              if (assetFilename.match(/\\.map$/)) {\n                // Trim the \".map\" extension\n                escapedAssetFilename = assetFilename.slice(0, -4 /* '.map'.length */);\n                escapedAssetFilename = Text.escapeRegExp(escapedAssetFilename);\n                // source in sourcemaps is JSON-encoded\n                escapedAssetFilename = JSON.stringify(escapedAssetFilename);\n                // Trim the quotes from the JSON encoding\n                escapedAssetFilename = escapedAssetFilename.slice(1, -1);\n              } else {\n                escapedAssetFilename = Text.escapeRegExp(assetFilename);\n              }\n\n              const asset: webpack.sources.Source = assets[assetFilename];\n\n              const newAsset: webpack.sources.ReplaceSource = new thisWebpack.sources.ReplaceSource(asset);\n              const sourceString: string = asset.source().toString();\n              for (\n                let index: number = sourceString.lastIndexOf(ASSET_NAME_TOKEN);\n                index >= 0;\n                index = sourceString.lastIndexOf(ASSET_NAME_TOKEN, index - 1)\n              ) {\n                newAsset.replace(index, index + ASSET_NAME_TOKEN.length - 1, escapedAssetFilename);\n              }\n\n              assets[assetFilename] = newAsset;\n            }\n          }\n        }\n      }\n    });\n  }\n}\n"]}