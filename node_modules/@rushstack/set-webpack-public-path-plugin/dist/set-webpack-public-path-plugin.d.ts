import type webpack from 'webpack';

/**
 * @public
 */
export declare interface IScriptNameAssetNameOptions {
    /**
     * If set to true, use the webpack generated asset's name. This option is not compatible with
     * andy other scriptName options.
     */
    useAssetName: true;
}

/**
 * @public
 */
export declare type IScriptNameOptions = IScriptNameAssetNameOptions | IScriptNameRegexOptions;

/**
 * @public
 */
export declare interface IScriptNameRegexOptions {
    /**
     * A regular expression expressed as a string to be applied to all script paths on the page.
     */
    name: string;
    /**
     * If true, the name property is tokenized.
     *
     * See the README for more information.
     */
    isTokenized?: boolean;
}

/**
 * The base options for setting the webpack public path at runtime.
 *
 * @public
 */
export declare interface ISetWebpackPublicPathOptions {
    /**
     * Check for a variable with this name on the page and use its value as a regular expression against script paths to
     *  the bundle's script. If a value foo is passed into regexVariable, the produced bundle will look for a variable
     *  called foo during initialization, and if a foo variable is found, use its value as a regular expression to detect
     *  the bundle's script.
     *
     * See the README for more information.
     */
    regexVariable?: string;
    /**
     * A function that returns a snippet of code that manipulates the variable with the name that's specified in the
     *  parameter. If this parameter isn't provided, no post-processing code is included. The variable must be modified
     *  in-place - the processed value should not be returned.
     *
     * See the README for more information.
     */
    getPostProcessScript?: (varName: string) => string;
    /**
     * If true, find the last script matching the regexVariable (if it is set). If false, find the first matching script.
     * This can be useful if there are multiple scripts loaded in the DOM that match the regexVariable.
     */
    preferLastFoundScript?: boolean;
}

/**
 * Options for the set-webpack-public-path plugin.
 *
 * @public
 */
export declare interface ISetWebpackPublicPathPluginOptions extends ISetWebpackPublicPathOptions {
    /**
     * An object that describes how the public path should be discovered.
     */
    scriptName: IScriptNameOptions;
}

/**
 * This simple plugin wraps the webpack bundle in an IIFE that sets a the `document.currentScript` value to a variable
 * that is then used to populate the `__webpack_public_path__` variable.
 *
 * @public
 */
export declare class SetPublicPathCurrentScriptPlugin extends SetPublicPathPluginBase {
    constructor();
    protected _applyCompilation(thisWebpack: typeof webpack, compilation: webpack.Compilation): void;
}

/**
 * This simple plugin sets the __webpack_public_path__ variable to a value specified in the arguments.
 *
 * @public
 */
export declare class SetPublicPathPlugin extends SetPublicPathPluginBase {
    readonly options: ISetWebpackPublicPathPluginOptions;
    constructor(options: ISetWebpackPublicPathPluginOptions);
    protected _applyCompilation(thisWebpack: typeof webpack, compilation: webpack.Compilation): void;
}

/**
 * @public
 */
export declare abstract class SetPublicPathPluginBase implements webpack.WebpackPluginInstance {
    private readonly _pluginName;
    constructor(pluginName: string);
    apply(compiler: webpack.Compiler): void;
    protected abstract _applyCompilation(thisWebpack: typeof webpack, compilation: webpack.Compilation): void;
}

export { }
