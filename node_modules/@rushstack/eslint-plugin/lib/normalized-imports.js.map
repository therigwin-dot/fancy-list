{"version":3,"file":"normalized-imports.js","sourceRoot":"","sources":["../src/normalized-imports.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport type { TSESTree, TSESLint } from '@typescript-eslint/utils';\nimport {\n  getFilePathFromContext,\n  parseImportSpecifierFromExpression,\n  serializeImportSpecifier,\n  type IParsedImportSpecifier\n} from './LintUtilities';\n\nexport const MESSAGE_ID: 'error-normalized-imports' = 'error-normalized-imports';\ntype RuleModule = TSESLint.RuleModule<typeof MESSAGE_ID, []>;\ntype RuleContext = TSESLint.RuleContext<typeof MESSAGE_ID, []>;\n\nexport const normalizedImportsRule: RuleModule = {\n  defaultOptions: [],\n  meta: {\n    type: 'suggestion',\n    messages: {\n      [MESSAGE_ID]: 'The specified import target path was not provided in a normalized form.'\n    },\n    schema: [],\n    docs: {\n      description:\n        'Prevents and normalizes references to relative imports using paths that make unnecessary ' +\n        'traversals (ex. \"../blah/module\" in directory \"blah\" -> \"./module\")',\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'\n    },\n    fixable: 'code'\n  },\n  create: (context: RuleContext) => {\n    const checkImportExpression: (importExpression: TSESTree.Expression | null) => void = (\n      importExpression: TSESTree.Expression | null\n    ) => {\n      if (!importExpression) {\n        // Can't validate, return\n        return;\n      }\n\n      // Determine the target file path and find the most direct relative path from the source file\n      const importSpecifier: IParsedImportSpecifier | undefined =\n        parseImportSpecifierFromExpression(importExpression);\n      if (!importSpecifier || !importSpecifier.importTarget.startsWith('.')) {\n        // Can't validate, return\n        return;\n      }\n      const { importTarget } = importSpecifier;\n      const parentDirectory: string = path.dirname(getFilePathFromContext(context));\n      const absoluteImportPath: string = path.resolve(parentDirectory, importTarget);\n      const relativeImportPath: string = path.relative(parentDirectory, absoluteImportPath);\n\n      // Reconstruct the import target using posix separators and manually re-add the leading './' if needed\n      let normalizedImportPath: string =\n        path.sep !== '/' ? relativeImportPath.replace(/\\\\/g, '/') : relativeImportPath;\n      if (!normalizedImportPath.startsWith('.')) {\n        normalizedImportPath = `.${normalizedImportPath ? '/' : ''}${normalizedImportPath}`;\n      }\n\n      // If they don't match, suggest the normalized path as a fix\n      if (importTarget !== normalizedImportPath) {\n        context.report({\n          node: importExpression,\n          messageId: MESSAGE_ID,\n          fix: (fixer: TSESLint.RuleFixer) => {\n            // Re-include stripped loader and query strings, if provided\n            const normalizedSpecifier: string = serializeImportSpecifier({\n              ...importSpecifier,\n              importTarget: normalizedImportPath\n            });\n            return fixer.replaceText(importExpression, `'${normalizedSpecifier}'`);\n          }\n        });\n      }\n    };\n\n    return {\n      ImportDeclaration: (node: TSESTree.ImportDeclaration) => checkImportExpression(node.source),\n      ImportExpression: (node: TSESTree.ImportExpression) => checkImportExpression(node.source),\n      ExportAllDeclaration: (node: TSESTree.ExportAllDeclaration) => checkImportExpression(node.source),\n      ExportNamedDeclaration: (node: TSESTree.ExportNamedDeclaration) => checkImportExpression(node.source)\n    };\n  }\n};\n"]}