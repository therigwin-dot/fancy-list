{"version":3,"file":"no-external-local-imports.js","sourceRoot":"","sources":["../src/no-external-local-imports.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAE7B,mDAAmG;AAEtF,QAAA,UAAU,GAAmC,8BAA8B,CAAC;AAIzF,MAAM,kBAAkB,GAAW,YAAY,CAAC;AAEnC,QAAA,0BAA0B,GAAe;IACpD,cAAc,EAAE,EAAE;IAClB,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE;YACR,CAAC,kBAAU,CAAC,EACV,2EAA2E;gBAC3E,kGAAkG;gBAClG,yCAAyC;SAC5C;QACD,MAAM,EAAE,EAAE;QACV,IAAI,EAAE;YACJ,WAAW,EACT,6FAA6F;gBAC7F,uEAAuE;YACzE,GAAG,EAAE,wDAAwD;SAC9D;KACF;IACD,MAAM,EAAE,CAAC,OAAoB,EAAE,EAAE;QAC/B,MAAM,aAAa,GAAuB,IAAA,2CAA2B,EAAC,OAAO,CAAC,CAAC;QAC/E,MAAM,qBAAqB,GAA2D,CACpF,gBAA4C,EAC5C,EAAE;YACF,IAAI,CAAC,gBAAgB,IAAI,CAAC,aAAa,EAAE,CAAC;gBACxC,yBAAyB;gBACzB,OAAO;YACT,CAAC;YAED,6GAA6G;YAC7G,sDAAsD;YACtD,MAAM,kBAAkB,GAAuB,IAAA,mDAAmC,EAChF,OAAO,EACP,gBAAgB,CACjB,CAAC;YACF,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBACxB,yBAAyB;gBACzB,OAAO;YACT,CAAC;YAED,MAAM,kBAAkB,GAAW,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;YACpF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBACjD,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,kBAAU,EAAE,CAAC,CAAC;YACpE,CAAC;QACH,CAAC,CAAC;QAEF,OAAO;YACL,iBAAiB,EAAE,CAAC,IAAgC,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3F,gBAAgB,EAAE,CAAC,IAA+B,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YACzF,oBAAoB,EAAE,CAAC,IAAmC,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YACjG,sBAAsB,EAAE,CAAC,IAAqC,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;SACtG,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport type { TSESTree, TSESLint } from '@typescript-eslint/utils';\nimport { getRootDirectoryFromContext, getImportAbsolutePathFromExpression } from './LintUtilities';\n\nexport const MESSAGE_ID: 'error-external-local-imports' = 'error-external-local-imports';\ntype RuleModule = TSESLint.RuleModule<typeof MESSAGE_ID, []>;\ntype RuleContext = TSESLint.RuleContext<typeof MESSAGE_ID, []>;\n\nconst _relativePathRegex: RegExp = /^[.\\/\\\\]+$/;\n\nexport const noExternalLocalImportsRule: RuleModule = {\n  defaultOptions: [],\n  meta: {\n    type: 'problem',\n    messages: {\n      [MESSAGE_ID]:\n        'The specified import target is not under the root directory. Ensure that ' +\n        'all local import targets are either under the \"rootDir\" specified in your tsconfig.json (if one ' +\n        'exists) or under the package directory.'\n    },\n    schema: [],\n    docs: {\n      description:\n        'Prevents referencing relative imports that are either not under the \"rootDir\" specified in ' +\n        'the tsconfig.json (if one exists) or not under the package directory.',\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'\n    }\n  },\n  create: (context: RuleContext) => {\n    const rootDirectory: string | undefined = getRootDirectoryFromContext(context);\n    const checkImportExpression: (importExpression: TSESTree.Expression | null) => void = (\n      importExpression: TSESTree.Expression | null\n    ) => {\n      if (!importExpression || !rootDirectory) {\n        // Can't validate, return\n        return;\n      }\n\n      // Get the relative path between the target and the root. If the target is under the root, then the resulting\n      // relative path should be a series of \"../\" segments.\n      const importAbsolutePath: string | undefined = getImportAbsolutePathFromExpression(\n        context,\n        importExpression\n      );\n      if (!importAbsolutePath) {\n        // Can't validate, return\n        return;\n      }\n\n      const relativePathToRoot: string = path.relative(importAbsolutePath, rootDirectory);\n      if (!_relativePathRegex.test(relativePathToRoot)) {\n        context.report({ node: importExpression, messageId: MESSAGE_ID });\n      }\n    };\n\n    return {\n      ImportDeclaration: (node: TSESTree.ImportDeclaration) => checkImportExpression(node.source),\n      ImportExpression: (node: TSESTree.ImportExpression) => checkImportExpression(node.source),\n      ExportAllDeclaration: (node: TSESTree.ExportAllDeclaration) => checkImportExpression(node.source),\n      ExportNamedDeclaration: (node: TSESTree.ExportNamedDeclaration) => checkImportExpression(node.source)\n    };\n  }\n};\n"]}