{"version":3,"file":"no-transitive-dependency-imports.js","sourceRoot":"","sources":["../src/no-transitive-dependency-imports.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,mDAAkG;AAErF,QAAA,UAAU,GAA0C,qCAAqC,CAAC;AAIvG,MAAM,yBAAyB,GAAqB,gBAAgB,CAAC;AAExD,QAAA,iCAAiC,GAAe;IAC3D,cAAc,EAAE,EAAE;IAClB,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE;YACR,CAAC,kBAAU,CAAC,EAAE,uDAAuD;SACtE;QACD,MAAM,EAAE,EAAE;QACV,IAAI,EAAE;YACJ,WAAW,EACT,0FAA0F;gBAC1F,qCAAqC;YACvC,GAAG,EAAE,wDAAwD;SAC9D;KACF;IACD,MAAM,EAAE,CAAC,OAAoB,EAAE,EAAE;QAC/B,MAAM,qBAAqB,GAA2D,CACpF,gBAA4C,EAC5C,EAAE;YACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACtB,yBAAyB;gBACzB,OAAO;YACT,CAAC;YAED,MAAM,eAAe,GACnB,IAAA,kDAAkC,EAAC,gBAAgB,CAAC,CAAC;YACvD,IAAI,eAAe,KAAK,SAAS,EAAE,CAAC;gBAClC,yBAAyB;gBACzB,OAAO;YACT,CAAC;YAED,4FAA4F;YAC5F,kFAAkF;YAClF,MAAM,EAAE,YAAY,EAAE,GAAG,eAAe,CAAC;YACzC,MAAM,UAAU,GAAY,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzD,IAAI,gBAAgB,GAAW,YAAY,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;YAC/E,IAAI,gBAAgB,IAAI,CAAC,IAAI,UAAU,EAAE,CAAC;gBACxC,wFAAwF;gBACxF,gBAAgB,GAAG,YAAY,CAAC,OAAO,CACrC,yBAAyB,EACzB,gBAAgB,GAAG,yBAAyB,CAAC,MAAM,GAAG,CAAC,CACxD,CAAC;YACJ,CAAC;YACD,IAAI,gBAAgB,IAAI,CAAC,EAAE,CAAC;gBAC1B,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,kBAAU,EAAE,CAAC,CAAC;YACpE,CAAC;QACH,CAAC,CAAC;QAEF,OAAO;YACL,iBAAiB,EAAE,CAAC,IAAgC,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3F,gBAAgB,EAAE,CAAC,IAA+B,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YACzF,oBAAoB,EAAE,CAAC,IAAmC,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YACjG,sBAAsB,EAAE,CAAC,IAAqC,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;SACtG,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { TSESTree, TSESLint } from '@typescript-eslint/utils';\nimport { parseImportSpecifierFromExpression, type IParsedImportSpecifier } from './LintUtilities';\n\nexport const MESSAGE_ID: 'error-transitive-dependency-imports' = 'error-transitive-dependency-imports';\ntype RuleModule = TSESLint.RuleModule<typeof MESSAGE_ID, []>;\ntype RuleContext = TSESLint.RuleContext<typeof MESSAGE_ID, []>;\n\nconst NODE_MODULES_PATH_SEGMENT: '/node_modules/' = '/node_modules/';\n\nexport const noTransitiveDependencyImportsRule: RuleModule = {\n  defaultOptions: [],\n  meta: {\n    type: 'problem',\n    messages: {\n      [MESSAGE_ID]: 'The specified import targets a transitive dependency.'\n    },\n    schema: [],\n    docs: {\n      description:\n        'Prevents referencing imports that are transitive dependencies, ie. imports that are not ' +\n        'direct dependencies of the package.',\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'\n    }\n  },\n  create: (context: RuleContext) => {\n    const checkImportExpression: (importExpression: TSESTree.Expression | null) => void = (\n      importExpression: TSESTree.Expression | null\n    ) => {\n      if (!importExpression) {\n        // Can't validate, return\n        return;\n      }\n\n      const importSpecifier: IParsedImportSpecifier | undefined =\n        parseImportSpecifierFromExpression(importExpression);\n      if (importSpecifier === undefined) {\n        // Can't validate, return\n        return;\n      }\n\n      // Check to see if node_modules is mentioned in the normalized import path more than once if\n      // the path is relative, or if it is mentioned at all if the path is to a package.\n      const { importTarget } = importSpecifier;\n      const isRelative: boolean = importTarget.startsWith('.');\n      let nodeModulesIndex: number = importTarget.indexOf(NODE_MODULES_PATH_SEGMENT);\n      if (nodeModulesIndex >= 0 && isRelative) {\n        // We allow relative paths to node_modules one layer deep to deal with bypassing exports\n        nodeModulesIndex = importTarget.indexOf(\n          NODE_MODULES_PATH_SEGMENT,\n          nodeModulesIndex + NODE_MODULES_PATH_SEGMENT.length - 1\n        );\n      }\n      if (nodeModulesIndex >= 0) {\n        context.report({ node: importExpression, messageId: MESSAGE_ID });\n      }\n    };\n\n    return {\n      ImportDeclaration: (node: TSESTree.ImportDeclaration) => checkImportExpression(node.source),\n      ImportExpression: (node: TSESTree.ImportExpression) => checkImportExpression(node.source),\n      ExportAllDeclaration: (node: TSESTree.ExportAllDeclaration) => checkImportExpression(node.source),\n      ExportNamedDeclaration: (node: TSESTree.ExportNamedDeclaration) => checkImportExpression(node.source)\n    };\n  }\n};\n"]}