{"version":3,"file":"no-backslash-imports.js","sourceRoot":"","sources":["../src/no-backslash-imports.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,mDAIyB;AAEZ,QAAA,UAAU,GAA2B,sBAAsB,CAAC;AAI5D,QAAA,sBAAsB,GAAe;IAChD,cAAc,EAAE,EAAE;IAClB,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE;YACR,CAAC,kBAAU,CAAC,EAAE,wDAAwD;SACvE;QACD,MAAM,EAAE,EAAE;QACV,IAAI,EAAE;YACJ,WAAW,EAAE,mDAAmD;YAChE,GAAG,EAAE,wDAAwD;SAC9D;QACD,OAAO,EAAE,MAAM;KAChB;IACD,MAAM,EAAE,CAAC,OAAoB,EAAE,EAAE;QAC/B,MAAM,qBAAqB,GAA2D,CACpF,gBAA4C,EAC5C,EAAE;YACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACtB,yBAAyB;gBACzB,OAAO;YACT,CAAC;YAED,6FAA6F;YAC7F,MAAM,eAAe,GACnB,IAAA,kDAAkC,EAAC,gBAAgB,CAAC,CAAC;YACvD,IAAI,eAAe,KAAK,SAAS,EAAE,CAAC;gBAClC,yBAAyB;gBACzB,OAAO;YACT,CAAC;YAED,wGAAwG;YACxG,WAAW;YACX,MAAM,EAAE,YAAY,EAAE,GAAG,eAAe,CAAC;YACzC,IAAI,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;gBAChC,OAAO,CAAC,MAAM,CAAC;oBACb,IAAI,EAAE,gBAAgB;oBACtB,SAAS,EAAE,kBAAU;oBACrB,GAAG,EAAE,CAAC,KAAyB,EAAE,EAAE;wBACjC,MAAM,mBAAmB,GAA2B;4BAClD,GAAG,eAAe;4BAClB,YAAY,EAAE,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;yBAC/C,CAAC;wBACF,OAAO,KAAK,CAAC,WAAW,CAAC,gBAAgB,EAAE,IAAI,IAAA,wCAAwB,EAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;oBACnG,CAAC;iBACF,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;QAEF,OAAO;YACL,iBAAiB,EAAE,CAAC,IAAgC,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3F,gBAAgB,EAAE,CAAC,IAA+B,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YACzF,oBAAoB,EAAE,CAAC,IAAmC,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;YACjG,sBAAsB,EAAE,CAAC,IAAqC,EAAE,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;SACtG,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { TSESTree, TSESLint } from '@typescript-eslint/utils';\nimport {\n  parseImportSpecifierFromExpression,\n  serializeImportSpecifier,\n  type IParsedImportSpecifier\n} from './LintUtilities';\n\nexport const MESSAGE_ID: 'no-backslash-imports' = 'no-backslash-imports';\ntype RuleModule = TSESLint.RuleModule<typeof MESSAGE_ID, []>;\ntype RuleContext = TSESLint.RuleContext<typeof MESSAGE_ID, []>;\n\nexport const noBackslashImportsRule: RuleModule = {\n  defaultOptions: [],\n  meta: {\n    type: 'problem',\n    messages: {\n      [MESSAGE_ID]: 'The specified import target path contains backslashes.'\n    },\n    schema: [],\n    docs: {\n      description: 'Prevents imports using paths that use backslashes',\n      url: 'https://www.npmjs.com/package/@rushstack/eslint-plugin'\n    },\n    fixable: 'code'\n  },\n  create: (context: RuleContext) => {\n    const checkImportExpression: (importExpression: TSESTree.Expression | null) => void = (\n      importExpression: TSESTree.Expression | null\n    ) => {\n      if (!importExpression) {\n        // Can't validate, return\n        return;\n      }\n\n      // Determine the target file path and find the most direct relative path from the source file\n      const importSpecifier: IParsedImportSpecifier | undefined =\n        parseImportSpecifierFromExpression(importExpression);\n      if (importSpecifier === undefined) {\n        // Can't validate, return\n        return;\n      }\n\n      // Check if the import path contains backslashes. If it does, suggest a fix to replace them with forward\n      // slashes.\n      const { importTarget } = importSpecifier;\n      if (importTarget.includes('\\\\')) {\n        context.report({\n          node: importExpression,\n          messageId: MESSAGE_ID,\n          fix: (fixer: TSESLint.RuleFixer) => {\n            const normalizedSpecifier: IParsedImportSpecifier = {\n              ...importSpecifier,\n              importTarget: importTarget.replace(/\\\\/g, '/')\n            };\n            return fixer.replaceText(importExpression, `'${serializeImportSpecifier(normalizedSpecifier)}'`);\n          }\n        });\n      }\n    };\n\n    return {\n      ImportDeclaration: (node: TSESTree.ImportDeclaration) => checkImportExpression(node.source),\n      ImportExpression: (node: TSESTree.ImportExpression) => checkImportExpression(node.source),\n      ExportAllDeclaration: (node: TSESTree.ExportAllDeclaration) => checkImportExpression(node.source),\n      ExportNamedDeclaration: (node: TSESTree.ExportNamedDeclaration) => checkImportExpression(node.source)\n    };\n  }\n};\n"]}