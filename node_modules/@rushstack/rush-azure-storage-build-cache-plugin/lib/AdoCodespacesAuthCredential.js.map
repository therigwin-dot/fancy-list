{"version":3,"file":"AdoCodespacesAuthCredential.js","sourceRoot":"","sources":["../src/AdoCodespacesAuthCredential.ts"],"names":[],"mappings":";;;AAAA,4FAA4F;AAC5F,2DAA2D;AAC3D,oEAA0D;AA0B1D;;;;GAIG;AACH,MAAa,2BAA2B;IACtC,gEAAgE;IACzD,KAAK,CAAC,QAAQ,CAAC,MAAyB,EAAE,OAAyB;;QACxE,IAAI,KAAa,CAAC;QAClB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;YAC1B,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACtB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;YACjD,CAAC;iBAAM,IAAK,MAAmB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7C,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/C,CAAC;iBAAM,CAAC;gBACN,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACpB,CAAC;QACH,CAAC;aAAM,CAAC;YACN,KAAK,GAAG,MAAM,CAAC;QACjB,CAAC;QACD,MAAM,mBAAmB,GAAW,mBAAmB,CAAC;QAExD,MAAM,KAAK,GAAW,8BAAU,CAAC,SAAS,CAAC,mBAAmB,EAAE,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;QAEpG,IAAI,kBAA0B,CAAC;QAE/B,IAAI,CAAC;YACH,MAAM,YAAY,GAAgB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC3D,IAAI,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,OAAO,0CAAE,GAAG,EAAE,CAAC;gBAC/B,kBAAkB,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC;YACvD,CAAC;iBAAM,CAAC;gBACN,kBAAkB,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC;YAC5C,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,+BAA+B,KAAK,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO;YACL,KAAK;YACL,kBAAkB;SACnB,CAAC;IACJ,CAAC;IAEO,YAAY,CAAC,KAAa;QAChC,MAAM,KAAK,GAAa,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QAED,MAAM,MAAM,GAAW,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;QAClE,MAAM,OAAO,GAAW,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;QACnE,MAAM,SAAS,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;QAEnC,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;YAC1B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAC5B,SAAS;SACV,CAAC;IACJ,CAAC;CACF;AAtDD,kEAsDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nimport { Executable } from '@rushstack/node-core-library';\nimport type { AccessToken, GetTokenOptions, TokenCredential } from '@azure/identity';\n\ninterface IDecodedJwt {\n  header: {\n    type?: string;\n    alg?: string;\n    kid?: string;\n  };\n  payload: {\n    aud?: string;\n    iss?: string;\n    iat?: number;\n    nbf?: number;\n    exp?: number;\n    appid?: string;\n    scp?: string;\n    upn?: string;\n    unique_name?: string;\n    tid?: string;\n    sub?: string;\n    ver?: string;\n  };\n  signature: string;\n}\n\n/**\n * AdoCodespacesAuthCredential uses \"Azure Devops Codespaces Authentication\" VSCode extension to get the access\n * tokens for AAD in Codespaces.\n * https://github.com/microsoft/ado-codespaces-auth\n */\nexport class AdoCodespacesAuthCredential implements TokenCredential {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public async getToken(scopes: string | [string], options?: GetTokenOptions): Promise<AccessToken> {\n    let scope: string;\n    if (Array.isArray(scopes)) {\n      if (scopes.length > 1) {\n        throw new Error('Only one scope is supported');\n      } else if ((scopes as string[]).length === 0) {\n        throw new Error('A scope must be provided.');\n      } else {\n        scope = scopes[0];\n      }\n    } else {\n      scope = scopes;\n    }\n    const azureAuthHelperExec: string = 'azure-auth-helper';\n\n    const token: string = Executable.spawnSync(azureAuthHelperExec, ['get-access-token', scope]).stdout;\n\n    let expiresOnTimestamp: number;\n\n    try {\n      const decodedToken: IDecodedJwt = this._decodeToken(token);\n      if (decodedToken?.payload?.exp) {\n        expiresOnTimestamp = decodedToken.payload.exp * 1000;\n      } else {\n        expiresOnTimestamp = Date.now() + 3600000;\n      }\n    } catch (error) {\n      throw new Error(`Failed to decode the token: ${error}`);\n    }\n\n    return {\n      token,\n      expiresOnTimestamp\n    };\n  }\n\n  private _decodeToken(token: string): IDecodedJwt {\n    const parts: string[] = token.split('.');\n    if (parts.length !== 3) {\n      throw new Error('Invalid token');\n    }\n\n    const header: string = Buffer.from(parts[0], 'base64').toString();\n    const payload: string = Buffer.from(parts[1], 'base64').toString();\n    const signature: string = parts[2];\n\n    return {\n      header: JSON.parse(header),\n      payload: JSON.parse(payload),\n      signature\n    };\n  }\n}\n"]}