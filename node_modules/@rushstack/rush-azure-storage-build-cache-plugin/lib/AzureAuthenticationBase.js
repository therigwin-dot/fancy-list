"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureAuthenticationBase = void 0;
const identity_1 = require("@azure/identity");
const rush_sdk_1 = require("@rushstack/rush-sdk");
const terminal_1 = require("@rushstack/terminal");
const AdoCodespacesAuthCredential_1 = require("./AdoCodespacesAuthCredential");
/**
 * @public
 */
class AzureAuthenticationBase {
    get _credentialCacheId() {
        if (!this.__credentialCacheId) {
            const cacheIdParts = [
                this._credentialNameForCache,
                this._azureEnvironment,
                ...this._getCacheIdParts()
            ];
            this.__credentialCacheId = cacheIdParts.join('|');
        }
        return this.__credentialCacheId;
    }
    constructor(options) {
        const { azureEnvironment = 'AzurePublicCloud', loginFlow = process.env.CODESPACES === 'true' ? 'AdoCodespacesAuth' : 'InteractiveBrowser' } = options;
        this._azureEnvironment = azureEnvironment;
        this._credentialUpdateCommandForLogging = options.credentialUpdateCommandForLogging;
        this._loginFlow = loginFlow;
        this._failoverOrder = options.loginFlowFailover || {
            AdoCodespacesAuth: 'InteractiveBrowser',
            InteractiveBrowser: 'DeviceCode',
            DeviceCode: undefined
        };
    }
    async updateCachedCredentialAsync(terminal, credential) {
        await rush_sdk_1.CredentialCache.usingAsync({
            supportEditing: true
        }, async (credentialsCache) => {
            credentialsCache.setCacheEntry(this._credentialCacheId, {
                credential
            });
            await credentialsCache.saveIfModifiedAsync();
        });
    }
    /**
     * Launches an interactive flow to renew a cached credential.
     *
     * @param terminal - The terminal to log output to
     * @param onlyIfExistingCredentialExpiresBefore - If specified, and a cached credential exists, action will only
     * be taken if the cached credential expires before the specified date.
     */
    async updateCachedCredentialInteractiveAsync(terminal, onlyIfExistingCredentialExpiresBefore) {
        await rush_sdk_1.CredentialCache.usingAsync({
            supportEditing: true
        }, async (credentialsCache) => {
            var _a;
            if (onlyIfExistingCredentialExpiresBefore) {
                const existingCredentialExpiration = (_a = credentialsCache.tryGetCacheEntry(this._credentialCacheId)) === null || _a === void 0 ? void 0 : _a.expires;
                if (existingCredentialExpiration &&
                    existingCredentialExpiration > onlyIfExistingCredentialExpiresBefore) {
                    return;
                }
            }
            const credential = await this._getCredentialAsync(terminal, this._loginFlow, credentialsCache);
            credentialsCache.setCacheEntry(this._credentialCacheId, {
                credential: credential.credentialString,
                expires: credential.expiresOn,
                credentialMetadata: credential.credentialMetadata
            });
            await credentialsCache.saveIfModifiedAsync();
        });
    }
    async deleteCachedCredentialsAsync(terminal) {
        await rush_sdk_1.CredentialCache.usingAsync({
            supportEditing: true
        }, async (credentialsCache) => {
            credentialsCache.deleteCacheEntry(this._credentialCacheId);
            await credentialsCache.saveIfModifiedAsync();
        });
    }
    async tryGetCachedCredentialAsync({ expiredCredentialBehavior, terminal } = {
        expiredCredentialBehavior: 'throwError'
    }) {
        var _a;
        let cacheEntry;
        await rush_sdk_1.CredentialCache.usingAsync({
            supportEditing: false
        }, (credentialsCache) => {
            cacheEntry = credentialsCache.tryGetCacheEntry(this._credentialCacheId);
        });
        const expirationTime = (_a = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.expires) === null || _a === void 0 ? void 0 : _a.getTime();
        if (expirationTime && expirationTime < Date.now()) {
            if (expiredCredentialBehavior === 'logWarning' || expiredCredentialBehavior === 'throwError') {
                let errorMessage = `Cached Azure ${this._credentialKindForLogging} credentials have expired.`;
                if (this._credentialUpdateCommandForLogging) {
                    errorMessage += ` Update the credentials by running "${this._credentialUpdateCommandForLogging}".`;
                }
                if (expiredCredentialBehavior === 'logWarning') {
                    terminal.writeWarningLine(errorMessage);
                }
                else if (expiredCredentialBehavior === 'throwError') {
                    throw new Error(errorMessage);
                }
            }
            return undefined;
        }
        else {
            return cacheEntry;
        }
    }
    async _getCredentialAsync(terminal, loginFlow, credentialsCache) {
        const authorityHost = identity_1.AzureAuthorityHosts[this._azureEnvironment];
        if (!authorityHost) {
            throw new Error(`Unexpected Azure environment: ${this._azureEnvironment}`);
        }
        let tokenCredential;
        const interactiveCredentialOptions = Object.assign(Object.assign({}, this._additionalInteractiveCredentialOptions), { authorityHost });
        switch (loginFlow) {
            case 'AdoCodespacesAuth': {
                tokenCredential = new AdoCodespacesAuthCredential_1.AdoCodespacesAuthCredential();
                break;
            }
            case 'InteractiveBrowser': {
                tokenCredential = new identity_1.InteractiveBrowserCredential(interactiveCredentialOptions);
                break;
            }
            case 'DeviceCode': {
                tokenCredential = new identity_1.DeviceCodeCredential(Object.assign(Object.assign({}, interactiveCredentialOptions), { userPromptCallback: (deviceCodeInfo) => {
                        terminal_1.PrintUtilities.printMessageInBox(deviceCodeInfo.message, terminal);
                    } }));
                break;
            }
            default: {
                throw new Error(`Unsupported login flow: ${loginFlow}`);
            }
        }
        try {
            return await this._getCredentialFromTokenAsync(terminal, tokenCredential, credentialsCache);
        }
        catch (error) {
            terminal.writeVerbose(`Failed to get credentials with ${loginFlow}: ${error}`);
            const fallbackFlow = this._failoverOrder[loginFlow];
            if (fallbackFlow) {
                terminal.writeVerbose(`Falling back to ${fallbackFlow} login flow`);
                return this._getCredentialAsync(terminal, fallbackFlow, credentialsCache);
            }
            else {
                throw error;
            }
        }
    }
}
exports.AzureAuthenticationBase = AzureAuthenticationBase;
//# sourceMappingURL=AzureAuthenticationBase.js.map