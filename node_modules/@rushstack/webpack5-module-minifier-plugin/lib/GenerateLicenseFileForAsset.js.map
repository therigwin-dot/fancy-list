{"version":3,"file":"GenerateLicenseFileForAsset.js","sourceRoot":"","sources":["../src/GenerateLicenseFileForAsset.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwC3D,kEAqBC;AA3DD,2CAA6B;AAM7B,SAAS,cAAc,CAAC,OAAyB;;IAC/C,MAAM,WAAW,GAAgB,IAAI,GAAG,EAAE,CAAC;IAE3C,KAAK,MAAM,aAAa,IAAI,OAAO,EAAE,CAAC;QACpC,MAAM,UAAU,GAAqB,CAAC,aAAa,CAAC,OAAO,KAAK,IAAI;YACjE,aAAiD,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAClF,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;YACnC,MAAM,iBAAiB,GAAkC,MACvD,SAAS,CAAC,WAGX,0CAAE,QAAQ,CAAC;YAEZ,IAAI,iBAAiB,EAAE,CAAC;gBACtB,KAAK,MAAM,OAAO,IAAI,iBAAiB,EAAE,CAAC;oBACxC,MAAM,KAAK,GAAW,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,KAAK,MAAM,CAAC;oBAClG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACzB,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,WAAW,CAAC;AACrB,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,2BAA2B,CAAC,WAAwB,EAAE,KAAiB;IACrF,uCAAuC;IACvC,MAAM,OAAO,GAAqB,WAAW,CAAC,UAAU,CAAC,uBAAuB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9F,MAAM,QAAQ,GAAgB,cAAc,CAAC,OAAO,CAAC,CAAC;IAEtD,MAAM,SAAS,GAAW,KAAK,CAAC,QAAQ,CAAC;IAEzC,IAAI,MAAM,GAAW,EAAE,CAAC;IAExB,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClB,+FAA+F;QAC/F,MAAM,aAAa,GAAyB,IAAI,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;QACpG,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,MAAM,eAAe,GAAW,GAAG,SAAS,cAAc,CAAC;QAC3D,WAAW,CAAC,SAAS,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;QACtD,MAAM,GAAG,0CAA0C,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC;IAC3F,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport type { Comment } from 'estree';\nimport type { Compilation, Module } from 'webpack';\nimport type { sources } from 'webpack';\nimport type { IAssetInfo } from './ModuleMinifierPlugin.types';\n\nfunction getAllComments(modules: Iterable<Module>): Set<string> {\n  const allComments: Set<string> = new Set();\n\n  for (const webpackModule of modules) {\n    const submodules: Iterable<Module> = (webpackModule.context === null &&\n      (webpackModule as { _modules?: Iterable<Module> })._modules) || [webpackModule];\n    for (const submodule of submodules) {\n      const subModuleComments: Iterable<Comment> | undefined = (\n        submodule.factoryMeta as {\n          comments?: Iterable<Comment>;\n        }\n      )?.comments;\n\n      if (subModuleComments) {\n        for (const comment of subModuleComments) {\n          const value: string = comment.type === 'Line' ? `//${comment.value}\\n` : `/*${comment.value}*/\\n`;\n          allComments.add(value);\n        }\n      }\n    }\n  }\n\n  return allComments;\n}\n\n/**\n * Generates a companion asset containing all extracted comments. If it is non-empty, returns a banner comment directing users to said companion asset.\n *\n * @param compilation - The webpack compilation\n * @param asset - The asset to process\n * @public\n */\nexport function generateLicenseFileForAsset(compilation: Compilation, asset: IAssetInfo): string {\n  // Extracted comments from the modules.\n  const modules: Iterable<Module> = compilation.chunkGraph.getChunkModulesIterable(asset.chunk);\n  const comments: Set<string> = getAllComments(modules);\n\n  const assetName: string = asset.fileName;\n\n  let banner: string = '';\n\n  if (comments.size) {\n    // There are license comments in this chunk, so generate the companion file and inject a banner\n    const licenseSource: sources.ConcatSource = new compilation.compiler.webpack.sources.ConcatSource();\n    comments.forEach((comment) => {\n      licenseSource.add(comment);\n    });\n    const licenseFileName: string = `${assetName}.LICENSE.txt`;\n    compilation.emitAsset(licenseFileName, licenseSource);\n    banner = `/*! For license information please see ${path.basename(licenseFileName)} */\\n`;\n  }\n\n  return banner;\n}\n"]}