{"version":3,"file":"ModuleMinifierPlugin.js","sourceRoot":"","sources":["../src/ModuleMinifierPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { createHash } from 'crypto';\n\nimport type { Comment } from 'estree';\nimport type {\n  Module,\n  Compilation,\n  WebpackPluginInstance,\n  Compiler,\n  javascript,\n  WebpackError,\n  ExternalModule,\n  sources,\n  Chunk\n} from 'webpack';\nimport { AsyncSeriesWaterfallHook, SyncWaterfallHook, type Tap } from 'tapable';\n\nimport {\n  CHUNK_MODULE_TOKEN,\n  MODULE_WRAPPER_PREFIX,\n  MODULE_WRAPPER_SUFFIX,\n  STAGE_BEFORE,\n  STAGE_AFTER\n} from './Constants';\nimport type {\n  IMinifierConnection,\n  IModuleMinifier,\n  IModuleMinificationResult,\n  IModuleMinificationErrorResult\n} from '@rushstack/module-minifier';\nimport { getIdentifier } from '@rushstack/module-minifier';\n\nimport type {\n  IModuleMinifierPluginOptions,\n  IModuleMap,\n  IAssetMap,\n  IFactoryMeta,\n  IModuleMinifierPluginHooks,\n  IPostProcessFragmentContext,\n  IDehydratedAssets,\n  IModuleStats,\n  IModuleMinifierPluginStats as IModuleMinifierPluginStats,\n  IAssetStats\n} from './ModuleMinifierPlugin.types';\nimport { generateLicenseFileForAsset } from './GenerateLicenseFileForAsset';\nimport { rehydrateAsset } from './RehydrateAsset';\n\n// The name of the plugin, for use in taps\nconst PLUGIN_NAME: 'ModuleMinifierPlugin' = 'ModuleMinifierPlugin';\n\n// Monotonically increasing identifier to be incremented any time the code generation logic changes\n// Will be applied to the webpack hash.\nconst CODE_GENERATION_REVISION: number = 1;\n// Match behavior of terser's \"some\" option\n// https://github.com/terser/terser/blob/d3d924fa9e4c57bbe286b811c6068bcc7026e902/lib/output.js#L175\nconst LICENSE_COMMENT_REGEX: RegExp = /@preserve|@lic|@cc_on|^\\**!/i;\n\nconst TAP_BEFORE: Tap = {\n  name: PLUGIN_NAME,\n  stage: STAGE_BEFORE\n};\nconst TAP_AFTER: Tap = {\n  name: PLUGIN_NAME,\n  stage: STAGE_AFTER\n};\n\ninterface IOptionsForHash extends Omit<IModuleMinifierPluginOptions, 'minifier'> {\n  revision: number;\n  minifier: undefined;\n}\n\ninterface ISourceCacheEntry {\n  source: sources.Source;\n  hash: string;\n}\n\nconst compilationMetadataMap: WeakMap<Compilation, IModuleMinifierPluginStats> = new WeakMap();\n\nfunction hashCodeFragment(code: string): string {\n  return createHash('sha256').update(code).digest('hex');\n}\n\n/**\n * Base implementation of asset rehydration\n *\n * @param dehydratedAssets The dehydrated assets\n * @param compilation The webpack compilation\n */\nfunction defaultRehydrateAssets(\n  dehydratedAssets: IDehydratedAssets,\n  compilation: Compilation\n): IDehydratedAssets {\n  const { assets, modules } = dehydratedAssets;\n\n  const compilationMetadata: IModuleMinifierPluginStats | undefined = compilationMetadataMap.get(compilation);\n  if (!compilationMetadata) {\n    throw new Error(`Could not get compilation metadata`);\n  }\n\n  const { metadataByAssetFileName } = compilationMetadata;\n\n  // Now assets/modules contain fully minified code. Rehydrate.\n  for (const [assetName, info] of assets) {\n    const banner: string = info.type === 'javascript' ? generateLicenseFileForAsset(compilation, info) : '';\n\n    const replacementSource: sources.Source = rehydrateAsset(compilation, info, modules, banner, true);\n    metadataByAssetFileName.set(assetName, {\n      positionByModuleId: info.renderInfo\n    });\n    compilation.updateAsset(assetName, replacementSource);\n  }\n\n  return dehydratedAssets;\n}\n\nfunction isMinificationResultError(\n  result: IModuleMinificationResult\n): result is IModuleMinificationErrorResult {\n  return !!result.error;\n}\n\nfunction isLicenseComment(comment: Comment): boolean {\n  return LICENSE_COMMENT_REGEX.test(comment.value);\n}\n\n/**\n * Webpack plugin that minifies code on a per-module basis rather than per-asset. The actual minification is handled by the input `minifier` object.\n * @public\n */\nexport class ModuleMinifierPlugin implements WebpackPluginInstance {\n  public readonly hooks: IModuleMinifierPluginHooks;\n  public minifier: IModuleMinifier;\n\n  private readonly _enhancers: WebpackPluginInstance[];\n  private readonly _sourceMap: boolean | undefined;\n\n  private readonly _optionsForHash: IOptionsForHash;\n\n  public constructor(options: IModuleMinifierPluginOptions) {\n    this.hooks = {\n      rehydrateAssets: new AsyncSeriesWaterfallHook(['dehydratedContent', 'compilation']),\n\n      postProcessCodeFragment: new SyncWaterfallHook(['code', 'context'])\n    };\n\n    const { minifier, sourceMap } = options;\n\n    this._optionsForHash = {\n      ...options,\n      minifier: undefined,\n      revision: CODE_GENERATION_REVISION\n    };\n\n    this._enhancers = [];\n\n    this.hooks.rehydrateAssets.tap(PLUGIN_NAME, defaultRehydrateAssets);\n    this.minifier = minifier;\n\n    this._sourceMap = sourceMap;\n  }\n\n  public static getCompilationStatistics(compilation: Compilation): IModuleMinifierPluginStats | undefined {\n    return compilationMetadataMap.get(compilation);\n  }\n\n  public apply(compiler: Compiler): void {\n    for (const enhancer of this._enhancers) {\n      enhancer.apply(compiler);\n    }\n\n    const {\n      options: { devtool, mode },\n      webpack\n    } = compiler;\n\n    webpack.Template.numberToIdentifier = getIdentifier;\n\n    const { CachedSource, ConcatSource, RawSource, ReplaceSource, SourceMapSource } = webpack.sources;\n    // The explicit setting is preferred due to accuracy, but try to guess based on devtool\n    const useSourceMaps: boolean =\n      typeof this._sourceMap === 'boolean'\n        ? this._sourceMap\n        : typeof devtool === 'string'\n          ? devtool.endsWith('source-map')\n          : mode === 'production' && devtool !== false;\n\n    this._optionsForHash.sourceMap = useSourceMaps;\n    const binaryConfig: Buffer = Buffer.from(JSON.stringify(this._optionsForHash), 'utf-8');\n\n    compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation, compilationData) => {\n      const { normalModuleFactory } = compilationData;\n\n      function addCommentExtraction(parser: javascript.JavascriptParser): void {\n        parser.hooks.program.tap(PLUGIN_NAME, (program: unknown, comments: Comment[]) => {\n          const relevantComments: Comment[] = comments.filter(isLicenseComment);\n          if (comments.length > 0) {\n            // Webpack's typings now restrict the properties on factoryMeta for unknown reasons\n            const module: { factoryMeta?: IFactoryMeta } = parser.state.module as unknown as {\n              factoryMeta?: IFactoryMeta;\n            };\n            if (!module.factoryMeta) {\n              module.factoryMeta = {\n                comments: relevantComments\n              };\n            } else {\n              (module.factoryMeta as IFactoryMeta).comments = relevantComments;\n            }\n          }\n        });\n      }\n\n      normalModuleFactory.hooks.parser.for('javascript/auto').tap(PLUGIN_NAME, addCommentExtraction);\n      normalModuleFactory.hooks.parser.for('javascript/dynamic').tap(PLUGIN_NAME, addCommentExtraction);\n      normalModuleFactory.hooks.parser.for('javascript/esm').tap(PLUGIN_NAME, addCommentExtraction);\n\n      /**\n       * Set of local module ids that have been processed.\n       */\n      const submittedModules: Set<string | number> = new Set();\n\n      /**\n       * The text and comments of all minified modules.\n       */\n      const minifiedModules: IModuleMap = new Map();\n\n      /**\n       * The text and comments of all minified chunks. Most of these are trivial, but the runtime chunk is a bit larger.\n       */\n      const minifiedAssets: IAssetMap = new Map();\n\n      const metadataByModule: WeakMap<Module, IModuleStats> = new WeakMap();\n      const metadataByAssetFileName: Map<string, IAssetStats> = new Map();\n      const compilationStatistics: IModuleMinifierPluginStats = {\n        metadataByModule,\n        metadataByAssetFileName\n      };\n      compilationMetadataMap.set(compilation, compilationStatistics);\n      function getOrCreateMetadata(mod: Module): IModuleStats {\n        let moduleStats: IModuleStats | undefined = metadataByModule.get(mod);\n        if (!moduleStats) {\n          moduleStats = {\n            hashByChunk: new Map(),\n            sizeByHash: new Map()\n          };\n          metadataByModule.set(mod, moduleStats);\n        }\n        return moduleStats;\n      }\n\n      let pendingMinificationRequests: number = 0;\n      /**\n       * Indicates that all files have been sent to the minifier and therefore that when pending hits 0, assets can be rehydrated.\n       */\n      let allRequestsIssued: boolean = false;\n\n      let resolveMinifyPromise: () => void;\n\n      const postProcessCode: (\n        code: sources.ReplaceSource,\n        context: IPostProcessFragmentContext\n      ) => sources.ReplaceSource = (code: sources.ReplaceSource, context: IPostProcessFragmentContext) =>\n        this.hooks.postProcessCodeFragment.call(code, context);\n\n      /**\n       * Callback to invoke when a file has finished minifying.\n       */\n      function onFileMinified(): void {\n        if (--pendingMinificationRequests === 0 && allRequestsIssued) {\n          resolveMinifyPromise();\n        }\n      }\n\n      const { minifier } = this;\n\n      let minifierConnection: IMinifierConnection | undefined;\n\n      // Typings for this object are not exposed\n      // eslint-disable-next-line @typescript-eslint/typedef\n      const javascriptHooks = webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n\n      /**\n       * The minifier needs to know if the module was wrapped in a factory function, because\n       * function (module, exports, require) { // <implementation> }\n       * minifies to nothing. Unfortunately we can't tell by inspection if the output was wrapped or not.\n       * However, the JavaScriptModulesPlugin invokes three hooks in order when rendering a module:\n       * 1) renderModuleContent - Invoked for every module.\n       * 2) renderModuleContainer - Invoked when wrapping a module in a factory.\n       * 3) renderModulePackage - Invoked for every module as the last hook.\n       */\n      let nextModule: Module | undefined;\n      const sourceCache: WeakMap<sources.Source, ISourceCacheEntry> = new WeakMap();\n      javascriptHooks.renderModuleContent.tap(TAP_AFTER, (source) => {\n        // Clear the identification state of the current module.\n        nextModule = undefined;\n        return source;\n      });\n      javascriptHooks.renderModuleContainer.tap(TAP_AFTER, (source, mod) => {\n        // Module is being wrapped in a factory, so it is safe for per-module minification\n        // Leave external modules in-place to avoid needing special handling for externals\n        if (mod.context !== null || !(mod as ExternalModule).externalType) {\n          nextModule = mod;\n        }\n        return source;\n      });\n      javascriptHooks.renderModulePackage.tap(\n        TAP_AFTER,\n        /**\n         * Extracts the code for the module and sends it to be minified.\n         */\n        function minifyModule(\n          source: sources.Source,\n          mod: Module,\n          chunkRenderContext: { chunk: Chunk }\n        ): sources.Source {\n          if (nextModule !== mod) {\n            // This module is being inlined. Abandon per-module minification.\n            return source;\n          }\n\n          const id: string | number | null = compilation.chunkGraph.getModuleId(mod);\n\n          if (id === null) {\n            // This module has no id. Abandon per-module minification.\n            return source;\n          }\n\n          const metadata: IModuleStats = getOrCreateMetadata(mod);\n          const cachedResult: ISourceCacheEntry | undefined = sourceCache.get(source);\n          if (cachedResult) {\n            metadata.hashByChunk.set(chunkRenderContext.chunk, cachedResult.hash);\n            return cachedResult.source;\n          }\n\n          // If this module is wrapped in a factory, need to add boilerplate so that the minifier keeps the function\n          const wrapped: sources.Source = new ConcatSource(\n            MODULE_WRAPPER_PREFIX + '\\n',\n            source,\n            '\\n' + MODULE_WRAPPER_SUFFIX\n          );\n\n          const nameForMap: string = `(modules)/${id}`;\n\n          const { source: wrappedCodeRaw, map } = useSourceMaps\n            ? wrapped.sourceAndMap()\n            : {\n                source: wrapped.source(),\n                map: undefined\n              };\n\n          const wrappedCode: string = wrappedCodeRaw.toString();\n          const hash: string = hashCodeFragment(wrappedCode);\n          metadata.hashByChunk.set(chunkRenderContext.chunk, hash);\n          if (!submittedModules.has(hash)) {\n            submittedModules.add(hash);\n\n            ++pendingMinificationRequests;\n\n            minifier.minify(\n              {\n                hash,\n                code: wrappedCode,\n                nameForMap: useSourceMaps ? nameForMap : undefined,\n                externals: undefined\n              },\n              (result: IModuleMinificationResult) => {\n                if (isMinificationResultError(result)) {\n                  compilation.errors.push(result.error as WebpackError);\n                } else {\n                  try {\n                    const { code: minified, map: minifierMap } = result;\n\n                    const rawOutput: sources.Source = useSourceMaps\n                      ? new SourceMapSource(\n                          minified, // Code\n                          nameForMap, // File\n                          minifierMap!, // Base source map\n                          wrappedCode, // Source from before transform\n                          map!, // Source Map from before transform\n                          true // Remove original source\n                        )\n                      : new RawSource(minified);\n\n                    const unwrapped: sources.ReplaceSource = new ReplaceSource(rawOutput);\n                    const len: number = minified.length;\n\n                    // Trim off the boilerplate used to preserve the factory\n                    unwrapped.replace(0, MODULE_WRAPPER_PREFIX.length - 1, '');\n                    unwrapped.replace(len - MODULE_WRAPPER_SUFFIX.length, len - 1, '');\n\n                    const withIds: sources.Source = postProcessCode(unwrapped, {\n                      compilation,\n                      module: mod,\n                      loggingName: mod.identifier()\n                    });\n                    const cached: sources.CachedSource = new CachedSource(withIds);\n\n                    const minifiedSize: number = Buffer.byteLength(cached.source(), 'utf-8');\n                    metadata.sizeByHash.set(hash, minifiedSize);\n\n                    minifiedModules.set(hash, {\n                      source: cached,\n                      module: mod,\n                      id\n                    });\n                  } catch (err) {\n                    compilation.errors.push(err);\n                  }\n                }\n\n                onFileMinified();\n              }\n            );\n          }\n\n          const result: sources.Source = new RawSource(`${CHUNK_MODULE_TOKEN}${hash}`);\n          sourceCache.set(source, {\n            hash,\n            source: result\n          });\n\n          // Return an expression to replace later\n          return result;\n        }\n      );\n\n      // The optimizeChunkModules hook is the last async hook that occurs before chunk rendering\n      compilation.hooks.optimizeChunkModules.tapPromise(PLUGIN_NAME, async () => {\n        minifierConnection = await minifier.connectAsync();\n\n        submittedModules.clear();\n      });\n\n      const isJSAsset: RegExp = /\\.[cm]?js(\\?.+)?$/;\n\n      // This should happen before any other tasks that operate during processAssets\n      compilation.hooks.processAssets.tapPromise(TAP_BEFORE, async (): Promise<void> => {\n        const { chunkGraph, chunks } = compilation;\n\n        // Still need to minify the rendered assets\n        for (const chunk of chunks) {\n          const allChunkModules: Iterable<Module> | undefined =\n            chunkGraph.getChunkModulesIterableBySourceType(chunk, 'javascript');\n          if (!allChunkModules) {\n            // This chunk does not contain javascript modules\n            continue;\n          }\n\n          for (const assetName of chunk.files) {\n            const asset: sources.Source = compilation.assets[assetName];\n\n            // Verify that this is a JS asset\n            if (isJSAsset.test(assetName)) {\n              ++pendingMinificationRequests;\n\n              const { source: wrappedCodeRaw, map } = useSourceMaps\n                ? asset.sourceAndMap()\n                : {\n                    source: asset.source(),\n                    map: undefined\n                  };\n\n              const rawCode: string = wrappedCodeRaw.toString();\n              const nameForMap: string = `(chunks)/${assetName}`;\n\n              const hash: string = hashCodeFragment(rawCode);\n\n              minifier.minify(\n                {\n                  hash,\n                  code: rawCode,\n                  nameForMap: useSourceMaps ? nameForMap : undefined,\n                  externals: undefined\n                },\n                (result: IModuleMinificationResult) => {\n                  if (isMinificationResultError(result)) {\n                    compilation.errors.push(result.error as WebpackError);\n                    // eslint-disable-next-line no-console\n                    console.error(result.error);\n                  } else {\n                    try {\n                      const { code: minified, map: minifierMap } = result;\n\n                      const rawOutput: sources.Source = useSourceMaps\n                        ? new SourceMapSource(\n                            minified, // Code\n                            nameForMap, // File\n                            minifierMap!, // Base source map\n                            rawCode, // Source from before transform\n                            map, // Source Map from before transform\n                            true // Remove original source\n                          )\n                        : new RawSource(minified);\n\n                      const withIds: sources.Source = postProcessCode(new ReplaceSource(rawOutput), {\n                        compilation,\n                        module: undefined,\n                        loggingName: assetName\n                      });\n\n                      minifiedAssets.set(assetName, {\n                        source: new CachedSource(withIds),\n                        chunk,\n                        fileName: assetName,\n                        renderInfo: new Map(),\n                        type: 'javascript'\n                      });\n                    } catch (err) {\n                      compilation.errors.push(err);\n                    }\n                  }\n\n                  onFileMinified();\n                }\n              );\n            } else {\n              // This isn't a JS asset. Don't try to minify the asset wrapper, though if it contains modules, those might still get replaced with minified versions.\n              minifiedAssets.set(assetName, {\n                // Still need to restore ids\n                source: postProcessCode(new ReplaceSource(asset), {\n                  compilation,\n                  module: undefined,\n                  loggingName: assetName\n                }),\n                chunk,\n                fileName: assetName,\n                renderInfo: new Map(),\n                type: 'unknown'\n              });\n            }\n          }\n        }\n\n        allRequestsIssued = true;\n\n        if (pendingMinificationRequests) {\n          await new Promise<void>((resolve) => {\n            resolveMinifyPromise = resolve;\n          });\n        }\n\n        // Handle any error from the minifier.\n        await minifierConnection?.disconnectAsync();\n\n        // All assets and modules have been minified, hand them off to be rehydrated\n        await this.hooks.rehydrateAssets.promise(\n          {\n            assets: minifiedAssets,\n            modules: minifiedModules\n          },\n          compilation\n        );\n      });\n\n      // Need to update chunk hashes with information from this plugin\n      javascriptHooks.chunkHash.tap(PLUGIN_NAME, (chunk, hash): void => {\n        // Apply the options hash\n        hash.update(binaryConfig);\n        // Apply the hash from the minifier\n        if (minifierConnection) {\n          hash.update(minifierConnection.configHash, 'utf8');\n        }\n      });\n    });\n  }\n}\n"]}