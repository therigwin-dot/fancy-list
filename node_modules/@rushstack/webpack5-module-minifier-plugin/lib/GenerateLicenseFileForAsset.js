"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateLicenseFileForAsset = generateLicenseFileForAsset;
const path = __importStar(require("path"));
function getAllComments(modules) {
    var _a;
    const allComments = new Set();
    for (const webpackModule of modules) {
        const submodules = (webpackModule.context === null &&
            webpackModule._modules) || [webpackModule];
        for (const submodule of submodules) {
            const subModuleComments = (_a = submodule.factoryMeta) === null || _a === void 0 ? void 0 : _a.comments;
            if (subModuleComments) {
                for (const comment of subModuleComments) {
                    const value = comment.type === 'Line' ? `//${comment.value}\n` : `/*${comment.value}*/\n`;
                    allComments.add(value);
                }
            }
        }
    }
    return allComments;
}
/**
 * Generates a companion asset containing all extracted comments. If it is non-empty, returns a banner comment directing users to said companion asset.
 *
 * @param compilation - The webpack compilation
 * @param asset - The asset to process
 * @public
 */
function generateLicenseFileForAsset(compilation, asset) {
    // Extracted comments from the modules.
    const modules = compilation.chunkGraph.getChunkModulesIterable(asset.chunk);
    const comments = getAllComments(modules);
    const assetName = asset.fileName;
    let banner = '';
    if (comments.size) {
        // There are license comments in this chunk, so generate the companion file and inject a banner
        const licenseSource = new compilation.compiler.webpack.sources.ConcatSource();
        comments.forEach((comment) => {
            licenseSource.add(comment);
        });
        const licenseFileName = `${assetName}.LICENSE.txt`;
        compilation.emitAsset(licenseFileName, licenseSource);
        banner = `/*! For license information please see ${path.basename(licenseFileName)} */\n`;
    }
    return banner;
}
//# sourceMappingURL=GenerateLicenseFileForAsset.js.map