/**
 * Some utilities for working with Rush Stack localization files.
 *
 * @packageDocumentation
 */

import { IExportAsDefaultOptions } from '@rushstack/typings-generator';
import type { ITerminal } from '@rushstack/terminal';
import { ITypingsGeneratorBaseOptions } from '@rushstack/typings-generator';
import { NewlineKind } from '@rushstack/node-core-library';
import { StringValuesTypingsGenerator } from '@rushstack/typings-generator';

/**
 * Get a function that pseudolocalizes a string.
 *
 * @public
 */
export declare function getPseudolocalizer(options: IPseudolocaleOptions): (str: string) => string;

/**
 * @public
 */
export declare type IgnoreStringFunction = (filePath: string, stringName: string) => boolean;

/**
 * @public
 */
export declare interface IInferInterfaceNameExportAsDefaultOptions extends Omit<IExportAsDefaultOptions, 'interfaceName'> {
    /**
     * When `exportAsDefault` is true and this option is true, the default export interface name will be inferred
     * from the filename.
     */
    inferInterfaceNameFromFilename?: boolean;
}

/**
 * @public
 */
export declare interface ILocalizationFile {
    [stringName: string]: ILocalizedString;
}

/**
 * @public
 */
export declare interface ILocalizedString {
    value: string;
    comment?: string;
}

/**
 * @public
 */
export declare interface IParseFileOptions {
    content: string;
    filePath: string;
    /**
     * Optionally, provide a function that will be called for each string. If the function returns `true`
     * the string will not be included.
     */
    ignoreString?: IgnoreStringFunction;
}

/**
 * @public
 */
export declare interface IParseLocFileOptions extends IParseFileOptions, IParseResxOptionsBase {
    parser?: ParserKind;
}

/**
 * @public
 */
export declare interface IParseResxOptions extends IParseFileOptions, IParseResxOptionsBase {
}

/**
 * @public
 */
export declare interface IParseResxOptionsBase {
    terminal: ITerminal;
    resxNewlineNormalization: NewlineKind | undefined;
    ignoreMissingResxComments: boolean | undefined;
}

/**
 * Options for the pseudolocale library.
 *
 * @internalRemarks
 * Eventually this should be replaced with DefinitelyTyped types.
 *
 * @public
 */
export declare interface IPseudolocaleOptions {
    prepend?: string;
    append?: string;
    delimiter?: string;
    startDelimiter?: string;
    endDelimiter?: string;
    extend?: number;
    override?: string;
}

/**
 * @public
 */
export declare interface ITypingsGeneratorOptions extends ITypingsGeneratorBaseOptions {
    /**
     * Options for configuring the default export.
     */
    exportAsDefault?: boolean | IExportAsDefaultOptions | IInferInterfaceNameExportAsDefaultOptions;
    /**
     * Normalizes the line endings in .resx files to the specified kind.
     */
    resxNewlineNormalization?: NewlineKind | undefined;
    /**
     * If specified, the generator will write trimmed .json files to the specified folders.
     * The .json files will be written to the same relative path as the source file.
     * For example, if the source file is "&lt;root&gt;/foo/bar.resx", and the output folder is "dist",
     * the trimmed .json file will be written to "dist/foo/bar.resx.json".
     */
    trimmedJsonOutputFolders?: string[] | undefined;
    /**
     * If true, .resx files will not throw errors if comments are missing.
     */
    ignoreMissingResxComments?: boolean | undefined;
    /**
     * Optionally, provide a function that will be called for each string. If the function returns `true`
     * the string will not be included.
     */
    ignoreString?: IgnoreStringFunction;
    /**
     * Processes the raw text of a comment.
     * @param comment - The original text of the comment to process
     * @param relativeFilePath - The relative file path
     * @param stringName - The name of the string that the comment is for
     * @returns The processed comment
     */
    processComment?: (comment: string | undefined, relativeFilePath: string, stringName: string) => string | undefined;
}

/**
 * @public
 */
export declare function parseLocFile(options: IParseLocFileOptions): ILocalizationFile;

/**
 * @public
 */
export declare function parseLocJson({ content, filePath, ignoreString }: IParseFileOptions): ILocalizationFile;

/**
 * @public
 */
export declare function parseResJson({ content, ignoreString, filePath }: IParseFileOptions): ILocalizationFile;

/**
 * @public
 */
export declare function parseResx(options: IParseResxOptions): ILocalizationFile;

/**
 * @public
 */
export declare type ParserKind = 'resx' | 'loc.json' | 'resjson';

/**
 * This is a simple tool that generates .d.ts files for .loc.json, .resx.json, .resjson, and .resx files.
 *
 * @public
 */
export declare class TypingsGenerator extends StringValuesTypingsGenerator {
    constructor(options: ITypingsGeneratorOptions);
}

export { }
