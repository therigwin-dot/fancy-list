"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLocJson = parseLocJson;
const node_core_library_1 = require("@rushstack/node-core-library");
const locJson_schema_json_1 = __importDefault(require("../schemas/locJson.schema.json"));
const LOC_JSON_SCHEMA = node_core_library_1.JsonSchema.fromLoadedObject(locJson_schema_json_1.default);
/**
 * @public
 */
function parseLocJson({ content, filePath, ignoreString }) {
    const parsedFile = node_core_library_1.JsonFile.parseString(content);
    try {
        LOC_JSON_SCHEMA.validateObject(parsedFile, filePath, { ignoreSchemaField: true });
    }
    catch (e) {
        throw new Error(`The loc file is invalid. Error: ${e}`);
    }
    // Normalize file shape and possibly filter
    const newParsedFile = {};
    for (const [key, stringData] of Object.entries(parsedFile)) {
        if (!(ignoreString === null || ignoreString === void 0 ? void 0 : ignoreString(filePath, key))) {
            // Normalize entry shape. We allow the values to be plain strings as a format that can be handed
            // off to webpack builds that don't understand the comment syntax.
            newParsedFile[key] = typeof stringData === 'string' ? { value: stringData } : stringData;
        }
    }
    return newParsedFile;
}
//# sourceMappingURL=parseLocJson.js.map