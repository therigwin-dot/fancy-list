import { StringValuesTypingsGenerator, type IExportAsDefaultOptions, type ITypingsGeneratorBaseOptions } from '@rushstack/typings-generator';
import { type NewlineKind } from '@rushstack/node-core-library';
import type { IgnoreStringFunction } from './interfaces';
/**
 * @public
 */
export interface IInferInterfaceNameExportAsDefaultOptions extends Omit<IExportAsDefaultOptions, 'interfaceName'> {
    /**
     * When `exportAsDefault` is true and this option is true, the default export interface name will be inferred
     * from the filename.
     */
    inferInterfaceNameFromFilename?: boolean;
}
/**
 * @public
 */
export interface ITypingsGeneratorOptions extends ITypingsGeneratorBaseOptions {
    /**
     * Options for configuring the default export.
     */
    exportAsDefault?: boolean | IExportAsDefaultOptions | IInferInterfaceNameExportAsDefaultOptions;
    /**
     * Normalizes the line endings in .resx files to the specified kind.
     */
    resxNewlineNormalization?: NewlineKind | undefined;
    /**
     * If specified, the generator will write trimmed .json files to the specified folders.
     * The .json files will be written to the same relative path as the source file.
     * For example, if the source file is "&lt;root&gt;/foo/bar.resx", and the output folder is "dist",
     * the trimmed .json file will be written to "dist/foo/bar.resx.json".
     */
    trimmedJsonOutputFolders?: string[] | undefined;
    /**
     * If true, .resx files will not throw errors if comments are missing.
     */
    ignoreMissingResxComments?: boolean | undefined;
    /**
     * Optionally, provide a function that will be called for each string. If the function returns `true`
     * the string will not be included.
     */
    ignoreString?: IgnoreStringFunction;
    /**
     * Processes the raw text of a comment.
     * @param comment - The original text of the comment to process
     * @param relativeFilePath - The relative file path
     * @param stringName - The name of the string that the comment is for
     * @returns The processed comment
     */
    processComment?: (comment: string | undefined, relativeFilePath: string, stringName: string) => string | undefined;
}
/**
 * This is a simple tool that generates .d.ts files for .loc.json, .resx.json, .resjson, and .resx files.
 *
 * @public
 */
export declare class TypingsGenerator extends StringValuesTypingsGenerator {
    constructor(options: ITypingsGeneratorOptions);
}
//# sourceMappingURL=TypingsGenerator.d.ts.map