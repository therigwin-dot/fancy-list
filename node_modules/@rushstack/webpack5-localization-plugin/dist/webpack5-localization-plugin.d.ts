/// <reference types="node" />

import type { Chunk } from 'webpack';
import type { Compilation } from 'webpack';
import type { Compiler } from 'webpack';
import { ILocalizationFile } from '@rushstack/localization-utilities';
import type { IPseudolocaleOptions } from '@rushstack/localization-utilities';
import type { LoaderContext } from 'webpack';
import type { WebpackPluginInstance } from 'webpack';

/**
 * @public
 */
export declare interface IDefaultLocaleOptions {
    /**
     * This required property specifies the name of the locale used in the
     * `.resx`, `.loc.json`, and `.resjson` files in the source
     */
    localeName: string;
    /**
     * If this option is set to `true`, strings that are missing from
     * `localizedData.translatedStrings` will be provided by the default locale
     */
    fillMissingTranslationStrings?: boolean;
}

/**
 * @public
 */
export declare interface ILocaleData {
    [locFilePath: string]: ILocaleFileData;
}

/**
 * @public
 */
export declare interface ILocaleElementMap {
    [locale: string]: string;
}

/**
 * @public
 * Accepted formats:
 *  - A string containing the path to the translations in .resjson format (keys mapped directly to values)
 *  - An object mapping keys directly to values
 *  - A map mapping keys directly to values
 */
export declare type ILocaleFileData = string | ILocaleFileObject | ReadonlyMap<string, string>;

/**
 * @public
 */
export declare interface ILocaleFileObject {
    [stringName: string]: string;
}

/**
 * The options for localization.
 *
 * @public
 */
export declare interface ILocalizationPluginOptions {
    /**
     * Localization data.
     */
    localizedData: ILocalizedData;
    /**
     * This option is used to specify `.resx`, `.resx.json`, and `.loc.json` files that should not be processed by
     * this plugin.
     */
    globsToIgnore?: string[];
    /**
     * The value to replace the [locale] token with for chunks without localized strings. Defaults to "none"
     */
    noStringsLocaleName?: string;
    /**
     * A chunk of javascript to use to get the current locale at runtime. If specified, allows the runtime chunk
     * to be non-localized even if it has async localized chunks, as long as it does not directly contain strings.
     */
    runtimeLocaleExpression?: string;
    /**
     * Options for how localization stats data should be produced.
     */
    localizationStats?: ILocalizationStatsOptions;
    /**
     * Custom function for controlling how locale names are formatted based on the locale specified.
     * This is useful if you want to emit non-localized files to the root output directory instead
     * of a '/none' subdirectory.
     *
     * If combining with runtimeLocaleExpression, ensure that the runtime output of
     * runtimeLocaleExpression produces the same output as formatLocaleForFilename.
     */
    formatLocaleForFilename?: (locale: string) => string;
    /**
     * If set to true, update usages of [contenthash] to use the true hash of the file contents
     */
    realContentHash?: boolean;
}

/**
 * @public
 */
export declare interface ILocalizationStats {
    entrypoints: {
        [name: string]: ILocalizationStatsEntrypoint;
    };
    namedChunkGroups: {
        [name: string]: ILocalizationStatsChunkGroup;
    };
}

/**
 * @public
 */
export declare interface ILocalizationStatsChunkGroup {
    localizedAssets: ILocaleElementMap;
}

/**
 * @public
 */
export declare interface ILocalizationStatsEntrypoint {
    localizedAssets: ILocaleElementMap;
}

/**
 * Options for how localization stats data should be produced.
 *
 * @public
 */
export declare interface ILocalizationStatsOptions {
    /**
     * This option is used to designate a path at which a JSON file describing the localized
     * assets produced should be written.
     */
    dropPath?: string;
    /**
     * This option is used to specify a callback to be called with the stats data that would be
     * dropped at `localizationStats.dropPath` after compilation completes, and the compilation instance.
     */
    callback?: (stats: ILocalizationStats, compilation: Compilation) => void;
}

/**
 * @public
 */
export declare interface ILocalizedData {
    /**
     * Options for the locale used in the source localized data files.
     */
    defaultLocale: IDefaultLocaleOptions;
    /**
     * Use this parameter to specify the translated data.
     */
    translatedStrings: ILocalizedStrings;
    /**
     * Use this parameter to specify a function used to load translations missing from
     * the {@link ILocalizedData.translatedStrings} parameter.
     */
    resolveMissingTranslatedStrings?: (locales: string[], localizedFileKey: string, loaderContext: LoaderContext<{}>) => Promise<IResolvedMissingTranslations> | IResolvedMissingTranslations;
    /**
     * Options around including a passthrough locale.
     */
    passthroughLocale?: IPassthroughLocaleOptions;
    /**
     * Options for pseudo-localization.
     */
    pseudolocales?: IPseudolocalesOptions;
}

/**
 * @public
 */
export declare interface ILocalizedStrings {
    [locale: string]: ILocaleData;
}

/**
 * @public
 */
export declare interface ILocalizedWebpackChunk extends Chunk {
    localizedFiles?: {
        [locale: string]: string;
    };
}

/**
 * Options for the passthrough locale.
 *
 * @public
 */
export declare interface IPassthroughLocaleOptions {
    /**
     * If this is set to `true`, a passthrough locale will be included in the output
     */
    usePassthroughLocale?: boolean;
    /**
     * If {@link IPassthroughLocaleOptions.usePassthroughLocale} is set, use this name for the passthrough locale.
     * Defaults to "passthrough"
     */
    passthroughLocaleName?: string;
}

/**
 * Options for generated pseudolocales.
 *
 * @public
 */
export declare interface IPseudolocalesOptions {
    [pseudoLocaleName: string]: IPseudolocaleOptions;
}

/**
 * @public
 */
export declare type IResolvedMissingTranslations = ReadonlyMap<string, ILocaleFileData>;

/**
 * @public
 */
export declare interface _IStringPlaceholder {
    /**
     * The literal string that will be injected for later replacement.
     */
    value: string;
    /**
     * The identifier for this particular placeholder, for lookup.
     */
    suffix: string;
    /**
     * The values of this string in each output locale.
     */
    translations: ReadonlyMap<string, ReadonlyMap<string, string>>;
    /**
     * The key used to identify the source file containing the string.
     */
    locFilePath: string;
    /**
     * The identifier of the string within its original source file.
     */
    stringName: string;
}

/**
 * @public
 */
export declare interface ITrueHashPluginOptions {
    /**
     * A function that takes the contents of a file and returns a hash.
     */
    hashFunction?: (contents: string | Buffer) => string;
    /**
     * Optionally override the process assets stage for this plugin.
     */
    stageOverride?: number;
}

/**
 * This plugin facilitates localization in webpack.
 *
 * @public
 */
export declare class LocalizationPlugin implements WebpackPluginInstance {
    private readonly _locFiles;
    /**
     * @internal
     */
    readonly _options: ILocalizationPluginOptions;
    private readonly _resolvedTranslatedStringsFromOptions;
    private readonly _stringPlaceholderMap;
    private _passthroughLocaleName;
    private _defaultLocale;
    private _noStringsLocaleName;
    private _fillMissingTranslationStrings;
    private _formatLocaleForFilename;
    private readonly _pseudolocalizers;
    /**
     * The set of locales that have translations provided.
     */
    private _translatedLocales;
    constructor(options: ILocalizationPluginOptions);
    /**
     * Apply this plugin to the specified webpack compiler.
     */
    apply(compiler: Compiler): void;
    /**
     * @public
     *
     * @returns An object mapping the string keys to placeholders
     */
    addDefaultLocFileAsync(context: LoaderContext<{}>, localizedFileKey: string, localizedResourceData: ILocalizationFile): Promise<Record<string, string>>;
    /**
     * @public
     */
    getPlaceholder(localizedFileKey: string, stringName: string): _IStringPlaceholder | undefined;
    /**
     * @internal
     */
    getDataForSerialNumber(serialNumber: string): _IStringPlaceholder | undefined;
    private _addLocFileAndGetPlaceholders;
    private _addTranslations;
    private _initializeAndValidateOptions;
}

/**
 * @public
 */
export declare class TrueHashPlugin implements WebpackPluginInstance {
    private readonly _options;
    constructor(options?: ITrueHashPluginOptions);
    apply(compiler: Compiler): void;
}

export { }
