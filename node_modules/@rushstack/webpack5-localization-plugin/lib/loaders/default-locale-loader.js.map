{"version":3,"file":"default-locale-loader.js","sourceRoot":"","sources":["../../src/loaders/default-locale-loader.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,kDAA+C;AAC/C,8EAAyF;AAGzF,gFAA6E;AAE7E;;GAEG;AACH,sCAAsC;AACtC,MAAM,MAAM,GAAiD,UAE3D,OAAe;IAEf,MAAM,OAAO,GAAuB,IAAI,CAAC,UAAU,EAAE,CAAC;IAEtD,MAAM,WAAW,GAAsB,IAAA,qCAAY,EAAC;QAClD,GAAG,OAAO;QACV,OAAO;QACP,QAAQ,EAAE,IAAI,CAAC,YAAY;QAC3B,QAAQ,EAAE,IAAI,mBAAQ,CAAC,+CAAsB,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;KAClF,CAAC,CAAC;IAEH,MAAM,YAAY,GAAqC,EAAE,CAAC;IAC1D,KAAK,MAAM,CAAC,UAAU,EAAE,WAAW,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;QACpE,YAAY,CAAC,UAAU,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC;IAC/C,CAAC;IAED,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { LoaderContext, LoaderDefinitionFunction } from 'webpack';\nimport { Terminal } from '@rushstack/terminal';\nimport { type ILocalizationFile, parseLocFile } from '@rushstack/localization-utilities';\n\nimport type { IResxLoaderOptions } from './IResxLoaderOptions';\nimport { LoaderTerminalProvider } from '../utilities/LoaderTerminalProvider';\n\n/**\n * This loader passes through the raw untranslated strings and may be used without a LocalizationPlugin instance.\n */\n// eslint-disable-next-line func-style\nconst loader: LoaderDefinitionFunction<IResxLoaderOptions> = function (\n  this: LoaderContext<IResxLoaderOptions>,\n  content: string\n): string {\n  const options: IResxLoaderOptions = this.getOptions();\n\n  const locFileData: ILocalizationFile = parseLocFile({\n    ...options,\n    content,\n    filePath: this.resourcePath,\n    terminal: new Terminal(LoaderTerminalProvider.getTerminalProviderForLoader(this))\n  });\n\n  const resultObject: { [stringName: string]: string } = {};\n  for (const [stringName, stringValue] of Object.entries(locFileData)) {\n    resultObject[stringName] = stringValue.value;\n  }\n\n  return JSON.stringify(resultObject);\n};\n\nexport default loader;\n"]}