{"version":3,"file":"LoaderFactory.js","sourceRoot":"","sources":["../../src/loaders/LoaderFactory.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAY3D,oCAmCC;AAzCD,8DAAmF;AAMnF,SAAgB,YAAY,CAC1B,SAA8F;IAE9F,sCAAsC;IACtC,MAAM,MAAM,GAAgC,KAAK,WAE/C,OAAe;QAEf,MAAM,WAAW,GAAW,IAAI,CAAC,YAAY,CAAC;QAE9C,MAAM,cAAc,GAAuB,IAAA,sCAAiB,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE7E,MAAM,WAAW,GAAsB,SAAS,CAAC,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QAE7E,MAAM,OAAO,GAA2B,MAAM,cAAc,CAAC,sBAAsB,CACjF,IAAI,EACJ,WAAW,EACX,WAAW,CACZ,CAAC;QAEF,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,OAAQ,CAAC;QAE/B,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACjC,KAAK,iBAAiB,CAAC;YACvB,KAAK,gBAAgB;gBACnB,OAAO,mBAAmB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,4BAA4B,CAAC;YAChF;gBACE,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,oCAAoC,IAAI,eAAe,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBACtG,OAAO,EAAE,CAAC;QACd,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { LoaderContext, LoaderDefinitionFunction } from 'webpack';\n\nimport type { ILocalizationFile } from '@rushstack/localization-utilities';\n\nimport { getPluginInstance, type LocalizationPlugin } from '../LocalizationPlugin';\n\nexport interface IBaseLocLoaderOptions {\n  ignoreString?: (key: string) => boolean;\n}\n\nexport function createLoader<T extends IBaseLocLoaderOptions>(\n  parseFile: (content: string, filePath: string, context: LoaderContext<T>) => ILocalizationFile\n): LoaderDefinitionFunction<T> {\n  // eslint-disable-next-line func-style\n  const loader: LoaderDefinitionFunction<T> = async function (\n    this: LoaderContext<T>,\n    content: string\n  ): Promise<string> {\n    const locFilePath: string = this.resourcePath;\n\n    const pluginInstance: LocalizationPlugin = getPluginInstance(this._compiler);\n\n    const locFileData: ILocalizationFile = parseFile(content, locFilePath, this);\n\n    const strings: Record<string, string> = await pluginInstance.addDefaultLocFileAsync(\n      this,\n      locFilePath,\n      locFileData\n    );\n\n    const { type } = this._module!;\n\n    switch (type) {\n      case 'json':\n        return JSON.stringify(strings);\n      case 'javascript/auto':\n      case 'javascript/esm':\n        return `const strings = ${JSON.stringify(strings)};\\nexport default strings;`;\n      default:\n        this.emitError(new Error(`Unexpected localized module type ${type} for module ${this.resourcePath}`));\n        return '';\n    }\n  };\n\n  return loader;\n}\n"]}