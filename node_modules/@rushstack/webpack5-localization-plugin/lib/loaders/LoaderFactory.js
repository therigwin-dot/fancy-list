"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLoader = createLoader;
const LocalizationPlugin_1 = require("../LocalizationPlugin");
function createLoader(parseFile) {
    // eslint-disable-next-line func-style
    const loader = async function (content) {
        const locFilePath = this.resourcePath;
        const pluginInstance = (0, LocalizationPlugin_1.getPluginInstance)(this._compiler);
        const locFileData = parseFile(content, locFilePath, this);
        const strings = await pluginInstance.addDefaultLocFileAsync(this, locFilePath, locFileData);
        const { type } = this._module;
        switch (type) {
            case 'json':
                return JSON.stringify(strings);
            case 'javascript/auto':
            case 'javascript/esm':
                return `const strings = ${JSON.stringify(strings)};\nexport default strings;`;
            default:
                this.emitError(new Error(`Unexpected localized module type ${type} for module ${this.resourcePath}`));
                return '';
        }
    };
    return loader;
}
//# sourceMappingURL=LoaderFactory.js.map