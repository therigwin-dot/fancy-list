{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { LoaderContext, Compilation } from 'webpack';\nimport type { IPseudolocaleOptions } from '@rushstack/localization-utilities';\n\n/**\n * Options for the passthrough locale.\n *\n * @public\n */\nexport interface IPassthroughLocaleOptions {\n  /**\n   * If this is set to `true`, a passthrough locale will be included in the output\n   */\n  usePassthroughLocale?: boolean;\n\n  /**\n   * If {@link IPassthroughLocaleOptions.usePassthroughLocale} is set, use this name for the passthrough locale.\n   * Defaults to \"passthrough\"\n   */\n  passthroughLocaleName?: string;\n}\n\n/**\n * @public\n */\nexport interface IDefaultLocaleOptions {\n  /**\n   * This required property specifies the name of the locale used in the\n   * `.resx`, `.loc.json`, and `.resjson` files in the source\n   */\n  localeName: string;\n\n  /**\n   * If this option is set to `true`, strings that are missing from\n   * `localizedData.translatedStrings` will be provided by the default locale\n   */\n  fillMissingTranslationStrings?: boolean;\n}\n\n/**\n * Options for generated pseudolocales.\n *\n * @public\n */\nexport interface IPseudolocalesOptions {\n  [pseudoLocaleName: string]: IPseudolocaleOptions;\n}\n\n/**\n * @public\n */\nexport interface ILocalizedData {\n  /**\n   * Options for the locale used in the source localized data files.\n   */\n  defaultLocale: IDefaultLocaleOptions;\n\n  /**\n   * Use this parameter to specify the translated data.\n   */\n  translatedStrings: ILocalizedStrings;\n\n  /**\n   * Use this parameter to specify a function used to load translations missing from\n   * the {@link ILocalizedData.translatedStrings} parameter.\n   */\n  resolveMissingTranslatedStrings?: (\n    locales: string[],\n    localizedFileKey: string,\n    loaderContext: LoaderContext<{}>\n  ) => Promise<IResolvedMissingTranslations> | IResolvedMissingTranslations;\n\n  /**\n   * Options around including a passthrough locale.\n   */\n  passthroughLocale?: IPassthroughLocaleOptions;\n\n  /**\n   * Options for pseudo-localization.\n   */\n  pseudolocales?: IPseudolocalesOptions;\n}\n\n/**\n * Options for how localization stats data should be produced.\n *\n * @public\n */\nexport interface ILocalizationStatsOptions {\n  /**\n   * This option is used to designate a path at which a JSON file describing the localized\n   * assets produced should be written.\n   */\n  dropPath?: string;\n\n  /**\n   * This option is used to specify a callback to be called with the stats data that would be\n   * dropped at `localizationStats.dropPath` after compilation completes, and the compilation instance.\n   */\n  callback?: (stats: ILocalizationStats, compilation: Compilation) => void;\n}\n\n/**\n * The options for localization.\n *\n * @public\n */\nexport interface ILocalizationPluginOptions {\n  /**\n   * Localization data.\n   */\n  localizedData: ILocalizedData;\n\n  /**\n   * This option is used to specify `.resx`, `.resx.json`, and `.loc.json` files that should not be processed by\n   * this plugin.\n   */\n  globsToIgnore?: string[];\n\n  /**\n   * The value to replace the [locale] token with for chunks without localized strings. Defaults to \"none\"\n   */\n  noStringsLocaleName?: string;\n\n  /**\n   * A chunk of javascript to use to get the current locale at runtime. If specified, allows the runtime chunk\n   * to be non-localized even if it has async localized chunks, as long as it does not directly contain strings.\n   */\n  runtimeLocaleExpression?: string;\n\n  /**\n   * Options for how localization stats data should be produced.\n   */\n  localizationStats?: ILocalizationStatsOptions;\n\n  /**\n   * Custom function for controlling how locale names are formatted based on the locale specified.\n   * This is useful if you want to emit non-localized files to the root output directory instead\n   * of a '/none' subdirectory.\n   *\n   * If combining with runtimeLocaleExpression, ensure that the runtime output of\n   * runtimeLocaleExpression produces the same output as formatLocaleForFilename.\n   */\n  formatLocaleForFilename?: (locale: string) => string;\n\n  /**\n   * If set to true, update usages of [contenthash] to use the true hash of the file contents\n   */\n  realContentHash?: boolean;\n}\n\n/**\n * @public\n */\nexport interface ILocaleFileObject {\n  [stringName: string]: string;\n}\n\n/**\n * @public\n * Accepted formats:\n *  - A string containing the path to the translations in .resjson format (keys mapped directly to values)\n *  - An object mapping keys directly to values\n *  - A map mapping keys directly to values\n */\nexport type ILocaleFileData = string | ILocaleFileObject | ReadonlyMap<string, string>;\n\n/**\n * @public\n */\nexport type IResolvedMissingTranslations = ReadonlyMap<string, ILocaleFileData>;\n\n/**\n * @public\n */\nexport interface ILocaleData {\n  [locFilePath: string]: ILocaleFileData;\n}\n\n/**\n * @public\n */\nexport interface ILocalizedStrings {\n  [locale: string]: ILocaleData;\n}\n\n/**\n * @public\n */\nexport interface ILocaleElementMap {\n  [locale: string]: string;\n}\n\n/**\n * @public\n */\nexport interface ILocalizationStatsEntrypoint {\n  localizedAssets: ILocaleElementMap;\n}\n\n/**\n * @public\n */\nexport interface ILocalizationStatsChunkGroup {\n  localizedAssets: ILocaleElementMap;\n}\n\n/**\n * @public\n */\nexport interface ILocalizationStats {\n  entrypoints: { [name: string]: ILocalizationStatsEntrypoint };\n  namedChunkGroups: { [name: string]: ILocalizationStatsChunkGroup };\n}\n"]}