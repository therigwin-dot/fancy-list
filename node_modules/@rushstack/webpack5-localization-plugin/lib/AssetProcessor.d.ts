import type { Asset, AssetInfo, Chunk, Compilation, sources } from 'webpack';
import type { LocalizationPlugin } from './LocalizationPlugin';
type FormatLocaleForFilenameFn = (locale: string) => string;
export interface IProcessAssetOptionsBase {
    plugin: LocalizationPlugin;
    compilation: Compilation;
    cache: ReturnType<Compilation['getCache']>;
    chunk: Chunk;
    asset: Asset;
}
export interface IProcessNonLocalizedAssetOptions extends IProcessAssetOptionsBase {
    fileName: string;
    hasUrlGenerator: boolean;
    noStringsLocaleName: string;
    formatLocaleForFilenameFn: FormatLocaleForFilenameFn;
}
export interface IProcessLocalizedAssetOptions extends IProcessAssetOptionsBase {
    locales: Set<string>;
    fillMissingTranslationStrings: boolean;
    defaultLocale: string;
    passthroughLocaleName: string | undefined;
    filenameTemplate: Parameters<typeof Compilation.prototype.getAssetPath>[0];
    formatLocaleForFilenameFn: FormatLocaleForFilenameFn;
}
export interface IProcessAssetResult {
    filename: string;
    asset: sources.Source;
}
export declare const PLACEHOLDER_REGEX: RegExp;
export interface IProcessedAsset {
    filename: string;
    source: sources.CachedSource;
    info: AssetInfo;
}
export interface IProcessLocalizedAssetResult {
    localizedFiles: Record<string, string>;
    processedAssets: IProcessedAsset[];
}
export declare function processLocalizedAssetCachedAsync(options: IProcessLocalizedAssetOptions): Promise<Record<string, string>>;
export declare function processLocalizedAsset(options: IProcessLocalizedAssetOptions): IProcessLocalizedAssetResult;
export declare function processNonLocalizedAssetCachedAsync(options: IProcessNonLocalizedAssetOptions): Promise<void>;
export declare function processNonLocalizedAsset(options: IProcessNonLocalizedAssetOptions): IProcessedAsset;
export {};
//# sourceMappingURL=AssetProcessor.d.ts.map