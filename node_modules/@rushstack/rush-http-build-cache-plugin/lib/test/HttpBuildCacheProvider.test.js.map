{"version":3,"file":"HttpBuildCacheProvider.test.js","sourceRoot":"","sources":["../../src/test/HttpBuildCacheProvider.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\njest.mock('@rushstack/rush-sdk/lib/utilities/WebClient', () => {\n  return jest.requireActual('@microsoft/rush-lib/lib/utilities/WebClient');\n});\n\nimport { type RushSession, EnvironmentConfiguration } from '@rushstack/rush-sdk';\nimport { StringBufferTerminalProvider, Terminal } from '@rushstack/terminal';\nimport { WebClient } from '@rushstack/rush-sdk/lib/utilities/WebClient';\n\nimport { HttpBuildCacheProvider, type IHttpBuildCacheProviderOptions } from '../HttpBuildCacheProvider';\n\nconst EXAMPLE_OPTIONS: IHttpBuildCacheProviderOptions = {\n  url: 'https://buildcache.example.acme.com',\n  tokenHandler: {\n    exec: 'node',\n    args: ['tokenHandler.js']\n  },\n  uploadMethod: 'POST',\n  isCacheWriteAllowed: false,\n  pluginName: 'example-plugin',\n  rushJsonFolder: '/repo',\n  minHttpRetryDelayMs: 1\n};\n\ntype FetchFnType = Parameters<typeof WebClient.mockRequestFn>[0];\n\ndescribe('HttpBuildCacheProvider', () => {\n  let terminalBuffer: StringBufferTerminalProvider;\n  let terminal!: Terminal;\n  let fetchFn: jest.Mock;\n\n  beforeEach(() => {\n    terminalBuffer = new StringBufferTerminalProvider();\n    terminal = new Terminal(terminalBuffer);\n    fetchFn = jest.fn();\n    WebClient.mockRequestFn(fetchFn as unknown as FetchFnType);\n  });\n\n  afterEach(() => {\n    WebClient.resetMockRequestFn();\n  });\n\n  describe('tryGetCacheEntryBufferByIdAsync', () => {\n    it('prints warning if read credentials are not available', async () => {\n      jest.spyOn(EnvironmentConfiguration, 'buildCacheCredential', 'get').mockReturnValue(undefined);\n\n      const session: RushSession = {} as RushSession;\n      const provider = new HttpBuildCacheProvider(EXAMPLE_OPTIONS, session);\n\n      mocked(fetchFn).mockResolvedValue({\n        status: 401,\n        statusText: 'Unauthorized',\n        ok: false\n      });\n\n      const result = await provider.tryGetCacheEntryBufferByIdAsync(terminal, 'some-key');\n      expect(result).toBe(undefined);\n      expect(fetchFn).toHaveBeenCalledTimes(1);\n      expect(fetchFn).toHaveBeenNthCalledWith(\n        1,\n        'https://buildcache.example.acme.com/some-key',\n        expect.objectContaining({\n          method: 'GET',\n          redirect: 'follow'\n        })\n      );\n      expect(terminalBuffer.getWarningOutput()).toMatchInlineSnapshot(\n        `\"Error getting cache entry: Error: Credentials for https://buildcache.example.acme.com/ have not been provided.[n]In CI, verify that RUSH_BUILD_CACHE_CREDENTIAL contains a valid Authorization header value.[n][n]For local developers, run:[n][n]    rush update-cloud-credentials --interactive[n][n]\"`\n      );\n    });\n\n    it('attempts up to 3 times to download a cache entry', async () => {\n      jest.spyOn(EnvironmentConfiguration, 'buildCacheCredential', 'get').mockReturnValue(undefined);\n\n      const session: RushSession = {} as RushSession;\n      const provider = new HttpBuildCacheProvider(EXAMPLE_OPTIONS, session);\n\n      mocked(fetchFn).mockResolvedValueOnce({\n        status: 500,\n        statusText: 'InternalServiceError',\n        ok: false\n      });\n      mocked(fetchFn).mockResolvedValueOnce({\n        status: 503,\n        statusText: 'ServiceUnavailable',\n        ok: false\n      });\n      mocked(fetchFn).mockResolvedValueOnce({\n        status: 504,\n        statusText: 'BadGateway',\n        ok: false\n      });\n\n      const result = await provider.tryGetCacheEntryBufferByIdAsync(terminal, 'some-key');\n      expect(result).toBe(undefined);\n      expect(fetchFn).toHaveBeenCalledTimes(3);\n      expect(fetchFn).toHaveBeenNthCalledWith(\n        1,\n        'https://buildcache.example.acme.com/some-key',\n        expect.objectContaining({\n          method: 'GET',\n          redirect: 'follow'\n        })\n      );\n      expect(fetchFn).toHaveBeenNthCalledWith(\n        2,\n        'https://buildcache.example.acme.com/some-key',\n        expect.objectContaining({\n          method: 'GET',\n          redirect: 'follow'\n        })\n      );\n      expect(fetchFn).toHaveBeenNthCalledWith(\n        3,\n        'https://buildcache.example.acme.com/some-key',\n        expect.objectContaining({\n          method: 'GET',\n          redirect: 'follow'\n        })\n      );\n      expect(terminalBuffer.getWarningOutput()).toMatchInlineSnapshot(\n        `\"Could not get cache entry: HTTP 504: BadGateway[n]\"`\n      );\n    });\n  });\n});\n"]}