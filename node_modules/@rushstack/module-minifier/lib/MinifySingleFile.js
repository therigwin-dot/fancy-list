"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.minifySingleFileAsync = minifySingleFileAsync;
const terser_1 = require("terser");
const MinifiedIdentifier_1 = require("./MinifiedIdentifier");
const nth_identifier = {
    get: MinifiedIdentifier_1.getIdentifier
};
/**
 * Minifies a single chunk of code. Factored out for reuse between WorkerPoolMinifier and LocalMinifier
 * @internal
 */
async function minifySingleFileAsync(request, terserOptions) {
    const { code, nameForMap, hash, externals } = request;
    try {
        const { format: rawFormat, output: rawOutput, mangle: originalMangle, ...remainingOptions } = terserOptions;
        const format = rawFormat || rawOutput || {};
        const mangle = originalMangle === false ? false : typeof originalMangle === 'object' ? { ...originalMangle } : {};
        const finalOptions = {
            ...remainingOptions,
            format,
            mangle
        };
        format.comments = false;
        if (mangle) {
            mangle.nth_identifier = nth_identifier;
        }
        if (mangle && externals) {
            mangle.reserved = mangle.reserved ? externals.concat(mangle.reserved) : externals;
        }
        // SourceMap is only generated if nameForMap is provided- overrides terserOptions.sourceMap
        if (nameForMap) {
            finalOptions.sourceMap = {
                includeSources: true,
                asObject: true
            };
        }
        else {
            finalOptions.sourceMap = false;
        }
        const minified = await (0, terser_1.minify)({
            [nameForMap || 'code']: code
        }, finalOptions);
        return {
            error: undefined,
            code: minified.code,
            map: minified.map,
            hash
        };
    }
    catch (error) {
        // eslint-disable-next-line no-console
        console.error(error);
        return {
            error: error,
            code: undefined,
            map: undefined,
            hash
        };
    }
}
//# sourceMappingURL=MinifySingleFile.js.map