{"version":3,"file":"MessagePortMinifier.js","sourceRoot":"","sources":["../src/MessagePortMinifier.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,mCAA8B;AAW9B;;;GAGG;AACH,MAAa,mBAAmB;IAK9B,YAAmB,IAA+B;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,OAAmC,EAAE,QAAqC;QACtF,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;QAEzB,MAAM,SAAS,GAA8C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvF,IAAI,SAAS,EAAE,CAAC;YACd,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEtC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,YAAY;QACvB,MAAM,iBAAiB,GAAoB,IAAA,aAAI,EAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAA+B,CAAC;QACpG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QACpC,MAAM,UAAU,GAAW,MAAM,iBAAiB,CAAC;QAEnD,MAAM,SAAS,GAA+C,IAAI,CAAC,UAAU,CAAC;QAE9E,SAAS,OAAO,CAAC,OAAmD;YAClE,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;gBAChC,MAAM,mBAAmB,GAAkC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAE,CAAC;gBACxF,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC/B,KAAK,MAAM,QAAQ,IAAI,mBAAmB,EAAE,CAAC;oBAC3C,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACpB,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACjC,MAAM,eAAe,GAA2C,KAAK,IAAI,EAAE;YACzE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAClC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QACpB,CAAC,CAAC;QACF,OAAO;YACL,UAAU;YACV,eAAe;YACf,UAAU,EAAE,eAAe;SAC5B,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,gEAAgE;IACzD,KAAK,CAAC,OAAO;QAClB,OAAO,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;IACnC,CAAC;CACF;AApED,kDAoEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { once } from 'events';\nimport type * as WorkerThreads from 'worker_threads';\n\nimport type {\n  IMinifierConnection,\n  IModuleMinificationCallback,\n  IModuleMinificationRequest,\n  IModuleMinificationResult,\n  IModuleMinifier\n} from './types';\n\n/**\n * Minifier implementation that outsources requests to the other side of a MessagePort\n * @public\n */\nexport class MessagePortMinifier implements IModuleMinifier {\n  public readonly port: WorkerThreads.MessagePort;\n\n  private readonly _callbacks: Map<string, IModuleMinificationCallback[]>;\n\n  public constructor(port: WorkerThreads.MessagePort) {\n    this.port = port;\n    this._callbacks = new Map();\n  }\n\n  /**\n   * No-op code transform.\n   * @param request - The request to process\n   * @param callback - The callback to invoke\n   */\n  public minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void {\n    const { hash } = request;\n\n    const callbacks: IModuleMinificationCallback[] | undefined = this._callbacks.get(hash);\n    if (callbacks) {\n      callbacks.push(callback);\n      return;\n    }\n\n    this._callbacks.set(hash, [callback]);\n\n    this.port.postMessage(request);\n  }\n\n  /**\n   * {@inheritdoc IModuleMinifier.connectAsync}\n   */\n  public async connectAsync(): Promise<IMinifierConnection> {\n    const configHashPromise: Promise<string> = once(this.port, 'message') as unknown as Promise<string>;\n    this.port.postMessage('initialize');\n    const configHash: string = await configHashPromise;\n\n    const callbacks: Map<string, IModuleMinificationCallback[]> = this._callbacks;\n\n    function handler(message: IModuleMinificationResult | number | false): void {\n      if (typeof message === 'object') {\n        const callbacksForRequest: IModuleMinificationCallback[] = callbacks.get(message.hash)!;\n        callbacks.delete(message.hash);\n        for (const callback of callbacksForRequest) {\n          callback(message);\n        }\n      }\n    }\n\n    this.port.on('message', handler);\n    const disconnectAsync: IMinifierConnection['disconnectAsync'] = async () => {\n      this.port.off('message', handler);\n      this.port.close();\n    };\n    return {\n      configHash,\n      disconnectAsync,\n      disconnect: disconnectAsync\n    };\n  }\n\n  /**\n   * @deprecated Use {@link MessagePortMinifier.connectAsync} instead\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public async connect(): Promise<IMinifierConnection> {\n    return await this.connectAsync();\n  }\n}\n"]}