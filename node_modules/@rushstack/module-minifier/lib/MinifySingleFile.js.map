{"version":3,"file":"MinifySingleFile.js","sourceRoot":"","sources":["../src/MinifySingleFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAgB3D,sDAmEC;AAjFD,mCAAqG;AAGrG,6DAAqD;AAGrD,MAAM,cAAc,GAA4B;IAC9C,GAAG,EAAE,kCAAa;CACnB,CAAC;AAEF;;;GAGG;AACI,KAAK,UAAU,qBAAqB,CACzC,OAAmC,EACnC,aAA4B;IAE5B,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;IAEtD,IAAI,CAAC;QACH,MAAM,EACJ,MAAM,EAAE,SAAS,EACjB,MAAM,EAAE,SAAS,EACjB,MAAM,EAAE,cAAc,EACtB,GAAG,gBAAgB,EACpB,GAAG,aAAa,CAAC;QAElB,MAAM,MAAM,GAA4B,SAAS,IAAI,SAAS,IAAI,EAAE,CAAC;QAErE,MAAM,MAAM,GACV,cAAc,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,cAAc,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,cAAc,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAErG,MAAM,YAAY,GAAkB;YAClC,GAAG,gBAAgB;YACnB,MAAM;YACN,MAAM;SACP,CAAC;QACF,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;QAExB,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;QACzC,CAAC;QAED,IAAI,MAAM,IAAI,SAAS,EAAE,CAAC;YACxB,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACpF,CAAC;QAED,2FAA2F;QAC3F,IAAI,UAAU,EAAE,CAAC;YACf,YAAY,CAAC,SAAS,GAAG;gBACvB,cAAc,EAAE,IAAI;gBACpB,QAAQ,EAAE,IAAI;aACf,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC;QACjC,CAAC;QAED,MAAM,QAAQ,GAAiB,MAAM,IAAA,eAAM,EACzC;YACE,CAAC,UAAU,IAAI,MAAM,CAAC,EAAE,IAAI;SAC7B,EACD,YAAY,CACb,CAAC;QAEF,OAAO;YACL,KAAK,EAAE,SAAS;YAChB,IAAI,EAAE,QAAQ,CAAC,IAAK;YACpB,GAAG,EAAE,QAAQ,CAAC,GAA8B;YAC5C,IAAI;SACL,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,sCAAsC;QACtC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,OAAO;YACL,KAAK,EAAE,KAAc;YACrB,IAAI,EAAE,SAAS;YACf,GAAG,EAAE,SAAS;YACd,IAAI;SACL,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { minify, type MinifyOptions, type MinifyOutput, type SimpleIdentifierMangler } from 'terser';\nimport type { RawSourceMap } from 'source-map';\n\nimport { getIdentifier } from './MinifiedIdentifier';\nimport type { IModuleMinificationRequest, IModuleMinificationResult } from './types';\n\nconst nth_identifier: SimpleIdentifierMangler = {\n  get: getIdentifier\n};\n\n/**\n * Minifies a single chunk of code. Factored out for reuse between WorkerPoolMinifier and LocalMinifier\n * @internal\n */\nexport async function minifySingleFileAsync(\n  request: IModuleMinificationRequest,\n  terserOptions: MinifyOptions\n): Promise<IModuleMinificationResult> {\n  const { code, nameForMap, hash, externals } = request;\n\n  try {\n    const {\n      format: rawFormat,\n      output: rawOutput,\n      mangle: originalMangle,\n      ...remainingOptions\n    } = terserOptions;\n\n    const format: MinifyOptions['format'] = rawFormat || rawOutput || {};\n\n    const mangle: MinifyOptions['mangle'] =\n      originalMangle === false ? false : typeof originalMangle === 'object' ? { ...originalMangle } : {};\n\n    const finalOptions: MinifyOptions = {\n      ...remainingOptions,\n      format,\n      mangle\n    };\n    format.comments = false;\n\n    if (mangle) {\n      mangle.nth_identifier = nth_identifier;\n    }\n\n    if (mangle && externals) {\n      mangle.reserved = mangle.reserved ? externals.concat(mangle.reserved) : externals;\n    }\n\n    // SourceMap is only generated if nameForMap is provided- overrides terserOptions.sourceMap\n    if (nameForMap) {\n      finalOptions.sourceMap = {\n        includeSources: true,\n        asObject: true\n      };\n    } else {\n      finalOptions.sourceMap = false;\n    }\n\n    const minified: MinifyOutput = await minify(\n      {\n        [nameForMap || 'code']: code\n      },\n      finalOptions\n    );\n\n    return {\n      error: undefined,\n      code: minified.code!,\n      map: minified.map as unknown as RawSourceMap,\n      hash\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    return {\n      error: error as Error,\n      code: undefined,\n      map: undefined,\n      hash\n    };\n  }\n}\n"]}