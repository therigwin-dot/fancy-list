{"version":3,"file":"NonProjectConfigurationFile.js","sourceRoot":"","sources":["../src/NonProjectConfigurationFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAA0D;AAI1D,mEAAgE;AAEhE;;GAEG;AACH,MAAa,2BAAgD,SAAQ,6CAGpE;IACC;;;OAGG;IACI,qBAAqB,CAAC,QAAmB,EAAE,QAAgB;QAChE,OAAO,IAAI,CAAC,oCAAoC,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,GAAG,EAAU,EAAE,SAAS,CAAC,CAAC;IACrG,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,0BAA0B,CACrC,QAAmB,EACnB,QAAgB;QAEhB,OAAO,MAAM,IAAI,CAAC,yCAAyC,CACzD,QAAQ,EACR,QAAQ,EACR,IAAI,GAAG,EAAU,EACjB,SAAS,CACV,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,wBAAwB,CAAC,QAAmB,EAAE,QAAgB;QACnE,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACxD,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,8BAAU,CAAC,eAAe,CAAC,CAAU,CAAC,EAAE,CAAC;gBAC3C,OAAO,SAAS,CAAC;YACnB,CAAC;YACD,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,6BAA6B,CACxC,QAAmB,EACnB,QAAgB;QAEhB,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnE,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,8BAAU,CAAC,eAAe,CAAC,CAAU,CAAC,EAAE,CAAC;gBAC3C,OAAO,SAAS,CAAC;YACnB,CAAC;YACD,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAES,8BAA8B,CACtC,QAAmB,EACnB,SAAqB,EACrB,6BAA0C;QAE1C,uFAAuF;QACvF,OAAO,SAAS,CAAC;IACnB,CAAC;IAES,KAAK,CAAC,mCAAmC,CACjD,QAAmB,EACnB,SAAqB,EACrB,6BAA0C;QAE1C,uFAAuF;QACvF,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA9ED,kEA8EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem } from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\nimport type { IRigConfig } from '@rushstack/rig-package';\n\nimport { ConfigurationFileBase } from './ConfigurationFileBase';\n\n/**\n * @beta\n */\nexport class NonProjectConfigurationFile<TConfigurationFile> extends ConfigurationFileBase<\n  TConfigurationFile,\n  {}\n> {\n  /**\n   * Load the configuration file at the specified absolute path, automatically resolving\n   * `extends` properties. Will throw an error if the file cannot be found.\n   */\n  public loadConfigurationFile(terminal: ITerminal, filePath: string): TConfigurationFile {\n    return this._loadConfigurationFileInnerWithCache(terminal, filePath, new Set<string>(), undefined);\n  }\n\n  /**\n   * Load the configuration file at the specified absolute path, automatically resolving\n   * `extends` properties. Will throw an error if the file cannot be found.\n   */\n  public async loadConfigurationFileAsync(\n    terminal: ITerminal,\n    filePath: string\n  ): Promise<TConfigurationFile> {\n    return await this._loadConfigurationFileInnerWithCacheAsync(\n      terminal,\n      filePath,\n      new Set<string>(),\n      undefined\n    );\n  }\n\n  /**\n   * This function is identical to {@link NonProjectConfigurationFile.loadConfigurationFile}, except\n   * that it returns `undefined` instead of throwing an error if the configuration file cannot be found.\n   */\n  public tryLoadConfigurationFile(terminal: ITerminal, filePath: string): TConfigurationFile | undefined {\n    try {\n      return this.loadConfigurationFile(terminal, filePath);\n    } catch (e) {\n      if (FileSystem.isNotExistError(e as Error)) {\n        return undefined;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * This function is identical to {@link NonProjectConfigurationFile.loadConfigurationFileAsync}, except\n   * that it returns `undefined` instead of throwing an error if the configuration file cannot be found.\n   */\n  public async tryLoadConfigurationFileAsync(\n    terminal: ITerminal,\n    filePath: string\n  ): Promise<TConfigurationFile | undefined> {\n    try {\n      return await this.loadConfigurationFileAsync(terminal, filePath);\n    } catch (e) {\n      if (FileSystem.isNotExistError(e as Error)) {\n        return undefined;\n      }\n      throw e;\n    }\n  }\n\n  protected _tryLoadConfigurationFileInRig(\n    terminal: ITerminal,\n    rigConfig: IRigConfig,\n    visitedConfigurationFilePaths: Set<string>\n  ): TConfigurationFile | undefined {\n    // This is a no-op because we don't support rigging for non-project configuration files\n    return undefined;\n  }\n\n  protected async _tryLoadConfigurationFileInRigAsync(\n    terminal: ITerminal,\n    rigConfig: IRigConfig,\n    visitedConfigurationFilePaths: Set<string>\n  ): Promise<TConfigurationFile | undefined> {\n    // This is a no-op because we don't support rigging for non-project configuration files\n    return undefined;\n  }\n}\n"]}