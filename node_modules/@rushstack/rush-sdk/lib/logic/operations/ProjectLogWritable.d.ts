import { TerminalWritable, type ITerminalChunk } from '@rushstack/terminal';
import type { RushConfigurationProject } from '../../api/RushConfigurationProject';
export interface IProjectLogWritableOptions {
    logFilePaths: ILogFilePaths;
    enableChunkedOutput?: boolean;
}
export interface ILogFileNames {
    textFileName: string;
    jsonlFileName: string;
    errorFileName: string;
}
/**
 * Information about the log files for an operation.
 *
 * @alpha
 */
export interface ILogFilePaths {
    /**
     * The absolute path to the folder containing the text log files.
     * Provided as a convenience since it is an intermediary value of producing the text log file path.
     */
    textFolder: string;
    /**
     * The absolute path to the folder containing the JSONL log files.
     * Provided as a convenience since it is an intermediary value of producing the jsonl log file path.
     */
    jsonlFolder: string;
    /**
     * The absolute path to the merged (interleaved stdout and stderr) text log.
     * ANSI escape codes have been stripped.
     */
    text: string;
    /**
     * The absolute path to the stderr text log.
     * ANSI escape codes have been stripped.
     */
    error: string;
    /**
     * The absolute path to the JSONL log. ANSI escape codes are left intact to be able to reproduce the console output.
     */
    jsonl: string;
}
export interface IGetLogFilePathsOptions {
    project: Pick<RushConfigurationProject, 'projectFolder' | 'packageName'>;
    logFilenameIdentifier: string;
}
/**
 * A terminal stream that writes all log chunks to a JSONL format so they can be faithfully reconstructed
 *  during build cache restores. This is used for adding warning + error messages in cobuilds where the original
 *  logs cannot be completely restored from the existing `all.log` and `error.log` files.
 *
 * Example output:
 * libraries/rush-lib/.rush/temp/operations/rush-lib._phase_build.chunks.jsonl
 * ```
 * {"kind":"O","text":"Invoking: heft run --only build -- --clean \n"}
 * {"kind":"O","text":" ---- build started ---- \n"}
 * {"kind":"O","text":"[build:clean] Deleted 0 files and 5 folders\n"}
 * {"kind":"O","text":"[build:typescript] Using TypeScript version 5.4.2\n"}
 * {"kind":"O","text":"[build:lint] Using ESLint version 8.57.0\n"}
 * {"kind":"E","text":"[build:lint] Warning: libraries/rush-lib/src/logic/operations/LogChunksWritable.ts:15:7 - (@typescript-eslint/typedef) Expected test to have a type annotation.\n"}
 * {"kind":"E","text":"[build:lint] Warning: libraries/rush-lib/src/logic/operations/LogChunksWritable.ts:15:7 - (@typescript-eslint/no-unused-vars) 'test' is assigned a value but never used.\n"}
 * {"kind":"O","text":"[build:typescript] Copied 1138 folders or files and linked 0 files\n"}
 * {"kind":"O","text":"[build:webpack] Using Webpack version 5.82.1\n"}
 * {"kind":"O","text":"[build:webpack] Running Webpack compilation\n"}
 * {"kind":"O","text":"[build:api-extractor] Using API Extractor version 7.43.1\n"}
 * {"kind":"O","text":"[build:api-extractor] Analysis will use the bundled TypeScript version 5.4.2\n"}
 * {"kind":"O","text":"[build:copy-mock-flush-telemetry-plugin] Copied 1260 folders or files and linked 5 files\n"}
 * {"kind":"O","text":" ---- build finished (6.856s) ---- \n"}
 * {"kind":"O","text":"-------------------- Finished (6.858s) --------------------\n"}
 * ```
 */
export declare class JsonLFileWritable extends TerminalWritable {
    readonly logPath: string;
    private _writer;
    constructor(logPath: string);
    writeChunk(chunk: ITerminalChunk): void;
    protected onWriteChunk(chunk: ITerminalChunk): void;
    protected onClose(): void;
}
/**
 * A terminal stream that writes two text log files: one with interleaved stdout and stderr, and one with just stderr.
 */
export declare class SplitLogFileWritable extends TerminalWritable {
    readonly logPath: string;
    readonly errorLogPath: string;
    private _logWriter;
    private _errorLogWriter;
    constructor(logPath: string, errorLogPath: string);
    writeChunk(chunk: ITerminalChunk): void;
    protected onWriteChunk(chunk: ITerminalChunk): void;
    protected onClose(): void;
}
/**
 * Initializes the project log files for a project. Produces a combined log file, an error log file, and optionally a
 * chunks file that can be used to reconstrct the original console output.
 * @param options - The options to initialize the project log files.
 * @returns The terminal writable stream that will write to the log files.
 */
export declare function initializeProjectLogFilesAsync(options: IProjectLogWritableOptions): Promise<TerminalWritable>;
/**
 * @internal
 *
 * @param packageName - The raw package name
 * @param logFilenameIdentifier - The identifier to append to the log file name (typically the phase name)
 * @returns The base names of the log files
 */
export declare function getLogfileBaseNames(packageName: string, logFilenameIdentifier: string): ILogFileNames;
/**
 * @internal
 *
 * @param projectFolder - The absolute path of the project folder
 * @returns The absolute paths of the log folders for regular and chunked logs
 */
export declare function getProjectLogFolders(projectFolder: string): Pick<ILogFilePaths, 'textFolder' | 'jsonlFolder'>;
/**
 * @internal
 *
 * @param options - The options to get the log file paths
 * @returns All information about log file paths for the project and log identifier
 */
export declare function getProjectLogFilePaths(options: IGetLogFilePathsOptions): ILogFilePaths;
//# sourceMappingURL=ProjectLogWritable.d.ts.map