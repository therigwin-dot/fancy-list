import { type JsonObject, type IPackageJson } from '@rushstack/node-core-library';
import type { PackageManagerName } from './packageManager/PackageManager';
import type { RushConfiguration } from './RushConfiguration';
import type { Subspace } from './Subspace';
import { FlagFile } from './FlagFile';
/**
 * This represents the JSON data structure for the "last-install.flag" file.
 */
export interface ILastInstallFlagJson {
    /**
     * Current node version
     */
    node?: string;
    /**
     * Current package manager name
     */
    packageManager?: PackageManagerName;
    /**
     * Current package manager version
     */
    packageManagerVersion: string;
    /**
     * Current rush json folder
     */
    rushJsonFolder: string;
    /**
     * The content of package.json, used in the flag file of autoinstaller
     */
    packageJson?: IPackageJson;
    /**
     * Same with pnpmOptions.pnpmStorePath in rush.json
     */
    storePath?: string;
    /**
     * An experimental flag used by cleanInstallAfterNpmrcChanges
     */
    npmrcHash?: string;
    /**
     * True when "useWorkspaces" is true in rush.json
     */
    workspaces?: boolean;
    /**
     * True when user explicitly specify "--ignore-scripts" CLI parameter or deferredInstallationScripts
     */
    ignoreScripts?: boolean;
    /**
     * When specified, it is a list of selected projects during partial install
     * It is undefined when full install
     */
    selectedProjectNames?: string[];
    /**
     * pnpm-sync-lib version
     */
    pnpmSync?: string;
}
interface ILockfileValidityCheckOptions {
    statePropertiesToIgnore?: (keyof ILastInstallFlagJson)[];
    rushVerb?: string;
}
/**
 * A helper class for managing last-install flags, which are persistent and
 * indicate that something installed in the folder was successfully completed.
 * It also compares state, so that if something like the Node.js version has changed,
 * it can invalidate the last install.
 */
export declare class LastInstallFlag extends FlagFile<Partial<ILastInstallFlagJson>> {
    /**
     * Creates a new LastInstall flag
     * @param folderPath - the folder that this flag is managing
     * @param state - optional, the state that should be managed or compared
     */
    constructor(folderPath: string, state?: Partial<ILastInstallFlagJson>);
    /**
     * Returns true if the file exists and the contents match the current state.
     */
    isValidAsync(): Promise<boolean>;
    /**
     * Same as isValid(), but with an additional check:  If the current state is not equal to the previous
     * state, and an the current state causes an error, then throw an exception with a friendly message.
     *
     * @internal
     */
    checkValidAndReportStoreIssuesAsync(options: ILockfileValidityCheckOptions & {
        rushVerb: string;
    }): Promise<boolean>;
    private _isValidAsync;
    /**
     * Merge new data into current state by "merge"
     */
    mergeFromObject(data: JsonObject): void;
}
/**
 * Gets the LastInstall flag and sets the current state. This state is used to compare
 * against the last-known-good state tracked by the LastInstall flag.
 * @param rushConfiguration - the configuration of the Rush repo to get the install
 * state from
 *
 * @internal
 */
export declare function getCommonTempFlag(rushConfiguration: RushConfiguration, subspace: Subspace, extraState?: Record<string, string>): LastInstallFlag;
export {};
//# sourceMappingURL=LastInstallFlag.d.ts.map