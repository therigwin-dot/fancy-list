{"version":3,"file":"TypingsGenerator.js","sourceRoot":"","sources":["../src/TypingsGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, Path, NewlineKind, Async } from '@rushstack/node-core-library';\nimport { type ITerminal, Terminal, ConsoleTerminalProvider } from '@rushstack/terminal';\nimport glob from 'fast-glob';\nimport * as path from 'path';\nimport { EOL } from 'os';\nimport * as chokidar from 'chokidar';\n\n/**\n * @public\n */\nexport interface ITypingsGeneratorBaseOptions {\n  srcFolder: string;\n  generatedTsFolder: string;\n  secondaryGeneratedTsFolders?: string[];\n  globsToIgnore?: string[];\n  terminal?: ITerminal;\n}\n\n/**\n * @public\n */\nexport interface ITypingsGeneratorOptionsWithoutReadFile<\n  TTypingsResult = string | undefined,\n  TFileContents = string\n> extends ITypingsGeneratorBaseOptions {\n  fileExtensions: string[];\n  parseAndGenerateTypings: (\n    fileContents: TFileContents,\n    filePath: string,\n    relativePath: string\n  ) => TTypingsResult | Promise<TTypingsResult>;\n  getAdditionalOutputFiles?: (relativePath: string) => string[];\n}\n\n/**\n * @public\n */\nexport type ReadFile<TFileContents = string> = (\n  filePath: string,\n  relativePath: string\n) => Promise<TFileContents> | TFileContents;\n\n/**\n * @public\n */\nexport interface ITypingsGeneratorOptions<\n  TTypingsResult = string | undefined,\n  TFileContents extends string = string\n> extends ITypingsGeneratorOptionsWithoutReadFile<TTypingsResult, TFileContents> {\n  readFile?: ReadFile<TFileContents>;\n}\n\n/**\n * Options for a TypingsGenerator that needs to customize how files are read.\n *\n * @public\n */\nexport interface ITypingsGeneratorOptionsWithCustomReadFile<\n  TTypingsResult = string | undefined,\n  TFileContents = string\n> extends ITypingsGeneratorOptionsWithoutReadFile<TTypingsResult, TFileContents> {\n  readFile: ReadFile<TFileContents>;\n}\n\n/**\n * This is a simple tool that generates .d.ts files for non-TS files.\n *\n * @public\n */\nexport class TypingsGenerator<TFileContents = string> {\n  // Map of resolved consumer file path -> Set<resolved dependency file path>\n  private readonly _dependenciesOfFile: Map<string, Set<string>>;\n\n  // Map of resolved dependency file path -> Set<resolved consumer file path>\n  private readonly _consumersOfFile: Map<string, Set<string>>;\n\n  // Map of resolved file path -> relative file path\n  private readonly _relativePaths: Map<string, string>;\n\n  protected readonly _options: ITypingsGeneratorOptionsWithCustomReadFile<string | undefined, TFileContents>;\n\n  protected readonly terminal: ITerminal;\n\n  /**\n   * The folder path that contains all input source files.\n   */\n  public readonly sourceFolderPath: string;\n\n  /**\n   * The glob pattern used to find input files to process.\n   */\n  public readonly inputFileGlob: string;\n\n  /**\n   * The glob patterns that should be ignored when finding input files to process.\n   */\n  public readonly ignoredFileGlobs: readonly string[];\n\n  public constructor(\n    options: TFileContents extends string\n      ? ITypingsGeneratorOptions<string | undefined, TFileContents>\n      : never\n  );\n  public constructor(options: ITypingsGeneratorOptionsWithCustomReadFile<string | undefined, TFileContents>);\n  public constructor(options: ITypingsGeneratorOptionsWithCustomReadFile<string | undefined, TFileContents>) {\n    this._options = {\n      ...options,\n      readFile:\n        options.readFile ??\n        ((filePath: string, relativePath: string): Promise<TFileContents> =>\n          FileSystem.readFileAsync(filePath) as Promise<TFileContents>)\n    };\n\n    if (!options.generatedTsFolder) {\n      throw new Error('generatedTsFolder must be provided');\n    }\n\n    if (!options.srcFolder) {\n      throw new Error('srcFolder must be provided');\n    }\n    this.sourceFolderPath = options.srcFolder;\n\n    if (Path.isUnder(options.srcFolder, options.generatedTsFolder)) {\n      throw new Error('srcFolder must not be under generatedTsFolder');\n    }\n\n    if (Path.isUnder(options.generatedTsFolder, options.srcFolder)) {\n      throw new Error('generatedTsFolder must not be under srcFolder');\n    }\n\n    if (!options.fileExtensions || options.fileExtensions.length === 0) {\n      throw new Error('At least one file extension must be provided.');\n    }\n\n    this.ignoredFileGlobs = options.globsToIgnore || [];\n\n    this.terminal = options.terminal ?? new Terminal(new ConsoleTerminalProvider({ verboseEnabled: true }));\n\n    this._options.fileExtensions = this._normalizeFileExtensions(options.fileExtensions);\n\n    this._dependenciesOfFile = new Map();\n    this._consumersOfFile = new Map();\n    this._relativePaths = new Map();\n\n    this.inputFileGlob = `**/*+(${this._options.fileExtensions.join('|')})`;\n  }\n\n  /**\n   * Generate typings for the provided input files.\n   *\n   * @param relativeFilePaths - The input files to process, relative to the source folder. If not provided,\n   * all input files will be processed.\n   */\n  public async generateTypingsAsync(relativeFilePaths?: string[]): Promise<void> {\n    let checkFilePaths: boolean = true;\n    if (!relativeFilePaths?.length) {\n      checkFilePaths = false; // Don't check file paths if we generate them\n      relativeFilePaths = await glob(this.inputFileGlob, {\n        cwd: this.sourceFolderPath,\n        ignore: this.ignoredFileGlobs as string[],\n        onlyFiles: true\n      });\n    }\n\n    await this._reprocessFilesAsync(relativeFilePaths!, checkFilePaths);\n  }\n\n  public async runWatcherAsync(): Promise<void> {\n    await FileSystem.ensureFolderAsync(this._options.generatedTsFolder);\n\n    await new Promise((resolve, reject): void => {\n      const watcher: chokidar.FSWatcher = chokidar.watch(this.inputFileGlob, {\n        cwd: this.sourceFolderPath,\n        ignored: this.ignoredFileGlobs as string[] // `ignored` doesn't like the readonly array\n      });\n\n      const queue: Set<string> = new Set();\n      let timeout: NodeJS.Timeout | undefined;\n      let processing: boolean = false;\n      let flushAfterCompletion: boolean = false;\n\n      const flushInternal: () => void = () => {\n        processing = true;\n\n        const toProcess: string[] = Array.from(queue);\n        queue.clear();\n        this._reprocessFilesAsync(toProcess, false)\n          .then(() => {\n            processing = false;\n            // If the timeout was invoked again, immediately reexecute with the changed files.\n            if (flushAfterCompletion) {\n              flushAfterCompletion = false;\n              flushInternal();\n            }\n          })\n          .catch(reject);\n      };\n\n      const debouncedFlush: () => void = () => {\n        timeout = undefined;\n        if (processing) {\n          // If the callback was invoked while processing is ongoing, indicate that we should flush immediately\n          // upon completion of the current change batch.\n          flushAfterCompletion = true;\n          return;\n        }\n\n        flushInternal();\n      };\n\n      const onChange: (relativePath: string) => void = (relativePath: string) => {\n        queue.add(relativePath);\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n\n        setTimeout(debouncedFlush, 100);\n      };\n\n      watcher.on('add', onChange);\n      watcher.on('change', onChange);\n      watcher.on('unlink', async (relativePath) => {\n        await Promise.all(\n          this._getOutputFilePathsWithoutCheck(relativePath).map(async (outputFile: string) => {\n            await FileSystem.deleteFileAsync(outputFile);\n          })\n        );\n      });\n      watcher.on('error', reject);\n    });\n  }\n\n  /**\n   * Register file dependencies that may effect the typings of a consumer file.\n   * Note: This feature is only useful in watch mode.\n   * The registerDependency method must be called in the body of parseAndGenerateTypings every\n   * time because the registry for a file is cleared at the beginning of processing.\n   */\n  public registerDependency(consumer: string, rawDependency: string): void {\n    // Need to normalize slashes in the dependency path\n    const dependency: string = path.resolve(this._options.srcFolder, rawDependency);\n\n    let dependencies: Set<string> | undefined = this._dependenciesOfFile.get(consumer);\n    if (!dependencies) {\n      dependencies = new Set();\n      this._dependenciesOfFile.set(consumer, dependencies);\n    }\n    dependencies.add(dependency);\n\n    let consumers: Set<string> | undefined = this._consumersOfFile.get(dependency);\n    if (!consumers) {\n      consumers = new Set();\n      this._consumersOfFile.set(dependency, consumers);\n    }\n    consumers.add(consumer);\n  }\n\n  public getOutputFilePaths(relativePath: string): string[] {\n    if (path.isAbsolute(relativePath)) {\n      throw new Error(`\"${relativePath}\" must be relative`);\n    }\n\n    return this._getOutputFilePathsWithoutCheck(relativePath);\n  }\n\n  private _getOutputFilePathsWithoutCheck(relativePath: string): string[] {\n    const typingsFilePaths: Iterable<string> = this._getTypingsFilePaths(relativePath);\n    const additionalPaths: string[] | undefined = this._options.getAdditionalOutputFiles?.(relativePath);\n    return additionalPaths ? [...typingsFilePaths, ...additionalPaths] : Array.from(typingsFilePaths);\n  }\n\n  private async _reprocessFilesAsync(\n    relativePaths: Iterable<string>,\n    checkFilePaths: boolean\n  ): Promise<void> {\n    // Build a queue of resolved paths\n    const toProcess: Set<string> = new Set();\n    for (const rawPath of relativePaths) {\n      if (checkFilePaths && path.isAbsolute(rawPath)) {\n        throw new Error(`\"${rawPath}\" must be relative`);\n      }\n\n      const relativePath: string = Path.convertToSlashes(rawPath);\n      const resolvedPath: string = path.resolve(this._options.srcFolder, rawPath);\n      this._relativePaths.set(resolvedPath, relativePath);\n      toProcess.add(resolvedPath);\n    }\n\n    // Expand out all registered consumers, according to the current dependency graph\n    for (const file of toProcess) {\n      const consumers: Set<string> | undefined = this._consumersOfFile.get(file);\n      if (consumers) {\n        for (const consumer of consumers) {\n          toProcess.add(consumer);\n        }\n      }\n    }\n\n    // Map back to the relative paths so that the information is available\n    await Async.forEachAsync(\n      toProcess,\n      async (resolvedPath: string) => {\n        const relativePath: string | undefined = this._relativePaths.get(resolvedPath);\n        if (!relativePath) {\n          throw new Error(`Missing relative path for file ${resolvedPath}`);\n        }\n        await this._parseFileAndGenerateTypingsAsync(relativePath, resolvedPath);\n      },\n      { concurrency: 20 }\n    );\n  }\n\n  private async _parseFileAndGenerateTypingsAsync(relativePath: string, resolvedPath: string): Promise<void> {\n    // Clear registered dependencies prior to reprocessing.\n    this._clearDependencies(resolvedPath);\n\n    try {\n      const fileContents: TFileContents = await this._options.readFile(resolvedPath, relativePath);\n      const typingsData: string | undefined = await this._options.parseAndGenerateTypings(\n        fileContents,\n        resolvedPath,\n        relativePath\n      );\n\n      // Typings data will be undefined when no types should be generated for the parsed file.\n      if (typingsData === undefined) {\n        return;\n      }\n\n      const prefixedTypingsData: string = [\n        '// This file was generated by a tool. Modifying it will produce unexpected behavior',\n        '',\n        typingsData\n      ].join(EOL);\n\n      const generatedTsFilePaths: Iterable<string> = this._getTypingsFilePaths(relativePath);\n      for (const generatedTsFilePath of generatedTsFilePaths) {\n        await FileSystem.writeFileAsync(generatedTsFilePath, prefixedTypingsData, {\n          ensureFolderExists: true,\n          convertLineEndings: NewlineKind.OsDefault\n        });\n      }\n    } catch (e) {\n      this.terminal.writeError(\n        `Error occurred parsing and generating typings for file \"${resolvedPath}\": ${e}`\n      );\n    }\n  }\n\n  /**\n   * Removes the consumer from all extant dependencies\n   */\n  private _clearDependencies(consumer: string): void {\n    const dependencies: Set<string> | undefined = this._dependenciesOfFile.get(consumer);\n    if (dependencies) {\n      for (const dependency of dependencies) {\n        this._consumersOfFile.get(dependency)!.delete(consumer);\n      }\n      dependencies.clear();\n    }\n  }\n\n  private *_getTypingsFilePaths(relativePath: string): Iterable<string> {\n    const { generatedTsFolder, secondaryGeneratedTsFolders } = this._options;\n    const dtsFilename: string = `${relativePath}.d.ts`;\n    yield `${generatedTsFolder}/${dtsFilename}`;\n    if (secondaryGeneratedTsFolders) {\n      for (const secondaryGeneratedTsFolder of secondaryGeneratedTsFolders) {\n        yield `${secondaryGeneratedTsFolder}/${dtsFilename}`;\n      }\n    }\n  }\n\n  private _normalizeFileExtensions(fileExtensions: string[]): string[] {\n    const result: Set<string> = new Set();\n    for (const fileExtension of fileExtensions) {\n      if (!fileExtension.startsWith('.')) {\n        result.add(`.${fileExtension}`);\n      } else {\n        result.add(fileExtension);\n      }\n    }\n\n    return Array.from(result);\n  }\n}\n"]}