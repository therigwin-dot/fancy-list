import { type ITypingsGeneratorOptions, TypingsGenerator, type ITypingsGeneratorOptionsWithCustomReadFile } from './TypingsGenerator';
/**
 * @public
 */
export interface IStringValueTyping {
    exportName: string;
    comment?: string;
}
/**
 * @public
 */
export interface IStringValueTypings {
    typings: IStringValueTyping[];
    /**
     * Options for default exports. Note that options provided here will override
     * options provided in {@link IStringValuesTypingsGeneratorBaseOptions.exportAsDefault}.
     */
    exportAsDefault?: boolean | IExportAsDefaultOptions;
}
/**
 * @public
 */
export interface IExportAsDefaultOptions {
    /**
     * This setting overrides the the interface name for the default wrapped export.
     *
     * @defaultValue "IExport"
     */
    interfaceName?: string;
    /**
     * @deprecated - Use {@link IExportAsDefaultOptions.interfaceDocumentationComment} instead.
     */
    documentationComment?: string;
    /**
     * This value is placed in a documentation comment for the
     * exported default interface.
     */
    interfaceDocumentationComment?: string;
    /**
     * This value is placed in a documentation comment for the
     * exported const value.
     */
    valueDocumentationComment?: string;
}
/**
 * @public
 */
export interface IStringValuesTypingsGeneratorBaseOptions {
    /**
     * Setting this option wraps the typings export in a default property.
     */
    exportAsDefault?: boolean | IExportAsDefaultOptions;
    /**
     * @deprecated Use {@link IStringValuesTypingsGeneratorBaseOptions.exportAsDefault}'s
     * {@link IExportAsDefaultOptions.interfaceName} instead.
     */
    exportAsDefaultInterfaceName?: string;
}
/**
 * @public
 */
export interface IStringValuesTypingsGeneratorOptions<TFileContents extends string = string> extends ITypingsGeneratorOptions<IStringValueTypings | undefined, TFileContents>, IStringValuesTypingsGeneratorBaseOptions {
}
/**
 * @public
 */
export interface IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents = string> extends ITypingsGeneratorOptionsWithCustomReadFile<IStringValueTypings | undefined, TFileContents>, IStringValuesTypingsGeneratorBaseOptions {
}
/**
 * This is a simple tool that generates .d.ts files for non-TS files that can be represented as
 * a simple set of named string exports.
 *
 * @public
 */
export declare class StringValuesTypingsGenerator<TFileContents = string> extends TypingsGenerator<TFileContents> {
    constructor(options: TFileContents extends string ? IStringValuesTypingsGeneratorOptions<TFileContents> : never);
    constructor(options: IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents>);
}
//# sourceMappingURL=StringValuesTypingsGenerator.d.ts.map