{"version":3,"file":"StringValuesTypingsGenerator.js","sourceRoot":"","sources":["../src/StringValuesTypingsGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { EOL } from 'os';\nimport { Text } from '@rushstack/node-core-library';\n\nimport {\n  type ITypingsGeneratorOptions,\n  TypingsGenerator,\n  type ITypingsGeneratorOptionsWithCustomReadFile\n} from './TypingsGenerator';\n\n/**\n * @public\n */\nexport interface IStringValueTyping {\n  exportName: string;\n  comment?: string;\n}\n\n/**\n * @public\n */\nexport interface IStringValueTypings {\n  typings: IStringValueTyping[];\n\n  /**\n   * Options for default exports. Note that options provided here will override\n   * options provided in {@link IStringValuesTypingsGeneratorBaseOptions.exportAsDefault}.\n   */\n  exportAsDefault?: boolean | IExportAsDefaultOptions;\n}\n\n/**\n * @public\n */\nexport interface IExportAsDefaultOptions {\n  /**\n   * This setting overrides the the interface name for the default wrapped export.\n   *\n   * @defaultValue \"IExport\"\n   */\n  interfaceName?: string;\n\n  /**\n   * @deprecated - Use {@link IExportAsDefaultOptions.interfaceDocumentationComment} instead.\n   */\n  documentationComment?: string;\n\n  /**\n   * This value is placed in a documentation comment for the\n   * exported default interface.\n   */\n  interfaceDocumentationComment?: string;\n\n  /**\n   * This value is placed in a documentation comment for the\n   * exported const value.\n   */\n  valueDocumentationComment?: string;\n}\n\n/**\n * @public\n */\nexport interface IStringValuesTypingsGeneratorBaseOptions {\n  /**\n   * Setting this option wraps the typings export in a default property.\n   */\n  exportAsDefault?: boolean | IExportAsDefaultOptions;\n\n  /**\n   * @deprecated Use {@link IStringValuesTypingsGeneratorBaseOptions.exportAsDefault}'s\n   * {@link IExportAsDefaultOptions.interfaceName} instead.\n   */\n  exportAsDefaultInterfaceName?: string;\n}\n\n/**\n * @public\n */\nexport interface IStringValuesTypingsGeneratorOptions<TFileContents extends string = string>\n  extends ITypingsGeneratorOptions<IStringValueTypings | undefined, TFileContents>,\n    IStringValuesTypingsGeneratorBaseOptions {\n  // Nothing added.\n}\n\n/**\n * @public\n */\nexport interface IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents = string>\n  extends ITypingsGeneratorOptionsWithCustomReadFile<IStringValueTypings | undefined, TFileContents>,\n    IStringValuesTypingsGeneratorBaseOptions {\n  // Nothing added.\n}\n\nconst EXPORT_AS_DEFAULT_INTERFACE_NAME: string = 'IExport';\n\nfunction convertToTypingsGeneratorOptions<TFileContents>(\n  options: IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents>\n): ITypingsGeneratorOptionsWithCustomReadFile<string | undefined, TFileContents> {\n  const {\n    exportAsDefault: exportAsDefaultOptions,\n    exportAsDefaultInterfaceName: exportAsDefaultInterfaceName_deprecated,\n    parseAndGenerateTypings\n  } = options;\n  let defaultSplitExportAsDefaultInterfaceDocumentationComment: string[] | undefined;\n  let defaultSplitExportAsDefaultValueDocumentationComment: string[] | undefined;\n  let defaultExportAsDefaultInterfaceName: string | undefined;\n  if (typeof exportAsDefaultOptions === 'object') {\n    const {\n      interfaceDocumentationComment,\n      documentationComment: interfaceDocumentationComment_deprecated,\n      valueDocumentationComment,\n      interfaceName\n    } = exportAsDefaultOptions;\n    defaultSplitExportAsDefaultInterfaceDocumentationComment = Text.splitByNewLines(\n      interfaceDocumentationComment ?? interfaceDocumentationComment_deprecated\n    );\n    defaultSplitExportAsDefaultValueDocumentationComment = Text.splitByNewLines(valueDocumentationComment);\n    defaultExportAsDefaultInterfaceName =\n      interfaceName ?? exportAsDefaultInterfaceName_deprecated ?? EXPORT_AS_DEFAULT_INTERFACE_NAME;\n  } else if (exportAsDefaultOptions) {\n    defaultExportAsDefaultInterfaceName =\n      exportAsDefaultInterfaceName_deprecated ?? EXPORT_AS_DEFAULT_INTERFACE_NAME;\n  }\n\n  async function parseAndGenerateTypingsOuter(\n    fileContents: TFileContents,\n    filePath: string,\n    relativePath: string\n  ): Promise<string | undefined> {\n    const stringValueTypings: IStringValueTypings | undefined = await parseAndGenerateTypings(\n      fileContents,\n      filePath,\n      relativePath\n    );\n\n    if (stringValueTypings === undefined) {\n      return;\n    }\n\n    const { exportAsDefault: exportAsDefaultOptionsOverride, typings } = stringValueTypings;\n    let exportAsDefaultInterfaceName: string | undefined;\n    let interfaceDocumentationCommentLines: string[] | undefined;\n    let valueDocumentationCommentLines: string[] | undefined;\n    if (typeof exportAsDefaultOptionsOverride === 'boolean') {\n      if (exportAsDefaultOptionsOverride) {\n        exportAsDefaultInterfaceName =\n          defaultExportAsDefaultInterfaceName ?? EXPORT_AS_DEFAULT_INTERFACE_NAME;\n        interfaceDocumentationCommentLines = defaultSplitExportAsDefaultInterfaceDocumentationComment;\n        valueDocumentationCommentLines = defaultSplitExportAsDefaultValueDocumentationComment;\n      }\n    } else if (exportAsDefaultOptionsOverride) {\n      const {\n        interfaceName,\n        documentationComment,\n        interfaceDocumentationComment,\n        valueDocumentationComment\n      } = exportAsDefaultOptionsOverride;\n      exportAsDefaultInterfaceName =\n        interfaceName ?? defaultExportAsDefaultInterfaceName ?? EXPORT_AS_DEFAULT_INTERFACE_NAME;\n      interfaceDocumentationCommentLines =\n        Text.splitByNewLines(interfaceDocumentationComment) ??\n        Text.splitByNewLines(documentationComment) ??\n        defaultSplitExportAsDefaultInterfaceDocumentationComment;\n      valueDocumentationCommentLines =\n        Text.splitByNewLines(valueDocumentationComment) ??\n        defaultSplitExportAsDefaultValueDocumentationComment;\n    } else {\n      exportAsDefaultInterfaceName = defaultExportAsDefaultInterfaceName;\n      interfaceDocumentationCommentLines = defaultSplitExportAsDefaultInterfaceDocumentationComment;\n      valueDocumentationCommentLines = defaultSplitExportAsDefaultValueDocumentationComment;\n    }\n\n    const outputLines: string[] = [];\n    let indent: string = '';\n    if (exportAsDefaultInterfaceName) {\n      if (interfaceDocumentationCommentLines) {\n        outputLines.push(`/**`);\n        for (const line of interfaceDocumentationCommentLines) {\n          outputLines.push(` * ${line}`);\n        }\n\n        outputLines.push(` */`);\n      }\n\n      outputLines.push(`export interface ${exportAsDefaultInterfaceName} {`);\n      indent = '  ';\n    }\n\n    for (const stringValueTyping of typings) {\n      const { exportName, comment } = stringValueTyping;\n\n      if (comment && comment.trim() !== '') {\n        outputLines.push(`${indent}/**`, `${indent} * ${comment.replace(/\\*\\//g, '*\\\\/')}`, `${indent} */`);\n      }\n\n      if (exportAsDefaultInterfaceName) {\n        outputLines.push(`${indent}'${exportName}': string;`, '');\n      } else {\n        outputLines.push(`export declare const ${exportName}: string;`, '');\n      }\n    }\n\n    if (exportAsDefaultInterfaceName) {\n      outputLines.push('}', '');\n\n      if (valueDocumentationCommentLines) {\n        outputLines.push(`/**`);\n        for (const line of valueDocumentationCommentLines) {\n          outputLines.push(` * ${line}`);\n        }\n\n        outputLines.push(` */`);\n      }\n\n      outputLines.push(\n        `declare const strings: ${exportAsDefaultInterfaceName};`,\n        '',\n        'export default strings;'\n      );\n    }\n\n    return outputLines.join(EOL);\n  }\n\n  const convertedOptions: ITypingsGeneratorOptionsWithCustomReadFile<string | undefined, TFileContents> = {\n    ...options,\n    parseAndGenerateTypings: parseAndGenerateTypingsOuter\n  };\n\n  return convertedOptions;\n}\n\n/**\n * This is a simple tool that generates .d.ts files for non-TS files that can be represented as\n * a simple set of named string exports.\n *\n * @public\n */\nexport class StringValuesTypingsGenerator<TFileContents = string> extends TypingsGenerator<TFileContents> {\n  public constructor(\n    options: TFileContents extends string ? IStringValuesTypingsGeneratorOptions<TFileContents> : never\n  );\n  public constructor(options: IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents>);\n  public constructor(options: IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents>) {\n    super(convertToTypingsGeneratorOptions(options));\n  }\n}\n"]}