/**
 * An engine for generating TypeScript .d.ts files that provide type signatures
 * for non-TypeScript modules such as generated JavaScript or CSS. It can operate
 * in either a single-run mode or a watch mode.
 *
 * @packageDocumentation
 */

import { ITerminal } from '@rushstack/terminal';

/**
 * @public
 */
export declare interface IExportAsDefaultOptions {
    /**
     * This setting overrides the the interface name for the default wrapped export.
     *
     * @defaultValue "IExport"
     */
    interfaceName?: string;
    /**
     * @deprecated - Use {@link IExportAsDefaultOptions.interfaceDocumentationComment} instead.
     */
    documentationComment?: string;
    /**
     * This value is placed in a documentation comment for the
     * exported default interface.
     */
    interfaceDocumentationComment?: string;
    /**
     * This value is placed in a documentation comment for the
     * exported const value.
     */
    valueDocumentationComment?: string;
}

/**
 * @public
 */
export declare interface IStringValuesTypingsGeneratorBaseOptions {
    /**
     * Setting this option wraps the typings export in a default property.
     */
    exportAsDefault?: boolean | IExportAsDefaultOptions;
    /**
     * @deprecated Use {@link IStringValuesTypingsGeneratorBaseOptions.exportAsDefault}'s
     * {@link IExportAsDefaultOptions.interfaceName} instead.
     */
    exportAsDefaultInterfaceName?: string;
}

/**
 * @public
 */
export declare interface IStringValuesTypingsGeneratorOptions<TFileContents extends string = string> extends ITypingsGeneratorOptions<IStringValueTypings | undefined, TFileContents>, IStringValuesTypingsGeneratorBaseOptions {
}

/**
 * @public
 */
export declare interface IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents = string> extends ITypingsGeneratorOptionsWithCustomReadFile<IStringValueTypings | undefined, TFileContents>, IStringValuesTypingsGeneratorBaseOptions {
}

/**
 * @public
 */
export declare interface IStringValueTyping {
    exportName: string;
    comment?: string;
}

/**
 * @public
 */
export declare interface IStringValueTypings {
    typings: IStringValueTyping[];
    /**
     * Options for default exports. Note that options provided here will override
     * options provided in {@link IStringValuesTypingsGeneratorBaseOptions.exportAsDefault}.
     */
    exportAsDefault?: boolean | IExportAsDefaultOptions;
}

/**
 * @public
 */
export declare interface ITypingsGeneratorBaseOptions {
    srcFolder: string;
    generatedTsFolder: string;
    secondaryGeneratedTsFolders?: string[];
    globsToIgnore?: string[];
    terminal?: ITerminal;
}

/**
 * @public
 */
export declare interface ITypingsGeneratorOptions<TTypingsResult = string | undefined, TFileContents extends string = string> extends ITypingsGeneratorOptionsWithoutReadFile<TTypingsResult, TFileContents> {
    readFile?: ReadFile<TFileContents>;
}

/**
 * Options for a TypingsGenerator that needs to customize how files are read.
 *
 * @public
 */
export declare interface ITypingsGeneratorOptionsWithCustomReadFile<TTypingsResult = string | undefined, TFileContents = string> extends ITypingsGeneratorOptionsWithoutReadFile<TTypingsResult, TFileContents> {
    readFile: ReadFile<TFileContents>;
}

/**
 * @public
 */
export declare interface ITypingsGeneratorOptionsWithoutReadFile<TTypingsResult = string | undefined, TFileContents = string> extends ITypingsGeneratorBaseOptions {
    fileExtensions: string[];
    parseAndGenerateTypings: (fileContents: TFileContents, filePath: string, relativePath: string) => TTypingsResult | Promise<TTypingsResult>;
    getAdditionalOutputFiles?: (relativePath: string) => string[];
}

/**
 * @public
 */
export declare type ReadFile<TFileContents = string> = (filePath: string, relativePath: string) => Promise<TFileContents> | TFileContents;

/**
 * This is a simple tool that generates .d.ts files for non-TS files that can be represented as
 * a simple set of named string exports.
 *
 * @public
 */
export declare class StringValuesTypingsGenerator<TFileContents = string> extends TypingsGenerator<TFileContents> {
    constructor(options: TFileContents extends string ? IStringValuesTypingsGeneratorOptions<TFileContents> : never);
    constructor(options: IStringValuesTypingsGeneratorOptionsWithCustomReadFile<TFileContents>);
}

/**
 * This is a simple tool that generates .d.ts files for non-TS files.
 *
 * @public
 */
export declare class TypingsGenerator<TFileContents = string> {
    private readonly _dependenciesOfFile;
    private readonly _consumersOfFile;
    private readonly _relativePaths;
    protected readonly _options: ITypingsGeneratorOptionsWithCustomReadFile<string | undefined, TFileContents>;
    protected readonly terminal: ITerminal;
    /**
     * The folder path that contains all input source files.
     */
    readonly sourceFolderPath: string;
    /**
     * The glob pattern used to find input files to process.
     */
    readonly inputFileGlob: string;
    /**
     * The glob patterns that should be ignored when finding input files to process.
     */
    readonly ignoredFileGlobs: readonly string[];
    constructor(options: TFileContents extends string ? ITypingsGeneratorOptions<string | undefined, TFileContents> : never);
    constructor(options: ITypingsGeneratorOptionsWithCustomReadFile<string | undefined, TFileContents>);
    /**
     * Generate typings for the provided input files.
     *
     * @param relativeFilePaths - The input files to process, relative to the source folder. If not provided,
     * all input files will be processed.
     */
    generateTypingsAsync(relativeFilePaths?: string[]): Promise<void>;
    runWatcherAsync(): Promise<void>;
    /**
     * Register file dependencies that may effect the typings of a consumer file.
     * Note: This feature is only useful in watch mode.
     * The registerDependency method must be called in the body of parseAndGenerateTypings every
     * time because the registry for a file is cleared at the beginning of processing.
     */
    registerDependency(consumer: string, rawDependency: string): void;
    getOutputFilePaths(relativePath: string): string[];
    private _getOutputFilePathsWithoutCheck;
    private _reprocessFilesAsync;
    private _parseFileAndGenerateTypingsAsync;
    /**
     * Removes the consumer from all extant dependencies
     */
    private _clearDependencies;
    private _getTypingsFilePaths;
    private _normalizeFileExtensions;
}

export { }
