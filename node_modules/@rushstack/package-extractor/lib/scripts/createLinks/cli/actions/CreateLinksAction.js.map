{"version":3,"file":"CreateLinksAction.js","sourceRoot":"","sources":["../../../../../src/scripts/createLinks/cli/actions/CreateLinksAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport path from 'node:path';\nimport { Async, FileSystem, Path } from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\nimport { CommandLineAction, type CommandLineFlagParameter } from '@rushstack/ts-command-line';\nimport type { IExtractorMetadataJson, IProjectInfoJson } from '../../../../PackageExtractor';\nimport { makeBinLinksAsync } from '../../../../Utils';\nimport { getExtractorMetadataAsync } from '../../utilities/CreateLinksUtilities';\nimport {\n  TARGET_ROOT_FOLDER,\n  REALIZE_FILES_PARAMETER_NAME,\n  LINK_BINS_PARAMETER_NAME,\n  MAX_CONCURRENCY\n} from '../../utilities/constants';\nimport { removeLinksAsync } from './RemoveLinksAction';\n\nasync function createLinksAsync(\n  terminal: ITerminal,\n  targetRootFolder: string,\n  extractorMetadataObject: IExtractorMetadataJson\n): Promise<void> {\n  await Async.forEachAsync(\n    extractorMetadataObject.links,\n    async (linkInfo) => {\n      // Link to the relative path for symlinks\n      const newLinkPath: string = path.join(targetRootFolder, linkInfo.linkPath);\n      const linkTargetPath: string = path.join(targetRootFolder, linkInfo.targetPath);\n\n      // Make sure the containing folder exists\n      await FileSystem.ensureFolderAsync(path.dirname(newLinkPath));\n\n      // NOTE: This logic is based on NpmLinkManager._createSymlink()\n      if (linkInfo.kind === 'folderLink') {\n        terminal.writeVerboseLine(`Creating linked folder at path \"${newLinkPath}\"`);\n        await FileSystem.createSymbolicLinkJunctionAsync({ newLinkPath, linkTargetPath });\n      } else if (linkInfo.kind === 'fileLink') {\n        // Use hardlinks for Windows and symlinks for other platforms since creating a symbolic link\n        // requires administrator permission on Windows. This may cause unexpected behaviour for consumers\n        // of the hardlinked files. If this becomes an issue, we may need to revisit this.\n        terminal.writeVerboseLine(`Creating linked file at path \"${newLinkPath}\"`);\n        if (process.platform === 'win32') {\n          await FileSystem.createHardLinkAsync({ newLinkPath, linkTargetPath });\n        } else {\n          await FileSystem.createSymbolicLinkFileAsync({ newLinkPath, linkTargetPath });\n        }\n      }\n    },\n    { concurrency: MAX_CONCURRENCY }\n  );\n}\n\nasync function realizeFilesAsync(\n  terminal: ITerminal,\n  targetRootFolder: string,\n  extractorMetadataObject: IExtractorMetadataJson\n): Promise<void> {\n  await Async.forEachAsync(\n    extractorMetadataObject.files,\n    async (relativeFilePath) => {\n      const filePath: string = `${targetRootFolder}/${relativeFilePath}`;\n      const realFilePath: string = await FileSystem.getRealPathAsync(filePath);\n      if (!Path.isEqual(realFilePath, filePath)) {\n        // Delete the existing symlink and create a hardlink to the real file, since creating hardlinks\n        // is less overhead than copying the file.\n        terminal.writeVerboseLine(`Realizing file at path \"${filePath}\"`);\n        await FileSystem.deleteFileAsync(filePath);\n        await FileSystem.createHardLinkAsync({ newLinkPath: filePath, linkTargetPath: realFilePath });\n      }\n    },\n    { concurrency: MAX_CONCURRENCY }\n  );\n}\n\nexport class CreateLinksAction extends CommandLineAction {\n  private _terminal: ITerminal;\n  private _realizeFilesParameter: CommandLineFlagParameter;\n  private _linkBinsParameter: CommandLineFlagParameter;\n\n  public constructor(terminal: ITerminal) {\n    super({\n      actionName: 'create',\n      summary: 'Create symlinks for extraction',\n      documentation: 'This action creates symlinks for the extraction process.'\n    });\n\n    this._terminal = terminal;\n\n    this._realizeFilesParameter = this.defineFlagParameter({\n      parameterLongName: REALIZE_FILES_PARAMETER_NAME,\n      description: 'Realize files instead of creating symlinks'\n    });\n\n    this._linkBinsParameter = this.defineFlagParameter({\n      parameterLongName: LINK_BINS_PARAMETER_NAME,\n      description: 'Create the .bin files for extracted packages'\n    });\n  }\n\n  protected async onExecute(): Promise<void> {\n    const extractorMetadataObject: IExtractorMetadataJson = await getExtractorMetadataAsync();\n    const realizeFiles: boolean = this._realizeFilesParameter.value;\n    const linkBins: boolean = this._linkBinsParameter.value;\n\n    this._terminal.writeLine(`Creating links for extraction at path \"${TARGET_ROOT_FOLDER}\"`);\n    await removeLinksAsync(this._terminal, TARGET_ROOT_FOLDER, extractorMetadataObject);\n    await createLinksAsync(this._terminal, TARGET_ROOT_FOLDER, extractorMetadataObject);\n\n    if (realizeFiles) {\n      this._terminal.writeLine(`Realizing files for extraction at path \"${TARGET_ROOT_FOLDER}\"`);\n      await realizeFilesAsync(this._terminal, TARGET_ROOT_FOLDER, extractorMetadataObject);\n    }\n\n    if (linkBins) {\n      this._terminal.writeLine(`Linking bins for extraction at path \"${TARGET_ROOT_FOLDER}\"`);\n      const extractedProjectFolderPaths: string[] = extractorMetadataObject.projects.map(\n        (project: IProjectInfoJson) => path.join(TARGET_ROOT_FOLDER, project.path)\n      );\n      await makeBinLinksAsync(this._terminal, extractedProjectFolderPaths);\n    }\n  }\n}\n"]}