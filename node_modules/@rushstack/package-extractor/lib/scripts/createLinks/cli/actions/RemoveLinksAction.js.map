{"version":3,"file":"RemoveLinksAction.js","sourceRoot":"","sources":["../../../../../src/scripts/createLinks/cli/actions/RemoveLinksAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,0DAA6B;AAC7B,oEAAiE;AAEjE,gEAA+D;AAE/D,+EAAiF;AACjF,yDAAgF;AAEzE,KAAK,UAAU,gBAAgB,CACpC,QAAmB,EACnB,gBAAwB,EACxB,uBAA+C;IAE/C,MAAM,yBAAK,CAAC,YAAY,CACtB,uBAAuB,CAAC,KAAK,EAC7B,KAAK,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;QACrB,MAAM,WAAW,GAAW,mBAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAClE,QAAQ,CAAC,gBAAgB,CAAC,0BAA0B,WAAW,GAAG,CAAC,CAAC;QACpE,MAAM,8BAAU,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC,CAAC;IAC7E,CAAC,EACD,EAAE,WAAW,EAAE,2BAAe,EAAE,CACjC,CAAC;AACJ,CAAC;AAdD,4CAcC;AAED,MAAa,iBAAkB,SAAQ,mCAAiB;IAGtD,YAAmB,QAAmB;QACpC,KAAK,CAAC;YACJ,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,gDAAgD;YACzD,aAAa,EAAE,kEAAkE;SAClF,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAES,KAAK,CAAC,SAAS;QACvB,MAAM,uBAAuB,GAA2B,MAAM,IAAA,gDAAyB,GAAE,CAAC;QAE1F,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,0CAA0C,8BAAkB,GAAG,CAAC,CAAC;QAC1F,MAAM,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,8BAAkB,EAAE,uBAAuB,CAAC,CAAC;IACtF,CAAC;CACF;AAnBD,8CAmBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport path from 'node:path';\nimport { Async, FileSystem } from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\nimport { CommandLineAction } from '@rushstack/ts-command-line';\nimport type { IExtractorMetadataJson } from '../../../../PackageExtractor';\nimport { getExtractorMetadataAsync } from '../../utilities/CreateLinksUtilities';\nimport { TARGET_ROOT_FOLDER, MAX_CONCURRENCY } from '../../utilities/constants';\n\nexport async function removeLinksAsync(\n  terminal: ITerminal,\n  targetRootFolder: string,\n  extractorMetadataObject: IExtractorMetadataJson\n): Promise<void> {\n  await Async.forEachAsync(\n    extractorMetadataObject.links,\n    async ({ linkPath }) => {\n      const newLinkPath: string = path.join(targetRootFolder, linkPath);\n      terminal.writeVerboseLine(`Removing link at path \"${newLinkPath}\"`);\n      await FileSystem.deleteFileAsync(newLinkPath, { throwIfNotExists: false });\n    },\n    { concurrency: MAX_CONCURRENCY }\n  );\n}\n\nexport class RemoveLinksAction extends CommandLineAction {\n  private _terminal: ITerminal;\n\n  public constructor(terminal: ITerminal) {\n    super({\n      actionName: 'remove',\n      summary: 'Remove symlinks created by the \"create\" action',\n      documentation: 'This action removes the symlinks created by the \"create\" action.'\n    });\n\n    this._terminal = terminal;\n  }\n\n  protected async onExecute(): Promise<void> {\n    const extractorMetadataObject: IExtractorMetadataJson = await getExtractorMetadataAsync();\n\n    this._terminal.writeLine(`Removing links for extraction at path \"${TARGET_ROOT_FOLDER}\"`);\n    await removeLinksAsync(this._terminal, TARGET_ROOT_FOLDER, extractorMetadataObject);\n  }\n}\n"]}