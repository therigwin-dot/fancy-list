{"version":3,"file":"CreateLinksCommandLineParser.js","sourceRoot":"","sources":["../../../../src/scripts/createLinks/cli/CreateLinksCommandLineParser.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,gEAA+D;AAC/D,oEAAoE;AAGpE,mEAAgE;AAChE,mEAAgE;AAEhE,MAAa,4BAA6B,SAAQ,mCAAiB;IAGjE,YAAmB,QAAmB;QACpC,KAAK,CAAC;YACJ,YAAY,EAAE,cAAc;YAC5B,eAAe,EAAE,sDAAsD;SACxE,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,SAAS,CAAC,IAAI,qCAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QACtD,IAAI,CAAC,SAAS,CAAC,IAAI,qCAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACxD,CAAC;IAES,KAAK,CAAC,SAAS;QACvB,WAAW;QACX,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;QAErB,IAAI,CAAC;YACH,MAAM,KAAK,CAAC,SAAS,EAAE,CAAC;YACxB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;QACvB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,CAAC,KAAK,YAAY,wCAAoB,CAAC,EAAE,CAAC;gBAC7C,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;gBAChC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;YAClE,CAAC;QACH,CAAC;IACH,CAAC;CACF;AA7BD,oEA6BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { CommandLineParser } from '@rushstack/ts-command-line';\nimport { AlreadyReportedError } from '@rushstack/node-core-library';\nimport type { ITerminal } from '@rushstack/terminal';\n\nimport { CreateLinksAction } from './actions/CreateLinksAction';\nimport { RemoveLinksAction } from './actions/RemoveLinksAction';\n\nexport class CreateLinksCommandLineParser extends CommandLineParser {\n  private readonly _terminal: ITerminal;\n\n  public constructor(terminal: ITerminal) {\n    super({\n      toolFilename: 'create-links',\n      toolDescription: 'Create or remove symlinks for the extracted packages'\n    });\n\n    this._terminal = terminal;\n\n    this.addAction(new CreateLinksAction(this._terminal));\n    this.addAction(new RemoveLinksAction(this._terminal));\n  }\n\n  protected async onExecute(): Promise<void> {\n    // override\n    process.exitCode = 1;\n\n    try {\n      await super.onExecute();\n      process.exitCode = 0;\n    } catch (error) {\n      if (!(error instanceof AlreadyReportedError)) {\n        this._terminal.writeErrorLine();\n        this._terminal.writeErrorLine('ERROR: ' + error.message.trim());\n      }\n    }\n  }\n}\n"]}