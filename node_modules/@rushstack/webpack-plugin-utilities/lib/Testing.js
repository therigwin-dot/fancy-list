"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTestingWebpackCompilerAsync = getTestingWebpackCompilerAsync;
const memfs_1 = require("memfs");
const path_1 = __importDefault(require("path"));
const webpack_merge_1 = __importDefault(require("webpack-merge"));
/**
 * @public
 * This function generates a webpack compiler with default configuration and the output filesystem mapped to
 * a memory filesystem. This is useful for testing webpack plugins/loaders where we do not need to write to disk (which can be costly).
 * @param entry - The entry point for the webpack compiler
 * @param additionalConfig - Any additional configuration that should be merged with the default configuration
 * @param memFs - The memory filesystem to use for the output filesystem. Use this option if you want to _inspect_, analyze, or read the output
 * files generated by the webpack compiler. If you do not need to do this, you can omit this parameter and the output files.
 *
 * @returns - A webpack compiler with the output filesystem mapped to a memory filesystem
 *
 * @example
 * ```typescript
 * import Testing from '@rushstack/webpack-plugin-utilities';
 *
 * describe('MyPlugin', () => {
 *   it('should run', async () => {
 *     const stats = await Testing.getTestingWebpackCompiler(
 *       `./src/index.ts`,
 *     );
 *
 *     expect(stats).toBeDefined();
 *  });
 * });
 * ```
 *
 * @remarks
 * If you want to be able to read, analyze, access the files written to the memory filesystem,
 * you can pass in a memory filesystem instance to the `memFs` parameter.
 *
 * @example
 * ```typescript
 * import Testing from '@rushstack/webpack-plugin-utilities';
 * import { createFsFromVolume, Volume, IFs } from 'memfs';
 * import path from 'path';
 *
 * describe('MyPlugin', () => {
 *  it('should run', async () => {
 *    const virtualFileSystem: IFs = createFsFromVolume(new Volume());
 *    const stats = await Testing.getTestingWebpackCompiler(
 *      `./src/index.ts`,
 *      {},
 *      virtualFileSystem
 *    );
 *
 *    expect(stats).toBeDefined();
 *    expect(virtualFileSystem.existsSync(path.join(__dirname, 'dist', 'index.js'))).toBe(true);
 *  });
 * });
 * ```
 */
async function getTestingWebpackCompilerAsync(entry, additionalConfig = {}, memFs = (0, memfs_1.createFsFromVolume)(new memfs_1.Volume())) {
    let webpackModule;
    try {
        webpackModule = (await Promise.resolve().then(() => __importStar(require('webpack')))).default;
    }
    catch (e) {
        throw new Error('Unable to load module "webpack". The @rushstack/webpack-plugin-utilities package declares "webpack" as ' +
            'an optional peer dependency, but a function was invoked on it that requires webpack. Make sure ' +
            `the peer dependency on "webpack" is fulfilled. Inner error: ${e}`);
    }
    const compilerOptions = (0, webpack_merge_1.default)(_defaultWebpackConfig(entry), additionalConfig);
    const compiler = webpackModule(compilerOptions);
    // The memFs Volume satisfies the interface contract, but the types aren't happy due to strict null checks
    const outputFileSystem = memFs;
    outputFileSystem.join = path_1.default.join.bind(path_1.default);
    compiler.outputFileSystem = outputFileSystem;
    return new Promise((resolve, reject) => {
        compiler.run((err, stats) => {
            compiler.close(() => {
                if (err) {
                    return reject(err);
                }
                _processAndHandleStatsErrorsAndWarnings(stats, reject);
                resolve(stats);
            });
        });
    });
}
function _processAndHandleStatsErrorsAndWarnings(stats, reject) {
    if ((stats === null || stats === void 0 ? void 0 : stats.hasErrors()) || (stats === null || stats === void 0 ? void 0 : stats.hasWarnings())) {
        const serializedStats = [stats === null || stats === void 0 ? void 0 : stats.toJson('errors-warnings')];
        const errors = [];
        const warnings = [];
        for (const compilationStats of serializedStats) {
            if (compilationStats.warnings) {
                for (const warning of compilationStats.warnings) {
                    warnings.push(warning);
                }
            }
            if (compilationStats.errors) {
                for (const error of compilationStats.errors) {
                    errors.push(error);
                }
            }
            if (compilationStats.children) {
                for (const child of compilationStats.children) {
                    serializedStats.push(child);
                }
            }
        }
        reject([...errors, ...warnings]);
    }
}
function _defaultWebpackConfig(entry = './src') {
    return {
        // We don't want to have eval source maps, nor minification
        // so we set mode to 'none' to disable both. Default is 'production'
        mode: 'none',
        context: __dirname,
        entry,
        output: {
            filename: 'test-bundle.js'
        }
    };
}
//# sourceMappingURL=Testing.js.map